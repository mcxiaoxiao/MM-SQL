import openai
import requests

# Set your OpenAI API key
openai.api_key = 'sk-proj-1JRQ9SkU0gSRKsBoCyD1T3BlbkFJSQ44FoEjAHN05t7FrryD'

# Assume Gemini API's URL and API key
GEMINI_API_URL = 'https://api.gemini.com/v1/endpoint'
GEMINI_API_KEY = 'your-gemini-api-key'

def request_gpt(prompt, model="gpt-4", max_tokens=200, temperature=0):
    """
    A wrapper function to request a response from the GPT model

    Parameters:
    prompt (str): The input prompt text
    model (str): The GPT model to use, default is 'gpt-4'
    max_tokens (int): The maximum number of tokens to generate, default is 200
    temperature (float): The randomness of the generated text, default is 0

    Returns:
    str: The response text generated by the GPT model
    """
    try:
        # Call the OpenAI Completion.create method to generate a response
        response = openai.Completion.create(
            engine=model,
            prompt=prompt,
            max_tokens=max_tokens,
            temperature=temperature
        )
        # Return the generated text
        return response.choices[0].text.strip()
    except Exception as e:
        # Catch and return any exceptions
        return f"An error occurred with GPT request: {e}"

def request_gemini(prompt, additional_params=None):
    """
    A wrapper function to request a response from the Gemini API

    Parameters:
    prompt (str): The input prompt text
    additional_params (dict): Additional parameters, default is None

    Returns:
    str: The response text generated by the Gemini API
    """
    # Set the request headers, including authorization and content type
    headers = {
        'Authorization': f'Bearer {GEMINI_API_KEY}',
        'Content-Type': 'application/json'
    }
    # Set the request data, including the prompt text
    data = {
        'prompt': prompt
    }
    # If there are additional parameters, merge them into the request data
    if additional_params:
        data.update(additional_params)
    
    try:
        # Send a POST request to the Gemini API
        response = requests.post(GEMINI_API_URL, headers=headers, json=data)
        # Check the response status code; if it's not 200, raise an exception
        response.raise_for_status()
        # Return the text content from the response
        return response.json().get('response', 'No response found')
    except Exception as e:
        # Catch and return any exceptions
        return f"An error occurred with Gemini request: {e}"

# Example usage
if __name__ == "__main__":
    prompt = "Explain the theory of relativity."
    
    # Request GPT response
    gpt_response = request_gpt(prompt)
    print("GPT Response:")
    print(gpt_response)
    
    # Request Gemini response
    gemini_response = request_gemini(prompt)
    print("Gemini Response:")
    print(gemini_response)
