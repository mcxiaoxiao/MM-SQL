[
    {
        "db_name": "college_2",
        "turns": [
            {
                "isuser": true,
                "text": "Find out the average salary of professors?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average salary of all the instructors is 77600.18819999999.",
                "query": "SELECT avg(salary) FROM instructor",
                "result": [
                    [
                        [
                            "avg(salary)"
                        ],
                        [
                            77600.18819999999
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(salary) FROM instructor WHERE dept_name = 'Physics'"
            },
            {
                "isuser": true,
                "text": "Find the average salary of the professors of each department?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The result table shows the average salary of all the instructors in each department",
                "query": "SELECT avg(salary), dept_name FROM instructor GROUP BY dept_name",
                "result": [
                    [
                        [
                            "avg(salary)",
                            "dept_name"
                        ],
                        [
                            48716.5925,
                            "Accounting"
                        ],
                        [
                            79070.08,
                            "Astronomy"
                        ],
                        [
                            77098.198,
                            "Athletics"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT dept_name ,  AVG(salary) FROM instructor GROUP BY dept_name"
            },
            {
                "isuser": true,
                "text": "Which department has the highest average salary of professors?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Physics is the name of the department that has the highest average salary of instructors.",
                "query": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "dept_name"
                        ],
                        [
                            "Physics"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT dept_name ,  AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Which department has the lowest average salary of professors?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Accounting is the name of the department that has the lowest average salary of instructors.",
                "query": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary)  LIMIT 1",
                "result": [
                    [
                        [
                            "dept_name"
                        ],
                        [
                            "Accounting"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT dept_name ,  AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "In which department Mr. Mird work for?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the department where the instructor with the name 'Mird' works for is Marketing.",
                "query": "SELECT dept_name FROM instructor where name = 'Mird'",
                "result": [
                    [
                        [
                            "dept_name"
                        ],
                        [
                            "Marketing"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT dept_name FROM instructor WHERE name = \"Mr. Mird\""
            },
            {
                "isuser": true,
                "text": "How much is the salary Mr. Mird earns currently?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The salary of the instructor with the name 'Mird' is 119921.41.",
                "query": "SELECT \tsalary FROM instructor where name = 'Mird'",
                "result": [
                    [
                        [
                            "salary"
                        ],
                        [
                            119921.41
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT salary FROM instructor WHERE name = \"Mr. Mird\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome! goodbye.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "train_station",
        "turns": [
            {
                "isuser": true,
                "text": "What is the station ID for London Waterloo",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The station id for London Waterloo is 1. ",
                "query": "SELECT station_id from station where name = \"London Waterloo\" ",
                "result": [
                    [
                        [
                            "Station_ID"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT station_id FROM station WHERE name = \"London Waterloo\""
            },
            {
                "isuser": true,
                "text": "What trains go to station ID 1? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The trains that go to station id 1 are shown in the result table. ",
                "query": "SELECT T3.* FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id where T1.station_id = 1",
                "result": [
                    [
                        [
                            "Train_ID",
                            "Name",
                            "Time",
                            "Service"
                        ],
                        [
                            1,
                            "Ananthapuri Express",
                            "17:15",
                            "Daily"
                        ],
                        [
                            2,
                            "Guruvayur Express",
                            "22:10",
                            "Daily"
                        ],
                        [
                            3,
                            "Guruvayur Express",
                            "4:49",
                            "Daily"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM train WHERE train_id IN (SELECT train_id FROM train_station WHERE station_id = 1)"
            },
            {
                "isuser": true,
                "text": "Can you give me the names of those trains and tell me when they have service",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names and the times of the trains that go to station id 1 are shown in the result table. ",
                "query": "SELECT T3.name, T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id where T1.station_id = 1",
                "result": [
                    [
                        [
                            "Name",
                            "Time"
                        ],
                        [
                            "Ananthapuri Express",
                            "17:15"
                        ],
                        [
                            "Guruvayur Express",
                            "22:10"
                        ],
                        [
                            "Guruvayur Express",
                            "4:49"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name, time FROM train WHERE train_id IN (SELECT train_id FROM train_station WHERE station_id = 1)"
            },
            {
                "isuser": true,
                "text": "Do those trains go to London Bridge? ",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "No, none of these trains go to London Bridge. ",
                "query": "SELECT T3.name, T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id where T1.station_id = 1 intersect SELECT T3.name, T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id where T1.station_id = 3",
                "result": [
                    [
                        [
                            "Name",
                            "Time"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM train WHERE train_id IN (SELECT train_id FROM train_station WHERE station_id = 2)"
            },
            {
                "isuser": true,
                "text": "How many platforms does London Waterloo station have ? ",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "The number of platforms that the station with name London Waterloo station has is 19. ",
                "query": "SELECT number_of_platforms from station where name = \"London Waterloo\"",
                "result": [
                    [
                        [
                            "Number_of_Platforms"
                        ],
                        [
                            19
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Number_of_Platforms FROM station WHERE name = \"London Waterloo\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, good bye. ",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "performance_attendance",
        "turns": [
            {
                "isuser": true,
                "text": "When did the violin players perform?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The following table shows the dates on which violin players perform",
                "query": "SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID WHERE T2.Role  =  \"Violin\"",
                "result": [
                    [
                        [
                            "Date"
                        ],
                        [
                            "February 2"
                        ],
                        [
                            "February 2"
                        ],
                        [
                            "February 5"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Date FROM member_attendance AS T1 JOIN performance AS T2 ON T1.Performance_ID  =  T2.Performance_ID WHERE T1.Member_ID  =  1 AND T2.Role  =  \"Violin\""
            },
            {
                "isuser": true,
                "text": "How many violin players were at those performances on average?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the attendance of those performances?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT AVG(T1.Num_of_Pieces) FROM member_attendance AS T1 JOIN performance AS T2 ON T1.Performance_ID  =  T2.Performance_ID WHERE T1.Member_ID  =  1 AND T2.Role  =  \"Violin\""
            },
            {
                "isuser": true,
                "text": "No, how many violin players were present during the performances?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Each performance is only associated with one violin player from the table.",
                "query": "",
                "result": [],
                "predict_type": "SORRY",
                "predict": "SELECT COUNT(*) FROM member_attendance AS T1 JOIN performance AS T2 ON T1.Performance_ID  =  T2.Performance_ID WHERE T1.Member_ID  =  1 AND T2.Role  =  \"Violin\""
            },
            {
                "isuser": true,
                "text": "Which violin player attended the most?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the name of the violin player that attended the most number of performances?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T1.Name, COUNT(*) AS num_of_performances FROM member AS T1 JOIN member_attendance AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T2.Performance_ID  =  T3.Performance_ID WHERE T3.Role  =  \"Violin\" GROUP BY T1.Name ORDER BY num_of_performances DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Yes, what is the name of the violin player who attended the most number of performances?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the violin player who attended the most number of performances is Héctor Campana.",
                "query": "select T1.name from member as T1 join member_attendance as T2 on T1.Member_id = T2.Member_id group by T2.Member_id order by count(*) desc limit 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Héctor Campana"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Name FROM member AS T1 JOIN member_attendance AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T2.Performance_ID  =  T3.Performance_ID WHERE T3.Role  =  \"Violin\" GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What about the violin player who attended the least performances?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the violin player who attended the least number of performances is Wilfredo Ruiz.",
                "query": "select T1.name from member as T1 join member_attendance as T2 on T1.Member_id = T2.Member_id group by T2.Member_id order by count(*) asc limit 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Wilfredo Ruiz"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Name FROM member AS T1 JOIN member_attendance AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T2.Performance_ID  =  T3.Performance_ID WHERE T3.Role  =  \"Violin\" GROUP BY T1.Name ORDER BY COUNT(*) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "cinema",
        "turns": [
            {
                "isuser": true,
                "text": "what is the films title that direct by Bill Schreiner?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the titles of the films that were directed by Bill Schreiner",
                "query": "select title from film where directed_by = \"Bill Schreiner\" ",
                "result": [
                    [
                        [
                            "Title"
                        ],
                        [
                            "The Case of the Mystery Weekend"
                        ],
                        [
                            "The Case of the Smart Dummy"
                        ],
                        [
                            "The Case: Off the Record"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Title FROM film WHERE Directed_by = 'Bill Schreiner'"
            },
            {
                "isuser": true,
                "text": "show director with the largest number of show times in total",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Bill Schreiner is the director with the largest number of show times in total",
                "query": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Directed_by"
                        ],
                        [
                            "Bill Schreiner"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Directed_by, SUM(Show_times_per_day) AS Total_show_times FROM schedule GROUP BY Directed_by ORDER BY Total_show_times DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "show me a list of original air date?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the original air dates of all films",
                "query": "select original_air_date from film",
                "result": [
                    [
                        [
                            "Original_air_date"
                        ],
                        [
                            "September 21–25, 1992"
                        ],
                        [
                            "September 28–October 2, 1992"
                        ],
                        [
                            "October 5–9, 1992"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Original_air_date FROM film"
            },
            {
                "isuser": true,
                "text": "thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "car_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many car models are produced by each maker? List the count and the maker full name.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the total number of car models produced and maker full name for each car model",
                "query": "SELECT Count(*) ,  T2.FullName  FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
                "result": [
                    [
                        [
                            "Count(*)",
                            "FullName"
                        ],
                        [
                            1,
                            "American Motor Company"
                        ],
                        [
                            2,
                            "Volkswagen"
                        ],
                        [
                            1,
                            "BMW"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.FullName ,  COUNT(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.FullName"
            },
            {
                "isuser": true,
                "text": "Which models are the most popular?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the model which is the most popular is pontiac",
                "query": "SELECT T1.model FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id order by count(*) desc limit 1;",
                "result": [
                    [
                        [
                            "Model"
                        ],
                        [
                            "pontiac"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id GROUP BY T1.Model ORDER BY COUNT(*) DESC LIMIT 3"
            },
            {
                "isuser": true,
                "text": "Which the least popular?\n",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "here are the models which are the least popular.",
                "query": "SELECT T1.model FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id order by count(*);",
                "result": [
                    [
                        [
                            "Model"
                        ],
                        [
                            "amc"
                        ],
                        [
                            "bmw"
                        ],
                        [
                            "citroen"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id GROUP BY T1.Model ORDER BY COUNT(*) ASC LIMIT 3"
            },
            {
                "isuser": true,
                "text": "Which companies have three or more models?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the name of companies which  have three or more models",
                "query": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id having count(*) >=3;",
                "result": [
                    [
                        [
                            "Count(*)",
                            "FullName",
                            "Id"
                        ],
                        [
                            5,
                            "General Motors",
                            4
                        ],
                        [
                            3,
                            "Ford Motor Company",
                            5
                        ],
                        [
                            4,
                            "Chrysler",
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.FullName ,  COUNT(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.FullName HAVING COUNT(*)  >=  3"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "ship_1",
        "turns": [
            {
                "isuser": true,
                "text": "Show me the captain ranks",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the table of the captain ranks. For example, it is  Midshipman",
                "query": "SELECT rank FROM captain ",
                "result": [
                    [
                        [
                            "Rank"
                        ],
                        [
                            "Midshipman"
                        ],
                        [
                            "Midshipman"
                        ],
                        [
                            "Midshipman"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT rank FROM captain"
            },
            {
                "isuser": true,
                "text": "Show me Third-rate ship of the line class",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Here is the information of the captain with a class third rate ship of the line. For example, Captain Sir Henry Langford with Captain id 1 has ship with id 1. His age is  40.  The class is third-rate ship of the line and the rank is Midshipman.",
                "query": "SELECT * FROM captain where class = \"Third-rate ship of the line\"",
                "result": [
                    [
                        [
                            "Captain_ID",
                            "Name",
                            "Ship_ID",
                            "age",
                            "Class",
                            "Rank"
                        ],
                        [
                            1,
                            "Captain Sir Henry Langford",
                            1,
                            "40",
                            "Third-rate ship of the line",
                            "Midshipman"
                        ],
                        [
                            2,
                            "Captain Beves Conway",
                            2,
                            "54",
                            "Third-rate ship of the line",
                            "Midshipman"
                        ],
                        [
                            6,
                            "Captain Gilbert Pears",
                            2,
                            "60",
                            "Third-rate ship of the line",
                            "Lieutenant"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM ship WHERE class = \"Third-rate ship of the line\""
            },
            {
                "isuser": true,
                "text": "Show me the captain rank that has no captain in these class",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Sorry I don't understand",
                "query": "",
                "result": [],
                "predict_type": "SORRY",
                "predict": "SELECT rank FROM captain WHERE ship_id NOT IN (SELECT ship_id FROM ship WHERE class = \"Third-rate ship of the line\")"
            },
            {
                "isuser": true,
                "text": "Show me the captain rank that has no captain in Third-rate ship of the line class",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the table of the captain rank tha has no captain in Third-rate ship of the line class. For example, they are Midshipman",
                "query": "SELECT Rank FROM captain where class != \"Third-rate ship of the line\"",
                "result": [
                    [
                        [
                            "Rank"
                        ],
                        [
                            "Midshipman"
                        ],
                        [
                            "Midshipman"
                        ],
                        [
                            "Lieutenant"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT rank FROM captain WHERE ship_id NOT IN (SELECT ship_id FROM ship WHERE class = \"Third-rate ship of the line\")"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "machine_repair",
        "turns": [
            {
                "isuser": true,
                "text": "Who are the technicians from team \"CLE\" and \"CWS\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table that shows the names of the technicians from the teams \"CLE\" and \"CWS\".",
                "query": "select Name from technician where \tTeam='CLE' or team='CWS'",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Tony Sewell"
                        ],
                        [
                            "Mark Sewell"
                        ],
                        [
                            "Lou Boudreau"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM technician WHERE team  =  \"CLE\" OR team  =  \"CWS\""
            },
            {
                "isuser": true,
                "text": "Please show me the starting years for them",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table that shows the starting years for the technicians from the teams \"CLE\" and \"CWS\".",
                "query": "select Starting_Year from technician where \tTeam='CLE' or team='CWS'",
                "result": [
                    [
                        [
                            "Starting_Year"
                        ],
                        [
                            2005.0
                        ],
                        [
                            2009.0
                        ],
                        [
                            2016.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT starting_year FROM technician WHERE team  =  \"CLE\" OR team  =  \"CWS\""
            },
            {
                "isuser": true,
                "text": "What years are shared?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The starting year shared by the technicians from the teams \"CLE\" and \"CWS\" is the year 2005.",
                "query": "SELECT Starting_Year FROM technician WHERE Team = \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team = \"CWS\"",
                "result": [
                    [
                        [
                            "Starting_Year"
                        ],
                        [
                            2005.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT starting_year FROM technician WHERE team  =  \"CLE\" OR team  =  \"CWS\" GROUP BY starting_year HAVING count(*)  >  1"
            },
            {
                "isuser": true,
                "text": "Can you also give me the minimum and maximum starting years?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The minimum starting year is 2002, and the maximum starting year is 2016.",
                "query": "select max(Starting_Year),min(Starting_Year) from technician",
                "result": [
                    [
                        [
                            "max(Starting_Year)",
                            "min(Starting_Year)"
                        ],
                        [
                            2016.0,
                            2002.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT min(starting_year) ,  max(starting_year) FROM technician WHERE team  =  \"CLE\" OR team  =  \"CWS\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "student_1",
        "turns": [
            {
                "isuser": true,
                "text": "Can you list the class room associated with the name Loria Ondersma in the teachers table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "classroom 108 is associated with the name Loria Ondersma",
                "query": "SELECT classroom from teachers where lastname = \"ONDERSMA\"",
                "result": [
                    [
                        [
                            "Classroom"
                        ],
                        [
                            108
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT classroom FROM teachers WHERE firstname = \"Loria\" AND lastname = \"Ondersma\""
            },
            {
                "isuser": true,
                "text": "Can you show me all first and last names from the list table that have a classroom id of 108?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The following table shows all first and last names from the list table that have a classroom id of 108",
                "query": "SELECT firstname, lastname from teachers where classroom = 108",
                "result": [
                    [
                        [
                            "FirstName",
                            "LastName"
                        ],
                        [
                            " LORIA",
                            "ONDERSMA"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT firstname, lastname FROM list WHERE classroom = 108"
            },
            {
                "isuser": true,
                "text": "Can you tell me how many unique names are currently in the table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 12 unique names in the table.",
                "query": "SELECT count(distinct firstname) from teachers ",
                "result": [
                    [
                        [
                            "count(distinct firstname)"
                        ],
                        [
                            12
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(DISTINCT firstname) FROM list"
            },
            {
                "isuser": true,
                "text": "How many unique names in the list table have a classroom id of 108?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "1 unique name in the list table has a classroom id of 108",
                "query": "SELECT count(distinct firstname) from teachers where classroom = 108",
                "result": [
                    [
                        [
                            "count(distinct firstname)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(DISTINCT firstname) FROM list WHERE classroom = 108"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "chinook_1",
        "turns": [
            {
                "isuser": true,
                "text": "What are the duration's of the longest and shortest track in milliseconds.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the durations of the longest and shortest tracks in milliseconds. ",
                "query": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK",
                "result": [
                    [
                        [
                            "max(Milliseconds)",
                            "min(Milliseconds)"
                        ],
                        [
                            5286953,
                            1071
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK"
            },
            {
                "isuser": true,
                "text": "What is the name of the longest track?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Occupation / Precipice is the name of the longest track.",
                "query": "SELECT name FROM TRACK where Milliseconds = (select max(Milliseconds) from track)",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Occupation / Precipice"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM TRACK WHERE Milliseconds = (SELECT max(Milliseconds) FROM TRACK)"
            },
            {
                "isuser": true,
                "text": "Who was the longest track written by?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The longest track was written by the composer NULL.",
                "query": "SELECT composer FROM TRACK where Milliseconds = (select max(Milliseconds) from track)",
                "result": [
                    [
                        [
                            "Composer"
                        ],
                        [
                            null
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Composer FROM TRACK WHERE Milliseconds = (SELECT max(Milliseconds) FROM TRACK)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks. bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "concert_singer",
        "turns": [
            {
                "isuser": true,
                "text": "please list the singers\n",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "did you mean list their names?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT name FROM singer"
            },
            {
                "isuser": true,
                "text": "yes\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are the names of all singers.",
                "query": "SELECT name FROM singer",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Joe Sharp"
                        ],
                        [
                            "Timbaland"
                        ],
                        [
                            "Justin Brown"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM singer"
            },
            {
                "isuser": true,
                "text": "can you also  give number of concerts for each singer\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The table shows singer names and number of concerts for each singer.",
                "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
                "result": [
                    [
                        [
                            "Name",
                            "count(*)"
                        ],
                        [
                            "Timbaland",
                            2
                        ],
                        [
                            "Justin Brown",
                            3
                        ],
                        [
                            "Rose White",
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name ,  count(*) FROM singer_in_concert GROUP BY singer_id"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "music_1",
        "turns": [
            {
                "isuser": true,
                "text": "Provide all the details of the song Tumi robe nirobe?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the information about the song with a name \"Tumi robe nirobe\"",
                "query": "select * from song where song_name = \"Tumi robe nirobe\"",
                "result": [
                    [
                        [
                            "song_name",
                            "artist_name",
                            "country",
                            "f_id",
                            "genre_is",
                            "rating",
                            "languages",
                            "releasedate",
                            "resolution"
                        ],
                        [
                            "Tumi robe nirobe",
                            "Shrikanta",
                            "India",
                            1,
                            "tagore",
                            8,
                            "bangla",
                            "28-AUG-2011",
                            1080
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT * FROM song WHERE song_name = \"Tumi robe nirobe\""
            },
            {
                "isuser": true,
                "text": "What are the maximum and minimum resolution of songs whose duration in 3 minutes?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the maximum and minimum resolutions of songs whose duration is 3 minutes",
                "query": "SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\"",
                "result": [
                    [
                        [
                            "max(T2.resolution)",
                            "min(T2.resolution)"
                        ],
                        [
                            1080,
                            1080
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(resolution) ,  min(resolution) FROM song WHERE duration = \"3:00\""
            },
            {
                "isuser": true,
                "text": "List the songs with size more than 4MB ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the information about songs with file size larger than 4 MB.",
                "query": "SELECT T2.* FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id where file_size > 4",
                "result": [
                    [
                        [
                            "song_name",
                            "artist_name",
                            "country",
                            "f_id",
                            "genre_is",
                            "rating",
                            "languages",
                            "releasedate",
                            "resolution"
                        ],
                        [
                            "Shukno patar nupur pae",
                            "Prity",
                            "Bangladesh",
                            2,
                            "nazrul",
                            5,
                            "bangla",
                            "21-SEP-1997",
                            512
                        ],
                        [
                            "My love",
                            "Enrique",
                            "USA",
                            4,
                            "blues",
                            6,
                            "english",
                            "24-JAN-2007",
                            1080
                        ],
                        [
                            "Just beat it",
                            "Michel",
                            "UK",
                            5,
                            "pop",
                            8,
                            "english",
                            "17-MAR-2002",
                            720
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT song_name ,  file_size FROM files WHERE file_size > 4000000"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "college_2",
        "turns": [
            {
                "isuser": true,
                "text": "What is the maximum capacity in Lambert?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean Lamberton?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT max(capacity) FROM classroom WHERE building = 'Lambert'"
            },
            {
                "isuser": true,
                "text": "yes. my apologies.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "10 is the maximum capacity in the classroom with building Lamberton.",
                "query": "SELECT max(capacity) FROM classroom Where building = \"Lamberton\"",
                "result": [
                    [
                        [
                            "max(capacity)"
                        ],
                        [
                            10
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "I understand."
            },
            {
                "isuser": true,
                "text": "What is the maximum capacity of all of the rooms?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "120 is the maximum capacity of all of the rooms",
                "query": "SELECT max(capacity) FROM classroom",
                "result": [
                    [
                        [
                            "max(capacity)"
                        ],
                        [
                            120
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(capacity) FROM classroom"
            },
            {
                "isuser": true,
                "text": "How many rooms are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 11440 rooms in total.",
                "query": "SELECT sum(room_number) FROM classroom",
                "result": [
                    [
                        [
                            "sum(room_number)"
                        ],
                        [
                            11440
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM classroom"
            },
            {
                "isuser": true,
                "text": "What is the average capacity of the rooms?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "44.666666666666664 is the average capacity of the rooms",
                "query": "SELECT avg(capacity) FROM classroom",
                "result": [
                    [
                        [
                            "avg(capacity)"
                        ],
                        [
                            44.666666666666664
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(capacity) FROM classroom"
            },
            {
                "isuser": true,
                "text": "Which classroom is the smallest?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the information about the classroom with the smallest capacity.",
                "query": "SELECT * FROM classroom order by capacity limit 1",
                "result": [
                    [
                        [
                            "building",
                            "room_number",
                            "capacity"
                        ],
                        [
                            "Lamberton",
                            "134",
                            10
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT building, room_number, capacity FROM classroom ORDER BY capacity ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What room seats 120 people?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the information about the classroom with capacity 120.",
                "query": "SELECT * FROM classroom WHERE capacity = 120",
                "result": [
                    [
                        [
                            "building",
                            "room_number",
                            "capacity"
                        ],
                        [
                            "Whitman",
                            "134",
                            120
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT building, room_number FROM classroom WHERE capacity = 120"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You're welcome! GoodBye.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "apartment_rentals",
        "turns": [
            {
                "isuser": true,
                "text": "Please list each gender code with its corresponding amount of guests and sort it in descending order by that count?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are each gender code and the corresponding count of guests sorted by the count in descending order.",
                "query": "SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC",
                "result": [
                    [
                        [
                            "gender_code",
                            "COUNT(*)"
                        ],
                        [
                            "Female",
                            9
                        ],
                        [
                            "Male",
                            3
                        ],
                        [
                            "Unknown",
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC"
            },
            {
                "isuser": true,
                "text": "What are the full names of all the people with unknown genders?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the full names of all the people with unknown gender code.",
                "query": "SELECT guest_first_name, guest_last_name FROM Guests where gender_code = \"Unknown\"",
                "result": [
                    [
                        [
                            "guest_first_name",
                            "guest_last_name"
                        ],
                        [
                            "Rebeca",
                            "Runolfsdottir"
                        ],
                        [
                            "Josefina",
                            "Jerde"
                        ],
                        [
                            "Keith",
                            "Hoeger"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT guest_first_name ,  guest_last_name FROM Guests WHERE gender_code = \"Unknown\""
            },
            {
                "isuser": true,
                "text": "What were their birth dates?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the birth dates of all the people with unknown gender code.",
                "query": "SELECT date_of_birth FROM Guests where gender_code = \"Unknown\"",
                "result": [
                    [
                        [
                            "date_of_birth"
                        ],
                        [
                            "1974-05-12 21:53:58"
                        ],
                        [
                            "1978-03-08 04:43:04"
                        ],
                        [
                            "2001-06-18 20:05:55"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT date_of_birth FROM Guests WHERE gender_code = \"Unknown\""
            },
            {
                "isuser": true,
                "text": "What are the birth dates of all guests with the letter M in their first or last name?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the birth dates of all guests with the letter M in their first or last name",
                "query": "SELECT date_of_birth FROM Guests where guest_first_name like '%M%' or guest_last_name like '%M%'",
                "result": [
                    [
                        [
                            "date_of_birth"
                        ],
                        [
                            "1997-01-20 17:11:31"
                        ],
                        [
                            "2013-02-22 11:26:22"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT date_of_birth FROM Guests WHERE gender_code = \"Unknown\" AND (guest_first_name LIKE \"%M%\" OR guest_last_name LIKE \"%M%\")"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "cre_Doc_Template_Mgt",
        "turns": [
            {
                "isuser": true,
                "text": "Hi!  Can you tell me how many unique template IDs there are?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Yes, there are 12 distinct template IDs. ",
                "query": "SELECT count(distinct template_id) FROM Documents ",
                "result": [
                    [
                        [
                            "count(distinct template_id)"
                        ],
                        [
                            12
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(DISTINCT template_id) FROM templates"
            },
            {
                "isuser": true,
                "text": "How many of those 12 template IDs are used by more than one document?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 2 template ids that are used by more than one document.",
                "query": "SELECT count(template_id) FROM Documents GROUP BY template_id HAVING count(*)  >  1",
                "result": [
                    [
                        [
                            "count(template_id)"
                        ],
                        [
                            2
                        ],
                        [
                            2
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM Documents WHERE template_id IN (SELECT template_id FROM Templates GROUP BY template_id HAVING count(*)  >  1)"
            },
            {
                "isuser": true,
                "text": "Great!  Can you show me the corresponding document that used each of those template IDs on the list you just provided me?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The documents that use each of the template_ids that are used by more than one document are shown in the result table. ",
                "query": "SELECT document_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
                "result": [
                    [
                        [
                            "Document_ID"
                        ],
                        [
                            385906526
                        ],
                        [
                            3830
                        ],
                        [
                            16514113
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Document_Name FROM Documents WHERE template_id IN (SELECT template_id FROM Templates GROUP BY template_id HAVING count(*)  >  1)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks, good bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "tracking_grants_for_research",
        "turns": [
            {
                "isuser": true,
                "text": "What is the total grant amount of the organizations described as research?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The total grant amount of the organizations described as research is 84129206.",
                "query": "SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research'",
                "result": [
                    [
                        [
                            "sum(grant_amount)"
                        ],
                        [
                            84129206.6553
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT sum(grant_amount) FROM Grants WHERE organisation_id IN (SELECT organisation_id FROM Organisations WHERE organisation_type = 'Research')"
            },
            {
                "isuser": true,
                "text": "What is the grant start date of the organizations described as research?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list of grant start date of the organizations described as research.",
                "query": "SELECT grant_start_date FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research'",
                "result": [
                    [
                        [
                            "grant_start_date"
                        ],
                        [
                            "1985-10-09 20:08:49"
                        ],
                        [
                            "1970-09-19 22:53:49"
                        ],
                        [
                            "1979-10-29 07:44:22"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT grant_start_date FROM Grants WHERE organisation_id IN (SELECT organisation_id FROM Organisations WHERE organisation_type = 'Research')"
            },
            {
                "isuser": true,
                "text": "Show me organization ids for organizations described as research",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the lost of organization ids for organizations described as research.",
                "query": "SELECT t1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research'",
                "result": [
                    [
                        [
                            "organisation_id"
                        ],
                        [
                            3
                        ],
                        [
                            14
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT organisation_id FROM Organisations WHERE organisation_type = 'Research'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "race_track",
        "turns": [
            {
                "isuser": true,
                "text": "Can you show me all tracks which were opened after 2000?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the names of all the tracks which were opened after 2000?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT name FROM track WHERE year_opened  >  2000"
            },
            {
                "isuser": true,
                "text": "Yes.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names of all the tracks which were opened after 2000 are listed.",
                "query": "SELECT name  FROM track WHERE year_opened  >  2000 ",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Chicagoland Speedway"
                        ],
                        [
                            "Kansas Speedway"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM track WHERE year_opened  >  2000"
            },
            {
                "isuser": true,
                "text": "Hmm, I want to know the seatings for all the tracks opened after 2000.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The seating of all the tracks opened  after 2000 is listed.",
                "query": "SELECT seating FROM track WHERE year_opened  >  2000 ",
                "result": [
                    [
                        [
                            "Seating"
                        ],
                        [
                            75000.0
                        ],
                        [
                            81687.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name, seating FROM track WHERE year_opened  >  2000"
            },
            {
                "isuser": true,
                "text": "Please list the names and seatings for all the tracks opened after 2000, ordered by seating.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names and seatings for all the tracks opened after 2000, ordered by seating are listed.",
                "query": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating",
                "result": [
                    [
                        [
                            "Name",
                            "Seating"
                        ],
                        [
                            "Chicagoland Speedway",
                            75000.0
                        ],
                        [
                            "Kansas Speedway",
                            81687.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name, seating FROM track WHERE year_opened  >  2000 ORDER BY seating"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "film_rank",
        "turns": [
            {
                "isuser": true,
                "text": "Hey there!  How're you!  Can you provide me with a list of all of the different movie studios?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Hello, the list of all the different movie studios is shown in the result table. ",
                "query": "SELECT distinct Studio FROM film ",
                "result": [
                    [
                        [
                            "Studio"
                        ],
                        [
                            "Universal"
                        ],
                        [
                            "Columbia"
                        ],
                        [
                            "Paramount / Lorimar"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT Studio FROM film"
            },
            {
                "isuser": true,
                "text": "Could you filter this list to show just the movie studio which has the largest number of movies?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The movies studio with the largest number of films is 20th Century Fox. ",
                "query": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Studio"
                        ],
                        [
                            "20th Century Fox"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT Studio FROM film ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Great!  Can you please provide me with the total number of films by 20th Century Fox?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The total number of films by 20th Century Fox is 2. ",
                "query": "SELECT count(*) FROM film where studio = \"20th Century Fox\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM film WHERE Studio = '20th Century Fox'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, good bye. ",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "department_store",
        "turns": [
            {
                "isuser": true,
                "text": "how many order items there",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 15 order items.",
                "query": "SELECT count(*) FROM order_items ",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Order_Items"
            },
            {
                "isuser": true,
                "text": "how many order id from product id 7",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 1 order with product id 7.",
                "query": "SELECT count(*) FROM order_items where product_id = 7",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Order_Items WHERE product_id = 7"
            },
            {
                "isuser": true,
                "text": "how many order id from order item id 2",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 1 order with order item id 7",
                "query": "SELECT count(*) FROM order_items where order_item_id = 2",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Order_Items WHERE order_item_id = 2"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "club_1",
        "turns": [
            {
                "isuser": false,
                "text": "Did you mean the first and last names of the student with id 1008?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable",
                "predict": "SELECT Fname ,  LName FROM Student WHERE StuID = 1008"
            },
            {
                "isuser": true,
                "text": "Hello, what is the name of the student with student id 1008?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "The first and last name of the student with student id 1008 is Jandy Nelson.",
                "query": "SELECT fname, lname FROM student WHERE StuID = 1008",
                "result": [
                    [
                        [
                            "Fname",
                            "LName"
                        ],
                        [
                            "Jandy",
                            "Nelson"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Fname ,  LName FROM Student WHERE StuID = 1008"
            },
            {
                "isuser": true,
                "text": "What is her major?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The major of the student with student id 1008 is 600.",
                "query": "SELECT Major FROM student WHERE StuID = 1008",
                "result": [
                    [
                        [
                            "Major"
                        ],
                        [
                            600
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Major FROM Student WHERE StuID = 1008"
            },
            {
                "isuser": true,
                "text": "Apologies, I meant to ask his/her major; what is the student's sex?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "No worries. The sex of the student with student id 1008 is 'F' (female).",
                "query": "SELECT sex FROM student WHERE StuID = 1008",
                "result": [
                    [
                        [
                            "Sex"
                        ],
                        [
                            "F"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Sex FROM Student WHERE StuID = 1008"
            },
            {
                "isuser": true,
                "text": "How old is the student with student id 1008?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The age of the student with student id 1008 is 20.",
                "query": "SELECT Age FROM student WHERE StuID = 1008",
                "result": [
                    [
                        [
                            "Age"
                        ],
                        [
                            20
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Age FROM Student WHERE StuID = 1008"
            },
            {
                "isuser": true,
                "text": "Does she have an advisor?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes, the advisor for the student with student id 1008 is 9172.",
                "query": "SELECT Advisor FROM student WHERE StuID = 1008",
                "result": [
                    [
                        [
                            "Advisor"
                        ],
                        [
                            9172
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Advisor FROM Student WHERE StuID = 1008"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "film_rank",
        "turns": [
            {
                "isuser": true,
                "text": "What is the average gross amount of money made in dollars?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average gross amount of money in dollars is 114827242.38461539.",
                "query": "SELECT avg(gross_in_dollar) FROM film ",
                "result": [
                    [
                        [
                            "avg(gross_in_dollar)"
                        ],
                        [
                            114827242.38461539
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(Gross_in_dollar) FROM film"
            },
            {
                "isuser": true,
                "text": "What films did Nicholas Meyer direct?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of the titles of movies directed by Nicholas Meyer.",
                "query": "SELECT Title FROM film WHERE Director  =  \"Nicholas Meyer\" ",
                "result": [
                    [
                        [
                            "Title"
                        ],
                        [
                            "Star Trek II: The Wrath of Khan"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Title FROM film WHERE Director = 'Nicholas Meyer'"
            },
            {
                "isuser": true,
                "text": "Did Star Trek II: The Wrath of Khan make more money than the average film?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "No, Star Trek II: The Wrath of Khan only made 79912963 while the average gross amount for all films is 114827242.38461539.",
                "query": "SELECT gross_in_dollar FROM film WHERE Title = \"Star Trek II: The Wrath of Khan\"",
                "result": [
                    [
                        [
                            "Gross_in_dollar"
                        ],
                        [
                            79912963
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Title, Gross_in_dollar FROM film WHERE Gross_in_dollar > (SELECT AVG(Gross_in_dollar) FROM film)"
            },
            {
                "isuser": true,
                "text": "Did any movies directed by Walter Hill make more money than Star Trek II: The Wrath of Khan?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "No, no movies directed by Walter Hill made more money than Star Trek II: The Wrath of Khan.",
                "query": "SELECT gross_in_dollar FROM film WHERE Director = \"Walter Hill\" AND gross_in_dollar - (SELECT gross_in_dollar FROM film WHERE Title = \"Star Trek II: The Wrath of Khan\") > 0",
                "result": [
                    [
                        [
                            "Gross_in_dollar"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Title, Gross_in_dollar FROM film WHERE Director = 'Walter Hill' AND Gross_in_dollar > (SELECT Gross_in_dollar FROM film WHERE Title = 'Star Trek II: The Wrath of Khan')"
            },
            {
                "isuser": true,
                "text": "What were those movies directed by Walter Hill?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the movie directed by Walter Hill is 48 Hrs.",
                "query": "SELECT Title FROM film WHERE Director = \"Walter Hill\"",
                "result": [
                    [
                        [
                            "Title"
                        ],
                        [
                            "48 Hrs"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Title FROM film WHERE Director = 'Walter Hill' AND Gross_in_dollar > (SELECT AVG(Gross_in_dollar) FROM film)"
            },
            {
                "isuser": true,
                "text": "What studio produced that movie with name 48 Hrs?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The studio that produced the movie 48 Hrs is Paramount.",
                "query": "SELECT Studio FROM film WHERE Title = \"48 Hrs\"",
                "result": [
                    [
                        [
                            "Studio"
                        ],
                        [
                            "Paramount"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Studio FROM film WHERE Title = '48 Hrs.'"
            },
            {
                "isuser": true,
                "text": "What studio produced Star Trek II: The Wrath of Khan?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The studio that produced Star Trek II: The Wrath of Khan is Paramount.",
                "query": "SELECT Studio FROM film WHERE Title = \"Star Trek II: The Wrath of Khan\"",
                "result": [
                    [
                        [
                            "Studio"
                        ],
                        [
                            "Paramount"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Studio FROM film WHERE Title = 'Star Trek II: The Wrath of Khan'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "flight_1",
        "turns": [
            {
                "isuser": true,
                "text": "Can you show me the origins, the destinations and the flight numbers?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list of all origins, destinations, and flight numbers.",
                "query": "SELECT origin, destination, flno FROM Flight GROUP BY destination",
                "result": [
                    [
                        [
                            "origin",
                            "destination",
                            "flight_number"
                        ],
                        [
                            "Los Angeles",
                            "Boston",
                            387
                        ],
                        [
                            "Los Angeles",
                            "Chicago",
                            13
                        ],
                        [
                            "Los Angeles",
                            "Dallas",
                            346
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT origin, destination, flno FROM Flight"
            },
            {
                "isuser": true,
                "text": "Hmm, I want to know just the destinations and the flight numbers please.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list of all destinations and their flight numbers. ",
                "query": "SELECT destination, flno FROM Flight GROUP BY destination",
                "result": [
                    [
                        [
                            "destination",
                            "flight_number"
                        ],
                        [
                            "Boston",
                            387
                        ],
                        [
                            "Chicago",
                            13
                        ],
                        [
                            "Dallas",
                            346
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT destination, flno FROM Flight"
            },
            {
                "isuser": true,
                "text": "Please show me the destinations and the number of flights they have.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list of destinations and the number of flights associated with it. For example, destination of Boston has 1 flight.",
                "query": "SELECT destination, count(*) FROM Flight GROUP BY destination",
                "result": [
                    [
                        [
                            "destination",
                            "number"
                        ],
                        [
                            "Boston",
                            1
                        ],
                        [
                            "Chicago",
                            1
                        ],
                        [
                            "Dallas",
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT destination, COUNT(*) AS num_flights FROM Flight GROUP BY destination"
            },
            {
                "isuser": true,
                "text": "Which destination has the least number of flights?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Boston has the least number of flights.",
                "query": "SELECT destination, count(*) FROM Flight GROUP BY destination order by count(*) LIMIT 1",
                "result": [
                    [
                        [
                            "destination",
                            "number"
                        ],
                        [
                            "Boston",
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT destination, COUNT(*) AS num_flights FROM Flight GROUP BY destination ORDER BY num_flights ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "dorm_1",
        "turns": [
            {
                "isuser": true,
                "text": "Can you provide me with the names of the dorms that have both TV Lounge and Study Room as amenities?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The following table shows  the names of the dorms that have both TV Lounge and Study Room as amenities.",
                "query": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'",
                "result": [
                    [
                        [
                            "dorm_name"
                        ],
                        [
                            "Anonymous Donor Hall"
                        ],
                        [
                            "Dorm-plex 2000"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT dorm_name FROM dorm WHERE dormid IN (SELECT dormid FROM has_amenity WHERE amenid IN (SELECT amenid FROM dorm_amenity WHERE amenity_name IN ('TV Lounge', 'Study Room')))"
            },
            {
                "isuser": true,
                "text": "What is the Dorm ID of Dorm-plex 2000?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "160 is the Dorm ID of Dorm-plex 2000.",
                "query": "SELECT dormid from dorm where dorm_name = \"Dorm-plex 2000\"",
                "result": [
                    [
                        [
                            "dormid"
                        ],
                        [
                            160
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT dormid FROM dorm WHERE dorm_name = 'Dorm-plex 2000'"
            },
            {
                "isuser": true,
                "text": "What is the student capacity of Dorm-plex 2000?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "400 is the student capacity of Dorm-plex 2000.",
                "query": "SELECT student_capacity from dorm where dorm_name = \"Dorm-plex 2000\"",
                "result": [
                    [
                        [
                            "student_capacity"
                        ],
                        [
                            400
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT student_capacity FROM dorm WHERE dorm_name = 'Dorm-plex 2000'"
            },
            {
                "isuser": true,
                "text": "What genders can be residents of Dorm-plex 2000?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "gender X can be residents of Dorm-plex 2000",
                "query": "SELECT gender from dorm where dorm_name = \"Dorm-plex 2000\"",
                "result": [
                    [
                        [
                            "gender"
                        ],
                        [
                            "X"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT gender FROM dorm WHERE dorm_name = 'Dorm-plex 2000'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "student_transcripts_tracking",
        "turns": [
            {
                "isuser": true,
                "text": "Find the first name of the students who permanently live in the country Haiti.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the first names of the students who permanently live in the country Haiti",
                "query": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' ",
                "result": [
                    [
                        [
                            "first_name"
                        ],
                        [
                            "Hobart"
                        ],
                        [
                            "Warren"
                        ],
                        [
                            "Delaney"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T2.country = \"Haiti\""
            },
            {
                "isuser": true,
                "text": "Please also find the first name of the students who have the cell phone number 09700166582",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the first name of the students who have the cell phone number 09700166582 is Jarvis",
                "query": "SELECT first_name FROM Students WHERE cell_mobile_number = '09700166582'",
                "result": [
                    [
                        [
                            "first_name"
                        ],
                        [
                            "Jarvis"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.first_name FROM Students AS T1 WHERE T1.cell_mobile_number = \"09700166582\""
            },
            {
                "isuser": true,
                "text": "Can you show me the last name and address for him?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you want his current address or the permanent address?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T1.last_name ,  T2.line_1 ,  T2.city ,  T2.state_province_county FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T1.cell_mobile_number  =  \"09700166582\""
            },
            {
                "isuser": true,
                "text": "current address please",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the last name and the detailed current address of the student who has the cell phone number 09700166582",
                "query": "SELECT T1.last_name, T2.* FROM Students as T1 join addresses as T2 on T1.current_address_id = T2.address_id WHERE T1.cell_mobile_number = '09700166582'",
                "result": [
                    [
                        [
                            "last_name",
                            "address_id",
                            "line_1",
                            "line_2",
                            "line_3",
                            "city",
                            "zip_postcode",
                            "state_province_county",
                            "country",
                            "other_address_details"
                        ],
                        [
                            "Carroll",
                            7,
                            "193 Marlin Brook",
                            "Apt. 406",
                            null,
                            "Herzoghaven",
                            "068",
                            "Arkansas",
                            "Cook Islands",
                            null
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.first_name ,  T2.line_1 ,  T2.city ,  T2.state_province_county FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T1.cell_mobile_number  =  \"09700166582\""
            },
            {
                "isuser": true,
                "text": "Ok. Can you also give me his email address?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the email address of the student who has the cell phone number 09700166582 is jillian26@example.net",
                "query": "SELECT email_address FROM Students where cell_mobile_number = '09700166582'",
                "result": [
                    [
                        [
                            "email_address"
                        ],
                        [
                            "jillian26@example.net"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.email_address FROM Students AS T1 WHERE T1.cell_mobile_number = \"09700166582\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you! bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "hr_1",
        "turns": [
            {
                "isuser": true,
                "text": "list all job ids ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list that contains all job ids.",
                "query": "select distinct job_id from employees",
                "result": [
                    [
                        [
                            "JOB_ID"
                        ],
                        [
                            "AD_PRES"
                        ],
                        [
                            "AD_VP"
                        ],
                        [
                            "IT_PROG"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT job_id FROM jobs"
            },
            {
                "isuser": true,
                "text": "what are the hire dates for all the jobs? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list that contains all the corresponding hire dates.",
                "query": "select HIRE_DATE from employees",
                "result": [
                    [
                        [
                            "HIRE_DATE"
                        ],
                        [
                            "1987-06-17"
                        ],
                        [
                            "1987-06-18"
                        ],
                        [
                            "1987-06-19"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT hire_date FROM employees WHERE job_id = 'IT_PROG'"
            },
            {
                "isuser": true,
                "text": "list all the phone numbers ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list that contains all the phone numbers.",
                "query": "select distinct phone_number from employees",
                "result": [
                    [
                        [
                            "PHONE_NUMBER"
                        ],
                        [
                            "515.123.4567"
                        ],
                        [
                            "515.123.4568"
                        ],
                        [
                            "515.123.4569"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT phone_number FROM employees"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "tracking_orders",
        "turns": [
            {
                "isuser": true,
                "text": "Which customers have ordered \"food\"?\n",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "ok, did you want to just return their names?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"food\""
            },
            {
                "isuser": true,
                "text": "Yes. I just want to know the names of which customers have placed orders under the category \"food\"",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the table shows the names of customers who have ordered products named \"food\".",
                "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\"",
                "result": [
                    [
                        [
                            "customer_name"
                        ],
                        [
                            "Violet"
                        ],
                        [
                            "Hadley"
                        ],
                        [
                            "George"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"food\""
            },
            {
                "isuser": true,
                "text": "Of the names listed in the table, which of them have an item status listed as \"cancel\"?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the names of customers who have ordered products named \"food\" also with item \"cancel\" status are George and Devan.",
                "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1",
                "result": [
                    [
                        [
                            "customer_name"
                        ],
                        [
                            "George"
                        ],
                        [
                            "Devan"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"food\" AND T3.order_item_status  =  \"cancel\""
            },
            {
                "isuser": true,
                "text": "How many customers have cancelled orders?\n",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the customers in the previous result?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT COUNT(DISTINCT T1.customer_name) FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"food\" AND T3.order_item_status  =  \"cancel\""
            },
            {
                "isuser": true,
                "text": "yes\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of customers who have have once canceled the purchase of the product \"food\" is 2.",
                "query": "SELECT count(T1.customer_name) FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\"",
                "result": [
                    [
                        [
                            "count(T1.customer_name)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"food\" AND T3.order_item_status  =  \"cancel\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You're welcome and bye.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "department_store",
        "turns": [
            {
                "isuser": true,
                "text": "What are id and name of the products whose price is lower than 600?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The ids and names of the products whose price is lower than 600 are listed.",
                "query": "SELECT product_id ,  product_name FROM products WHERE product_price  <  600 ",
                "result": [
                    [
                        [
                            "product_id",
                            "product_name"
                        ],
                        [
                            5,
                            "red jeans"
                        ],
                        [
                            6,
                            "red topping"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product_id, product_name FROM Products WHERE product_price < 600"
            },
            {
                "isuser": true,
                "text": "What are id and name of the products whose price is higher than 900?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The ids and names of the products whose price is higher than 900 are listed.",
                "query": "SELECT product_id ,  product_name FROM products WHERE product_price  >  900",
                "result": [
                    [
                        [
                            "product_id",
                            "product_name"
                        ],
                        [
                            4,
                            "blue jeans"
                        ],
                        [
                            7,
                            "black topping"
                        ],
                        [
                            8,
                            "yellow topping"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product_id, product_name FROM Products WHERE product_price > 900"
            },
            {
                "isuser": true,
                "text": "How many products have price lower than 600 or higher than 900?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 7 products whose price are lower than 600 or higher than 900.",
                "query": "SELECT count(*) FROM products WHERE product_price  <  600 OR product_price  >  900",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Products WHERE product_price < 600 OR product_price > 900"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "manufactory_1",
        "turns": [
            {
                "isuser": true,
                "text": "What is the average price of all products? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "153.72 is the average price of all products.",
                "query": "SELECT avg(price) FROM products ",
                "result": [
                    [
                        [
                            "avg(price)"
                        ],
                        [
                            153.72727272727272
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(price) FROM Products"
            },
            {
                "isuser": true,
                "text": "And what is the average price for each company? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of the average price for each manufacturer.",
                "query": "SELECT avg(price), manufacturer FROM products group by manufacturer",
                "result": [
                    [
                        [
                            "avg(price)",
                            "Manufacturer"
                        ],
                        [
                            240.0,
                            1
                        ],
                        [
                            150.0,
                            2
                        ],
                        [
                            162.0,
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(price) ,  manufacturer FROM Products GROUP BY manufacturer"
            },
            {
                "isuser": true,
                "text": "What are all companies names? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are all manufacturers' names.",
                "query": "Select name from manufacturers",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Sony"
                        ],
                        [
                            "Creative Labs"
                        ],
                        [
                            "Hewlett-Packard"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT name FROM Manufacturers"
            },
            {
                "isuser": true,
                "text": "And what are their headquarters? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of manufacturers with their headquarter.",
                "query": "Select name, headquarter from manufacturers",
                "result": [
                    [
                        [
                            "Name",
                            "Headquarter"
                        ],
                        [
                            "Sony",
                            "Tokyo"
                        ],
                        [
                            "Creative Labs",
                            "Austin"
                        ],
                        [
                            "Hewlett-Packard",
                            "Los Angeles"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT headquarter FROM Manufacturers"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks. Bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "chinook_1",
        "turns": [
            {
                "isuser": true,
                "text": "Top selling artist?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "There is no info about the amount sold. Could you please give me another question?",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT T1.Name FROM Artist AS T1 JOIN ALbum AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY T1.ArtistId ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "how many artists do you have?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 275 artists in total.",
                "query": "select count(distinct artistid) from artist",
                "result": [
                    [
                        [
                            "count(distinct artistid)"
                        ],
                        [
                            275
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM Artist"
            },
            {
                "isuser": true,
                "text": "What are their names?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table that shows the names of all the artists.",
                "query": "select Name from artist",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "AC/DC"
                        ],
                        [
                            "Accept"
                        ],
                        [
                            "Aerosmith"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM Artist"
            },
            {
                "isuser": true,
                "text": "how many albums does AC/DC have?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 2 albums by the artist whose name is \"AC/DC\".",
                "query": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = \"AC/DC\"",
                "result": [
                    [
                        [
                            "COUNT(*)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM Album WHERE ArtistId = 1"
            },
            {
                "isuser": true,
                "text": "And for Metallica?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 10 albums by the artist whose name is \"Metallica\".",
                "query": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = \"Metallica\"",
                "result": [
                    [
                        [
                            "COUNT(*)"
                        ],
                        [
                            10
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM Album WHERE ArtistId = 2"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "game_injury",
        "turns": [
            {
                "isuser": true,
                "text": "what are all games are presented on the table",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "What kind of infromation for the games do you want ? ",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT DISTINCT T2.Date FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id"
            },
            {
                "isuser": true,
                "text": "i want to how many teams on the game",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 3 distinct teams that play games.",
                "query": "select count(distinct home_team) from game",
                "result": [
                    [
                        [
                            "count(distinct home_team)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(DISTINCT home_team) FROM game"
            },
            {
                "isuser": true,
                "text": "which player are played in highest number of matches",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The player who are played in highest number of matches is Thiago Motta (2)",
                "query": "SELECT Player FROM injury_accident order by Number_of_matches desc limit 1",
                "result": [
                    [
                        [
                            "Player"
                        ],
                        [
                            "Thiago Motta (2)"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT player FROM injury_accident GROUP BY player ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "document_management",
        "turns": [
            {
                "isuser": true,
                "text": "Can you give me a list of documents that don't have any images?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you want document code?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections_images)"
            },
            {
                "isuser": true,
                "text": "I'd like both the document code and document name, please.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list of documents names and documents codes that contains all the documents that don't have any images.",
                "query": "SELECT document_name, document_code FROM documents EXCEPT SELECT t1.document_name, t1.document_code FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id",
                "result": [
                    [
                        [
                            "document_name",
                            "document_code"
                        ],
                        [
                            "How to cook pasta",
                            "928"
                        ],
                        [
                            "Humanity: a fact",
                            "510"
                        ],
                        [
                            "Learning Database",
                            "958"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_code, document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections_images)"
            },
            {
                "isuser": true,
                "text": "That's great. Can you tell me the total number of documents that do have images?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 20 documents that do have images.",
                "query": " SELECT count(*) FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            20
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM documents WHERE document_code IN (SELECT document_code FROM document_sections_images)"
            },
            {
                "isuser": true,
                "text": "What types of documents are these?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the type code of documents that contains the type of documents that do have images.",
                "query": " SELECT document_type_code FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id",
                "result": [
                    [
                        [
                            "document_type_code"
                        ],
                        [
                            "CV"
                        ],
                        [
                            "Advertisement"
                        ],
                        [
                            "Advertisement"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_type_code FROM documents WHERE document_code IN (SELECT document_code FROM document_sections_images) GROUP BY document_type_code"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "dorm_1",
        "turns": [
            {
                "isuser": true,
                "text": "What are the First names of students living in smith hall?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the first names of students who are living in the Smith Hall.",
                "query": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'",
                "result": [
                    [
                        [
                            "Fname"
                        ],
                        [
                            "Tracy"
                        ],
                        [
                            "Shiela"
                        ],
                        [
                            "Michael"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Lives_in WHERE dormid = 1)"
            },
            {
                "isuser": true,
                "text": "Last name of Tracy",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you want the last name of the student with first name Tracy?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT LName FROM Student WHERE StuID = 1"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The student with a first name Tracy has a last name kim.",
                "query": "SELECT lname from student where fname = \"Tracy\"",
                "result": [
                    [
                        [
                            "LName"
                        ],
                        [
                            "Kim"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT LName FROM Student WHERE StuID = 1"
            },
            {
                "isuser": true,
                "text": "What is the city code of student Tracy kim?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The student with full name Tracy Kim has a city code of HKG.",
                "query": "SELECT city_code from student where fname = \"Tracy\" and lname = \"Kim\"",
                "result": [
                    [
                        [
                            "city_code"
                        ],
                        [
                            "HKG"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT city_code FROM Student WHERE StuID = 1"
            },
            {
                "isuser": true,
                "text": "Are there any other Students with city code HKG?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes. ",
                "query": "SELECT Lname,fname from student where city_code = \"HKG\"",
                "result": [
                    [
                        [
                            "LName",
                            "Fname"
                        ],
                        [
                            "Kim",
                            "Tracy"
                        ],
                        [
                            "Lee",
                            "Susan"
                        ],
                        [
                            "Pang",
                            "Eric"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT StuID, LName, FName, Age, Sex, Major, Advisor, city_code FROM Student WHERE city_code = 'HKG'"
            },
            {
                "isuser": true,
                "text": "What is the Student capacity of Smith Hall?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The dorm named Smith Hall has a student capacity of 85.",
                "query": "SELECT student_capacity from dorm where dorm_name = \"Smith Hall\"",
                "result": [
                    [
                        [
                            "student_capacity"
                        ],
                        [
                            85
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT student_capacity FROM Dorm WHERE dormid = 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks. bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "movie_1",
        "turns": [
            {
                "isuser": true,
                "text": "What is the lowest and highest rating star?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The lowest and highest rating star are 2 and 5 respectively.",
                "query": "SELECT max(stars) ,  min(stars) FROM Rating",
                "result": [
                    [
                        [
                            "max(stars)",
                            "min(stars)"
                        ],
                        [
                            5,
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT min(stars) ,  max(stars) FROM Rating"
            },
            {
                "isuser": true,
                "text": "What is the movie id and rating date of the movie with 5 stars?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The movie ids and rating dates of the movies with 5 stars are listed.",
                "query": "SELECT mID ,  ratingDate FROM Rating where stars=5",
                "result": [
                    [
                        [
                            "mID",
                            "ratingDate"
                        ],
                        [
                            106,
                            "2011-01-19"
                        ],
                        [
                            107,
                            "2011-01-20"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT mID ,  ratingDate FROM Rating WHERE stars = 5"
            },
            {
                "isuser": true,
                "text": "Now show me the movie id and rating dates of the movie with 2 stars?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The movie ids and rating dates of the movie with 2 stars are listed.",
                "query": "SELECT mID ,  ratingDate FROM Rating where stars=2",
                "result": [
                    [
                        [
                            "mID",
                            "ratingDate"
                        ],
                        [
                            101,
                            "2011-01-22"
                        ],
                        [
                            103,
                            "2011-01-20"
                        ],
                        [
                            108,
                            "2011-01-30"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT mID ,  ratingDate FROM Rating WHERE stars = 2"
            },
            {
                "isuser": true,
                "text": "What is the earliest rating date? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The earliest rating date is 2011-01-02.",
                "query": "SELECT ratingDate FROM Rating where ratingDate != 'NULL' order by ratingdate  limit 1",
                "result": [
                    [
                        [
                            "ratingDate"
                        ],
                        [
                            "2011-01-02"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT min(ratingDate) FROM Rating"
            },
            {
                "isuser": true,
                "text": "What is the most recent rating date?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The most recent rating date is 2011-01-30.",
                "query": "SELECT ratingDate FROM Rating order by ratingdate desc limit  1",
                "result": [
                    [
                        [
                            "ratingDate"
                        ],
                        [
                            "2011-01-30"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(ratingDate) FROM Rating"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "wrestler",
        "turns": [
            {
                "isuser": true,
                "text": "what are the elimination time of wrestlers",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The elimination time of all the wrestlers is listed.",
                "query": "SELECT Time FROM elimination ",
                "result": [
                    [
                        [
                            "Time"
                        ],
                        [
                            "00:11"
                        ],
                        [
                            "07:38"
                        ],
                        [
                            "10:45"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Elimination_Time FROM Elimination WHERE Wrestler_ID IN (SELECT Wrestler_ID FROM Wrestler WHERE Name = \"John Cena\")"
            },
            {
                "isuser": true,
                "text": "What are the names of the wrestlers and their elimination times?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names of all the wrestlers and their elimination times are listed.",
                "query": "SELECT T1.Time,T2.name FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ",
                "result": [
                    [
                        [
                            "Time",
                            "Name"
                        ],
                        [
                            "00:11",
                            "Rey Misterio Sr."
                        ],
                        [
                            "07:38",
                            "Fishman"
                        ],
                        [
                            "10:45",
                            "Gran Hamada"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name, Elimination_Time FROM Wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID"
            },
            {
                "isuser": true,
                "text": "What are the names of wresters and their elimination times whose days held is greater than 50?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names of the wrestlers with days held more than 50 and their elimination times are listed.",
                "query": "SELECT T2.name, T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50",
                "result": [
                    [
                        [
                            "Name",
                            "Time"
                        ],
                        [
                            "Gran Hamada",
                            "10:45"
                        ],
                        [
                            "Último Dragón §",
                            "14:22"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name, Elimination_Time FROM Wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T1.Days_held > 50"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "department_store",
        "turns": [
            {
                "isuser": true,
                "text": "what is the name of the customer of customer id 401?",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "there is no  customer id 401",
                "query": "SELECT customer_name\tfROM Customers where customer_id=401",
                "result": [
                    [
                        [
                            "customer_name"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_name FROM Customers WHERE customer_id = 401"
            },
            {
                "isuser": true,
                "text": "what is the name of the customer of customer code 401",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the customer code 401  is Ahmed ",
                "query": "SELECT customer_name from Customers where customer_code = 401",
                "result": [
                    [
                        [
                            "customer_name"
                        ],
                        [
                            "Ahmed"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_name FROM Customers WHERE customer_code = 401"
            },
            {
                "isuser": true,
                "text": "what is address of the customer Ahmed?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "address of the customer Ahmed is 75099 Tremblay Port Apt. 163 South Norrisland, SC 80546",
                "query": "SELECT customer_address \tfROM Customers where \tcustomer_name ='Ahmed'",
                "result": [
                    [
                        [
                            "customer_address"
                        ],
                        [
                            "75099 Tremblay Port Apt. 163\nSouth Norrisland, SC 80546"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_address FROM Customers WHERE customer_name = 'Ahmed'"
            },
            {
                "isuser": true,
                "text": "what is the address of the customer lukas?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the address of the customer lukas is 7162 Rodolfo Knoll Apt. 502 Lake Annalise, TN 35791-8871",
                "query": "SELECT customer_address \tfROM Customers where \tcustomer_name ='Lukas'",
                "result": [
                    [
                        [
                            "customer_address"
                        ],
                        [
                            "7162 Rodolfo Knoll Apt. 502\nLake Annalise, TN 35791-8871"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_address FROM Customers WHERE customer_name = 'lukas'"
            },
            {
                "isuser": true,
                "text": "what is customer code of lukas?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the  customer code of lukas customer_code\t is 844",
                "query": "SELECT customer_code \tfROM Customers where \tcustomer_name ='Lukas'",
                "result": [
                    [
                        [
                            "customer_code"
                        ],
                        [
                            "844"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_code FROM Customers WHERE customer_name = 'lukas'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome,goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "soccer_2",
        "turns": [
            {
                "isuser": true,
                "text": "List the state and enrollment of all the colleges where any students got accepted in the tryout decision.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the states and enrollments of the colleges where have any students who got accepted in the tryout decision.",
                "query": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'",
                "result": [
                    [
                        [
                            "state",
                            "enr"
                        ],
                        [
                            "AZ",
                            12000
                        ],
                        [
                            "FL",
                            19000
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  \"Accepted\""
            },
            {
                "isuser": true,
                "text": "What are the states and names of the colleges that all the goalies tried out for?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the states and names of the colleges that all the goalies tried out for",
                "query": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos = \"goalie\"",
                "result": [
                    [
                        [
                            "state",
                            "enr"
                        ],
                        [
                            "LA",
                            18000
                        ],
                        [
                            "AZ",
                            12000
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.state ,  T1.cName FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  \"Goalie\""
            },
            {
                "isuser": true,
                "text": "What are the states and names of all colleges that didn't accept students in the tryout decision?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the states and names of all colleges that didn't accept students in the tryout decision",
                "query": "select state, enr from college where cName not in (SELECT DISTINCT T1.cName FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision = \"yes\")",
                "result": [
                    [
                        [
                            "state",
                            "enr"
                        ],
                        [
                            "LA",
                            18000
                        ],
                        [
                            "OK",
                            22000
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.state ,  T1.cName FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  \"Rejected\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you! bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "products_gen_characteristics",
        "turns": [
            {
                "isuser": true,
                "text": "How many distinct characteristic names does the product \"cumin\" have?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The product \"cumin\" has 1 distinct characteristic name.",
                "query": "SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"cumin\"",
                "result": [
                    [
                        [
                            "count(DISTINCT t3.characteristic_name)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(DISTINCT characteristic_name) FROM Product_Characteristics WHERE product_id = 2"
            },
            {
                "isuser": true,
                "text": "How many distinct characteristic names does the product \"basil\" have?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The product \"basil\" has 0 distinct characteristic names.",
                "query": "SELECT count(DISTINCT t3.characteristic_name) FROM Products AS t1 JOIN Product_Characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN Characteristics AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"basil\"",
                "result": [
                    [
                        [
                            "count(DISTINCT t3.characteristic_name)"
                        ],
                        [
                            0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(DISTINCT characteristic_name) FROM Product_Characteristics WHERE product_id = 1"
            },
            {
                "isuser": true,
                "text": "What product has the most distinct characteristic names?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry I cannot answer this question. Can you break down the question or ask something else?",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT product_name, COUNT(DISTINCT characteristic_name) AS num_distinct_characteristic_names\nFROM Product_Characteristics\nJOIN Products ON Product_Characteristics.product_id = Products.product_id\nGROUP BY product_name\nORDER BY num_distinct_characteristic_names DESC\nLIMIT 1"
            },
            {
                "isuser": true,
                "text": "Sure thing! Whats the typical selling price of cumin? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The typical selling price of product name cumin is 2878.3",
                "query": "SELECT typical_selling_price FROM Products WHERE product_name = \"cumin\"",
                "result": [
                    [
                        [
                            "typical_selling_price"
                        ],
                        [
                            "2878.3"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT typical_selling_price FROM Products WHERE product_name = \"cumin\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome! Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "club_1",
        "turns": [
            {
                "isuser": true,
                "text": "what is the location of Bootup Baltimore",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the location of Bootup Baltimore  is AKW",
                "query": "select \tClubLocation from Club where \tClubName = 'Bootup Baltimore'",
                "result": [
                    [
                        [
                            "ClubLocation"
                        ],
                        [
                            "AKW"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "I apologize, but the database does not contain information about the location of Bootup Baltimore."
            },
            {
                "isuser": true,
                "text": "how many female students are presented on the table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are 10 female students",
                "query": "select count(StuID)\tfrom Student where Sex = 'F'",
                "result": [
                    [
                        [
                            "count(StuID)"
                        ],
                        [
                            10
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Student WHERE sex = 'F'"
            },
            {
                "isuser": true,
                "text": "what is the major of Tracy",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the major of Tracy is 600",
                "query": "select Major from Student where Fname = 'Tracy'",
                "result": [
                    [
                        [
                            "Major"
                        ],
                        [
                            600
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT major FROM Student WHERE fname = 'Tracy'"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "network_2",
        "turns": [
            {
                "isuser": true,
                "text": "How long is the longest relationship?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The longest friendship lasts for 12 years",
                "query": "SELECT max(year) FROM PersonFriend ",
                "result": [
                    [
                        [
                            "max(year)"
                        ],
                        [
                            12
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(year) FROM PersonFriend"
            },
            {
                "isuser": true,
                "text": "What is the name of that person?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the person has the longest friendship is Zach",
                "query": "SELECT name from personfriend where year = (select max(year) FROM PersonFriend )",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Zach"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT friend FROM PersonFriend WHERE year = (SELECT max(year) FROM PersonFriend)"
            },
            {
                "isuser": true,
                "text": "Who is his friend?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Do you want the names of all his friends or the friend that has the longest friendship with him?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT name FROM Person WHERE name IN (SELECT friend FROM PersonFriend WHERE year = (SELECT max(year) FROM PersonFriend))"
            },
            {
                "isuser": true,
                "text": "The friend with the longest friendship.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Dan is the Zach's friend that has the longest friendship",
                "query": "SELECT friend from personfriend where name = \"Zach\" and year = 12",
                "result": [
                    [
                        [
                            "friend"
                        ],
                        [
                            "Dan"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT friend FROM PersonFriend WHERE year = (SELECT max(year) FROM PersonFriend)"
            },
            {
                "isuser": true,
                "text": "Does Dan have any other friendships?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "There is no other person that is friend with Dan",
                "query": "SELECT * from personfriend where name = \"Dan\" ",
                "result": [
                    [
                        [
                            "name",
                            "friend",
                            "year"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM PersonFriend WHERE friend = 'Dan'"
            },
            {
                "isuser": true,
                "text": "Does Zach have any other friendships?\n",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes here is the friend of Zach besides Dan",
                "query": "SELECT * from personfriend where name = \"Zach\" and friend != \"Dan\"",
                "result": [
                    [
                        [
                            "name",
                            "friend",
                            "year"
                        ],
                        [
                            "Zach",
                            "Alice",
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM PersonFriend WHERE friend = 'Zach'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you. Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "department_management",
        "turns": [
            {
                "isuser": true,
                "text": "Which head's name has the substring 'Ha'? List the id and name",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The following table shows the ids and names of heads that have the substring 'Ha' in the name.",
                "query": "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'",
                "result": [
                    [
                        [
                            "head_ID",
                            "name"
                        ],
                        [
                            4,
                            "Dudley Hart"
                        ],
                        [
                            9,
                            "Pádraig Harrington"
                        ],
                        [
                            10,
                            "Franklin Langham"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'"
            },
            {
                "isuser": true,
                "text": "Who is head id 1?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Tiger Woods is the name of head id 1.",
                "query": "SELECT name FROM head WHERE head_id = 1",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Tiger Woods"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM head WHERE head_id = 1"
            },
            {
                "isuser": true,
                "text": "What is Tiger woods's born state",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Alabama is the born state of the head named Tiger woods .",
                "query": "SELECT born_state FROM head where name = \"Tiger Woods\"",
                "result": [
                    [
                        [
                            "born_state"
                        ],
                        [
                            "Alabama"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT born_state FROM head WHERE name = \"Tiger Woods\""
            },
            {
                "isuser": true,
                "text": "what is Tiger woods's age",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The age of the head named Tiger Woods is 67.",
                "query": "SELECT age  FROM head where name = \"Tiger Woods\"",
                "result": [
                    [
                        [
                            "age"
                        ],
                        [
                            67.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT age FROM head WHERE name = \"Tiger Woods\""
            },
            {
                "isuser": true,
                "text": "who is the oldest head",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The following table shows the information about the oldest head.",
                "query": "SELECT *  FROM head order by age desc limit 1",
                "result": [
                    [
                        [
                            "head_ID",
                            "name",
                            "born_state",
                            "age"
                        ],
                        [
                            3,
                            "K. J. Choi",
                            "Alabama",
                            69.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM head ORDER BY age DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "how many heads from Alabama? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 2 heads from Alabama.",
                "query": "SELECT count(*)  FROM head where born_state = \"Alabama\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM head WHERE born_state = \"Alabama\""
            }
        ]
    },
    {
        "db_name": "cre_Doc_Tracking_DB",
        "turns": [
            {
                "isuser": true,
                "text": "Hello!  Can you tell me which role code has the largest number of employees associated with it?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "ED is the role code with the largest number of employees",
                "query": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Role_Code"
                        ],
                        [
                            "ED"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Great!  Can you tell me how many employees have ED as their Role_code?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 7 employees with ED as their role code.",
                "query": "SELECT count(*) FROM Employees where role_code = \"ED\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Employees WHERE role_code = 'ED'"
            },
            {
                "isuser": true,
                "text": "Excellent!  Would you be able to provide me with a list of the names and genders of those 7 employees?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names and gender of employees with ED as their role code",
                "query": "SELECT employee_name,gender_MFU FROM Employees where role_code = \"ED\"",
                "result": [
                    [
                        [
                            "Employee_Name",
                            "Gender_MFU"
                        ],
                        [
                            "Stephanie",
                            "1"
                        ],
                        [
                            "Harley",
                            ""
                        ],
                        [
                            "Armani",
                            ""
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT employee_name, gender_mfu FROM Employees WHERE role_code = 'ED'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "small_bank_1",
        "turns": [
            {
                "isuser": true,
                "text": "What is the savings balance for Wang?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The total savings balance for Wang is 999999999.0",
                "query": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid where T1.name = \"Wang\"",
                "result": [
                    [
                        [
                            "sum(T2.balance)"
                        ],
                        [
                            999999999.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "Sorry, I cannot answer this question because the database does not contain the savings balance for Wang."
            },
            {
                "isuser": true,
                "text": "Is that balance more or less than for Brown?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Wang's total saving balance is more than that of Brown. The total savings balance for Brown is 200000.0",
                "query": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid where T1.name = \"Brown\"",
                "result": [
                    [
                        [
                            "sum(T2.balance)"
                        ],
                        [
                            200000.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "Sorry, I cannot answer this question because the database does not contain the savings balance for Brown."
            },
            {
                "isuser": true,
                "text": "Is there another balance available?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "I am sorry but I do not understand your question, please be more specific.",
                "query": "",
                "result": [],
                "predict_type": "SORRY",
                "predict": "Sorry, I cannot answer this question because the database does not contain any other balance information."
            },
            {
                "isuser": true,
                "text": "Is there another account name available?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "The following table shows all account names. For example, Brown, Wang, O'mahony.",
                "query": "SELECT name FROM accounts ",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Brown"
                        ],
                        [
                            "Wang"
                        ],
                        [
                            "O'mahony"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "Sorry, I cannot answer this question because the database does not contain any other account name information."
            },
            {
                "isuser": true,
                "text": "Is O'mahony's account balance closer in amount to Wang or Brown?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "O'mahony has an account balance closer to Brown's than to Wang's. Here are the saving balances for O'mahony, Wang, and Brown.",
                "query": "SELECT sum(T2.balance), T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  = T2.custid  where T1.name = \"O'mahony\" union SELECT sum(T2.balance), T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  = T2.custid  where T1.name = \"Wang\" union SELECT sum(T2.balance), T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  = T2.custid  where T1.name = \"Brown\" ",
                "result": [
                    [
                        [
                            "sum(T2.balance)",
                            "name"
                        ],
                        [
                            200000.0,
                            "Brown"
                        ],
                        [
                            230000.0,
                            "O'mahony"
                        ],
                        [
                            999999999.0,
                            "Wang"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "Sorry, I cannot answer this question because the database does not contain any information about the account balance for O'mahony."
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "party_host",
        "turns": [
            {
                "isuser": true,
                "text": "Which nations have hosts older than 45?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "United States has hosts older than 45",
                "query": "SELECT distinct Nationality FROM HOST WHERE Age  >  45 ",
                "result": [
                    [
                        [
                            "Nationality"
                        ],
                        [
                            "United States"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Nationality FROM Host WHERE Age  >  45"
            },
            {
                "isuser": true,
                "text": "Which nations have hosts younger than 35?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the nations that have hosts younger than 35",
                "query": "SELECT distinct Nationality FROM HOST WHERE Age < 35 ",
                "result": [
                    [
                        [
                            "Nationality"
                        ],
                        [
                            "Hungary"
                        ],
                        [
                            "United States"
                        ],
                        [
                            "Argentina"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Nationality FROM Host WHERE Age  <  35"
            },
            {
                "isuser": true,
                "text": "Which nation has hosts both older than 45 and younger than 35?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "United States has hosts both older than 45 and younger than 35",
                "query": "SELECT Nationality FROM HOST WHERE Age > 45 INTERSECT SELECT Nationality FROM HOST WHERE Age < 35",
                "result": [
                    [
                        [
                            "Nationality"
                        ],
                        [
                            "United States"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Nationality FROM Host WHERE Age  >  45 INTERSECT SELECT Nationality FROM Host WHERE Age  <  35"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "hr_1",
        "turns": [
            {
                "isuser": true,
                "text": "Which departments get a commission percentage?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of the departments that get a commission percentage.",
                "query": "SELECT *  FROM employees WHERE commission_pct != \"null\"",
                "result": [
                    [
                        [
                            "EMPLOYEE_ID",
                            "FIRST_NAME",
                            "LAST_NAME",
                            "EMAIL",
                            "PHONE_NUMBER",
                            "HIRE_DATE",
                            "JOB_ID",
                            "SALARY",
                            "COMMISSION_PCT",
                            "MANAGER_ID",
                            "DEPARTMENT_ID"
                        ],
                        [
                            100,
                            "Steven",
                            "King",
                            "SKING",
                            "515.123.4567",
                            "1987-06-17",
                            "AD_PRES",
                            24000,
                            0,
                            0,
                            90
                        ],
                        [
                            101,
                            "Neena",
                            "Kochhar",
                            "NKOCHHAR",
                            "515.123.4568",
                            "1987-06-18",
                            "AD_VP",
                            17000,
                            0,
                            100,
                            90
                        ],
                        [
                            102,
                            "Lex",
                            "De Haan",
                            "LDEHAAN",
                            "515.123.4569",
                            "1987-06-19",
                            "AD_VP",
                            17000,
                            0,
                            100,
                            90
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT department_name FROM departments WHERE manager_id IN (SELECT employee_id FROM employees WHERE commission_pct > 0)"
            },
            {
                "isuser": true,
                "text": "How many employees in these departments get a commission percentage?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of employees in these departments that get a commission percentage is 107.",
                "query": "SELECT count(*)  FROM employees WHERE commission_pct != \"null\" ",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            107
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM employees WHERE department_id IN (SELECT department_id FROM departments WHERE manager_id IN (SELECT employee_id FROM employees WHERE commission_pct > 0))"
            },
            {
                "isuser": true,
                "text": "By department, display average salary of employees who get a commission percentage",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of the average salary of employees for each department who gets a commission percentage. For example, the average salary of department 0 is 7000.0.",
                "query": "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id",
                "result": [
                    [
                        [
                            "DEPARTMENT_ID",
                            "AVG(salary)"
                        ],
                        [
                            0,
                            7000.0
                        ],
                        [
                            10,
                            4400.0
                        ],
                        [
                            20,
                            9500.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT department_name, AVG(salary) AS avg_salary FROM employees WHERE commission_pct > 0 GROUP BY department_id"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "driving_school",
        "turns": [
            {
                "isuser": true,
                "text": "What is the total number of staff members?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The total number of staff members is 15. ",
                "query": "SELECT count(*) from staff",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM staff"
            },
            {
                "isuser": true,
                "text": "How many of them are females?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry, I can't answer that how many of the staff members are female given the table information. ",
                "query": "",
                "result": [],
                "predict_type": "SORRY",
                "predict": "SELECT count(*) FROM staff WHERE middle_name = 'Jane'"
            },
            {
                "isuser": true,
                "text": "Is there a staff member with the first name \"Janessa\"?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes, there is staff member with the first name \"Janessa.\" Their staff information is shown in the result table.  ",
                "query": "SELECT * from staff where first_name = \"Janessa\"",
                "result": [
                    [
                        [
                            "staff_id",
                            "staff_address_id",
                            "nickname",
                            "first_name",
                            "middle_name",
                            "last_name",
                            "date_of_birth",
                            "date_joined_staff",
                            "date_left_staff"
                        ],
                        [
                            1,
                            14,
                            "thompson.constantin",
                            "Janessa",
                            "Amara",
                            "Sawayn",
                            "2010-12-08 16:55:14",
                            "2017-04-27 03:21:26",
                            "2018-03-23 22:53:12"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM staff WHERE first_name = 'Janessa'"
            },
            {
                "isuser": true,
                "text": "What is the last name of the staff member with the first name \"Janessa\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The last name of the staff member with the first name \"Janessa\" is Sawayn. ",
                "query": "SELECT last_name from staff where first_name = \"Janessa\"",
                "result": [
                    [
                        [
                            "last_name"
                        ],
                        [
                            "Sawayn"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT last_name FROM staff WHERE first_name = 'Janessa'"
            },
            {
                "isuser": true,
                "text": "What is the birthday of the staff member with the first and last name as Janessa and Sawayn?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The birthday of the staff member with first name Janessa and last name Sawayn is 2010-12-08 16:55:14. ",
                "query": "SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";",
                "result": [
                    [
                        [
                            "date_of_birth"
                        ],
                        [
                            "2010-12-08 16:55:14"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT date_of_birth FROM staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn'"
            },
            {
                "isuser": true,
                "text": "Thanks.",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, good bye. ",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome."
            }
        ]
    },
    {
        "db_name": "workshop_paper",
        "turns": [
            {
                "isuser": true,
                "text": "list the authors have submissions",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of authors who have submissions.",
                "query": "SELECT Author FROM submission",
                "result": [
                    [
                        [
                            "Author"
                        ],
                        [
                            "Steve Niehaus"
                        ],
                        [
                            "Sammy Green"
                        ],
                        [
                            "Sherman Smith"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.Author FROM Submission AS T1 JOIN Acceptance AS T2 ON T1.Submission_ID  =  T2.Submission_ID WHERE T2.Result  =  \"Accepted\""
            },
            {
                "isuser": true,
                "text": "show me the list of authors who have submissions to workshop.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of different authors who have some submissions.",
                "query": "SELECT distinct T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID",
                "result": [
                    [
                        [
                            "Author"
                        ],
                        [
                            "Steve Niehaus"
                        ],
                        [
                            "Sammy Green"
                        ],
                        [
                            "Sherman Smith"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.Author FROM Submission AS T1 JOIN Acceptance AS T2 ON T1.Submission_ID  =  T2.Submission_ID WHERE T2.Result  =  \"Accepted\""
            },
            {
                "isuser": true,
                "text": "list the authors who have submissions to more than one workshop.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The author who has submissions the more than one workshop is Sammy Green.",
                "query": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1",
                "result": [
                    [
                        [
                            "Author"
                        ],
                        [
                            "Sammy Green"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.Author FROM Submission AS T1 JOIN Acceptance AS T2 ON T1.Submission_ID  =  T2.Submission_ID WHERE T2.Result  =  \"Accepted\" GROUP BY T1.Author HAVING COUNT(*)  >  1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "products_gen_characteristics",
        "turns": [
            {
                "isuser": true,
                "text": "How many characteristics does the product named \"sesame\" have?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 2 characteristics that the product named \"sesame\" has",
                "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  \"sesame\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Product_Characteristics WHERE product_id IN (SELECT product_id FROM Products WHERE product_name = \"sesame\")"
            },
            {
                "isuser": true,
                "text": "What are the names of those?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry, we don't have names for characteristics. Please ask something else.",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT product_name FROM Products WHERE product_name IN (SELECT product_name FROM Products WHERE product_name = \"sesame\")"
            },
            {
                "isuser": true,
                "text": "What are the characteristic ids of those? Sorry!",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the id of characteristics that the product named \"sesame\" has",
                "query": "SELECT characteristic_id FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  \"sesame\"",
                "result": [
                    [
                        [
                            "characteristic_id"
                        ],
                        [
                            12
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT characteristic_id FROM Product_Characteristics WHERE product_id IN (SELECT product_id FROM Products WHERE product_name = \"sesame\")"
            },
            {
                "isuser": true,
                "text": "What is sesame's typical selling price?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "68205825.7 is the typical selling price of the product named sesame.",
                "query": "SELECT typical_selling_price from products where product_name = \"sesame\"",
                "result": [
                    [
                        [
                            "typical_selling_price"
                        ],
                        [
                            "68205825.7"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT typical_selling_price FROM Products WHERE product_name = \"sesame\""
            },
            {
                "isuser": true,
                "text": "What the most common characteristic id?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "2 is the most common characteristic id.",
                "query": "SELECT characteristic_id from product_characteristics group by characteristic_id order by count(*) desc limit 1",
                "result": [
                    [
                        [
                            "characteristic_id"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT characteristic_id, count(*) AS count FROM Product_Characteristics GROUP BY characteristic_id ORDER BY count DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the least common product category code?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Spices is the least common product category code",
                "query": "SELECT product_category_code from Products group by product_category_code order by count(*) limit 1",
                "result": [
                    [
                        [
                            "product_category_code"
                        ],
                        [
                            "Spices"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product_category_code FROM Products GROUP BY product_category_code ORDER BY count(*) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "thanks.bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "wine_1",
        "turns": [
            {
                "isuser": true,
                "text": "Show the country of appelations Alexander Valley?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The county corresponding to the appelation Alexander Valley is Sonoma.",
                "query": "SELECT county FROM APPELLATIONS WHERE appelation = 'Alexander Valley'",
                "result": [
                    [
                        [
                            "County"
                        ],
                        [
                            "Sonoma"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT County FROM appellations WHERE Appelation = \"Alexander Valley\""
            },
            {
                "isuser": true,
                "text": "Show the maximum price of wins from the appelations in central Coast area and produced before thebyear of 2005?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The maximum price of wines with appelations from Central Coast region with year less than 2005 is 60.",
                "query": "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"Central Coast\" AND T2.year  <  2005",
                "result": [
                    [
                        [
                            "max(T2.Price)"
                        ],
                        [
                            60
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT MAX(Price) FROM WINE WHERE Appelation IN (SELECT Appelation FROM APPELLATIONS WHERE Area = \"Central Coast\") AND Year < 2005"
            },
            {
                "isuser": true,
                "text": "Show the country of appelations Amador County?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The county corresponding to Amador County appelation is Amador.",
                "query": "SELECT county FROM APPELLATIONS WHERE appelation = 'Amador County'",
                "result": [
                    [
                        [
                            "County"
                        ],
                        [
                            "Amador"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT County FROM appellations WHERE Appelation = \"Amador County\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you! Goodbye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "roller_coaster",
        "turns": [
            {
                "isuser": true,
                "text": "How many length of park Kemah Boardwalk?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean to ask for the length of the park with name Kemah Boardwalk?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT Length FROM roller_coaster WHERE Name = \"Kemah Boardwalk\""
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The length of the roller coaster in the park Kemah Boardwalk is 3236.0.",
                "query": "SELECT Length FROM roller_coaster WHERE Park = \"Kemah Boardwalk\"",
                "result": [
                    [
                        [
                            "Length"
                        ],
                        [
                            3236.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Length FROM roller_coaster WHERE Name = \"Kemah Boardwalk\""
            },
            {
                "isuser": true,
                "text": "Find the status of Happy Valley.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The status of the roller coaster in park named Happy Valley is Operating.",
                "query": "SELECT Status FROM roller_coaster WHERE Park = \"Happy Valley\"",
                "result": [
                    [
                        [
                            "Status"
                        ],
                        [
                            "Operating"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Status FROM roller_coaster WHERE Name = \"Happy Valley\""
            },
            {
                "isuser": true,
                "text": "What are the country id of Hades 360?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The country id of the roller coster named Hades 360 is 1.",
                "query": "SELECT Country_ID FROM roller_coaster WHERE Name = \"Hades 360\"",
                "result": [
                    [
                        [
                            "Country_ID"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Country_ID FROM roller_coaster WHERE Name = \"Hades 360\""
            },
            {
                "isuser": true,
                "text": "What are the speeds of the longest roller coaster?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The speed of the longest roller coaster is 67.",
                "query": "SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Speed"
                        ],
                        [
                            "67"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Speed FROM roller_coaster ORDER BY Length DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Good bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "gas_company",
        "turns": [
            {
                "isuser": true,
                "text": "Please show me the headquarters with at least two companies in the banking industry?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is no such headquarter with at least two companies in the banking industry",
                "query": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2",
                "result": [
                    [
                        [
                            "Headquarters"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT headquarters FROM company WHERE main_industry = \"Banking\" GROUP BY headquarters HAVING count(*) >= 2"
            },
            {
                "isuser": true,
                "text": "What companies are in the banking industry?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the companies in the bank industry.",
                "query": "SELECT company from company where main_industry = \"Banking\"",
                "result": [
                    [
                        [
                            "Company"
                        ],
                        [
                            "Industrial and Commercial Bank of China"
                        ],
                        [
                            "HSBC"
                        ],
                        [
                            "Wells Fargo"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT company FROM company WHERE main_industry = \"Banking\""
            },
            {
                "isuser": true,
                "text": "Where are those companies' headquarters located?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the companies in the bank industry and their corresponding headquarters. ",
                "query": "SELECT company,headquarters from company where main_industry = \"Banking\"",
                "result": [
                    [
                        [
                            "Company",
                            "Headquarters"
                        ],
                        [
                            "Industrial and Commercial Bank of China",
                            "China"
                        ],
                        [
                            "HSBC",
                            "UK"
                        ],
                        [
                            "Wells Fargo",
                            "USA"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT headquarters FROM company WHERE main_industry = \"Banking\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "thanks. bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "tracking_orders",
        "turns": [
            {
                "isuser": true,
                "text": "How many orders are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 15 orders in total.",
                "query": "SELECT count(*) FROM orders",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Orders"
            },
            {
                "isuser": true,
                "text": "How many different customers are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 15 customers.",
                "query": "SELECT count(*) FROM Customers",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(DISTINCT customer_id) FROM Customers"
            },
            {
                "isuser": true,
                "text": "What is the name of the customer who has the largest number of orders?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the name of the customer who has the largest number of orders is George.",
                "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "customer_name"
                        ],
                        [
                            "George"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_name FROM Customers WHERE customer_id IN (SELECT customer_id FROM Orders GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "googbye. but please ask inner-related questions next time. otherwise, you won't be paid.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "insurance_and_eClaims",
        "turns": [
            {
                "isuser": true,
                "text": "What is the name of the customer who has made the minimum amount of payment in one claim?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the name of the customer who has made the minimum paid amount  in one claim is Mrs. Hanna Willms",
                "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)",
                "result": [
                    [
                        [
                            "Customer_Details"
                        ],
                        [
                            "Mrs. Hanna Willms"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Customer_Details FROM Customers AS T1 JOIN Claim_Headers AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Customer_Details ORDER BY sum(T2.Amount_Piad) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the amount claimed for this customer?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the claimed amount of the customer who has made the minimum paid amount in one claim is 789.19",
                "query": "SELECT t1.amount_claimed FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)",
                "result": [
                    [
                        [
                            "Amount_Claimed"
                        ],
                        [
                            789.19
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT sum(T2.Amount_Claimed) FROM Customers AS T1 JOIN Claim_Headers AS T2 ON T1.Customer_ID  =  T2.Customer_ID WHERE T1.Customer_Details = 'Mrs. H. R. Kumar'"
            },
            {
                "isuser": true,
                "text": "Can you also give me  the name of the customer who has made the maximum amount of payment in one claim?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The customer detail of the  customer who has made the maximum amount of payment in one claim is Lauriane Ferry PhD",
                "query": "SELECT t3.Customer_Details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT max(amount_piad) FROM claim_headers)",
                "result": [
                    [
                        [
                            "Customer_Details"
                        ],
                        [
                            "Lauriane Ferry PhD"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Customer_Details FROM Customers AS T1 JOIN Claim_Headers AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Customer_Details ORDER BY sum(T2.Amount_Piad) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Hmmm. Can you please give me the claimed amount for this customer",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the claimed amount of the customer who has made the maximum paid amount in one claim is 818.15",
                "query": "SELECT t1.amount_claimed FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT max(amount_piad) FROM claim_headers)",
                "result": [
                    [
                        [
                            "Amount_Claimed"
                        ],
                        [
                            818.15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT sum(T2.Amount_Claimed) FROM Customers AS T1 JOIN Claim_Headers AS T2 ON T1.Customer_ID  =  T2.Customer_ID WHERE T1.Customer_Details = 'Mrs. H. R. Kumar'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "concert_singer",
        "turns": [
            {
                "isuser": true,
                "text": "what is the name of the stadium that does not have a concert in year 2014?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the name of the stadium that does not have a concert in year 2014",
                "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Balmoor"
                        ],
                        [
                            "Bayview Stadium"
                        ],
                        [
                            "Forthbank Stadium"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)"
            },
            {
                "isuser": true,
                "text": "what is the capacity of Balmoor?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the capacity of Balmoor is 4000",
                "query": "select \tCapacity from stadium where name = 'Balmoor'",
                "result": [
                    [
                        [
                            "Capacity"
                        ],
                        [
                            4000
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT capacity FROM stadium WHERE name = 'Balmoor'"
            },
            {
                "isuser": true,
                "text": "what is the theme of Balmoor?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the theme of Balmoor is Happy Tonight",
                "query": "select T2.Theme from stadium as T1 join concert as T2 on T1.Stadium_ID = T2.Stadium_ID where T1.Name = 'Balmoor'",
                "result": [
                    [
                        [
                            "Theme"
                        ],
                        [
                            "Happy Tonight"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT theme FROM concert WHERE concert_id = 2"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "wine_1",
        "turns": [
            {
                "isuser": true,
                "text": "find the distinct names of all wines that have prices higher than some wins from john anthony winery\n",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "The  names of  all  wines  that have prices higher than some wines from John Anthony winery  are  shown  in the  table \n\n",
                "query": "SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"John Anthony\")",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Old Kraft Vineyard"
                        ],
                        [
                            "Giana"
                        ],
                        [
                            "Black Chicken"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT name FROM WINE WHERE price > (SELECT MAX(price) FROM WINE WHERE winery = \"John Anthony Winery\")"
            },
            {
                "isuser": true,
                "text": "out of those show me prices higher than 30\n",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "The names of all wines that have prices both higher than some wines from John Anthony winery  and  higher  than  30 are shown in the table",
                "query": "SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"John Anthony\") and  Price>30",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Old Kraft Vineyard"
                        ],
                        [
                            "Giana"
                        ],
                        [
                            "Black Chicken"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name, price FROM WINE WHERE price > 30"
            },
            {
                "isuser": true,
                "text": "One last question. out of those show me cases higher than 300\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names of all wines that have prices both higher than some wines from John Anthony winery and higher than 300 are shown in the table",
                "query": "SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"John Anthony\") and  Price>300",
                "result": [
                    [
                        [
                            "Name"
                        ]
                    ],
                    [
                        [
                            "Name"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name, cases FROM WINE WHERE cases > 300"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Welcome and goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "cinema",
        "turns": [
            {
                "isuser": true,
                "text": "How many cinemas are there in total?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 10 cinema. ",
                "query": "SELECT count(*) from cinema",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            10
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM cinema"
            },
            {
                "isuser": true,
                "text": "What is the average capacity?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average capacity of all the cinemas is 433.6.",
                "query": "SELECT avg(capacity) from cinema",
                "result": [
                    [
                        [
                            "avg(capacity)"
                        ],
                        [
                            433.6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(capacity) FROM cinema"
            },
            {
                "isuser": true,
                "text": "How many cinemas have above average capacity?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 2 cinemas that have above average capacity. ",
                "query": "SELECT count(*) from cinema where capacity >  (select avg(capacity) from cinema)",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM cinema WHERE capacity > (SELECT avg(capacity) FROM cinema)"
            },
            {
                "isuser": true,
                "text": "What is the name and location of the 2 cinemas with above average capacity?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name and location of the 2 cinemas with above average capacity are shown in the result table. ",
                "query": "SELECT name, location from cinema where capacity >  (select avg(capacity) from cinema)",
                "result": [
                    [
                        [
                            "Name",
                            "Location"
                        ],
                        [
                            "Codling",
                            "County Wicklow"
                        ],
                        [
                            "Mount Callan",
                            "County Clare"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name ,  location FROM cinema WHERE capacity  >  (SELECT avg(capacity) FROM cinema)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks you, would you like to ask a few more questions?",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "No thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, good bye. ",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "I apologize if my previous response was not helpful. Is there anything else I can assist you with?"
            }
        ]
    },
    {
        "db_name": "local_govt_mdm",
        "turns": [
            {
                "isuser": true,
                "text": "How many master customer ID numbers are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are 9 customer ID in total",
                "query": "SELECT count(master_customer_id) FROM Customer_Master_Index ",
                "result": [
                    [
                        [
                            "count(master_customer_id)"
                        ],
                        [
                            9
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Customer_Master_Index"
            },
            {
                "isuser": true,
                "text": "What are the master index IDs for all except whose detail includes Schmidt, Kertzmann and Lubowitz?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "this shows the master index IDs for all except whose detail includes Schmidt, Kertzmann and Lubowitz",
                "query": "SELECT \tmaster_customer_id FROM  Customer_Master_Index where cmi_details != ('Schmidt, Kertzmann and Lubowitz')",
                "result": [
                    [
                        [
                            "master_customer_id"
                        ],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT master_customer_id FROM Customer_Master_Index WHERE cmi_details NOT LIKE '%Schmidt%' AND cmi_details NOT LIKE '%Kertzmann%' AND cmi_details NOT LIKE '%Lubowitz%'"
            },
            {
                "isuser": true,
                "text": "What are their cmi cross reference IDs?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here is the cmi cross reference IDs of customer whose master index IDs for all except whose detail includes Schmidt, Kertzmann and Lubowitz",
                "query": "SELECT \tt1.master_customer_id,cmi_cross_ref_id FROM  Customer_Master_Index as t1 join CMI_Cross_References as t2 on t1.master_customer_id=t2.master_customer_id where t1.cmi_details not in ('Schmidt, Kertzmann and Lubowitz')",
                "result": [
                    [
                        [
                            "master_customer_id",
                            "cmi_cross_ref_id"
                        ],
                        [
                            5,
                            4
                        ],
                        [
                            1,
                            8
                        ],
                        [
                            5,
                            41
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT cmi_cross_ref_id FROM CMI_Cross_References WHERE master_customer_id IN (SELECT master_customer_id FROM Customer_Master_Index WHERE cmi_details NOT LIKE '%Schmidt%' AND cmi_details NOT LIKE '%Kertzmann%' AND cmi_details NOT LIKE '%Lubowitz%')"
            },
            {
                "isuser": true,
                "text": "What are their respective source system codes?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "this shows the source_system_code of customers whose master index IDs for all except whose detail includes Schmidt, Kertzmann and Lubowitz",
                "query": "SELECT \tt1.master_customer_id,cmi_cross_ref_id,\tsource_system_code  FROM  Customer_Master_Index as t1 join CMI_Cross_References as t2 on t1.master_customer_id=t2.master_customer_id where t1.cmi_details != ('Schmidt, Kertzmann and Lubowitz')",
                "result": [
                    [
                        [
                            "master_customer_id",
                            "cmi_cross_ref_id",
                            "source_system_code"
                        ],
                        [
                            5,
                            4,
                            "Parking"
                        ],
                        [
                            1,
                            8,
                            "Rent"
                        ],
                        [
                            5,
                            41,
                            "Benefits"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT source_system_code FROM CMI_Cross_References WHERE master_customer_id IN (SELECT master_customer_id FROM Customer_Master_Index WHERE cmi_details NOT LIKE '%Schmidt%' AND cmi_details NOT LIKE '%Kertzmann%' AND cmi_details NOT LIKE '%Lubowitz%')"
            },
            {
                "isuser": true,
                "text": "What are the renters arrears tax IDs associated with them?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "this shows  the renting arrears tax ids related to the customers whose master index IDs for all except whose detail includes Schmidt, Kertzmann and Lubowitz",
                "query": "SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id  =  T2.master_customer_id WHERE T3.cmi_details != 'Schmidt ,  Kertzmann and Lubowitz'",
                "result": [
                    [
                        [
                            "council_tax_id"
                        ],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT council_tax_id FROM Rent_Arrears WHERE council_tax_id IN (SELECT council_tax_id FROM Council_Tax WHERE council_tax_id IN (SELECT council_tax_id FROM Rent_Arrears WHERE council_tax_id IN (SELECT council_tax_id FROM Council_Tax WHERE council_tax_id IN (SELECT council_tax_id FROM Rent_Arrears WHERE council_tax_id IN (SELECT council_tax_id FROM Council_Tax WHERE council_tax_id IN (SELECT council_tax_id FROM Rent_Arrears WHERE council_tax_id IN (SELECT council_tax_id FROM Council_Tax WHERE council_tax_id IN (SELECT council_tax_id FROM Rent_Arrears WHERE council_tax_id IN (SELECT council_tax_id FROM Council_Tax WHERE council_tax_id IN (SELECT council_tax_id FROM Rent_Arrears WHERE council_tax_id IN (SELECT council_tax_id FROM Council_Tax WHERE council_tax_id IN (SELECT council_tax_id FROM Rent_Arrears WHERE council_tax_id IN (SELECT council_tax_id FROM Council_Tax WHERE council_tax_id IN (SELECT council_tax_id FROM Rent_Arrears WHERE council_tax_id IN (SELECT council_tax_id FROM Council_Tax WHERE council_tax_id IN (SELECT council_tax_id FROM Rent_Arrears WHERE council_tax_id IN (SELECT council_tax_id FROM Council_Tax WHERE council_tax_id IN (SELECT council_tax_id FROM Rent_Arrears WHERE council_tax_id IN (SELECT council_tax_id FROM Council_Tax WHERE council_tax_id IN (SELECT council_tax_id FROM Rent_Arrears WHERE council_tax_id IN (SELECT council_tax_id FROM Council_Tax WHERE council_tax_id IN (SELECT council_tax_id FROM Rent_Arrears WHERE council_tax_id IN (SELECT council_tax_id FROM Council_Tax WHERE council_tax_id IN (SELECT council_tax_id FROM Rent_Arrears WHERE council_tax_id IN"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome，goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "store_product",
        "turns": [
            {
                "isuser": true,
                "text": "Could you please find the products with the max page size as \"A4\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the products with the max page size as \"A4\"",
                "query": "SELECT product FROM product WHERE max_page_size  =  \"A4\"",
                "result": [
                    [
                        [
                            "product"
                        ],
                        [
                            "Fujitsu fi-6130 A4 Series Scanner"
                        ],
                        [
                            "Plustek MobileOffice D28 Corporate"
                        ],
                        [
                            "Xerox Travel Scanner 100"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product FROM product WHERE max_page_size = \"A4\""
            },
            {
                "isuser": true,
                "text": "Could you please find the products with the pages per minute color smaller than 5?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the products with the pages per minute color smaller than 5",
                "query": "SELECT product FROM product WHERE pages_per_minute_color  <  5",
                "result": [
                    [
                        [
                            "product"
                        ],
                        [
                            "Xerox Travel Scanner 100"
                        ],
                        [
                            "ScanShell 3000DN"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product FROM product WHERE pages_per_minute_color < 5"
            },
            {
                "isuser": true,
                "text": "Could you please find the products with the max page size as \"A4\" and with the pages per minute color smaller than 5?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the products with max page size as \"A4\" and pages per minute color smaller than 5.",
                "query": "SELECT product FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5",
                "result": [
                    [
                        [
                            "product"
                        ],
                        [
                            "Xerox Travel Scanner 100"
                        ],
                        [
                            "ScanShell 3000DN"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product FROM product WHERE max_page_size = \"A4\" AND pages_per_minute_color < 5"
            },
            {
                "isuser": true,
                "text": "What are the interfaces of those products?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the products and corresponding interfaces with max page size as \"A4\" and pages per minute color smaller than 5",
                "query": "SELECT product,interface FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5",
                "result": [
                    [
                        [
                            "product",
                            "interface"
                        ],
                        [
                            "Xerox Travel Scanner 100",
                            "USB 2.0"
                        ],
                        [
                            "ScanShell 3000DN",
                            "USB 2.0"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT interface FROM product WHERE max_page_size = \"A4\" AND pages_per_minute_color < 5"
            },
            {
                "isuser": true,
                "text": "What are the dimensions of those products?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the products and corresponding dimensions with max page size as \"A4\" and pages per minute color smaller than 5 ",
                "query": "SELECT product,dimensions FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5",
                "result": [
                    [
                        [
                            "product",
                            "dimensions"
                        ],
                        [
                            "Xerox Travel Scanner 100",
                            "289 x 51 x 38"
                        ],
                        [
                            "ScanShell 3000DN",
                            "300 x 50 x 45"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT dimensions FROM product WHERE max_page_size = \"A4\" AND pages_per_minute_color < 5"
            },
            {
                "isuser": true,
                "text": "Could you please find the products with the pages per minute color larger than 5?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the products with the pages per minute color larger than 5",
                "query": "SELECT product FROM product WHERE pages_per_minute_color  > 5",
                "result": [
                    [
                        [
                            "product"
                        ],
                        [
                            "Fujitsu fi-6130 A4 Series Scanner"
                        ],
                        [
                            "Plustek MobileOffice D28 Corporate"
                        ],
                        [
                            "Canon imageFORMULA P-150"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product FROM product WHERE pages_per_minute_color > 5"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks. bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "tracking_share_transactions",
        "turns": [
            {
                "isuser": true,
                "text": "What are all of the lots?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are all details of the lots",
                "query": "select * from Lots",
                "result": [
                    [
                        [
                            "lot_id",
                            "investor_id",
                            "lot_details"
                        ],
                        [
                            1,
                            13,
                            "r"
                        ],
                        [
                            2,
                            16,
                            "z"
                        ],
                        [
                            3,
                            10,
                            "s"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT lot_details FROM Lots"
            },
            {
                "isuser": true,
                "text": "Which lots are not used in any transactions?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "do you mean the id of lots or the details of lot",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT lot_details FROM Lots WHERE lot_id NOT IN (SELECT lot_id FROM transactions_lots)"
            },
            {
                "isuser": true,
                "text": "The id of the lots please.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the id of the lots which are not used in any transactions",
                "query": "SELECT lot_id FROM Lots EXCEPT SELECT T1.lot_id FROM Lots AS T1 JOIN transactions_lots AS T2 ON T1.lot_id  =  T2.lot_id",
                "result": [
                    [
                        [
                            "lot_id"
                        ],
                        [
                            2
                        ],
                        [
                            5
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT lot_id FROM Lots WHERE lot_id NOT IN (SELECT lot_id FROM transactions_lots)"
            },
            {
                "isuser": true,
                "text": "What are the details of the lots which aren't used in any transactions?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the details of the lots which aren't used in any transactions",
                "query": "SELECT lot_details FROM Lots EXCEPT SELECT T1.lot_details FROM Lots AS T1 JOIN transactions_lots AS T2 ON T1.lot_id  =  T2.lot_id",
                "result": [
                    [
                        [
                            "lot_details"
                        ],
                        [
                            "m"
                        ],
                        [
                            "q"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT lot_details FROM Lots WHERE lot_id NOT IN (SELECT lot_id FROM transactions_lots)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "election",
        "turns": [
            {
                "isuser": true,
                "text": "Who are the delegates on the Appropriations committee?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table shows all the names of the delegates on the committee named \"Appropriations\".",
                "query": "select Delegate from election where Committee='Appropriations'",
                "result": [
                    [
                        [
                            "Delegate"
                        ],
                        [
                            "Bates, Gail H. Gail H. Bates"
                        ],
                        [
                            "DeBoy, Steven J. Sr. Steven J. DeBoy, Sr."
                        ],
                        [
                            "Guzzone, Guy Guy Guzzone"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT Delegate FROM election WHERE Committee = \"Appropriations\""
            },
            {
                "isuser": true,
                "text": "What counties are they from?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table that shows all the counties of the delegates on the committee named \"Appropriations\".",
                "query": "select T1.County_name from county AS T1 JOIN election AS T2 where T1.County_Id=District and T2.Committee='Appropriations'",
                "result": [
                    [
                        [
                            "County_name"
                        ],
                        [
                            "Howard"
                        ],
                        [
                            "Baltimore County"
                        ],
                        [
                            "Mansfield"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT County_name FROM county WHERE County_id IN (SELECT District FROM election WHERE Committee = \"Appropriations\")"
            },
            {
                "isuser": true,
                "text": "What districts are they from?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table that shows all the districts of the delegates on the committee named \"Appropriations\".",
                "query": "select District from election where Committee='Appropriations'",
                "result": [
                    [
                        [
                            "District"
                        ],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT District FROM election WHERE Committee = \"Appropriations\""
            },
            {
                "isuser": true,
                "text": "What are the populations of the counties they come from, please?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table that shows the population of the counties for the delegates on the committee named \"Appropriations\".",
                "query": "select T1.Population from county AS T1 JOIN election AS T2 where T1.County_Id=District and T2.Committee='Appropriations'",
                "result": [
                    [
                        [
                            "Population"
                        ],
                        [
                            21000.0
                        ],
                        [
                            90000.0
                        ],
                        [
                            87200.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Population FROM county WHERE County_id IN (SELECT District FROM election WHERE Committee = \"Appropriations\")"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "driving_school",
        "turns": [
            {
                "isuser": true,
                "text": "Which city has most number of customers?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "South Richieport is the city that has the most number of customers.",
                "query": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;",
                "result": [
                    [
                        [
                            "city"
                        ],
                        [
                            "South Richieport"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "How many customers does it have?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the city that has the most number of customers has 4 customers.",
                "query": "SELECT count(*) FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Customers"
            },
            {
                "isuser": true,
                "text": "Give me the names of those customers",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the first and last names of customers in the city that has the most number of customers",
                "query": "select T1.first_name, T1.last_name from customers as T1 join addresses as T2 on T2.address_id =  T1.customer_address_id where T2.city = (SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1)",
                "result": [
                    [
                        [
                            "first_name",
                            "last_name"
                        ],
                        [
                            "Genevieve",
                            "Terry"
                        ],
                        [
                            "Clara",
                            "Ortiz"
                        ],
                        [
                            "Dianna",
                            "Trantow"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name, last_name FROM Customers"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "flight_1",
        "turns": [
            {
                "isuser": true,
                "text": "What are the names and distances of aircraft that have more than 5000 distance?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of the names and distances of aircraft that have more than 5000 distance",
                "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 ",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Boeing 767-400ER"
                        ],
                        [
                            "Boeing 747-400"
                        ],
                        [
                            "Airbus A340-300"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name ,  distance FROM Aircraft WHERE distance  >  5000"
            },
            {
                "isuser": true,
                "text": "What are the names and distances of aircraft that have more than 5000 distance and there are at least 5 people who have its certificate?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of the names and distances of aircraft that have more than 5000 distance and there are at least 5 people who have its certificate.",
                "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Boeing 747-400"
                        ],
                        [
                            "Lockheed L1011"
                        ],
                        [
                            "Boeing 777-300"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name ,  distance FROM Aircraft WHERE distance  >  5000 AND aid IN (SELECT aid FROM Certificate GROUP BY aid HAVING count(*) >= 5)"
            },
            {
                "isuser": true,
                "text": "What is the employee ID of the employee who flew the longest distance?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the employee ID of the employee who flew the longest distance is 142519864",
                "query": "SELECT t1.eid FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid ORDER BY t2.distance desc limit 1",
                "result": [
                    [
                        [
                            "eid"
                        ],
                        [
                            142519864
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT eid FROM Flight GROUP BY eid ORDER BY distance DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks! Have a good night!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "Goodbye!"
            }
        ]
    },
    {
        "db_name": "soccer_2",
        "turns": [
            {
                "isuser": true,
                "text": "Which colleges students played in the try out in striker position?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "FSU's colleges students played in the try out in striker position.",
                "query": "select cName from Tryout where pPos = 'striker'",
                "result": [
                    [
                        [
                            "cName"
                        ],
                        [
                            "FSU"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT cName FROM tryout WHERE pPos = \"Striker\""
            },
            {
                "isuser": true,
                "text": "And in which state is it located? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The college that has students play as a striker in the try out is located in FL.",
                "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'striker'",
                "result": [
                    [
                        [
                            "state"
                        ],
                        [
                            "FL"
                        ]
                    ]
                ],
                "predict_type": "UNKNOWN",
                "predict": "SELECT DISTINCT state FROM college WHERE cName IN (SELECT DISTINCT cName FROM tryout WHERE pPos = \"Striker\")"
            },
            {
                "isuser": true,
                "text": "How about it's enrollment number? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The enrollment number of the college that has students play as a striker in the try out is 19000.",
                "query": "SELECT T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'striker'",
                "result": [
                    [
                        [
                            "enr"
                        ],
                        [
                            19000
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT enr FROM college WHERE cName IN (SELECT DISTINCT cName FROM tryout WHERE pPos = \"Striker\")"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "phone_market",
        "turns": [
            {
                "isuser": true,
                "text": "How many different markets are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 4 different markets.",
                "query": "select count(distinct market_id) from phone_market",
                "result": [
                    [
                        [
                            "count(distinct(market_id))"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(DISTINCT Market_ID) FROM market"
            },
            {
                "isuser": true,
                "text": "How many different phones are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 5 different phones.",
                "query": "select count(distinct name) from phone",
                "result": [
                    [
                        [
                            "count(distinct(name))"
                        ],
                        [
                            5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(DISTINCT Phone_ID) FROM phone"
            },
            {
                "isuser": true,
                "text": "Which phone is sold in the most different markets?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "IPhone 5s is sold in the most different markets.",
                "query": "select T1.name from phone as T1 join phone_market as T2 on T1.phone_id = T2.phone_id group by T1.phone_id order by count(*) desc limit 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "IPhone 5s"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Phone_ID FROM phone_market GROUP BY Phone_ID ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "How many phones are not available in any markets?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is only one phone not available in any markets",
                "query": "SELECT count(Name) FROM phone WHERE Phone_id NOT IN (SELECT Phone_ID FROM phone_market)",
                "result": [
                    [
                        [
                            "count(Name)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM phone WHERE Phone_ID NOT IN (SELECT Phone_ID FROM phone_market)"
            },
            {
                "isuser": true,
                "text": "What is the name of that phone?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "IPhone 6 is the phone not available in any markets",
                "query": "SELECT Name FROM phone WHERE Phone_id NOT IN (SELECT Phone_ID FROM phone_market)",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "IPhone 6"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM phone WHERE Phone_ID NOT IN (SELECT Phone_ID FROM phone_market)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "dog_kennels",
        "turns": [
            {
                "isuser": true,
                "text": "how many female dogs have gone through treatment ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "9 dogs have gone through treatment.",
                "query": "SELECT count(*) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            9
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.gender  =  \"F\""
            },
            {
                "isuser": true,
                "text": "what are their ages",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the ages of dogs which have gone through treatment",
                "query": "SELECT age FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
                "result": [
                    [
                        [
                            "age"
                        ],
                        [
                            "6"
                        ],
                        [
                            "9"
                        ],
                        [
                            "5"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT age FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.gender  =  \"F\""
            },
            {
                "isuser": true,
                "text": "what is the highest weight of age 2",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the highest weight among dogs of age 2.",
                "query": "SELECT weight FROM Dogs WHERE age=2 ORDER BY weight DESC LIMIT 1",
                "result": [
                    [
                        [
                            "weight"
                        ],
                        [
                            "9.48"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(weight) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.age  =  2"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "No problem. Anything more you'd like to ask?",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "No, Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Good bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "Goodbye!"
            }
        ]
    },
    {
        "db_name": "manufactory_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many companies are there? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 6 companies .",
                "query": "select count(*) from Manufacturers",
                "result": [
                    [
                        [
                            "num"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM Manufacturers"
            },
            {
                "isuser": true,
                "text": "What are their founder names? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The table shows the founder names of each companies.",
                "query": "select \tName  from Manufacturers",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Sony"
                        ],
                        [
                            "Creative Labs"
                        ],
                        [
                            "Hewlett-Packard"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT founder FROM Manufacturers"
            },
            {
                "isuser": true,
                "text": "Show founder names that begin with letter \"S\"",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean founder‘s name that begin with letter 'S'?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT founder FROM Manufacturers WHERE founder LIKE \"S%\""
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There isn't any founder name that begin with 'S'.",
                "query": "SELECT founder FROM manufacturers WHERE \tFounder LIKE 'S%'",
                "result": [
                    [
                        [
                            "Founder"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT founder FROM Manufacturers WHERE founder LIKE \"S%\""
            },
            {
                "isuser": true,
                "text": "Ok, than show all companies headquarters",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the headquarters of all companies.",
                "query": "SELECT Headquarter FROM manufacturers",
                "result": [
                    [
                        [
                            "Headquarter"
                        ],
                        [
                            "Tokyo"
                        ],
                        [
                            "Austin"
                        ],
                        [
                            "Los Angeles"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT headquarter FROM Manufacturers"
            }
        ]
    },
    {
        "db_name": "school_finance",
        "turns": [
            {
                "isuser": true,
                "text": "Hello, can you provide me with the names of the donors?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of all the donators",
                "query": "SELECT donator_name FROM endowment ",
                "result": [
                    [
                        [
                            "donator_name"
                        ],
                        [
                            "Monte Plata"
                        ],
                        [
                            "San José de Ocoa"
                        ],
                        [
                            "Distrito Nacional"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT donator_name FROM endowment"
            },
            {
                "isuser": true,
                "text": "Are all the donors from the same country?\n",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry we don't have the information about the nationality of the donators. Please ask other related questions.",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT donator_name ,  country FROM endowment"
            },
            {
                "isuser": true,
                "text": "Was there a minimum or maximum donation limit?\n",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes. The minimum donation amount is 8.33 and the maximum donation amount is 9.83.",
                "query": "SELECT min(amount), max(amount) FROM endowment ",
                "result": [
                    [
                        [
                            "min(amount)",
                            "max(amount)"
                        ],
                        [
                            8.33,
                            9.83
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT min(amount) ,  max(amount) FROM endowment"
            },
            {
                "isuser": true,
                "text": "How many donors were there total?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 11 different donators",
                "query": "SELECT count(distinct donator_name) FROM endowment ",
                "result": [
                    [
                        [
                            "count(distinct donator_name)"
                        ],
                        [
                            11
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM endowment"
            },
            {
                "isuser": true,
                "text": "Was there any single donation that was bigger than all the others combined?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry I can't answer this question using SQL.  ",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT donator_name ,  amount FROM endowment ORDER BY amount DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Was there a set goal for the donation amount?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry I don't think this question is related to this table.",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT min(amount) ,  max(amount) FROM endowment"
            },
            {
                "isuser": true,
                "text": "Thanks!\n",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "small_bank_1",
        "turns": [
            {
                "isuser": true,
                "text": "what is the savings balance of  id 1?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean the saving balance of the customer with id 1?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT balance FROM SAVINGS WHERE custid = 1"
            },
            {
                "isuser": true,
                "text": "yes\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "200000.0 is the saving balance of the customer with id 1.",
                "query": "SELECT balance from savings where custid = 1",
                "result": [
                    [
                        [
                            "balance"
                        ],
                        [
                            200000.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT balance FROM SAVINGS WHERE custid = 1"
            },
            {
                "isuser": true,
                "text": "what is the total checking and saving balance of all accounts?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the total checking and savings balances of all accounts.",
                "query": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid = T2.custid ",
                "result": [
                    [
                        [
                            "T1.balance + T2.balance"
                        ],
                        [
                            210000.0
                        ],
                        [
                            1000001999.0
                        ],
                        [
                            233000.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT sum(balance) FROM CHECKING UNION SELECT sum(balance) FROM SAVINGS"
            },
            {
                "isuser": true,
                "text": "what is the sorted list of total checking and savings balance by ascending order?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the total checking and savings balances of all accounts sorted by the total balance in ascending order.",
                "query": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance",
                "result": [
                    [
                        [
                            "T1.balance + T2.balance"
                        ],
                        [
                            317.0
                        ],
                        [
                            7060.0
                        ],
                        [
                            90000.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT sum(balance) FROM CHECKING UNION SELECT sum(balance) FROM SAVINGS ORDER BY 1 ASC"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "city_record",
        "turns": [
            {
                "isuser": true,
                "text": "What is the venue of the competition \"1994 FIFA World cup qualification\" hosted by \"Hangzou\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "THere's no  competition \"1994 FIFA World cup qualification\" hosted by \"Hangzou\"",
                "query": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = \"Hangzhou ( Zhejiang )\" AND T3.competition = \"1994 FIFA World Cup qualification\"",
                "result": [
                    [
                        [
                            "Venue"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Venue FROM match WHERE Competition = \"1994 FIFA World Cup qualification\" AND Venue = \"Hangzhou\""
            },
            {
                "isuser": true,
                "text": "ok. What is the venue of the competition \"1994 FIFA World Cup qualification\" hosted by \"Nanjing\" ( Jiangsu )\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the venue of the competition \"1994 FIFA World Cup qualification\" hosted by \"Nanjing\" ( Jiangsu )\" are Estadio Rigoberto López , Managua , Nicaragua and Estadio Cuscatlán , San Salvador , El Salvador",
                "query": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = \"Nanjing ( Jiangsu )\" AND T3.competition = \"1994 FIFA World Cup qualification\"",
                "result": [
                    [
                        [
                            "Venue"
                        ],
                        [
                            "Estadio Rigoberto López , Managua , Nicaragua"
                        ],
                        [
                            "Estadio Cuscatlán , San Salvador , El Salvador"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Venue FROM match WHERE Competition = \"1994 FIFA World Cup qualification\" AND Venue = \"Nanjing\""
            },
            {
                "isuser": true,
                "text": "What is the GDP of the city Shanghai in the table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the GDP of the city Shanghai is 1919.57",
                "query": "SELECT GDP FROM city WHERE city = \"Shanghai\"",
                "result": [
                    [
                        [
                            "GDP"
                        ],
                        [
                            1919.57
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT GDP FROM city WHERE City = \"Shanghai\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "protein_institute",
        "turns": [
            {
                "isuser": true,
                "text": "Hello!  Can you provide me with a list of all building names?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Hi! The names of all the buildings are listed in the result table. They are Citizens Bank Building, Tampa City Hall, etc",
                "query": "SELECT name FROM building",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Citizens Bank Building"
                        ],
                        [
                            "Tampa City Hall"
                        ],
                        [
                            "Floridan Hotel"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM building"
            },
            {
                "isuser": true,
                "text": "Great!  Can you update the list to show the number of different institutions in each building?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Sure! The number of institutions in each building are listed. For example, the building Citizens Bank Building has 2 different institutions.",
                "query": "SELECT T1.name ,  count(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id GROUP BY T1.building_id",
                "result": [
                    [
                        [
                            "Name",
                            "count(*)"
                        ],
                        [
                            "Citizens Bank Building",
                            2
                        ],
                        [
                            "Tampa City Hall",
                            2
                        ],
                        [
                            "Floridan Hotel",
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name, COUNT(DISTINCT Institution_id) AS num_institutions FROM building JOIN institution ON building.building_id = institution.building_id GROUP BY building.name"
            },
            {
                "isuser": true,
                "text": "Can you filter this list to show me only the tallest building?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean you want the number of different institutions of the tallest building?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT name, COUNT(DISTINCT Institution_id) AS num_institutions FROM building JOIN institution ON building.building_id = institution.building_id WHERE building.Years_as_tallest = (SELECT MAX(Years_as_tallest) FROM building) GROUP BY building.name"
            },
            {
                "isuser": true,
                "text": "Thanks! I would be fine just know which is the tallest building.",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean you want to know the name of the tallest building? Or anything else?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT name FROM building WHERE Years_as_tallest = (SELECT MAX(Years_as_tallest) FROM building)"
            },
            {
                "isuser": true,
                "text": "Yes!  I want to know the name of the tallest building please.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the building with the largest height is 100 North Tampa",
                "query": "SELECT Name FROM building ORDER BY Height_feet DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "100 North Tampa"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM building WHERE Years_as_tallest = (SELECT MAX(Years_as_tallest) FROM building)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome! Goodbye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "college_1",
        "turns": [
            {
                "isuser": true,
                "text": "Hello, what courses are currently being taught?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Hi, Here are all info are courses.",
                "query": "SELECT * from course",
                "result": [
                    [
                        [
                            "CRS_CODE",
                            "DEPT_CODE",
                            "CRS_DESCRIPTION",
                            "CRS_CREDIT"
                        ],
                        [
                            "ACCT-211",
                            "ACCT",
                            "Accounting I",
                            3.0
                        ],
                        [
                            "ACCT-212",
                            "ACCT",
                            "Accounting II",
                            3.0
                        ],
                        [
                            "CIS-220",
                            "CIS",
                            "Intro. to Microcomputing",
                            3.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.crs_description FROM CLASS AS T1 JOIN COURSE AS T2 ON T1.crs_code  =  T2.crs_code WHERE T1.class_time  >  '11:00'"
            },
            {
                "isuser": true,
                "text": "Can you please show which instructors are teaching those courses?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Sure. Here are the instructors teaching the courses.",
                "query": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code",
                "result": [
                    [
                        [
                            "EMP_FNAME"
                        ],
                        [
                            "Arnelle"
                        ],
                        [
                            "Arnelle"
                        ],
                        [
                            "Robert"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T3.emp_fname ,  T3.emp_lname ,  T2.crs_description FROM CLASS AS T1 JOIN COURSE AS T2 ON T1.crs_code  =  T2.crs_code JOIN EMPLOYEE AS T3 ON T1.prof_num  =  T3.emp_num WHERE T1.class_time  >  '11:00'"
            },
            {
                "isuser": true,
                "text": "Can you please show me the current courses being taught with the last name of the instructor teaching them?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Sure. Here is the list of the current course descriptions with the last name of the instructors",
                "query": "SELECT T2.emp_lname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code",
                "result": [
                    [
                        [
                            "EMP_LNAME",
                            "CRS_DESCRIPTION"
                        ],
                        [
                            "Heffington",
                            "Accounting I"
                        ],
                        [
                            "Heffington",
                            "Accounting I"
                        ],
                        [
                            "Smith",
                            "Accounting I"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.crs_description ,  T3.emp_lname FROM CLASS AS T1 JOIN COURSE AS T2 ON T1.crs_code  =  T2.crs_code JOIN EMPLOYEE AS T3 ON T1.prof_num  =  T3.emp_num WHERE T1.class_time  >  '11:00'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure. Bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "department_store",
        "turns": [
            {
                "isuser": true,
                "text": "List the name of all suppliers in alphabetical order of their addresses.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the  name of all suppliers in alphabetical order of their addresses.",
                "query": "SELECT T1.supplier_name FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details",
                "result": [
                    [
                        [
                            "supplier_name"
                        ],
                        [
                            "AB Store"
                        ],
                        [
                            "Tesco"
                        ],
                        [
                            "Audi"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.supplier_name ,  T2.address_details FROM suppliers AS T1 JOIN addresses AS T2 ON T1.supplier_id  =  T2.address_id ORDER BY T2.address_details ASC"
            },
            {
                "isuser": true,
                "text": "And their phone numbers?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the phone number of all suppliers in alphabetical order of their addresses. ",
                "query": "SELECT T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details",
                "result": [
                    [
                        [
                            "supplier_phone"
                        ],
                        [
                            "1-483-283-4742"
                        ],
                        [
                            "287-071-1153x254"
                        ],
                        [
                            "1-432-960-2402x1734"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.supplier_name ,  T2.address_details ,  T1.supplier_phone FROM suppliers AS T1 JOIN addresses AS T2 ON T1.supplier_id  =  T2.address_id ORDER BY T2.address_details ASC"
            },
            {
                "isuser": true,
                "text": "What states is Tesco located in?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "do you mean the address id or the address details?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T1.dept_store_chain_name ,  T2.address_details FROM department_store_chain AS T1 JOIN addresses AS T2 ON T1.dept_store_chain_id  =  T2.address_id WHERE T1.dept_store_chain_name  =  \"Tesco\""
            },
            {
                "isuser": true,
                "text": "The address details.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the details of address of Tesco",
                "query": "SELECT T3.address_details FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id where T1.supplier_name = 'Tesco' ",
                "result": [
                    [
                        [
                            "address_details"
                        ],
                        [
                            "0292 Mitchel Pike\nPort Abefurt, IA 84402-4249"
                        ],
                        [
                            "7181 Wuckert Port Apt. 571\nLake Zariaburgh, IL 98085"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.address_details FROM department_store_chain AS T1 JOIN addresses AS T2 ON T1.dept_store_chain_id  =  T2.address_id WHERE T1.dept_store_chain_name  =  \"Tesco\""
            },
            {
                "isuser": true,
                "text": "How about Lidl?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are no details of address for Lidl",
                "query": "SELECT T3.address_details FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id where T1.supplier_name = 'Lidl' ",
                "result": [
                    [
                        [
                            "address_details"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.address_details FROM department_store_chain AS T1 JOIN addresses AS T2 ON T1.dept_store_chain_id  =  T2.address_id WHERE T1.dept_store_chain_name  =  \"Lidl\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "customers_and_addresses",
        "turns": [
            {
                "isuser": true,
                "text": "can you show me a list of active from date?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are active from dates of all customer contact channels.",
                "query": "select active_from_date from customer_contact_channels",
                "result": [
                    [
                        [
                            "active_from_date"
                        ],
                        [
                            "2017-12-07 18:18:15"
                        ],
                        [
                            "2017-04-07 04:51:41"
                        ],
                        [
                            "2017-05-25 16:08:45"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT active_from_date FROM customer_contact_channels WHERE active_to_date > '2019-07-24 10:00:00'"
            },
            {
                "isuser": true,
                "text": "can you show me a list of  active to date?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are active to dates of all customer contact channels.",
                "query": "select active_to_date from customer_contact_channels",
                "result": [
                    [
                        [
                            "active_to_date"
                        ],
                        [
                            "2018-03-23 13:37:14"
                        ],
                        [
                            "2018-03-23 01:30:52"
                        ],
                        [
                            "2018-03-13 07:32:25"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT active_to_date FROM customer_contact_channels WHERE active_to_date > '2019-07-24 10:00:00'"
            },
            {
                "isuser": true,
                "text": "which one the first active to date?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the information about the customer contact channel that has the earliest active to date.",
                "query": "select * from customer_contact_channels order by active_to_date limit 1",
                "result": [
                    [
                        [
                            "customer_id",
                            "channel_code",
                            "active_from_date",
                            "active_to_date",
                            "contact_number"
                        ],
                        [
                            9,
                            "Mobile",
                            "2017-05-25 20:36:21",
                            "2018-02-24 00:57:39",
                            "(155)830-6182"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT active_to_date FROM customer_contact_channels WHERE active_to_date > '2019-07-24 10:00:00' ORDER BY active_to_date ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "bike_1",
        "turns": [
            {
                "isuser": true,
                "text": "What are the dock count of San Jose Diridon Caltrain Station?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The dock count of San Jose Diridon Caltrain Station is 27.",
                "query": "SELECT dock_count FROM station WHERE name = \"San Jose Diridon Caltrain Station\"",
                "result": [
                    [
                        [
                            "dock_count"
                        ],
                        [
                            27
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT dock_count FROM station WHERE name = \"San Jose Diridon Caltrain Station\""
            },
            {
                "isuser": true,
                "text": "What are the bike id of zip code 94041?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The ids of the bikes with zip code 94041 are listed in the result table.",
                "query": "SELECT bike_id FROM trip WHERE zip_code = 94041",
                "result": [
                    [
                        [
                            "bike_id"
                        ],
                        [
                            454
                        ],
                        [
                            48
                        ],
                        [
                            28
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT bike_id FROM trip WHERE zip_code = 94041"
            },
            {
                "isuser": true,
                "text": "How many dock stations are there in San Jose?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the total dock counts of all stations in city San Jose?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT dock_count FROM station WHERE city = \"San Jose\""
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The total dock counts of stations in city San Jose is 264.",
                "query": "SELECT sum(dock_count) FROM station WHERE city = \"San Jose\"",
                "result": [
                    [
                        [
                            "sum(dock_count)"
                        ],
                        [
                            264
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM station WHERE city = \"San Jose\""
            },
            {
                "isuser": true,
                "text": "For each station, return its longitude and the average duration of trips that started from the station.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The longitude and the average duration of trips and their names are shown in the result table.",
                "query": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T1.name",
                "result": [
                    [
                        [
                            "name",
                            "long",
                            "avg(T2.duration)"
                        ],
                        [
                            "2nd at Folsom",
                            -122.39623600000002,
                            399.6787330316742
                        ],
                        [
                            "2nd at South Park",
                            -122.392738,
                            512.8461538461538
                        ],
                        [
                            "2nd at Townsend",
                            -122.39028799999998,
                            905.3340611353711
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT station.long, AVG(trip.duration) FROM station JOIN trip ON station.id = trip.start_station_id GROUP BY station.long"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "No problem! Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "culture_company",
        "turns": [
            {
                "isuser": true,
                "text": "Hello!  Can you show a list of all publishers who did not publish any books in 1989?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is no publishers who did not publish any books in 1989.",
                "query": "SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR = 1989",
                "result": [
                    [
                        [
                            "Publisher"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT publisher FROM book_club WHERE YEAR  !=  1989"
            },
            {
                "isuser": true,
                "text": "Thank you!  Can you show me a list of all of the book titles published by Alyson?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result tables shows the titles of the books published by \"Alyson\".",
                "query": "select Book_Title from book_club where \tPublisher='Alyson'",
                "result": [
                    [
                        [
                            "Book_Title"
                        ],
                        [
                            "Goldenboy"
                        ],
                        [
                            "The Crystal Curtain"
                        ],
                        [
                            "Somewhere in the Night"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Book_Title FROM book_club WHERE Author_or_Editor  =  \"Alyson\""
            },
            {
                "isuser": true,
                "text": "Thanks!  Can you update that list to show the years that those 3 books were published and  what category they fall under?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table that shows the years and the category of each book published by Alyson. ",
                "query": "select Book_Title,Year,Category from book_club where \tPublisher='Alyson'",
                "result": [
                    [
                        [
                            "Book_Title",
                            "Year",
                            "Category"
                        ],
                        [
                            "Goldenboy",
                            1989,
                            "Gay M/SF"
                        ],
                        [
                            "The Crystal Curtain",
                            1989,
                            "Lesb. M/SF"
                        ],
                        [
                            "Somewhere in the Night",
                            1990,
                            "Gay SF/F"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Book_Title,Year,Category FROM book_club WHERE Author_or_Editor  =  \"Alyson\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "club_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many clubs do you have?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 4 clubs.",
                "query": "SELECT count(*) from club",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Club"
            },
            {
                "isuser": true,
                "text": "How many members does each club have?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of members of each club is shown in the table.",
                "query": "SELECT clubId, count(StuId) from Member_of_club group by clubId",
                "result": [
                    [
                        [
                            "ClubID",
                            "count(StuId)"
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            1
                        ],
                        [
                            4,
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) ,  clubid FROM member_of_club GROUP BY clubid"
            },
            {
                "isuser": true,
                "text": "Finally, can you list the clubs that have \"Davis Steven\" as a member?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "No club has \"Davis Steven\" as a member.",
                "query": "SELECT T1.clubId from  Member_of_club as T1 join Student as T2 on T1.stuid = T2.stuid where T2.lname = 'Davis' and T2.fname = 'Steven'",
                "result": [
                    null
                ],
                "predict_type": "answerable",
                "predict": "SELECT clubname FROM club WHERE ClubID IN (SELECT ClubID FROM Member_of_club WHERE StuID = 100000000)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "store_product",
        "turns": [
            {
                "isuser": true,
                "text": "what is the dimenson of Plustek MobileOffice D28 Corporate?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The dimensions of Plustek MobileOffice D28 Corporate is 303 x 94 x 60",
                "query": "SELECT dimensions FROM product WHERE product = \"Plustek MobileOffice D28 Corporate\"",
                "result": [
                    [
                        [
                            "dimensions"
                        ],
                        [
                            "303 x 94 x 60"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT dimensions FROM product WHERE product = \"Plustek MobileOffice D28 Corporate\""
            },
            {
                "isuser": true,
                "text": "how many pages per  minute colored in Xerox Travel Scanner 100?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The page per minute color of Xerox Travel Scanner 100 is 4.0",
                "query": "SELECT \tpages_per_minute_color FROM product WHERE product = \"Xerox Travel Scanner 100\"",
                "result": [
                    [
                        [
                            "pages_per_minute_color"
                        ],
                        [
                            4.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT pages_per_minute_color FROM product WHERE product = \"Xerox Travel Scanner 100\""
            },
            {
                "isuser": true,
                "text": "what is the max page size can be used in Plustek MobileOffice D28 Corporate?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The max page size of Plustek MobileOffice D28 Corporate is A4",
                "query": "SELECT max_page_size FROM product WHERE product = \"Plustek MobileOffice D28 Corporate\"",
                "result": [
                    [
                        [
                            "max_page_size"
                        ],
                        [
                            "A4"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max_page_size FROM product WHERE product = \"Plustek MobileOffice D28 Corporate\""
            },
            {
                "isuser": true,
                "text": "what is the dpi of Fujitsu fi-6130 A4 Series Scanner?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The dpi of Fujitsu fi-6130 A4 Series Scanner is 600",
                "query": "SELECT dpi FROM product WHERE product = \"Fujitsu fi-6130 A4 Series Scanner\"",
                "result": [
                    [
                        [
                            "dpi"
                        ],
                        [
                            600.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT dpi FROM product WHERE product = \"Fujitsu fi-6130 A4 Series Scanner\""
            },
            {
                "isuser": true,
                "text": "which product coloured the highest pages in a minute?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The pages_per_minute_color of product is Canon DR-2080C",
                "query": "SELECT product,\tpages_per_minute_color FROM product order by pages_per_minute_color desc limit 1",
                "result": [
                    [
                        [
                            "product",
                            "pages_per_minute_color"
                        ],
                        [
                            "Canon DR-2080C",
                            36.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product FROM product WHERE pages_per_minute_color = (SELECT max(pages_per_minute_color) FROM product)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "course_teach",
        "turns": [
            {
                "isuser": true,
                "text": "How many teachers are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 7 teachers",
                "query": "SELECT COUNT(*) FROM teacher",
                "result": [
                    [
                        [
                            "COUNT(*)"
                        ],
                        [
                            7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM teacher"
            },
            {
                "isuser": true,
                "text": "How many courses do you have?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 6 different courses",
                "query": "SELECT COUNT(*) FROM course_arrange",
                "result": [
                    [
                        [
                            "COUNT(*)"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM course"
            },
            {
                "isuser": true,
                "text": "Can you tell me the names of teachers and the number of courses they teach?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of teachers and the number of courses they teach",
                "query": "SELECT T2.Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
                "result": [
                    [
                        [
                            "Name",
                            "COUNT(*)"
                        ],
                        [
                            "Anne Walker",
                            2
                        ],
                        [
                            "Gustaaf Deloor",
                            1
                        ],
                        [
                            "Kearsley Brown",
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.name ,  count(*) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id"
            },
            {
                "isuser": true,
                "text": "Sure. Can you tell me the age of each teacher?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names and the ages of all the teachers",
                "query": "SELECT Name , age FROM teacher",
                "result": [
                    [
                        [
                            "Name",
                            "Age"
                        ],
                        [
                            "Joseph Huts",
                            "32"
                        ],
                        [
                            "Gustaaf Deloor",
                            "29"
                        ],
                        [
                            "Vicente Carretero",
                            "26"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT age FROM teacher"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "medicine_enzyme_interaction",
        "turns": [
            {
                "isuser": true,
                "text": "What are the ids and names of the medicine that can interact with two or more enzymes? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The ids and names of the medicine that can interact with two or more enzymes are shown in the result table. One of them is with id 2 and name Aripiprazole",
                "query": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
                "result": [
                    [
                        [
                            "id",
                            "name"
                        ],
                        [
                            2,
                            "Aripiprazole"
                        ],
                        [
                            3,
                            "Asenapine"
                        ],
                        [
                            8,
                            "Iloperidone"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.id ,  T1.name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.medicine_id GROUP BY T2.medicine_id HAVING count(*)  >=  2"
            },
            {
                "isuser": true,
                "text": "How many enzymes can Aripiprazole interact with?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 3 enzymes can interact with medicine name Aripiprazole.",
                "query": "SELECT COUNT(DISTINCT T2.enzyme_id) FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE name = \"Aripiprazole\"",
                "result": [
                    [
                        [
                            "COUNT(DISTINCT T2.enzyme_id)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM medicine_enzyme_interaction WHERE medicine_id = 1"
            },
            {
                "isuser": true,
                "text": "What about Asenapine?",
                "type": "improper"
            },
            {
                "isuser": true,
                "text": "* I have left the chat *",
                "type": "answerable",
                "predict": "SELECT count(*) FROM medicine_enzyme_interaction WHERE medicine_id = 2"
            },
            {
                "isuser": false,
                "text": "There are also 3 enzymes that can interact with medicine name Asenapine.",
                "query": "SELECT COUNT(DISTINCT T2.enzyme_id) FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE name = \"Asenapine\"",
                "result": [
                    [
                        [
                            "COUNT(DISTINCT T2.enzyme_id)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable"
            }
        ]
    },
    {
        "db_name": "twitter_1",
        "turns": [
            {
                "isuser": true,
                "text": "hi. I would like to know how many users are followed by Mary?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Hello! only 1 user is followed by Mary",
                "query": "SELECT count(t2.f1) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\"",
                "result": [
                    [
                        [
                            "count(t2.f1)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "I'm sorry, the database doesn't have information about who is followed by Mary."
            },
            {
                "isuser": true,
                "text": "and how many are followed by Susan?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "only 1 user is followed by Susan",
                "query": "SELECT count(t2.f1) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Susan\"",
                "result": [
                    [
                        [
                            "count(t2.f1)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM user_profiles WHERE uid IN (SELECT f1 FROM follows WHERE f2 = 2)"
            },
            {
                "isuser": true,
                "text": "can you tell me the Id of these users?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Sure. This is the list of user ids followed by Susan ",
                "query": "SELECT t2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Susan\"",
                "result": [
                    [
                        [
                            "f1"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT f1 FROM follows WHERE f2 = 2"
            },
            {
                "isuser": true,
                "text": "and the user id followed by Mary?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the list of user ids followed by Susan or by Mary",
                "query": "SELECT t2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Susan\" or T1.name  =  \"Mary\"",
                "result": [
                    [
                        [
                            "f1"
                        ],
                        [
                            1
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT f1 FROM follows WHERE f2 = 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure! Anything else?",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "no. That's all. Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "hospital_1",
        "turns": [
            {
                "isuser": true,
                "text": "What is the name of the nurse who has the most appointments?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the nurse has the most appointments is \"Carla Espinosa\".",
                "query": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid = T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Carla Espinosa"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is her employee ID?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The employee id of the nurse has the most appointments is \"101\".",
                "query": "SELECT EmployeeID FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid = T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "EmployeeID"
                        ],
                        [
                            101
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT employeeid FROM nurse WHERE name = (SELECT name FROM nurse GROUP BY name ORDER BY count(*) DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "List all nurses names in alphabetical order",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table shows all the names of the nurses in alphabetical order.",
                "query": "select name from nurse order by name",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Carla Espinosa"
                        ],
                        [
                            "Laverne Roberts"
                        ],
                        [
                            "Paul Flowers"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM nurse ORDER BY name ASC"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "products_gen_characteristics",
        "turns": [
            {
                "isuser": true,
                "text": "hi,List out the all color description",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "All the color descriptions are listed in the result table. There are red, green, yellow, and so on.",
                "query": "SELECT color_description FROM ref_colors",
                "result": [
                    [
                        [
                            "color_description"
                        ],
                        [
                            "red"
                        ],
                        [
                            "green"
                        ],
                        [
                            "yellow"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT color_description FROM Ref_Colors"
            },
            {
                "isuser": true,
                "text": "list out the color code for all the product name",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The color codes for their corresponding product names are listed in the result table. For example, product name cumin has color code 4.",
                "query": "SELECT color_code, product_name FROM products",
                "result": [
                    [
                        [
                            "color_code",
                            "product_name"
                        ],
                        [
                            "4",
                            "cumin"
                        ],
                        [
                            "2",
                            "peper"
                        ],
                        [
                            "9",
                            "basil"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT color_code, product_name FROM Products"
            },
            {
                "isuser": true,
                "text": "list out the typical selling price for all product name",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The typical selling price and their corresponding product names are listed in the result table. For example, product name cumin has typical selling price 2878.3",
                "query": "SELECT typical_selling_price, product_name FROM products",
                "result": [
                    [
                        [
                            "typical_selling_price",
                            "product_name"
                        ],
                        [
                            "2878.3",
                            "cumin"
                        ],
                        [
                            "1892070.2803543",
                            "peper"
                        ],
                        [
                            "0.1859512",
                            "basil"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product_name, typical_selling_price FROM Products"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome, bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "assets_maintenance",
        "turns": [
            {
                "isuser": true,
                "text": "Can you list all the unique fault log entry ids?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are all the unique fault log entry ids.",
                "query": "SELECT distinct fault_log_entry_id FROM Fault_Log",
                "result": [
                    [
                        [
                            "fault_log_entry_id"
                        ],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT fault_log_entry_id FROM Fault_Log"
            },
            {
                "isuser": true,
                "text": "Can you count the number of unique part fault ids that belong to each unique fault log entry id, and then add those values to the table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The table shows the number of part fault ids for each unique fault log entry id.",
                "query": "SELECT fault_log_entry_id, count(*) FROM Fault_Log_Parts GROUP BY fault_log_entry_id",
                "result": [
                    [
                        [
                            "fault_log_entry_id",
                            "count(*)"
                        ],
                        [
                            1,
                            3
                        ],
                        [
                            3,
                            2
                        ],
                        [
                            4,
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.fault_log_entry_id, COUNT(DISTINCT T1.part_fault_id) AS num_part_faults FROM Fault_Log_Parts AS T1 GROUP BY T1.fault_log_entry_id"
            },
            {
                "isuser": true,
                "text": "Amazing, can you display only the entry with a fault log id of 1 as well as the description and record time for that entry with a fault log id of 1?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The table shows the number of part fault ids for the fault log entry with id 1, along with its fault description and fault log entry datetime.",
                "query": "SELECT count(*), T2.*,  T1.fault_description ,  T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id where t1.fault_log_entry_id = 1 GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "count(*)",
                            "fault_log_entry_id",
                            "part_fault_id",
                            "fault_status",
                            "fault_description",
                            "fault_log_entry_datetime"
                        ],
                        [
                            3,
                            1,
                            10,
                            "Fixed",
                            "system error",
                            "2018-03-21 04:25:00"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.fault_log_entry_id, T1.fault_description, T1.fault_log_entry_datetime FROM Fault_Log AS T1 WHERE T1.fault_log_entry_id = 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "apartment_rentals",
        "turns": [
            {
                "isuser": true,
                "text": "What are the first names of all guest with apartment booking status \"Confirmed\" ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the first names of all guests with apartment booking status code \"Confirmed\".",
                "query": "SELECT T2.guest_first_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\"",
                "result": [
                    [
                        [
                            "guest_first_name"
                        ],
                        [
                            "Else"
                        ],
                        [
                            "Louvenia"
                        ],
                        [
                            "Keith"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.guest_first_name FROM Guests AS T1 JOIN Apartment_Bookings AS T2 ON T1.guest_id = T2.guest_id WHERE T2.booking_status_code = \"Confirmed\""
            },
            {
                "isuser": true,
                "text": "And how about their last names?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the last names of all guest with apartment booking status code \"Confirmed\".",
                "query": "SELECT T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\"",
                "result": [
                    [
                        [
                            "guest_last_name"
                        ],
                        [
                            "Roberts"
                        ],
                        [
                            "Crona"
                        ],
                        [
                            "Hoeger"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.guest_last_name FROM Guests AS T1 JOIN Apartment_Bookings AS T2 ON T1.guest_id = T2.guest_id WHERE T2.booking_status_code = \"Confirmed\""
            },
            {
                "isuser": true,
                "text": "And what about guests with \"Provisional\" status?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the last names of all guest with apartment booking status code \"Provisional\".",
                "query": "SELECT T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Provisional\"",
                "result": [
                    [
                        [
                            "guest_last_name"
                        ],
                        [
                            "Runolfsdottir"
                        ],
                        [
                            "Mante"
                        ],
                        [
                            "Grady"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.guest_first_name FROM Guests AS T1 JOIN Apartment_Bookings AS T2 ON T1.guest_id = T2.guest_id WHERE T2.booking_status_code = \"Provisional\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "store_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many trucks are in both movies and musical playlists.",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean to ask for the number of tracks in both movies and music playlists?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT count(*) FROM (SELECT DISTINCT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id WHERE T2.playlist_id  =  2 INTERSECT SELECT DISTINCT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id WHERE T2.playlist_id  =  3) AS subquery"
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 0 tracks in both movies and music playlists.",
                "query": "SELECT COUNT(*) FROM (SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music')\n\n",
                "result": [
                    [
                        [
                            "COUNT(*)"
                        ],
                        [
                            0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM (SELECT DISTINCT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id WHERE T2.playlist_id  =  2 INTERSECT SELECT DISTINCT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id WHERE T2.playlist_id  =  3) AS subquery"
            },
            {
                "isuser": true,
                "text": "who composed For Those About To Rock (We Salute You)?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The composers for For Those About To Rock (We Salute You) are Angus Young, Malcolm Young, Brian Johnson.",
                "query": "SELECT composer FROM tracks WHERE name = \"For Those About To Rock (We Salute You)\"",
                "result": [
                    [
                        [
                            "composer"
                        ],
                        [
                            "Angus Young, Malcolm Young, Brian Johnson"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.composer FROM tracks AS T1 WHERE T1.name = \"For Those About To Rock (We Salute You)\""
            },
            {
                "isuser": true,
                "text": "How long is it?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The track For Those About To Rock (We Salute You) is 343719 milliseconds long.",
                "query": "SELECT milliseconds FROM tracks WHERE name = \"For Those About To Rock (We Salute You)\"",
                "result": [
                    [
                        [
                            "milliseconds"
                        ],
                        [
                            343719
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.milliseconds FROM tracks AS T1 WHERE T1.name = \"For Those About To Rock (We Salute You)\""
            },
            {
                "isuser": true,
                "text": "Who wrote Fast As a Shark",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The composers for Fast As a Shark are F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman.",
                "query": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\"",
                "result": [
                    [
                        [
                            "composer"
                        ],
                        [
                            "F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.composer FROM tracks AS T1 WHERE T1.name = \"Fast As a Shark\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Good bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "Bye",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "Goodbye!"
            }
        ]
    },
    {
        "db_name": "baseball_1",
        "turns": [
            {
                "isuser": true,
                "text": "HOW MANY ON THE TABLE",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "did you mean HOW MANY player  ON THE TABLE ?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT count(*) FROM all_star"
            },
            {
                "isuser": true,
                "text": "YES EXACTLY",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are  18846 player in table player",
                "query": "SELECT count(distinct player_id) from player",
                "result": [
                    [
                        [
                            "count(distinct player_id)"
                        ],
                        [
                            18846
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM all_star"
            },
            {
                "isuser": true,
                "text": "WHAT IS BIRTH YEAR of aardsda01",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "aardsda01's BIRTH YEAR is 1981",
                "query": "SELECT birth_year\t from player where \nplayer_id='aardsda01'",
                "result": [
                    [
                        [
                            "birth_year"
                        ],
                        [
                            1981
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT birth_year FROM player WHERE player_id = 'aardsda01'"
            },
            {
                "isuser": true,
                "text": "WHAT ARE THE MANAGER'S FIRST NAME LAST NAME AND ID WHO WON THE MOST MANAGER AWARD",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the first name, last name and player id who won the most manager award",
                "query": "SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1;",
                "result": [
                    [
                        [
                            "name_first",
                            "name_last",
                            "player_id"
                        ],
                        [
                            "Bobby",
                            "Cox",
                            "coxbo01"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "THANKS",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome,goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "culture_company",
        "turns": [
            {
                "isuser": true,
                "text": "Do any categories have books after year 1989?\n",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes, and the category has books after year 1989 is \"Gay SF/F\".",
                "query": "SELECT distinct category FROM book_club WHERE YEAR  >  1989 ",
                "result": [
                    [
                        [
                            "Category"
                        ],
                        [
                            "Gay SF/F"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT category FROM book_club WHERE YEAR  >  1989"
            },
            {
                "isuser": true,
                "text": "Are there any other categories?\n",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the other category has books after year 1989? Gay SF/F is the only one category has books after year 1989",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT category FROM book_club WHERE YEAR  >  1989"
            },
            {
                "isuser": true,
                "text": "Yes, that's what I meant. How many books does Gay SF/F have after 1989?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 2 books with category \"Gay SF/F\" and the year is after 1989.",
                "query": "select count(*)from book_club where \tCategory='Gay SF/F' and year>'1989'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM book_club WHERE category = \"Gay SF/F\" AND YEAR  >  1989"
            },
            {
                "isuser": true,
                "text": "Thanks!\n",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "customers_card_transactions",
        "turns": [
            {
                "isuser": true,
                "text": "Can you list the customer names and ids who have credit cards?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list of ids and first and last names of customers with credit cards",
                "query": "SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_type_code  =  \"Credit\"",
                "result": [
                    [
                        [
                            "customer_id",
                            "customer_first_name",
                            "customer_last_name"
                        ],
                        [
                            14,
                            "Blanche",
                            "Huels"
                        ],
                        [
                            9,
                            "Faustino",
                            "Langworth"
                        ],
                        [
                            15,
                            "Nat",
                            "Davis"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.customer_first_name ,  T1.customer_id FROM Customers AS T1 JOIN Customers_Cards AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.card_type_code  =  \"Credit\""
            },
            {
                "isuser": true,
                "text": "I want to know the customer names and how many credit cards they have?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This list shows the customer first and last names with the number of credit cards they have.",
                "query": "SELECT T2.customer_first_name, T2.customer_last_name, count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_type_code  =  \"Credit\" group by T1.customer_id",
                "result": [
                    [
                        [
                            "customer_first_name",
                            "customer_last_name",
                            "count(*)"
                        ],
                        [
                            "Susie",
                            "Wiza",
                            1
                        ],
                        [
                            "Faustino",
                            "Langworth",
                            2
                        ],
                        [
                            "Bryce",
                            "Rath",
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.customer_first_name ,  COUNT(*) FROM Customers AS T1 JOIN Customers_Cards AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.card_type_code  =  \"Credit\" GROUP BY T1.customer_id"
            },
            {
                "isuser": true,
                "text": "How many credit cards does Blanche Huels have?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Customer Blanche Huels has 1 credit card",
                "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM Customers_Cards WHERE customer_id = 1 AND card_type_code = \"Credit\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure! Anything else?",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "No, thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome! Bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "I apologize, I cannot provide you with the number of credit cards Blanche Huels has. The database does not contain information about the number of credit cards a customer has."
            }
        ]
    },
    {
        "db_name": "baseball_1",
        "turns": [
            {
                "isuser": true,
                "text": "Show the team_id with highest rank?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the team_id with highest rank.",
                "query": "SELECT team_id FROM team ORDER BY rank ASC LIMIT 1",
                "result": [
                    [
                        [
                            "team_id"
                        ],
                        [
                            "PH1"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT team_id FROM team ORDER BY rank DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Show the maximum scores of the team Boston Red Stockings when the team won in postseason?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the maximum score of the team Boston Red Stockings when the team won in postseason.",
                "query": "SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings';",
                "result": [
                    [
                        [
                            "max(T1.wins)"
                        ],
                        [
                            5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(score) FROM postseason WHERE team_id_winner = 'BOS'"
            },
            {
                "isuser": true,
                "text": "Show the year of postseason with equal wins and loses?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the years of postseason with equal wins and losses.",
                "query": "SELECT year FROM postseason WHERE wins=losses",
                "result": [
                    [
                        [
                            "year"
                        ],
                        [
                            1885
                        ],
                        [
                            1890
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT year FROM postseason GROUP BY year HAVING count(*) = (SELECT count(*) FROM postseason GROUP BY year ORDER BY count(*) DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "game_1",
        "turns": [
            {
                "isuser": true,
                "text": "Tell me the Gtype of the GameID 1 ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Collectible card game is the game type of the game with id of 1.",
                "query": "SELECT gtype FROM Video_games where gameid = 1",
                "result": [
                    [
                        [
                            "GType"
                        ],
                        [
                            "Collectible card game"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT GType FROM Video_Games WHERE GameID = 1"
            },
            {
                "isuser": true,
                "text": "What is the GameID of the GName RNG Stone ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "1 is the id of the game with name RNG Stone.",
                "query": "SELECT gameid FROM video_games where gname = \"RNG Stone\"",
                "result": [
                    [
                        [
                            "GType"
                        ],
                        [
                            "Collectible card game"
                        ]
                    ],
                    [
                        [
                            "GameID"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT GameID FROM Video_Games WHERE GName = 'RNG Stone'"
            },
            {
                "isuser": true,
                "text": "Tell me the GName of the GType Role-playing game ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Grand Term Assignment is the name of the game that has type of Role-playing game.",
                "query": "SELECT gname FROM video_games where gtype = \"Role-playing game\"",
                "result": [
                    [
                        [
                            "GName"
                        ],
                        [
                            "Grand Term Assignment"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT GName FROM Video_Games WHERE GType = 'Role-playing game'"
            },
            {
                "isuser": true,
                "text": "Which game type has most number of games ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Collectible card game is the game type that has the most number of games",
                "query": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "GType"
                        ],
                        [
                            "Collectible card game"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT GType, COUNT(*) AS GameCount FROM Video_Games GROUP BY GType ORDER BY GameCount DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "thanks. bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "phone_1",
        "turns": [
            {
                "isuser": true,
                "text": "how many screen mode there",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 7 screen modes.",
                "query": "SELECT count(*) from screen_mode",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM screen_mode"
            },
            {
                "isuser": true,
                "text": "how many phone there",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 8 phones.",
                "query": "SELECT count(*) from phone",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM phone"
            },
            {
                "isuser": true,
                "text": "what is the  company name of XPERIA T, XPERIA J",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the  company name of XPERIA T, XPERIA J is  Sony Mobile Communications",
                "query": "SELECT Company_name from phone WHERE Hardware_Model_name = \"XPERIA T, XPERIA J\"",
                "result": [
                    [
                        [
                            "Company_name"
                        ],
                        [
                            "Sony Mobile Communications"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Company_name FROM phone WHERE Hardware_Model_name  =  \"XPERIA T\" OR Hardware_Model_name  =  \"XPERIA J\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You're welcome. Goodbye!.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "swimming",
        "turns": [
            {
                "isuser": true,
                "text": "How many swimmers are there with record? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 6 swimmers with record.",
                "query": "select count(distinct Swimmer_ID) from record",
                "result": [
                    [
                        [
                            "num"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM swimmer WHERE id IN (SELECT swimmer_id FROM record)"
            },
            {
                "isuser": true,
                "text": "How about swimmers with no record? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 2 swimmers with no record.",
                "query": "SELECT count(*) FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)"
            },
            {
                "isuser": true,
                "text": "What their names? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Przemysław Stańczyk and Sébastien Rouault are the names of the persons who don't have a record.",
                "query": "SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Przemysław Stańczyk"
                        ],
                        [
                            "Sébastien Rouault"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "battle_death",
        "turns": [
            {
                "isuser": true,
                "text": "What is the Latin commander of Battle of Serres?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The Latin commandar of Battle of Serres is Unknown",
                "query": "SELECT latin_commander\t FROM battle WHERE name = \"Battle of Serres\"",
                "result": [
                    [
                        [
                            "latin_commander"
                        ],
                        [
                            "Unknown"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT latin_commander FROM battle WHERE name = \"Battle of Serres\""
            },
            {
                "isuser": true,
                "text": "What is the result of 31st January 1206?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The result of the battle with a date 31 Jan 1206 is Bulgarian victory",
                "query": "SELECT result\t FROM battle WHERE date = \"31 January 1206\"",
                "result": [
                    [
                        [
                            "result"
                        ],
                        [
                            "Bulgarian victory"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT result FROM battle WHERE date = \"31-Jan-1206\""
            },
            {
                "isuser": true,
                "text": "Who is the Bulgarian commander on June 1205?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The bulgarian commaned on Jun 1205 are Kaloyan and Boril",
                "query": "SELECT bulgarian_commander FROM battle WHERE date = \"June 1205\"",
                "result": [
                    [
                        [
                            "bulgarian_commander"
                        ],
                        [
                            "Kaloyan"
                        ],
                        [
                            "Boril"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT bulgarian_commander FROM battle WHERE date = \"12-Jun-1205\""
            },
            {
                "isuser": true,
                "text": "What is the name of battle who has Latin commander is Baldwin 1?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of balwin 1 is Battle of Adrianople",
                "query": "SELECT name FROM battle WHERE latin_commander = \"Baldwin I\"",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Battle of Adrianople"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM battle WHERE latin_commander = \"Baldwin 1\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "aircraft",
        "turns": [
            {
                "isuser": true,
                "text": "Which aircraft did not win any match?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "What information do you want about the aircrafts? Their names, their ids, or all their information? ",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T2.Aircraft FROM AIRCRAFT AS T2 EXCEPT SELECT T1.Winning_Aircraft FROM MATCH AS T1"
            },
            {
                "isuser": true,
                "text": "Their names.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are no aircrafts that did not win any matches. ",
                "query": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)\n\n",
                "result": [
                    [
                        [
                            "Aircraft"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Name FROM AIRCRAFT AS T2 EXCEPT SELECT T1.Winning_Pilot FROM MATCH AS T1"
            },
            {
                "isuser": true,
                "text": "Which pilot won the most matches?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Winning pilot 4 won the most matches. ",
                "query": "SELECT winning_pilot FROM match group by winning_pilot order by count(*) desc limit 1",
                "result": [
                    [
                        [
                            "winning_pilot"
                        ],
                        [
                            "4"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Winning_Pilot, COUNT(*) AS Match_Count FROM MATCH AS T1 GROUP BY T1.Winning_Pilot ORDER BY Match_Count DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Which aircraft won the most matches?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Winning Aircraft 4 won the most matches",
                "query": "SELECT winning_aircraft FROM match group by winning_aircraft order by count(*) desc limit 1",
                "result": [
                    [
                        [
                            "winning_aircraft"
                        ],
                        [
                            "1"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Winning_Aircraft, COUNT(*) AS Match_Count FROM MATCH AS T1 GROUP BY T1.Winning_Aircraft ORDER BY Match_Count DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, good bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "student_assessment",
        "turns": [
            {
                "isuser": true,
                "text": "Could you please list each course's name and the number of its registered students?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Each course's name and the number of its registered students is listed.",
                "query": "SELECT T3.course_name ,  count(*)  FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id",
                "result": [
                    [
                        [
                            "course_name",
                            "count(*)"
                        ],
                        [
                            "statistics",
                            4
                        ],
                        [
                            "English",
                            2
                        ],
                        [
                            "French",
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Registrations AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name"
            },
            {
                "isuser": true,
                "text": "What are the student ids of all students who registered for statistics?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The student ids of all students who take the statistics course are listed.",
                "query": "SELECT T2.student_id  FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id where T3.course_name = 'statistics' ",
                "result": [
                    [
                        [
                            "student_id"
                        ],
                        [
                            111
                        ],
                        [
                            121
                        ],
                        [
                            141
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT student_id FROM Courses AS T1 JOIN Student_Course_Registrations AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Statistics\""
            },
            {
                "isuser": true,
                "text": "What are their student details, please?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the details of the students who take the statistics course.",
                "query": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id where T3.course_name = 'statistics' ",
                "result": [
                    [
                        [
                            "student_details"
                        ],
                        [
                            "Marry"
                        ],
                        [
                            "Martin"
                        ],
                        [
                            "Nikhil"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.student_details FROM Courses AS T1 JOIN Student_Course_Registrations AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Statistics\""
            },
            {
                "isuser": true,
                "text": "Thanks! Have a great night!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you! Good night.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "Goodbye!"
            }
        ]
    },
    {
        "db_name": "ship_1",
        "turns": [
            {
                "isuser": true,
                "text": "What are the ship id of HM Cutter Avenger?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The ship id for ship name HM Cutter Avenger is 3",
                "query": "SELECT ship_id FROM ship WHERE name = \"HM Cutter Avenger\"",
                "result": [
                    [
                        [
                            "Ship_ID"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT ship_id FROM ship WHERE name = \"HM Cutter Avenger\""
            },
            {
                "isuser": true,
                "text": "what type of Flag is used by HMS Manxman?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The flag used by ship name HMS Manxman is Panama.",
                "query": "SELECT Flag FROM ship WHERE name = \"HMS Manxman\"",
                "result": [
                    [
                        [
                            "Flag"
                        ],
                        [
                            "Panama"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT flag FROM ship WHERE name = \"HMS Manxman\""
            },
            {
                "isuser": true,
                "text": "what are the Built Year of HMS Gorgon?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The built year of ship name HMS Gorgon is 1998.0",
                "query": "SELECT Built_year FROM ship WHERE name = \"HMS Gorgon\"",
                "result": [
                    [
                        [
                            "Built_Year"
                        ],
                        [
                            1998.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Built_Year FROM ship WHERE name = \"HMS Gorgon\""
            },
            {
                "isuser": true,
                "text": "Find the ship type that are used by both ships with Panama and Malta flags?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The ship type that are used by both ships with Panama and Malta flags is Panamax.",
                "query": "SELECT TYPE FROM ship WHERE flag  =  'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag  =  'Malta'",
                "result": [
                    [
                        [
                            "Type"
                        ],
                        [
                            "Panamax"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT TYPE FROM ship WHERE flag = \"Panama\" INTERSECT SELECT DISTINCT TYPE FROM ship WHERE flag = \"Malta\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "No problem. Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "election",
        "turns": [
            {
                "isuser": true,
                "text": "How many parties in this table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the number of parties in the table.",
                "query": "SELECT count(DISTINCT Party) FROM party",
                "result": [
                    [
                        [
                            "count(DISTINCT Party)"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM party"
            },
            {
                "isuser": true,
                "text": "Peter Vallone\tin which party?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Peter Vallone is in the Democratic party.",
                "query": "SELECT Party FROM party WHERE Governor=\"Peter Vallone\"",
                "result": [
                    [
                        [
                            "Party"
                        ],
                        [
                            "Democratic"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Party FROM party WHERE Governor = \"Peter Vallone\""
            },
            {
                "isuser": true,
                "text": "How many elections in this table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 8 elections in this table.",
                "query": "SELECT count(*) FROM election",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM election"
            },
            {
                "isuser": true,
                "text": "Carl McCall in which party?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Carl McCall is in the Democratic party.",
                "query": "SELECT Party FROM party WHERE Governor= \"Carl McCall\"",
                "result": [
                    [
                        [
                            "Party"
                        ],
                        [
                            "Democratic"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Party FROM party WHERE Governor = \"Carl McCall\""
            },
            {
                "isuser": true,
                "text": "What are the names of parties that have both delegates on \"Appropriations\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the names of parties that have both delegates on \"Appropriations\".",
                "query": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Economic Matters\"",
                "result": [
                    [
                        [
                            "Party"
                        ],
                        [
                            "Democratic"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Party FROM election WHERE Committee = \"Appropriations\" INTERSECT SELECT Party FROM election WHERE Committee = \"Education\""
            }
        ]
    },
    {
        "db_name": "music_1",
        "turns": [
            {
                "isuser": true,
                "text": "What are the names of the artists from Bangladesh?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names of the artists from Bangladesh are Prity and Farida.",
                "query": "SELECT artist_name FROM artist WHERE country  =  \"Bangladesh\" ",
                "result": [
                    [
                        [
                            "artist_name"
                        ],
                        [
                            "Prity"
                        ],
                        [
                            "Farida"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT artist_name FROM artist WHERE country  =  'Bangladesh'"
            },
            {
                "isuser": true,
                "text": "Which artists from Bangladesh have never received a rating higher that 7?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names of the artists who are from Bangladesh and have never received rating higher than 7 are listed.",
                "query": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7",
                "result": [
                    [
                        [
                            "artist_name"
                        ],
                        [
                            "Farida"
                        ],
                        [
                            "Prity"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT artist_name FROM artist WHERE country  =  'Bangladesh' AND NOT EXISTS (SELECT 1 FROM song WHERE artist_name = artist.artist_name AND rating > 7)"
            },
            {
                "isuser": true,
                "text": "Can you add their genders into the table please?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names and gender of the artists who are from Bangladesh and have never received rating higher than 7 are listed.",
                "query": "select artist_name, gender from artist where artist_name in (SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7)",
                "result": [
                    [
                        [
                            "artist_name",
                            "gender"
                        ],
                        [
                            "Farida",
                            "Female"
                        ],
                        [
                            "Prity",
                            "Female"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT artist_name, gender FROM artist WHERE country  =  'Bangladesh' AND NOT EXISTS (SELECT 1 FROM song WHERE artist_name = artist.artist_name AND rating > 7)"
            },
            {
                "isuser": true,
                "text": "What are their preferred genres?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The preferred genres of the artists who are from Bangladesh and have never received rating higher than 7 are listed. ",
                "query": "select preferred_genre from artist where artist_name in (SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7)",
                "result": [
                    [
                        [
                            "preferred_genre"
                        ],
                        [
                            "folk"
                        ],
                        [
                            "nazrul"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT artist_name, preferred_genre FROM artist WHERE country  =  'Bangladesh' AND NOT EXISTS (SELECT 1 FROM song WHERE artist_name = artist.artist_name AND rating > 7)"
            },
            {
                "isuser": true,
                "text": "What are the names of the songs they have sung?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names of songs that the artists who are from Bangladesh and have never received rating higher than 7 have sung are listed.",
                "query": "select song_name from song where artist_name in (SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7)",
                "result": [
                    [
                        [
                            "song_name"
                        ],
                        [
                            "Shukno patar nupur pae"
                        ],
                        [
                            "Ami opar hoye"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT song_name FROM song WHERE artist_name IN (SELECT artist_name FROM artist WHERE country  =  'Bangladesh' AND NOT EXISTS (SELECT 1 FROM song WHERE artist_name = artist.artist_name AND rating > 7))"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "icfp_1",
        "turns": [
            {
                "isuser": true,
                "text": "how many authorship there",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 13 authors.",
                "query": "SELECT count(*) from authors",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            13
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Authorship"
            },
            {
                "isuser": true,
                "text": "what is the country of University of Oxford",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "UK is the country of University of Oxford.",
                "query": "SELECT country from Inst where name = \"University of Oxford\"",
                "result": [
                    [
                        [
                            "country"
                        ],
                        [
                            "UK"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT country FROM inst WHERE name = \"University of Oxford\""
            },
            {
                "isuser": true,
                "text": "what is the title of paper ID 200",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The title of paper with ID 200 is Just do it: Simple Monadic Equational Reasoning.",
                "query": "SELECT title from Papers where paperID = 200",
                "result": [
                    [
                        [
                            "title"
                        ],
                        [
                            "Just do it: Simple Monadic Equational Reasoning"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT title FROM papers WHERE paperID = 200"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "formula_1",
        "turns": [
            {
                "isuser": true,
                "text": "Hello, how many circuits belong to France?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 7 circuits belonging to France",
                "query": "SELECT count(*) FROM circuits WHERE country = \"France\" ",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM circuits WHERE country = 'France'"
            },
            {
                "isuser": true,
                "text": "Can you please provide their circuit IDs?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the circuit IDs of the circuits belonging to France",
                "query": "SELECT circuitId  FROM circuits WHERE country = \"France\" ",
                "result": [
                    [
                        [
                            "circuitId"
                        ],
                        [
                            8
                        ],
                        [
                            34
                        ],
                        [
                            41
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT circuitRef FROM circuits WHERE country = 'France'"
            },
            {
                "isuser": true,
                "text": "Can you also include the location of these circuits? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the ids and the locations of the circuits belonging to France",
                "query": "SELECT circuitId, location  FROM circuits WHERE country = \"France\" ",
                "result": [
                    [
                        [
                            "circuitId",
                            "location"
                        ],
                        [
                            8,
                            "Magny Cours"
                        ],
                        [
                            34,
                            "Le Castellet"
                        ],
                        [
                            41,
                            "Dijon"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name, location FROM circuits WHERE country = 'France'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks. Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "station_weather",
        "turns": [
            {
                "isuser": true,
                "text": "Hi, can you please tell me what is the ID of the station whose maximum precipitation is higher than 50?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Hello! This is the list of ids of the station whose maximum precipitation is higher than 50.",
                "query": "SELECT t2.id FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id HAVING max(t1.precipitation)  >  50",
                "result": [
                    [
                        [
                            "id"
                        ],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT station_id FROM weekly_weather WHERE precipitation > 50 ORDER BY precipitation DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "thank you, could you please also let me know their names and local authorities?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "you are welcome. This lists the ids, network names and the local authorities for stations whose maximum precipitation is higher than 50.",
                "query": "SELECT t2.id ,  t2.network_name, t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id HAVING max(t1.precipitation)  >  50",
                "result": [
                    [
                        [
                            "id",
                            "network_name",
                            "local_authority"
                        ],
                        [
                            1,
                            "Amersham",
                            "Chiltern"
                        ],
                        [
                            2,
                            "Bushey",
                            "Watford"
                        ],
                        [
                            3,
                            "Brentwood",
                            "Brentwood"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT network_name, local_authority FROM station WHERE id IN (SELECT station_id FROM weekly_weather WHERE precipitation > 50 ORDER BY precipitation DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "that was quick, thank you again. then could you please let me know if there is any station which has less than 10 maximum precipitation?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "You are so welcome. There isn't any station whose maximum precipitation is less than 10. ",
                "query": "SELECT t2.id FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id HAVING max(t1.precipitation)  <  10",
                "result": [
                    [
                        [
                            "id"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT station_id FROM weekly_weather WHERE precipitation < 10 ORDER BY precipitation ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "seems like everybody will have some rain here.. then could you please let me know what is the lowest precipitation we have on the table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The lowest precipitation we have is 10",
                "query": "SELECT min(precipitation) FROM weekly_weather",
                "result": [
                    [
                        [
                            "min(precipitation)"
                        ],
                        [
                            10.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT min(precipitation) FROM weekly_weather"
            },
            {
                "isuser": true,
                "text": "could you please let me know the ID of the stations with 10 precipitation?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the list of ids of  the stations with 10 precipitation",
                "query": "SELECT t2.id FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id where t1.precipitation = 10",
                "result": [
                    [
                        [
                            "id"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT station_id FROM weekly_weather WHERE precipitation = 10"
            },
            {
                "isuser": true,
                "text": "what would be the name of the station?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the list of ids and names of the stations with 10 precipitation",
                "query": "SELECT t2.id,t2.network_name FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id where t1.precipitation = 10",
                "result": [
                    [
                        [
                            "id",
                            "network_name"
                        ],
                        [
                            1,
                            "Amersham"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT network_name FROM station WHERE id IN (SELECT station_id FROM weekly_weather WHERE precipitation = 10)"
            },
            {
                "isuser": true,
                "text": "Then my last inquiry, could you please let me know Amersham's high temperature and wind speed on Friday?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "For station Amersham on Friday, the high temperature is 55 and wind speed is 17 mph",
                "query": "SELECT t1.high_temperature,t1.wind_speed_mph FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id where t1.day_of_week ='Friday' and T2.network_name='Amersham'",
                "result": [
                    [
                        [
                            "high_temperature",
                            "wind_speed_mph"
                        ],
                        [
                            55,
                            17
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT high_temperature, wind_speed_mph FROM weekly_weather WHERE station_id = 2 AND day_of_week = \"Friday\""
            },
            {
                "isuser": true,
                "text": "Thanks! hope you have a wonderful day :)",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You too! Bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome! I'm glad I could help. Have a great day!"
            }
        ]
    },
    {
        "db_name": "apartment_rentals",
        "turns": [
            {
                "isuser": true,
                "text": "Can you list all of the apartments with more than 4 bedrooms?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "do you mean the apartment ids of apartments with more than 4 bedrooms?",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "SELECT apt_number FROM Apartments WHERE bedroom_count > 4"
            },
            {
                "isuser": true,
                "text": "Yes, please!  I believe that's the only discrete identifier of the apartments (at least that I can see)...",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are  the apartment ids of apartments with more than 4 bedrooms ",
                "query": "select apt_id from Apartments where bedroom_count > 4;",
                "result": [
                    [
                        [
                            "apt_id"
                        ],
                        [
                            3
                        ],
                        [
                            4
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT apt_number FROM Apartments WHERE bedroom_count > 4"
            },
            {
                "isuser": true,
                "text": "Thank you!  Can you list the facility codes for each of those apartment IDs (3 4 6 11 12 13 15)?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the facility codes for the apartments with more than 4 bedrooms ",
                "query": "select T2.facility_code from Apartments as T1 JOIN Apartment_Facilities as T2 ON T1.apt_id = T2.apt_id WHERE T1.bedroom_count > 4",
                "result": [
                    [
                        [
                            "facility_code"
                        ],
                        [
                            "Gym"
                        ],
                        [
                            "Cable TV"
                        ],
                        [
                            "Gym"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T2.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_id IN (3, 4, 6, 11, 12, 13, 15)"
            },
            {
                "isuser": true,
                "text": "How many people live in the apartments with gym facilities?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "I cannot answer this question, please give another question",
                "query": "",
                "result": [],
                "predict_type": "SORRY",
                "predict": "SELECT count(*) FROM Guests AS T1 JOIN Apartment_Bookings AS T2 ON T1.guest_id  =  T2.guest_id JOIN Apartment_Facilities AS T3 ON T2.apt_id  =  T3.apt_id WHERE T3.facility_code  =  'GYM'"
            },
            {
                "isuser": true,
                "text": "Can you please list the 'building id', 'apartment type code' and 'apartment number' for all apartment IDs with more than 4 bedrooms?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the building ids, apartment type codes, and apartment numbers for all apartments with more than 4 bedrooms",
                "query": "select \tbuilding_id,apt_type_code,apt_number from Apartments where bedroom_count > 4;",
                "result": [
                    [
                        [
                            "building_id",
                            "apt_type_code",
                            "apt_number"
                        ],
                        [
                            225,
                            "Studio",
                            "Apt. 908"
                        ],
                        [
                            225,
                            "Duplex",
                            "Suite 749"
                        ],
                        [
                            191,
                            "Studio",
                            "Apt. 187"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT building_id, apt_type_code, apt_number FROM Apartments WHERE bedroom_count > 4"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "formula_1",
        "turns": [
            {
                "isuser": true,
                "text": "Can you provide me with a list of all of the names of the races?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the table of the names of races. ",
                "query": "SELECT name FROM races ",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Australian Grand Prix"
                        ],
                        [
                            "Malaysian Grand Prix"
                        ],
                        [
                            "Chinese Grand Prix"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM races"
            },
            {
                "isuser": true,
                "text": "Which of these races are held after 12:00:00?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of the races held after 12:00:00. ",
                "query": "SELECT name FROM races WHERE TIME > \"12:00:00\"",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Brazilian Grand Prix"
                        ],
                        [
                            "Canadian Grand Prix"
                        ],
                        [
                            "Brazilian Grand Prix"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM races WHERE time > '12:00:00'"
            },
            {
                "isuser": true,
                "text": "Can you list the races that are held before 09:00:00?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The table of races held before 09:00:00. For example, one of  the races is Australian Grand Prix.",
                "query": "SELECT name FROM races WHERE TIME < \"09:00:00\"",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Australian Grand Prix"
                        ],
                        [
                            "Chinese Grand Prix"
                        ],
                        [
                            "Japanese Grand Prix"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM races WHERE time < '09:00:00'"
            },
            {
                "isuser": true,
                "text": "If I were to ask what the names of the races are that are held after 12:00:00 or before 09:00:00, would that capture every single race?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "There are 869 races held after 12:00:00 or before 09:00:00. ",
                "query": "SELECT count(name) FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"",
                "result": [
                    [
                        [
                            "count(name)"
                        ],
                        [
                            869
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM races WHERE time > '12:00:00' OR time < '09:00:00'"
            },
            {
                "isuser": true,
                "text": "That's a very long list! Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome! I hope you find what you need."
            }
        ]
    },
    {
        "db_name": "college_2",
        "turns": [
            {
                "isuser": true,
                "text": "Can you list the names and ids of courses?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the list of ids and titles of courses.",
                "query": "SELECT course_id,title FROM course",
                "result": [
                    [
                        [
                            "course_id",
                            "title"
                        ],
                        [
                            "787",
                            "C  Programming"
                        ],
                        [
                            "238",
                            "The Music of Donovan"
                        ],
                        [
                            "608",
                            "Electron Microscopy"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT title, course_id FROM course"
            },
            {
                "isuser": true,
                "text": "I want to know the course names and the prerequisite ids.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the list of course names and the prerequisite ids for them.",
                "query": "SELECT T1.title,T2.prereq_id FROM course as T1 join prereq as T2 where T1.course_id=T2.course_id",
                "result": [
                    [
                        [
                            "title",
                            "prereq_id"
                        ],
                        [
                            "Cost Accounting",
                            "130"
                        ],
                        [
                            "How to Groom your Cat",
                            "169"
                        ],
                        [
                            "Immunology",
                            "345"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT title, course_id, prereq_id FROM course WHERE course_id IN (SELECT course_id FROM prereq)"
            },
            {
                "isuser": true,
                "text": "Hmm, please tell me the course ids that do not have any prerequisite.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the course id list for courses without any prerequisite.",
                "query": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq",
                "result": [
                    [
                        [
                            "course_id"
                        ],
                        [
                            "101"
                        ],
                        [
                            "105"
                        ],
                        [
                            "123"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT course_id FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure! You are so welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "Bye! Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "department_management",
        "turns": [
            {
                "isuser": true,
                "text": "How many heads are temporary acting?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "3 heads are temporary acting",
                "query": "SELECT count(*) FROM management WHERE temporary_acting  =  'Yes'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM management WHERE temporary_acting = 'Y'"
            },
            {
                "isuser": true,
                "text": "What are their names?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names for heads that are temporary acting",
                "query": "SELECT T1.name FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Jeff Maggert"
                        ],
                        [
                            "Dudley Hart"
                        ],
                        [
                            "Billy Mayfair"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM management WHERE temporary_acting = 'Y'"
            },
            {
                "isuser": true,
                "text": "What are their distinct ages?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This list shows the distinct ages for heads that are temporary acting",
                "query": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'",
                "result": [
                    [
                        [
                            "age"
                        ],
                        [
                            53.0
                        ],
                        [
                            52.0
                        ],
                        [
                            69.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT age FROM management WHERE temporary_acting = 'Y'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure! Anything else?",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "No thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "Sorry to hear that. Is there anything else I can help you with?"
            }
        ]
    },
    {
        "db_name": "local_govt_and_lot",
        "turns": [
            {
                "isuser": true,
                "text": "How many customers have at least 3 events\n",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "there are 1 customer who has at least 3 events",
                "query": "select count(customer_id) from (SELECT (T1.customer_id)  FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3)",
                "result": [
                    [
                        [
                            "count(customer_id)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Customer_Events AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  3"
            },
            {
                "isuser": true,
                "text": "What is the id of the customer with at least 3 events?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the id of the customer with at least 3 events is 19",
                "query": " SELECT (T1.customer_id)  FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3",
                "result": [
                    [
                        [
                            "customer_id"
                        ],
                        [
                            19
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_id FROM Customer_Events GROUP BY customer_id HAVING count(*)  >=  3"
            },
            {
                "isuser": true,
                "text": "What are the details for the customer with at least 3 events?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the details for the customer with at least 3 events is Sabryna Moore PhD",
                "query": "SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3",
                "result": [
                    [
                        [
                            "customer_details"
                        ],
                        [
                            "Sabryna Moore PhD"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.customer_details FROM Customer_Events AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  3"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "customers_card_transactions",
        "turns": [
            {
                "isuser": true,
                "text": "How many customers have accounts?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of customers with accounts is 15.",
                "query": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id"
            },
            {
                "isuser": true,
                "text": "What is the customer first, last name and id with the most number of accounts?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The first and last name and ID of the customer with the most number of accounts is Faustino Langworth and 9.",
                "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "customer_first_name",
                            "customer_last_name",
                            "customer_id"
                        ],
                        [
                            "Faustino",
                            "Langworth",
                            9
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_first_name ,  customer_last_name ,  customer_id FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the customer first, last name and id with the least number of accounts?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The first and last name and ID of the customer with the least number of accounts is Susie Wiza and 2.",
                "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
                "result": [
                    [
                        [
                            "customer_first_name",
                            "customer_last_name",
                            "customer_id"
                        ],
                        [
                            "Susie",
                            "Wiza",
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_first_name ,  customer_last_name ,  customer_id FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "cinema",
        "turns": [
            {
                "isuser": true,
                "text": "what is the capacity of county wicklow",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The capacity of the cinema with a location county Wicklow is 1100.",
                "query": "SELECT Capacity FROM cinema WHERE Location = \"County Wicklow\"",
                "result": [
                    [
                        [
                            "Capacity"
                        ],
                        [
                            1100
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "Sorry, the database does not have the capacity of county wicklow."
            },
            {
                "isuser": true,
                "text": "what is the average capacity",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average capacity is 433.6.",
                "query": "SELECT AVG(Capacity) FROM cinema ",
                "result": [
                    [
                        [
                            "AVG(Capacity)"
                        ],
                        [
                            433.6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(capacity) FROM cinema"
            },
            {
                "isuser": true,
                "text": "find the locations that have more than one movie theater with capacity above 300",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the locations with more than one movie theater with capacity above 300.",
                "query": "SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING count(*) > 1\n\n",
                "result": [
                    [
                        [
                            "Location"
                        ],
                        [
                            "County Clare"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING count(*)  >  1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Good bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "tvshow",
        "turns": [
            {
                "isuser": true,
                "text": "No, thanks",
                "type": "improper"
            },
            {
                "isuser": true,
                "text": "how many TV Channels there",
                "type": "answerable",
                "predict": "Goodbye"
            },
            {
                "isuser": false,
                "text": "There are 15 TV Channels.",
                "query": "SELECT count(*) FROM TV_Channel",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable"
            },
            {
                "isuser": true,
                "text": "what is the language of sky music",
                "type": "answerable",
                "predict": "SELECT COUNT(*) FROM TV_Channel"
            },
            {
                "isuser": false,
                "text": "The language of the series sky music is Italian",
                "query": "SELECT language FROM TV_Channel where series_name='Sky Music'",
                "result": [
                    [
                        [
                            "Language"
                        ],
                        [
                            "Italian"
                        ]
                    ]
                ],
                "predict_type": "answerable"
            },
            {
                "isuser": true,
                "text": "what is the title of id 2.0",
                "type": "answerable",
                "predict": "SELECT Language FROM TV_Channel WHERE series_name = \"Sky Music\""
            },
            {
                "isuser": false,
                "text": "the title of the cartoon with id 2.0 is Terror on Dinosaur Island!",
                "query": "SELECT title FROM Cartoon where id=2.0",
                "result": [
                    [
                        [
                            "Title"
                        ],
                        [
                            "Terror on Dinosaur Island!"
                        ]
                    ]
                ],
                "predict_type": "answerable"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper",
                "predict": "SELECT Title FROM Cartoon WHERE id = 2.0"
            },
            {
                "isuser": false,
                "text": "Sure. Do you want to know something else?",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE"
            }
        ]
    },
    {
        "db_name": "icfp_1",
        "turns": [
            {
                "isuser": true,
                "text": "how many papers are presented on the table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 7 papers in total. ",
                "query": "SELECT count(*) FROM papers ",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Papers"
            },
            {
                "isuser": true,
                "text": "please list out the paper id",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The paper ids are shown in the result table. ",
                "query": "SELECT paperID  FROM papers ",
                "result": [
                    [
                        [
                            "paperID"
                        ],
                        [
                            200
                        ],
                        [
                            201
                        ],
                        [
                            202
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT paperID FROM Papers"
            },
            {
                "isuser": true,
                "text": "how many title are presented on the table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 7 titles in total. ",
                "query": "SELECT count(title) FROM papers ",
                "result": [
                    [
                        [
                            "count(title)"
                        ],
                        [
                            7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Papers"
            },
            {
                "isuser": true,
                "text": "please list out the titles on the table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The titles are shown in the result table.",
                "query": "SELECT title FROM papers",
                "result": [
                    [
                        [
                            "title"
                        ],
                        [
                            "Just do it: Simple Monadic Equational Reasoning"
                        ],
                        [
                            "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"
                        ],
                        [
                            "Functional Pearl: Modular Rollback through Control Logging"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT title FROM Papers"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "great, is there anything else you would like to know? ",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "You're welcome."
            },
            {
                "isuser": true,
                "text": "nothing",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "thank you, good bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "Sorry, I don't understand."
            },
            {
                "isuser": true,
                "text": "bye",
                "type": "improper"
            }
        ]
    },
    {
        "db_name": "soccer_2",
        "turns": [
            {
                "isuser": true,
                "text": "can you show me a list of player position?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are all player positions in the table.",
                "query": "SELECT pPos FROM Tryout",
                "result": [
                    [
                        [
                            "pPos"
                        ],
                        [
                            "goalie"
                        ],
                        [
                            "goalie"
                        ],
                        [
                            "striker"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT pPos FROM tryout GROUP BY pPos"
            },
            {
                "isuser": true,
                "text": "can you show me a list of college name?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Yes. This is the list of all college names.",
                "query": "SELECT cName from College",
                "result": [
                    [
                        [
                            "cName"
                        ],
                        [
                            "ASU"
                        ],
                        [
                            "FSU"
                        ],
                        [
                            "LSU"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT cName FROM college"
            },
            {
                "isuser": true,
                "text": "what is the average of enrollments?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the average enrollment.",
                "query": "SELECT avg(enr) from College",
                "result": [
                    [
                        [
                            "avg(enr)"
                        ],
                        [
                            17750.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(enr) FROM college"
            },
            {
                "isuser": true,
                "text": "thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Anything more you'd like to ask?",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "what is the colleges' states?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are states of college.",
                "query": "SELECT state from College",
                "result": [
                    [
                        [
                            "state"
                        ],
                        [
                            "LA"
                        ],
                        [
                            "AZ"
                        ],
                        [
                            "OK"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT state FROM college"
            },
            {
                "isuser": true,
                "text": "find the names of states that have some collage plating in goalie and mid positions.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the names of states that have some collage plating in goalie and mid positions.",
                "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'",
                "result": [
                    [
                        [
                            "state"
                        ],
                        [
                            "LA"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT cName, state FROM college WHERE pPos  =  \"goalie\" OR pPos  =  \"mid\""
            },
            {
                "isuser": true,
                "text": "thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "university_basketball",
        "turns": [
            {
                "isuser": true,
                "text": "Hello!  Can you please show me a list of all of the school names for all schools that are not of the Public affiliation?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Hello! This is the list of all schools that do not have public affiliation.",
                "query": "SELECT School FROM university WHERE affiliation != 'Public'",
                "result": [
                    [
                        [
                            "School"
                        ],
                        [
                            "Lebanon Valley College"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT school FROM university WHERE affiliation != 'Public'"
            },
            {
                "isuser": true,
                "text": "Great!  Can you update that list to include the year that the school was founded?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Sure! This is the list of names and years of founding for all schools that do not have public affiliation",
                "query": "SELECT School,Founded FROM university WHERE affiliation != 'Public'",
                "result": [
                    [
                        [
                            "School",
                            "Founded"
                        ],
                        [
                            "Lebanon Valley College",
                            1866.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT school, founded FROM university WHERE affiliation != 'Public'"
            },
            {
                "isuser": true,
                "text": "Nice!  Can you show me a list of the names of all of the schools?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This shows the list of all schools.",
                "query": "SELECT School FROM university",
                "result": [
                    [
                        [
                            "School"
                        ],
                        [
                            "University of Delaware"
                        ],
                        [
                            "Lebanon Valley College"
                        ],
                        [
                            "University of Rhode Island"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT school FROM university"
            },
            {
                "isuser": true,
                "text": "Wonderful!  Finally, can you update this list to show the affiliation type of each of these schools?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "You are welcome. This shows the list of the school and the affiliation type of each school",
                "query": "SELECT School,Affiliation FROM university",
                "result": [
                    [
                        [
                            "School",
                            "Affiliation"
                        ],
                        [
                            "University of Delaware",
                            "Public"
                        ],
                        [
                            "Lebanon Valley College",
                            "Private/Methodist"
                        ],
                        [
                            "University of Rhode Island",
                            "Public"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT school, affiliation FROM university WHERE affiliation != 'Public'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure! Bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "election_representative",
        "turns": [
            {
                "isuser": true,
                "text": "please show me the names of all of the representatives ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of all the representatives",
                "query": "SELECT Name FROM representative ",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Dan Quayle"
                        ],
                        [
                            "John Quayle"
                        ],
                        [
                            "Al Quie"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM representative"
            },
            {
                "isuser": true,
                "text": "Now show narrow down the list to just those who have not been involved in an election",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of all the representatives who have not been involved in an election ",
                "query": "SELECT Name FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election)",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Al Quie"
                        ],
                        [
                            "Jack Quinn"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election)"
            },
            {
                "isuser": true,
                "text": "now show those representatives and what party they are a member of",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names  and the parties of all the representatives who have not been involved in an election",
                "query": "SELECT Name, party FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election)",
                "result": [
                    [
                        [
                            "Name",
                            "Party"
                        ],
                        [
                            "Al Quie",
                            "Republican"
                        ],
                        [
                            "Jack Quinn",
                            "Republican"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name, party FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "tracking_grants_for_research",
        "turns": [
            {
                "isuser": false,
                "text": "Do you want the types of the documents?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable",
                "predict": "SELECT document_type_code FROM Document_Types"
            },
            {
                "isuser": true,
                "text": "Which of the document is described with the prefix initial?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Document with type code APP is described with the prefix initial.",
                "query": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'",
                "result": [
                    [
                        [
                            "document_type_code"
                        ],
                        [
                            "APP"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_description FROM Document_Types WHERE document_description LIKE '%initial%'"
            },
            {
                "isuser": true,
                "text": "Whats is APP document description?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Initial Application is the document description of document with type code \"APP\"",
                "query": "SELECT document_description  FROM Document_Types WHERE document_type_code = \"APP\"",
                "result": [
                    [
                        [
                            "document_description"
                        ],
                        [
                            "Initial Application"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_description FROM Document_Types WHERE document_type_code = 'APP'"
            },
            {
                "isuser": true,
                "text": "Is there any other document type on the table?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes. REG is the document type that is different from \"APP\"",
                "query": "SELECT document_type_code  FROM Document_Types WHERE document_type_code != \"APP\"",
                "result": [
                    [
                        [
                            "document_type_code"
                        ],
                        [
                            "REG"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_type_code FROM Document_Types WHERE document_type_code NOT IN ('APP')"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "driving_school",
        "turns": [
            {
                "isuser": true,
                "text": "How many people are in the staff?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There're 15 people in the staff",
                "query": "SELECT count(*) FROM Staff",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Staff"
            },
            {
                "isuser": true,
                "text": "How many of these people cancelled their lesson?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "6 of  these people has the status code of their lesson as Cancelled ",
                "query": "SELECT count(DISTINCT T2.staff_id) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T1.lesson_status_code = \"Cancelled\"",
                "result": [
                    [
                        [
                            "count(DISTINCT T2.staff_id)"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Lessons WHERE lesson_status_code = 'Cancelled'"
            },
            {
                "isuser": true,
                "text": "What is the first name of these people?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the first names of people who have the status code of their lesson as Cancelled",
                "query": "SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T1.lesson_status_code = \"Cancelled\" GROUP BY T2.first_name",
                "result": [
                    [
                        [
                            "first_name"
                        ],
                        [
                            "Jedidiah"
                        ],
                        [
                            "Lincoln"
                        ],
                        [
                            "Ludie"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name FROM Customers WHERE customer_status_code = 'Cancelled'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "railway",
        "turns": [
            {
                "isuser": true,
                "text": "Hi, can you please tell me which country has a manager of age above 50?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the countries that have a manager of age above 50.",
                "query": "SELECT Country FROM manager WHERE Age  >  50",
                "result": [
                    [
                        [
                            "Country"
                        ],
                        [
                            "United States"
                        ],
                        [
                            "England"
                        ],
                        [
                            "Australia"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Country FROM manager WHERE Age > 50"
            },
            {
                "isuser": true,
                "text": "what about the countries with manager of age below 46?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the United States is the only country that has a manager of age below 46.",
                "query": "SELECT Country FROM manager WHERE Age  <  46",
                "result": [
                    [
                        [
                            "Country"
                        ],
                        [
                            "United States"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Country FROM manager WHERE Age < 46"
            },
            {
                "isuser": true,
                "text": "what are the countries that are on the table but you didn't mention yet?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "The country where does not have a manager of age either below 46 or above 50 is Scotland.",
                "query": "select country from manager where country not in (SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46)",
                "result": [
                    [
                        [
                            "Country"
                        ],
                        [
                            "Scotland"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Country FROM manager WHERE Country NOT IN (SELECT Country FROM manager WHERE Age > 50)"
            },
            {
                "isuser": true,
                "text": "can you please tell me how many managers Scotland has?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is only one manager from Scotland.",
                "query": "SELECT count(*) FROM manager WHERE Country = 'Scotland'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM manager WHERE Country = 'Scotland'"
            },
            {
                "isuser": true,
                "text": "what about other countries?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are the numbers of managers for each country except Scotland.",
                "query": "SELECT count(*), Country FROM manager WHERE Country != 'Scotland' group by Country",
                "result": [
                    [
                        [
                            "count(*)",
                            "Country"
                        ],
                        [
                            1,
                            "Australia"
                        ],
                        [
                            1,
                            "England"
                        ],
                        [
                            4,
                            "United States"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Country, COUNT(*) AS ManagerCount FROM manager WHERE Country NOT IN ('Scotland') GROUP BY Country"
            },
            {
                "isuser": true,
                "text": "how many level 5 managers does United States have?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 3 managers with level 5 in the United States.",
                "query": "SELECT count(*) FROM manager WHERE Country = 'United States' and Level = 5",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM manager WHERE Country = 'United States' AND Level = 5"
            },
            {
                "isuser": true,
                "text": "and can you please tell me their names?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are the names of the managers with level 5 in the United States.",
                "query": "SELECT Name FROM manager WHERE Country = 'United States' and Level = 5",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Ben Curtis"
                        ],
                        [
                            "Todd Hamilton"
                        ],
                        [
                            "Tiger Woods"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM manager WHERE Country = 'United States' AND Level = 5"
            },
            {
                "isuser": true,
                "text": "thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "customers_campaigns_ecommerce",
        "turns": [
            {
                "isuser": true,
                "text": "what form of payment method did customer ID 1 Use?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " The   method  of  payment   which  belong  to  customer ID 1  is  credit Card",
                "query": "SELECT \tpayment_method FROM customers WHERE customer_id =1",
                "result": [
                    [
                        [
                            "payment_method"
                        ],
                        [
                            "Credit Card"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT payment_method FROM customers WHERE customer_id = 1"
            },
            {
                "isuser": true,
                "text": "what is customer Wendell address?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do  you  mean  the customer address of  Wendell",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT customer_address FROM customers WHERE customer_id = 1"
            },
            {
                "isuser": true,
                "text": "what is  the customer address of Wendell?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The customer address of Wendell is 618 Webster Stream Apt. 161",
                "query": "SELECT customer_address\t FROM customers WHERE customer_name =\"Wendell\"",
                "result": [
                    [
                        [
                            "customer_address"
                        ],
                        [
                            "618 Webster Stream Apt. 161"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_address FROM customers WHERE customer_id = 1"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "college_1",
        "turns": [
            {
                "isuser": true,
                "text": "What is the average GPA of all students?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the average GPA of all students",
                "query": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code",
                "result": [
                    [
                        [
                            "avg(T2.stu_gpa)"
                        ],
                        [
                            3.0549999999999997
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(STU_GPA) FROM STUDENT"
            },
            {
                "isuser": true,
                "text": "What is the average GPA of all students enrolled in the course that has the code ACCT-211?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the average GPA of all students enrolled in the course that has the code ACCT-211",
                "query": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'",
                "result": [
                    [
                        [
                            "avg(T2.stu_gpa)"
                        ],
                        [
                            3.0549999999999997
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(T1.STU_GPA) FROM STUDENT AS T1 JOIN ENROLL AS T2 ON T1.STU_NUM = T2.STU_NUM WHERE T2.CLASS_CODE = 'ACCT-211'"
            },
            {
                "isuser": true,
                "text": "What are the grades of all the students in that course?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the enrollment grades of all the students in the course that has the code ACCT-211",
                "query": "SELECT T1.enroll_grade FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'",
                "result": [
                    [
                        [
                            "ENROLL_GRADE"
                        ],
                        [
                            "C"
                        ],
                        [
                            "B"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT ENROLL_GRADE FROM ENROLL WHERE CLASS_CODE = 'ACCT-211'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "car_1",
        "turns": [
            {
                "isuser": true,
                "text": "which horsepower is hight?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Can you please clarify your question?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT max(Horsepower) FROM CARS_DATA"
            },
            {
                "isuser": true,
                "text": "what is the highest horsepower on the table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The highest horsepower on the table is null.",
                "query": "SELECT Horsepower FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Horsepower"
                        ],
                        [
                            "null"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(Horsepower) FROM CARS_DATA"
            },
            {
                "isuser": true,
                "text": "how many cars data on the table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 406 entries in the cars data table.",
                "query": "SELECT count(*) FROM CARS_DATA",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            406
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM CARS_DATA"
            },
            {
                "isuser": true,
                "text": "how many cylinders on the table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are a total of 2223 cylinders among entries in the cars data table.",
                "query": "SELECT sum(cylinders) FROM CARS_DATA",
                "result": [
                    [
                        [
                            "sum(cylinders)"
                        ],
                        [
                            2223
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM CARS_DATA WHERE Cylinders > 8"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you! Goodbye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "company_1",
        "turns": [
            {
                "isuser": true,
                "text": "Yes. Can you tell me the number of employees?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 8 employees.",
                "query": "SELECT count(*) FROM employee",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM employee"
            },
            {
                "isuser": true,
                "text": "Thank you. Can you tell me how many of them are males?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 5 male employees.",
                "query": "SELECT count(*) FROM employee WHERE Sex = \"M\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM employee WHERE sex = 'M'"
            },
            {
                "isuser": true,
                "text": "Can you also tell me how many employees have a salary lower than 50000?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 7 employees with a salary lower than 50000",
                "query": "SELECT count(*) FROM employee WHERE salary < 50000",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM employee WHERE salary < 50000"
            },
            {
                "isuser": true,
                "text": "Ok.How many male employees have a salary lower than 50000?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "4 male employees have a salary lower than 50000.",
                "query": "SELECT count(*) FROM employee WHERE salary < 50000 and Sex = \"M\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM employee WHERE salary < 50000 AND sex = 'M'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You're welcome! Bye.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "csu_1",
        "turns": [
            {
                "isuser": true,
                "text": "What campuses were opened between 1935 and 1939?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "California State Polytechnic University-Pomona is the campus that was opened between 1935 and 1939.",
                "query": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939",
                "result": [
                    [
                        [
                            "Campus"
                        ],
                        [
                            "California State Polytechnic University-Pomona"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT campus FROM campuses WHERE YEAR  >  1934 AND YEAR  <  1940"
            },
            {
                "isuser": true,
                "text": "What campuses were opened after that?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean opened after 1939?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT campus FROM campuses WHERE YEAR  >  1939"
            },
            {
                "isuser": true,
                "text": "Yes, please",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the campuses that were opened after 1939.",
                "query": "SELECT campus FROM campuses WHERE YEAR  >  1939",
                "result": [
                    [
                        [
                            "Campus"
                        ],
                        [
                            "California State University-Bakersfield"
                        ],
                        [
                            "California State University-Channel Islands"
                        ],
                        [
                            "California State University-Dominguez Hills"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT campus FROM campuses WHERE YEAR  >  1939"
            },
            {
                "isuser": true,
                "text": "How many total campuses were opened?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 23 campuses that have been opened.",
                "query": "SELECT count(*) FROM campuses",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            23
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM campuses"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "thanks. bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "bike_1",
        "turns": [
            {
                "isuser": true,
                "text": "what is the zip code of the highest number of trips taken\n",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "What do you mean by \"highest number of trips taken\"?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT zip_code FROM trip GROUP BY zip_code ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "i would like to know the zip code of trips taken above 200 with humidity below 70\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The zip code of trips taken above 200 with humidity below 70 is 94107.",
                "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  200",
                "result": [
                    [
                        [
                            "zip_code"
                        ],
                        [
                            94107
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT zip_code FROM trip WHERE count(*) > 200 AND weather.mean_humidity < 70 GROUP BY zip_code ORDER BY count(*) DESC"
            },
            {
                "isuser": true,
                "text": "what end station name has the least amount of trips taken but still above 100 trips\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The end station name that has the least amount of trips taken but still above 100 trips is San Francisco Caltrain 2 (330 Townsend).",
                "query": "SELECT \tend_station_name FROM trip GROUP BY zip_code HAVING count(*)  >=  100 order by count(*) asc limit 1",
                "result": [
                    [
                        [
                            "end_station_name"
                        ],
                        [
                            "San Francisco Caltrain 2 (330 Townsend)"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*) > 100 ORDER BY count(*) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "the zip code 94107 what is the humidity?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The following table shows the mean humidity of weather with zip code 94107.",
                "query": "SELECT (mean_humidity) from weather where zip_code = 94107",
                "result": [
                    [
                        [
                            "mean_humidity"
                        ],
                        [
                            75
                        ],
                        [
                            70
                        ],
                        [
                            75
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT mean_humidity_f FROM weather WHERE zip_code = 94107"
            },
            {
                "isuser": true,
                "text": "what was the humidity at the starting station for zip code 94107",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry the question cannot be answered by information in this table.",
                "query": "",
                "result": [],
                "predict_type": "SORRY",
                "predict": "SELECT mean_humidity_f FROM weather WHERE zip_code = 94107 AND start_date = (SELECT start_date FROM trip WHERE zip_code = 94107 AND end_station_name = 'San Jose City College')"
            },
            {
                "isuser": true,
                "text": "Thanks!\n",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "flight_company",
        "turns": [
            {
                "isuser": true,
                "text": "list out the airport names",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The following table is a list of the airport names.",
                "query": "SELECT name FROM airport",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Akureyri Airport"
                        ],
                        [
                            "Schiphol Airport"
                        ],
                        [
                            "Ted Stevens Airport"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM airport"
            },
            {
                "isuser": true,
                "text": "how many airports on this table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 9 airports.",
                "query": "SELECT COUNT(DISTINCT name) FROM airport",
                "result": [
                    [
                        [
                            "COUNT(DISTINCT(name))"
                        ],
                        [
                            9
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM airport"
            },
            {
                "isuser": true,
                "text": "what is the country of Akureyri Airport",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The country of Akureyri Airport is Iceland.",
                "query": "SELECT country FROM Airport WHERE name = \"Akureyri Airport\"",
                "result": [
                    [
                        [
                            "Country"
                        ],
                        [
                            "Iceland"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT country FROM airport WHERE name = \"Akureyri\""
            },
            {
                "isuser": true,
                "text": "what is the city of Schiphol Airport",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Schiphol Airport's city is Amsterdam.",
                "query": "SELECT City from airport where name = \"Schiphol Airport\" ",
                "result": [
                    [
                        [
                            "City"
                        ],
                        [
                            "Amsterdam"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT city FROM airport WHERE name = \"Schiphol\""
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Do you have any more questions?",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "no",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Good bye then!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "I apologize, I don't understand your question. Could you please rephrase it?"
            }
        ]
    },
    {
        "db_name": "behavior_monitoring",
        "turns": [
            {
                "isuser": true,
                "text": "What is the highest average monthly rental of all the students?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The highest average monthly rental of all the students is 1113.0996.",
                "query": "SELECT monthly_rental FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "monthly_rental"
                        ],
                        [
                            1113.0996
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(avg_monthly_rental) FROM (SELECT student_id ,  avg(monthly_rental) as avg_monthly_rental FROM student_addresses GROUP BY student_id)"
            },
            {
                "isuser": true,
                "text": "Hmm, can you tell me the addresses that have the highest average monthly rental?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The address id of the student address that has the highest average monthly rental is 10.",
                "query": "SELECT T2.address_id FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "address_id"
                        ],
                        [
                            10
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 ,  T1.city ,  T1.zip_postcode ,  T1.state_province_county ,  T1.country ,  T1.other_address_details ,  T2.avg_monthly_rental FROM Addresses AS T1 JOIN (SELECT student_id ,  avg(monthly_rental) as avg_monthly_rental FROM student_addresses GROUP BY student_id) AS T2 ON T1.address_id  =  T2.student_id GROUP BY T1.address_id ORDER BY T2.avg_monthly_rental DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What are the id and first name of the student whose addresses have the highest average monthly rental?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the  id and first name of the student whose addresses have the highest average monthly rental.",
                "query": "SELECT T1.student_id ,  T2.first_name FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "student_id",
                            "first_name"
                        ],
                        [
                            3,
                            "Rhea"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.student_id ,  T1.first_name FROM Students AS T1 JOIN Student_Addresses AS T2 ON T1.student_id  =  T2.student_id WHERE T2.avg_monthly_rental  =  (SELECT max(avg_monthly_rental) FROM (SELECT student_id ,  avg(monthly_rental) as avg_monthly_rental FROM student_addresses GROUP BY student_id))"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "browser_web",
        "turns": [
            {
                "isuser": true,
                "text": "Which browsers are compatible with firefox?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are no browsers compatible with Firefox.",
                "query": "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'Firefox'",
                "result": [
                    [
                        [
                            "name"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id WHERE T3.name = \"Firefox\""
            },
            {
                "isuser": true,
                "text": "WHat about with Fasterfox?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names of browsers compatible with \"Fasterfox\" are shown in the following table.",
                "query": "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'Fasterfox'",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Internet Explorer"
                        ],
                        [
                            "Firefox"
                        ],
                        [
                            "Safari"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id WHERE T3.name = \"Fasterfox\""
            },
            {
                "isuser": true,
                "text": "Which browsers are compatible with CACHebox?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names of browsers compatible with \"CACHEbox\" are shown in the following table.",
                "query": "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'CACHEbox'",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Internet Explorer"
                        ],
                        [
                            "Firefox"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id WHERE T3.name = \"CACHebox\""
            },
            {
                "isuser": true,
                "text": "Which browsers are compatible with both?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox' is shown in the following table.",
                "query": "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'Fasterfox'",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Firefox"
                        ],
                        [
                            "Internet Explorer"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id WHERE T3.name = \"Firefox\" INTERSECT SELECT T2.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id WHERE T3.name = \"Fasterfox\""
            },
            {
                "isuser": true,
                "text": "Thanks!\n",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "assets_maintenance",
        "turns": [
            {
                "isuser": false,
                "text": "Do you want the id, first name and last name of that engineer?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable",
                "predict": "SELECT engineer_id ,  first_name ,  last_name FROM maintenance_engineers WHERE company_id  =  2"
            },
            {
                "isuser": true,
                "text": "which engineer made the least number of visits?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Here are the id, first, and last names of the engineer who has the least number of visits.",
                "query": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id  =  T2.engineer_id GROUP BY T1.engineer_id ORDER BY count(*) ASC LIMIT 1",
                "result": [
                    [
                        [
                            "engineer_id",
                            "first_name",
                            "last_name"
                        ],
                        [
                            1,
                            "Etha",
                            "Reinger"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name ,  COUNT(*) AS num_visits FROM engineer_visits AS T1 JOIN maintenance_engineers AS T2 ON T1.engineer_id  =  T2.engineer_id GROUP BY T1.engineer_id ORDER BY num_visits ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "how many visits did each engineer have?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the table of the number of visits of each engineer along with their ids.",
                "query": "SELECT count(*),T1.engineer_id FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id  =  T2.engineer_id GROUP BY T1.engineer_id",
                "result": [
                    [
                        [
                            "count(*)",
                            "engineer_id"
                        ],
                        [
                            1,
                            1
                        ],
                        [
                            2,
                            4
                        ],
                        [
                            1,
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name ,  COUNT(*) AS num_visits FROM engineer_visits AS T1 JOIN maintenance_engineers AS T2 ON T1.engineer_id  =  T2.engineer_id GROUP BY T1.engineer_id"
            },
            {
                "isuser": true,
                "text": "can you list the engineer id, first name, and last name of the engineer who had the least number of visits?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the id, first, and last names of the engineer who has the least number of visits.",
                "query": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name ,count(*)FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id  =  T2.engineer_id GROUP BY T1.engineer_id ORDER BY count(*) limit 1",
                "result": [
                    [
                        [
                            "engineer_id",
                            "first_name",
                            "last_name",
                            "count(*)"
                        ],
                        [
                            1,
                            "Etha",
                            "Reinger",
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name ,  COUNT(*) AS num_visits FROM engineer_visits AS T1 JOIN maintenance_engineers AS T2 ON T1.engineer_id  =  T2.engineer_id GROUP BY T1.engineer_id ORDER BY num_visits ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "sports_competition",
        "turns": [
            {
                "isuser": true,
                "text": "Show me the names of all clubs?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table that shows the name in each club. For example, one of the clubs is AIB.",
                "query": "select name from club",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "AIB"
                        ],
                        [
                            "BK Slide"
                        ],
                        [
                            "IFG"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM club"
            },
            {
                "isuser": true,
                "text": "Show me the name of the club that has the id number 3 ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the club that has the id number 3 is IFG.",
                "query": "select name from club where Club_ID='3'",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "IFG"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM club WHERE Club_ID = 3"
            },
            {
                "isuser": true,
                "text": "Show me the region of the club BK Slide?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The region of club named \"BK Slide\" is \"UK\".",
                "query": "select Region from club where name='BK Slide'",
                "result": [
                    [
                        [
                            "Region"
                        ],
                        [
                            "UK"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Region FROM club WHERE name = 'BK Slide'"
            },
            {
                "isuser": true,
                "text": "Show me the names of the clubs that do not have any players?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the club that do not have any players is \"HSBIF\".",
                "query": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "HSBIF"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "news_report",
        "turns": [
            {
                "isuser": true,
                "text": "What is the total number of journalists?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The total number of journalists is 11",
                "query": "SELECT COUNT(*) FROM journalist",
                "result": [
                    [
                        [
                            "COUNT(*)"
                        ],
                        [
                            11
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM journalist"
            },
            {
                "isuser": true,
                "text": "How many journalists have worked for more than 5 years?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 8 journalists who have worked for more than 5 years.",
                "query": "SELECT COUNT(*) FROM journalist WHERE years_working > 5",
                "result": [
                    [
                        [
                            "COUNT(*)"
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM journalist WHERE Years_working > 5"
            },
            {
                "isuser": true,
                "text": "What is the name of the journalist who has worked longest?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the journalist who has largest years working is Jackie Waring",
                "query": "SELECT name FROM journalist ORDER BY Years_working DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Jackie Waring"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM journalist ORDER BY Years_working DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "No problem, bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "apartment_rentals",
        "turns": [
            {
                "isuser": true,
                "text": "How many apartments are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of apartments is 15.",
                "query": "SELECT count(*) FROM Apartments",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Apartments"
            },
            {
                "isuser": true,
                "text": "How many different facilities are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of different apartment facilities is 7. ",
                "query": "SELECT count(*) FROM Apartment_Facilities",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(DISTINCT facility_code) FROM Apartment_Facilities"
            },
            {
                "isuser": true,
                "text": "Can you list the different facilities?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the information about all facilities.",
                "query": "SELECT * FROM Apartment_Facilities",
                "result": [
                    [
                        [
                            "apt_id",
                            "facility_code"
                        ],
                        [
                            1,
                            "Boardband"
                        ],
                        [
                            2,
                            "Boardband"
                        ],
                        [
                            3,
                            "Gym"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT facility_code FROM Apartment_Facilities"
            },
            {
                "isuser": true,
                "text": "How many apartments have facilities?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of apartments that have facilities is 7.",
                "query": "SELECT count(*) FROM Apartments WHERE apt_id IN (SELECT apt_id FROM Apartment_Facilities)",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id"
            },
            {
                "isuser": true,
                "text": "How many apartments have no facilities?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of apartments that do not have facilities is 8.",
                "query": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Apartments AS T1 WHERE NOT EXISTS (SELECT 1 FROM Apartment_Facilities AS T2 WHERE T2.apt_id = T1.apt_id)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "device",
        "turns": [
            {
                "isuser": true,
                "text": "how many locations have shops that opened before 2008?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is no shop that opened before 2008.",
                "query": "select count(Location) from shop where Open_Year='2008'",
                "result": [
                    [
                        [
                            "count(Location)"
                        ],
                        [
                            0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM (SELECT DISTINCT location FROM shop WHERE open_year  <  2008)"
            },
            {
                "isuser": true,
                "text": "how many shops opened later than 2012?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 5 shops opened later than 2012.",
                "query": "select count(Location) from shop where Open_Year>'2012'",
                "result": [
                    [
                        [
                            "count(Location)"
                        ],
                        [
                            5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM shop WHERE open_year  >  2012"
            },
            {
                "isuser": true,
                "text": "can you show the locations for those stores?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table shows the locations for the shops which opened later than 2012.",
                "query": "select Location from shop where Open_Year>'2012'",
                "result": [
                    [
                        [
                            "Location"
                        ],
                        [
                            "Dinas"
                        ],
                        [
                            "Gelli"
                        ],
                        [
                            "Penygraig"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT location FROM shop WHERE open_year  >  2012"
            },
            {
                "isuser": true,
                "text": "are there locations with shops that opened before 2008?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes, and there are 2 of them, their locations are Cymmer and Porth.",
                "query": "select Location from shop where Open_Year<'2008'",
                "result": [
                    [
                        [
                            "Location"
                        ],
                        [
                            "Cymmer"
                        ],
                        [
                            "Porth"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM (SELECT DISTINCT location FROM shop WHERE open_year  <  2008)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "university_basketball",
        "turns": [
            {
                "isuser": true,
                "text": "Can you show me a list of colleges that have an enrollment of 15,000 or higher?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you want the names of the schools that have an enrollment of 15000 or higher?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT school FROM university WHERE enrollment  >=  15000"
            },
            {
                "isuser": true,
                "text": "Can you provide the name and the location of the schools that have an enrollment of 15,000 or higher?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Ok. Here is the result table of the names and the locations of the schools that have an enrollment of 15,000 or higher. For example, one of the schools is the University of Delaware with location Newark, DE.",
                "query": "SELECT School, Location FROM university WHERE enrollment > 15000",
                "result": [
                    [
                        [
                            "School",
                            "Location"
                        ],
                        [
                            "University of Delaware",
                            "Newark, DE"
                        ],
                        [
                            "University of Rhode Island",
                            "Kingston, RI"
                        ],
                        [
                            "Rutgers University",
                            "New Brunswick, NJ"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT school, location FROM university WHERE enrollment  >=  15000"
            },
            {
                "isuser": true,
                "text": "What conference are these schools in?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of the conferences that the schools that have an enrollment of 15,000 or higher are in. For example, one of the conferences is the Colonial Athletic Association ( D-I )",
                "query": "SELECT Primary_conference FROM university WHERE School in (SELECT School FROM university WHERE enrollment > 15000)",
                "result": [
                    [
                        [
                            "Primary_conference"
                        ],
                        [
                            "Colonial Athletic Association ( D-I )"
                        ],
                        [
                            "Atlantic 10 Conference ( D-I )"
                        ],
                        [
                            "American Athletic Conference ( D-I )"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT primary_conference FROM university WHERE enrollment  >=  15000"
            },
            {
                "isuser": true,
                "text": "Can you show the school names, location and conferences together?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Sure. Here is the table that shows the school names, location, and conferences of the schools that have an enrollment of 15,000 or higher.",
                "query": "SELECT School, Location, Primary_conference FROM university WHERE enrollment > 15000",
                "result": [
                    [
                        [
                            "School",
                            "Location",
                            "Primary_conference"
                        ],
                        [
                            "University of Delaware",
                            "Newark, DE",
                            "Colonial Athletic Association ( D-I )"
                        ],
                        [
                            "University of Rhode Island",
                            "Kingston, RI",
                            "Atlantic 10 Conference ( D-I )"
                        ],
                        [
                            "Rutgers University",
                            "New Brunswick, NJ",
                            "American Athletic Conference ( D-I )"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT school, location, primary_conference FROM university WHERE enrollment  >=  15000"
            },
            {
                "isuser": true,
                "text": "Are there any colleges in PA that have an enrollment count greater than 15000 that can be added to this table?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "No, there isn't any college in PA that has an enrollment count greater than 15000.",
                "query": "SELECT School, Location, Primary_conference FROM university WHERE enrollment > 15000",
                "result": [
                    [
                        [
                            "School",
                            "Location",
                            "Primary_conference"
                        ],
                        [
                            "University of Delaware",
                            "Newark, DE",
                            "Colonial Athletic Association ( D-I )"
                        ],
                        [
                            "University of Rhode Island",
                            "Kingston, RI",
                            "Atlantic 10 Conference ( D-I )"
                        ],
                        [
                            "Rutgers University",
                            "New Brunswick, NJ",
                            "American Athletic Conference ( D-I )"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT school, location, primary_conference FROM university WHERE enrollment  >=  15000 AND affiliation = 'PA'"
            },
            {
                "isuser": true,
                "text": "Can you add the enrollment count to the table?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes. Here is the table that shows the school names, locations, conferences, and enrollment counts of the schools that have an enrollment of 15,000 or higher.",
                "query": "SELECT School, Location, Primary_conference, enrollment FROM university WHERE enrollment > 15000",
                "result": [
                    [
                        [
                            "School",
                            "Location",
                            "Primary_conference",
                            "Enrollment"
                        ],
                        [
                            "University of Delaware",
                            "Newark, DE",
                            "Colonial Athletic Association ( D-I )",
                            19067.0
                        ],
                        [
                            "University of Rhode Island",
                            "Kingston, RI",
                            "Atlantic 10 Conference ( D-I )",
                            19095.0
                        ],
                        [
                            "Rutgers University",
                            "New Brunswick, NJ",
                            "American Athletic Conference ( D-I )",
                            56868.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT school, location, primary_conference, enrollment FROM university WHERE enrollment  >=  15000 AND affiliation = 'PA'"
            },
            {
                "isuser": true,
                "text": "Can you add the minimum enrollment count to the table?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "No, I cannot.",
                "query": "",
                "result": [],
                "predict_type": "SORRY",
                "predict": "SELECT school, location, primary_conference, enrollment FROM university WHERE enrollment  >=  15000 AND affiliation = 'PA'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "sports_competition",
        "turns": [
            {
                "isuser": true,
                "text": "WHich country had the most competitions?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Russia is the country that had the most competitions.",
                "query": "SELECT country FROM competition GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Country"
                        ],
                        [
                            "Russia"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT country FROM competition GROUP BY country ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What year did most competitions occur?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "2007 was the year that most competitions occurred.",
                "query": "SELECT year FROM competition GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Year"
                        ],
                        [
                            2007.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT YEAR FROM competition GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What about the most common type?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Friendly is the most common competition type.",
                "query": "SELECT competition_type FROM competition GROUP BY competition_type ORDER BY COUNT(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Competition_type"
                        ],
                        [
                            "Friendly"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "THanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks. Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "icfp_1",
        "turns": [
            {
                "isuser": true,
                "text": "which author wrote the paper nameless, painless",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "do you mean which author wrote the paper titled \"nameless, painless\"?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T2.fname, T2.lname FROM AUTHORSHIP AS T1 JOIN AUTHORS AS T2 ON T1.authID = T2.authID JOIN PAPERS AS T3 ON T1.paperID = T3.paperID WHERE T3.title = \"Nameless, Painless\""
            },
            {
                "isuser": true,
                "text": "yes\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "What information do you want to know about the author? The ID, first, or last name?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T2.fname, T2.lname FROM AUTHORSHIP AS T1 JOIN AUTHORS AS T2 ON T1.authID = T2.authID JOIN PAPERS AS T3 ON T1.paperID = T3.paperID WHERE T3.title = \"Nameless, Painless\""
            },
            {
                "isuser": true,
                "text": "first and last name\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the first name and last name of the author who wrote the paper \"Nameless, Painless\"",
                "query": "SELECT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  \"Nameless ,  Painless\"",
                "result": [
                    [
                        [
                            "fname",
                            "lname"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.fname ,  T2.lname FROM AUTHORSHIP AS T1 JOIN AUTHORS AS T2 ON T1.authID  =  T2.authID JOIN PAPERS AS T3 ON T1.paperID  =  T3.paperID WHERE T3.title  =  \"Nameless, Painless\""
            }
        ]
    },
    {
        "db_name": "employee_hire_evaluation",
        "turns": [
            {
                "isuser": true,
                "text": "Which district has the largest number of products?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Lahden Stadion has the largest number of products",
                "query": "SELECT district FROM shop ORDER BY number_products DESC LIMIT 1",
                "result": [
                    [
                        [
                            "District"
                        ],
                        [
                            "Lahden Stadion"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT District FROM Shop GROUP BY District ORDER BY Number_products DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the manager's name of that shop?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Ilkka Mäkelä is the manager of the shop which has the largest number of products.",
                "query": "SELECT manager_name FROM shop ORDER BY number_products DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Manager_name"
                        ],
                        [
                            "Ilkka Mäkelä"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Manager_name FROM Shop WHERE District = (SELECT District FROM Shop GROUP BY District ORDER BY Number_products DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "How many products did he produce at that shop?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of products in the shop of that manager which has the largest number of products is 15000.",
                "query": "SELECT number_products FROM shop ORDER BY number_products DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Number_products"
                        ],
                        [
                            15000
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Number_products FROM Shop WHERE District = (SELECT District FROM Shop GROUP BY District ORDER BY Number_products DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "Where is the location of that district?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The location of the district that has the shop with the largest number of products is Lahti",
                "query": "SELECT location FROM shop ORDER BY number_products DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Location"
                        ],
                        [
                            "Lahti"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Location FROM Shop WHERE District = (SELECT District FROM Shop GROUP BY District ORDER BY Number_products DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "What is the shop ID number?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The shop id of the shop which has the largest number of products is 8",
                "query": "SELECT shop_ID FROM shop ORDER BY number_products DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Shop_ID"
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Shop_ID FROM Shop WHERE District = (SELECT District FROM Shop GROUP BY District ORDER BY Number_products DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "tracking_grants_for_research",
        "turns": [
            {
                "isuser": true,
                "text": "find out the send dates of the documents with the grant amount of more 5000 were granted by organisation type described",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "here are the send dates of the documents with the grant amount of more 5000 were granted by organisation type described",
                "query": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'",
                "result": [
                    [
                        [
                            "sent_date"
                        ],
                        [
                            "1986-11-30 07:56:35"
                        ],
                        [
                            "1979-07-04 08:54:23"
                        ],
                        [
                            "2001-06-18 06:35:49"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.sent_date FROM Documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id WHERE T3.organisation_type  =  'Research' AND T2.grant_amount  >  5000"
            },
            {
                "isuser": true,
                "text": "list the \norganisation type",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the  organisation type",
                "query": "select organisation_type from Organisation_Types ",
                "result": [
                    [
                        [
                            "organisation_type"
                        ],
                        [
                            "RES"
                        ],
                        [
                            "SPON"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T3.organisation_type FROM Documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id WHERE T3.organisation_type  =  'Research' AND T2.grant_amount  >  5000"
            },
            {
                "isuser": true,
                "text": "how much grant amount in organisation id 10",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the  amount of grant which  in organisation id 10 is 2",
                "query": "select count(grant_id) from Grants where organisation_id = 10",
                "result": [
                    [
                        [
                            "count(grant_id)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.grant_amount FROM Documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id WHERE T2.organisation_id  =  10"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "e_learning",
        "turns": [
            {
                "isuser": true,
                "text": "What are the enrollment dates of all the tests that have result \"Pass\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the enrollment dates of all the tests that have result \"Pass\"",
                "query": "SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Pass\"",
                "result": [
                    [
                        [
                            "date_of_enrolment"
                        ],
                        [
                            "2017-10-10 10:05:03"
                        ],
                        [
                            "2017-09-21 07:05:01"
                        ],
                        [
                            "2017-09-21 07:05:01"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT date_of_enrolment FROM Student_Course_Enrolment WHERE course_id IN (SELECT course_id FROM Courses WHERE course_name IN (SELECT course_name FROM Courses WHERE course_description IN (SELECT course_description FROM Courses WHERE course_description LIKE '%pass%')))"
            },
            {
                "isuser": true,
                "text": "What are the student IDs of students who passed the test?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the student IDs of students who passed the test",
                "query": "SELECT T1.student_id FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Pass\"",
                "result": [
                    [
                        [
                            "student_id"
                        ],
                        [
                            6
                        ],
                        [
                            12
                        ],
                        [
                            12
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT student_id FROM Student_Tests_Taken WHERE test_result = \"Pass\""
            },
            {
                "isuser": true,
                "text": "How many students passed the test?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " 8 students passed the test ",
                "query": "SELECT count(T1.student_id) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Pass\"",
                "result": [
                    [
                        [
                            "count(T1.student_id)"
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM Student_Tests_Taken WHERE test_result = \"Pass\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome，goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "county_public_safety",
        "turns": [
            {
                "isuser": false,
                "text": "Did you mean the top 5 cities with most white population?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable",
                "predict": "SELECT name FROM city WHERE white  =  (SELECT max(white) FROM city)"
            },
            {
                "isuser": true,
                "text": "how many cities are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of cities is 17.",
                "query": "SELECT count(*) FROM city ",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            17
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM city"
            },
            {
                "isuser": true,
                "text": "which city has most hispanic population?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The city that has the most Hispanic population is Adjuntas",
                "query": "SELECT Name FROM city ORDER BY Hispanic DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Adjuntas"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM city WHERE hispanic  =  (SELECT max(hispanic) FROM city)"
            },
            {
                "isuser": true,
                "text": "what about black?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The city that has the most Black population is Arroyo.",
                "query": "SELECT Name FROM city ORDER BY Black DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Arroyo"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM city WHERE black  =  (SELECT max(black) FROM city)"
            },
            {
                "isuser": true,
                "text": "what about white?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The city that has the most white population is Adjuntas",
                "query": "SELECT Name FROM city ORDER BY white DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Adjuntas"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM city WHERE white  =  (SELECT max(white) FROM city)"
            },
            {
                "isuser": true,
                "text": "what about top 5?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Here are the top 5 cities that have the most white population",
                "query": "SELECT Name FROM city ORDER BY white DESC LIMIT 5",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Adjuntas"
                        ],
                        [
                            "Camuy"
                        ],
                        [
                            "Aguada"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM city ORDER BY white DESC LIMIT 5"
            },
            {
                "isuser": true,
                "text": "Thanks!\n",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "musical",
        "turns": [
            {
                "isuser": true,
                "text": "Give me the list of nominees that has been nominated multiple times for musicals",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Bob Fosse and Cleavant Derricks are the nominees that have been nominated for more than 1 times for musicals.",
                "query": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  1",
                "result": [
                    [
                        [
                            "Nominee"
                        ],
                        [
                            "Bob Fosse"
                        ],
                        [
                            "Cleavant Derricks"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  1"
            },
            {
                "isuser": true,
                "text": "And what musicals were they nominated for?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the musicals made by the nominees that have been nominated for more than 1 times are Chicago and Rent.",
                "query": "SELECT name FROM musical GROUP BY Nominee HAVING COUNT(*)  > 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Chicago"
                        ],
                        [
                            "Rent"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Award,Category FROM musical WHERE Nominee IN (SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  1)"
            },
            {
                "isuser": true,
                "text": "What year(s) were they nominated in? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the years that the nominees that have been nominated for more than 1 times nominated in.",
                "query": "SELECT year FROM musical GROUP BY Nominee HAVING COUNT(*)  > 1",
                "result": [
                    [
                        [
                            "Year"
                        ],
                        [
                            1986
                        ],
                        [
                            1986
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT Year FROM musical WHERE Nominee IN (SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  1)"
            },
            {
                "isuser": true,
                "text": "Who else was also nominated in 1986?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the nominee that was nominated in 1986 besides Bob Fosse is Cleavant Derricks",
                "query": "SELECT distinct nominee FROM musical where year = 1986 and nominee != \"Bob Fosse\"",
                "result": [
                    [
                        [
                            "Nominee"
                        ],
                        [
                            "Cleavant Derricks"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Nominee FROM musical WHERE Year = 1986"
            },
            {
                "isuser": true,
                "text": "What musicals were they nominated for?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The nominee Cleavant Derricks was nominated for Les Misérables and Rent in the year of 1986",
                "query": "SELECT name FROM musical where year = 1986 and nominee = \"Cleavant Derricks\"",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Les Misérables"
                        ],
                        [
                            "Rent"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Award,Category FROM musical WHERE Nominee IN (SELECT Nominee FROM musical WHERE Year = 1986)"
            },
            {
                "isuser": true,
                "text": "And in what categories were those nominations?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names and the categories of the nomination of Cleavant Derricks in the year of 1986",
                "query": "SELECT name, category FROM musical where year = 1986 and nominee = \"Cleavant Derricks\"",
                "result": [
                    [
                        [
                            "Name",
                            "Category"
                        ],
                        [
                            "Les Misérables",
                            "Best Performance by a Leading Actor in a Musical"
                        ],
                        [
                            "Rent",
                            "Outstanding Actor in a Musical"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT Category FROM musical WHERE Nominee IN (SELECT Nominee FROM musical WHERE Year = 1986)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you! Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "movie_1",
        "turns": [
            {
                "isuser": true,
                "text": "Hello, how many ratings have the same reviewer and director name?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "only 1 rating  have the same reviewer and director name",
                "query": "SELECT count(*) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.director = T3.name"
            },
            {
                "isuser": true,
                "text": "What is the reviewer name associated with that rating?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the reviewer name associated with the rating which has the same reviewer name and director name is James Cameron",
                "query": "SELECT DISTINCT T3.name  FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "James Cameron"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.director = T3.name"
            },
            {
                "isuser": true,
                "text": "How about the movie title?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "the title of the movie associated with the rating which has the same reviewer name and director name is Avatar",
                "query": "SELECT DISTINCT T2.title  FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name",
                "result": [
                    [
                        [
                            "title"
                        ],
                        [
                            "Avatar"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.director = T3.name"
            },
            {
                "isuser": true,
                "text": "What about the number of stars it received?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the number of stars of the movie associated with the rating which has the same reviewer name and director name is 5",
                "query": "SELECT DISTINCT T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name",
                "result": [
                    [
                        [
                            "stars"
                        ],
                        [
                            5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.director = T3.name"
            },
            {
                "isuser": true,
                "text": "* I have left the chat *",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome,goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "Goodbye!"
            }
        ]
    },
    {
        "db_name": "coffee_shop",
        "turns": [
            {
                "isuser": true,
                "text": "what is the average level of membership?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average level of membership is 5.5",
                "query": "SELECT avg(level_of_membership) FROM member",
                "result": [
                    [
                        [
                            "avg(level_of_membership)"
                        ],
                        [
                            5.5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(Level_of_membership) FROM member"
            },
            {
                "isuser": true,
                "text": "How many membership cards are black?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "6 membership cards are black.",
                "query": "SELECT count(*) FROM member WHERE membership_card = \"Black\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM member WHERE Membership_card = \"Black\""
            },
            {
                "isuser": true,
                "text": "what's the average time of purchase for white membership card?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the average time of purchase for white membership cards is 32.25",
                "query": "SELECT avg(time_of_purchase) FROM member WHERE membership_card = \"White\"",
                "result": [
                    [
                        [
                            "avg(time_of_purchase)"
                        ],
                        [
                            32.25
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(Time_of_purchase) FROM member WHERE Membership_card = \"White\""
            },
            {
                "isuser": true,
                "text": "What are their names?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of people with white membership card.",
                "query": "SELECT name FROM member WHERE membership_card = \"White\"",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Breton, Robert"
                        ],
                        [
                            "Hayes, Steven"
                        ],
                        [
                            "Komisarjevsky, Joshua"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM member WHERE Membership_card = \"White\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "assets_maintenance",
        "turns": [
            {
                "isuser": true,
                "text": "Which part has the least faults?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Middle is the name of part that has the least faults.",
                "query": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1",
                "result": [
                    [
                        [
                            "part_name"
                        ],
                        [
                            "middle"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.part_name ,  count(*) FROM parts AS T1 JOIN part_faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "How many faults does the middle have?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Middle part has two faults.",
                "query": "SELECT T1.part_name, count(*) FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id where T1.part_name = \"middle\"",
                "result": [
                    [
                        [
                            "part_name",
                            "count(*)"
                        ],
                        [
                            "middle",
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Part_Faults WHERE part_fault_id = 3"
            },
            {
                "isuser": true,
                "text": "What is the average number of faults for all products?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "5 is the average number of faults for all products.",
                "query": "SELECT avg(cnt) from (SELECT count(*) as cnt FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name ORDER BY count(*))",
                "result": [
                    [
                        [
                            "avg(cnt)"
                        ],
                        [
                            5.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(count) FROM (SELECT count(*) FROM Part_Faults GROUP BY part_id) AS T1"
            },
            {
                "isuser": true,
                "text": "What faults does the middle have?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Middle part has PW and MW faults.",
                "query": "SELECT fault_short_name from Part_Faults WHERE part_id in (SELECT T2.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1)",
                "result": [
                    [
                        [
                            "fault_short_name"
                        ],
                        [
                            "PW"
                        ],
                        [
                            "MW"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.fault_description FROM Part_Faults AS T1 JOIN Part_Faults_Parts AS T2 ON T1.part_fault_id = T2.part_fault_id WHERE T2.part_id = 2"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Welcome! Goodbye.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "flight_company",
        "turns": [
            {
                "isuser": true,
                "text": "How many airports are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 9 airports. ",
                "query": "SELECT count(*) FROM airport",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            9
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM airport"
            },
            {
                "isuser": true,
                "text": "How many total companies are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 14 companies. ",
                "query": "SELECT count(*) FROM operate_company",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            14
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM operate_company"
            },
            {
                "isuser": true,
                "text": "How many companies operate airlines in each airport?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you want the result by airport id, or airport name or all airport information? ",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT count(*) ,  T1.city FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T1.city"
            },
            {
                "isuser": true,
                "text": "I would like the results by airport id, please.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of companies that operate each airport per airport_id are shown in the result table. ",
                "query": "SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id",
                "result": [
                    [
                        [
                            "id",
                            "count(*)"
                        ],
                        [
                            1,
                            1
                        ],
                        [
                            2,
                            3
                        ],
                        [
                            3,
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) ,  T1.id FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T1.id"
            },
            {
                "isuser": true,
                "text": "How many airports are in the United States?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 3 airports in the United States. ",
                "query": "SELECT count(*) from airport where country = \"United States\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM airport WHERE country = \"United States\""
            },
            {
                "isuser": true,
                "text": "How many companies operate in airports in the United States?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 4 companies that operate in airports in the United States. ",
                "query": "SELECT count(distinct T1.id) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id JOIN airport AS T3 ON T2.airport_id = T3.id where T3.country = \"United States\"",
                "result": [
                    [
                        [
                            "count(distinct T1.id)"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) ,  T1.city FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T1.city"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, goodbye. ",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "insurance_policies",
        "turns": [
            {
                "isuser": false,
                "text": "Did you mean customers chose policies with type code \"Car\"?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable",
                "predict": "I apologize, but I cannot answer that question. The database does not contain information about which customers chose which policies."
            },
            {
                "isuser": true,
                "text": "how many policy types are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 4 different policy types.",
                "query": "SELECT count(DISTINCT Policy_Type_Code) FROM Customer_Policies ",
                "result": [
                    [
                        [
                            "count(DISTINCT Policy_Type_Code)"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(DISTINCT Policy_Type_Code) FROM Customer_Policies"
            },
            {
                "isuser": true,
                "text": "what are those types?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the policy types ",
                "query": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code \n",
                "result": [
                    [
                        [
                            "Policy_Type_Code"
                        ],
                        [
                            "Car"
                        ],
                        [
                            "Life"
                        ],
                        [
                            "Property"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT Policy_Type_Code FROM Customer_Policies"
            },
            {
                "isuser": true,
                "text": "how many times has a customer chosen car",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "There are 4 times that a customer chose a policy with type code car.",
                "query": "SELECT count(*) FROM Customer_Policies  WHERE Policy_type_code = \"Car\"\n\n",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM Customer_Policies WHERE Policy_Type_Code = \"Car\""
            },
            {
                "isuser": true,
                "text": "how about life?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 2 times that a customer chose a policy with type code life.",
                "query": "SELECT count(*) FROM Customer_Policies  WHERE Policy_type_code = \"Life\"\n\n",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM Customer_Policies WHERE Policy_Type_Code = \"Life\""
            },
            {
                "isuser": true,
                "text": "what about for each of the last two policies?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the times a customer chose a policy with type code life or car.",
                "query": "SELECT count(*), Policy_type_code FROM Customer_Policies  GROUP BY  Policy_type_code having policy_type_code = \"Life\" or policy_type_code = \"Car\";\n\n",
                "result": [
                    [
                        [
                            "count(*)",
                            "Policy_Type_Code"
                        ],
                        [
                            4,
                            "Car"
                        ],
                        [
                            2,
                            "Life"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Policy_Type_Code, COUNT(*) FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY COUNT(*) DESC LIMIT 2"
            },
            {
                "isuser": true,
                "text": "Which of those has the highest count of customers?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Travel is the type of the policy that has the highest count of customers.",
                "query": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1\n\n",
                "result": [
                    [
                        [
                            "Policy_Type_Code"
                        ],
                        [
                            "Travel"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Policy_Type_Code, COUNT(*) AS Policy_Count FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY Policy_Count DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "And which has least?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Life is the type of policy that has the least count of customers",
                "query": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*)  LIMIT 1\n\n",
                "result": [
                    [
                        [
                            "Policy_Type_Code"
                        ],
                        [
                            "Life"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Policy_Type_Code, COUNT(*) AS Policy_Count FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY Policy_Count ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Which policy had the most, again?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Travel is the type of the policy that has the highest count of customers.",
                "query": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1\n\n",
                "result": [
                    [
                        [
                            "Policy_Type_Code"
                        ],
                        [
                            "Travel"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Policy_Type_Code, COUNT(*) AS Policy_Count FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY Policy_Count DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "driving_school",
        "turns": [
            {
                "isuser": true,
                "text": "How many people are named Janessa?\n",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the number of people whose first name is Janessa?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT count(*) FROM Customers WHERE first_name = \"Janessa\""
            },
            {
                "isuser": true,
                "text": "Yes\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of people whose first name is Janessa is 1.",
                "query": "SELECT count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Customers WHERE first_name = \"Janessa\""
            },
            {
                "isuser": true,
                "text": "What is the Zip Code where Janessa Lived?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the zip postcode in the address where Janessa lived?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT zip_postcode FROM Addresses WHERE address_id IN (SELECT customer_address_id FROM Customers WHERE first_name = \"Janessa\")"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The zip postcode in the address where Janessa lived is 61121.",
                "query": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\"",
                "result": [
                    [
                        [
                            "zip_postcode"
                        ],
                        [
                            "61121"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Customers WHERE first_name = \"Janessa\""
            },
            {
                "isuser": true,
                "text": "and Camylle?\n",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the zip postcode in the area where the person with first name Camylle lived?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT count(*) FROM Customers WHERE first_name = \"Camylle\""
            },
            {
                "isuser": true,
                "text": "Yes\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The zip postcode in the area where the person with first name Camylle lived is 08938.",
                "query": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Camylle\"",
                "result": [
                    [
                        [
                            "zip_postcode"
                        ],
                        [
                            "08938"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Customers WHERE first_name = \"Camylle\""
            },
            {
                "isuser": true,
                "text": "What is the zip postcode where Kaitlin lived?\n",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the zip postcode in the ares where the staff with first name Kaitlin lived?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT zip_postcode FROM Addresses WHERE address_id IN (SELECT customer_address_id FROM Customers WHERE first_name = \"Kaitlin\")"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The zip postcode in the ares where the staff with first name Kaitlin lived is 27559.",
                "query": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Kaitlin\"",
                "result": [
                    [
                        [
                            "zip_postcode"
                        ],
                        [
                            "27559"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Customers WHERE first_name = \"Kaitlin\""
            },
            {
                "isuser": true,
                "text": "What is Kaitlin's last name?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the last name of the staff whose first name is Kaitlin?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT last_name FROM Customers WHERE first_name = \"Kaitlin\""
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The last name of the staff whose first name is Kaitlin is Mertz.",
                "query": "SELECT last_name from staff where first_name = 'Kaitlin'",
                "result": [
                    [
                        [
                            "last_name"
                        ],
                        [
                            "Mertz"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Customers WHERE first_name = \"Kaitlin\""
            },
            {
                "isuser": true,
                "text": "and Janessa?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the last name of the staff whose first name is Janessa?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT count(*) FROM Customers WHERE first_name = \"Janessa\""
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The last name of the staff whose first name is Janessa is Sawayn.",
                "query": "SELECT last_name from staff where first_name = 'Janessa'",
                "result": [
                    [
                        [
                            "last_name"
                        ],
                        [
                            "Sawayn"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Customers WHERE first_name = \"Janessa\""
            },
            {
                "isuser": true,
                "text": "What is the zip postcode where staff named Janessa Sawayn lived?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the zip code of staff with first name Janessa and last name Sawayn lived?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT zip_postcode FROM Addresses WHERE address_id IN (SELECT staff_address_id FROM Staff WHERE first_name = \"Janessa\" AND middle_name = \"Sawayn\")"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The city that the staff with first name Janessa and last name Sawayn lived is Damianfort.",
                "query": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
                "result": [
                    [
                        [
                            "zip_postcode"
                        ],
                        [
                            "61121"
                        ]
                    ],
                    [
                        [
                            "city"
                        ],
                        [
                            "Damianfort"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Customers WHERE first_name = \"Janessa\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "cre_Drama_Workshop_Groups",
        "turns": [
            {
                "isuser": true,
                "text": "what are the actual delivery dates of orders with quantity 1?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the list showing the actual delivery dates of orders with quantity 1",
                "query": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1",
                "result": [
                    [
                        [
                            "Actual_Delivery_Date"
                        ],
                        [
                            "2011-04-13 07:15:35"
                        ],
                        [
                            "1993-09-16 23:20:05"
                        ],
                        [
                            "2004-03-27 23:30:12"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Actual_Delivery_Date FROM Bookings WHERE Order_Quantity = 1"
            },
            {
                "isuser": true,
                "text": "what is the order date of order id 1?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The order date of order with id 1 is 1994-08-03 12:34:58",
                "query": "SELECT Order_Date FROM Customer_Orders where Order_ID=1",
                "result": [
                    [
                        [
                            "Order_Date"
                        ],
                        [
                            "1994-08-03 12:34:58"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Order_Date FROM Bookings WHERE Order_ID = 1"
            },
            {
                "isuser": true,
                "text": "Customer id of order id 1",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The customer id of order with id 1 is 516",
                "query": "SELECT Customer_ID FROM Customer_Orders where Order_ID=1",
                "result": [
                    [
                        [
                            "Customer_ID"
                        ],
                        [
                            516
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Customer_ID FROM Bookings WHERE Order_ID = 1"
            },
            {
                "isuser": true,
                "text": "what is Planned Delivery Date of customer id 516 ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This shows the planned delivery date for customer with id 516.",
                "query": "SELECT Planned_Delivery_Date FROM Customer_Orders where Customer_ID=516",
                "result": [
                    [
                        [
                            "Planned_Delivery_Date"
                        ],
                        [
                            "1977-03-11 03:58:19"
                        ],
                        [
                            "2004-04-24 01:52:57"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Planned_Delivery_Date FROM Bookings WHERE Customer_ID = 516"
            },
            {
                "isuser": true,
                "text": "Thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "shop_membership",
        "turns": [
            {
                "isuser": false,
                "text": "Did you mean the names of branches with registered members?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Yes.",
                "type": "answerable",
                "predict": "SELECT T2.Name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.Branch_ID = T2.Branch_ID JOIN member AS T3 ON T1.Member_ID = T3.Member_ID GROUP BY T2.Branch_ID HAVING COUNT(*) > 1"
            },
            {
                "isuser": true,
                "text": " list the branch for registered  members?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "did you mean the ids of branches with registered members?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T2.Name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.Branch_ID = T2.Branch_ID JOIN member AS T3 ON T1.Member_ID = T3.Member_ID GROUP BY T2.Branch_ID HAVING COUNT(*) > 1"
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The result table shows the ids of branches with registered members",
                "query": "SELECT branch_id FROM membership_register_branch",
                "result": [
                    [
                        [
                            "Branch_ID"
                        ],
                        [
                            "1"
                        ],
                        [
                            "4"
                        ],
                        [
                            "1"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.Branch_ID = T2.Branch_ID JOIN member AS T3 ON T1.Member_ID = T3.Member_ID GROUP BY T2.Branch_ID HAVING COUNT(*) > 1"
            },
            {
                "isuser": true,
                "text": "Find the membership amount of the popert?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "did you mean the membership amount of the branch with the name \"Popert\"?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT membership_amount FROM branch WHERE name = \"Popert\""
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The membership amount of the branch with the name \"Popert\" is 11.",
                "query": "SELECT membership_amount FROM branch where Name = 'Popert'",
                "result": [
                    [
                        [
                            "membership_amount"
                        ],
                        [
                            "11"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT membership_amount FROM branch WHERE name = \"Popert\""
            },
            {
                "isuser": true,
                "text": "List the name with registered members?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "There are the names of branches with registered members.",
                "query": "SELECT name FROM branch as t1 join membership_register_branch as t2 on t1.Branch_ID = t2.Branch_ID",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Alexandre"
                        ],
                        [
                            "Zytogorski"
                        ],
                        [
                            "Alexandre"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.Branch_ID = T2.Branch_ID JOIN member AS T3 ON T1.Member_ID = T3.Member_ID GROUP BY T2.Branch_ID HAVING COUNT(*) > 1"
            },
            {
                "isuser": true,
                "text": "which city of Alexandra?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The Alexandre branch is in London.",
                "query": "SELECT city FROM branch where name = 'Alexandre'",
                "result": [
                    [
                        [
                            "City"
                        ],
                        [
                            "London"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.City FROM branch AS T1 JOIN membership_register_branch AS T2 ON T1.Branch_ID = T2.Branch_ID JOIN member AS T3 ON T1.Branch_ID = T3.Branch_ID WHERE T3.Name = \"Alexandra\" GROUP BY T2.City HAVING COUNT(*) > 1"
            },
            {
                "isuser": true,
                "text": "Thanks and bye!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome! Goodbye!"
            }
        ]
    },
    {
        "db_name": "store_1",
        "turns": [
            {
                "isuser": true,
                "text": "What kinds of playlists are available?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "what  do  you  mean by available",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT DISTINCT T1.name FROM playlists AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.playlist_id"
            },
            {
                "isuser": true,
                "text": "What are the names of the playlists? Available is defined as able to be used or obtained; at someone's disposal",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "OK，The  names  of  playlists are shown  in  the  table ",
                "query": "SELECT  name  from  playlists",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Music"
                        ],
                        [
                            "Movies"
                        ],
                        [
                            "TV Shows"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.name FROM playlists AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.playlist_id"
            },
            {
                "isuser": true,
                "text": "How many tracks are in the playlist \"movies\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The  number of tracks in the playlist Movies is 0",
                "query": "SELECT count(*) FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\";",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM playlist_tracks WHERE playlist_id = 2"
            },
            {
                "isuser": true,
                "text": "Please list the name(s) of the tracks in the playlist \"Movies\".",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The  name of tracks in the playlist Movies   are  shown  in  the  table ",
                "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\";",
                "result": [
                    [
                        [
                            "name"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id WHERE T2.playlist_id = 2"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are Welcome and goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "world_1",
        "turns": [
            {
                "isuser": true,
                "text": "I want to know the average population of all cities please\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the average population of all cities is 350468.22358421184",
                "query": "SELECT avg(Population) FROM city",
                "result": [
                    [
                        [
                            "avg(Population)"
                        ],
                        [
                            350468.22358421184
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(Population) FROM city"
            },
            {
                "isuser": true,
                "text": "And which districts have cities with populations greater than the average?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of the districts which have cities with populations greater than the average. For example, one of them is Kabol.",
                "query": "SELECT District FROM city WHERE Population  >  (SELECT avg(Population) FROM city)",
                "result": [
                    [
                        [
                            "District"
                        ],
                        [
                            "Kabol"
                        ],
                        [
                            "Noord-Holland"
                        ],
                        [
                            "Zuid-Holland"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT District FROM city WHERE Population > (SELECT avg(Population) FROM city)"
            },
            {
                "isuser": true,
                "text": "Within these districts, how many cities does each have with a population greater than the average?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of the number of cities in each district whose population is greater than the average population of cities. For example, district Abidjan has only one city with a population greater than the average.",
                "query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
                "result": [
                    [
                        [
                            "count(*)",
                            "District"
                        ],
                        [
                            1,
                            "Abidjan"
                        ],
                        [
                            1,
                            "Abu Dhabi"
                        ],
                        [
                            1,
                            "Adana"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT District, COUNT(*) AS num_cities FROM city WHERE Population > (SELECT avg(Population) FROM city) GROUP BY District"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "behavior_monitoring",
        "turns": [
            {
                "isuser": true,
                "text": "what is the teacher id of detention id 1",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The teacher id for detention id 1 is 7.",
                "query": "select teacher_id from detention where detention_id = 1;",
                "result": [
                    [
                        [
                            "teacher_id"
                        ],
                        [
                            7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT teacher_id FROM Detention WHERE detention_id = 1"
            },
            {
                "isuser": true,
                "text": "when does the datetime detention end\t",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "What did you mean by the datetime detention end? Do you want a list of all the datetime detention end or a specific one?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT datetime_detention_end FROM Detention WHERE detention_id = 1"
            },
            {
                "isuser": true,
                "text": "for detention id 1",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The datetime detention end for detention id 1 is 2018-03-08 02:08:32.",
                "query": "select datetime_detention_end from detention where detention_id = 1;",
                "result": [
                    [
                        [
                            "datetime_detention_end"
                        ],
                        [
                            "2018-03-08 02:08:32"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT datetime_detention_end FROM Detention WHERE detention_id = 1"
            },
            {
                "isuser": true,
                "text": "what is the middle name of teacher id 1?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The middle name of teacher id 1 is Wilson.",
                "query": "SELECT T1.middle_name FROM Teachers AS T1 WHERE T1.teacher_id = 1;",
                "result": [
                    [
                        [
                            "middle_name"
                        ],
                        [
                            "Wilson"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT middle_name FROM Teachers WHERE teacher_id = 1"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "swimming",
        "turns": [
            {
                "isuser": true,
                "text": "Can you list all events that happened in 2018?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the events that happened in 2018.",
                "query": "SELECT name FROM event where year = 2018",
                "result": [
                    [
                        [
                            "Name"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM event WHERE year = 2018"
            },
            {
                "isuser": true,
                "text": "Can you list all the events that happened within the last 5 years?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the events that happened in the last five years.",
                "query": "SELECT name FROM event where year >= 2014",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "FINA"
                        ],
                        [
                            "IPC"
                        ],
                        [
                            "European FINA"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM event WHERE year  >  (SELECT max(year) FROM event) - 5"
            },
            {
                "isuser": true,
                "text": "Can you sort the list to only include the most recent event?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the name of the event that happened in the most recent year.",
                "query": "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "European FINA"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM event ORDER BY year DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks. Bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "formula_1",
        "turns": [
            {
                "isuser": true,
                "text": "Hi, What are the unique names of races that are held in Spain?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Hello, The unique names of races that were held in Spain are Spanish Grand Prix and European Grand Prix.",
                "query": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\"",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Spanish Grand Prix"
                        ],
                        [
                            "European Grand Prix"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId  =  T2.circuitId WHERE T2.country  =  \"Spain\""
            },
            {
                "isuser": true,
                "text": "Were those races held after the year 2000?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes, all of them were held after the year 2000.",
                "query": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Spanish Grand Prix"
                        ],
                        [
                            "European Grand Prix"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId  =  T2.circuitId WHERE T2.country  =  \"Spain\" AND T1.year > 2000"
            },
            {
                "isuser": true,
                "text": "Where is the European Grand Prix held?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you want to return the location, country or latitude and longitude?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T2.location FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId  =  T2.circuitId WHERE T1.name  =  \"European Grand Prix\""
            },
            {
                "isuser": true,
                "text": "Country please.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the countries that held the European Grand Prix. For example, Spain.",
                "query": "SELECT distinct T2.country FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T1.name = 'European Grand Prix'",
                "result": [
                    [
                        [
                            "country"
                        ],
                        [
                            "Spain"
                        ],
                        [
                            "Germany"
                        ],
                        [
                            "UK"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.country FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId  =  T2.circuitId WHERE T1.name  =  \"European Grand Prix\""
            },
            {
                "isuser": true,
                "text": "What year was the last European Grand Prix held in Spain?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The year of the most recent European Grand Prix held in Spain is in 2018.",
                "query": "SELECT T1.year FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" order by T1.year desc limit 1",
                "result": [
                    [
                        [
                            "year"
                        ],
                        [
                            2018
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.year FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId  =  T2.circuitId WHERE T1.name  =  \"European Grand Prix\" AND T2.country  =  \"Spain\" ORDER BY T1.year DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Great, bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "tracking_orders",
        "turns": [
            {
                "isuser": true,
                "text": "Can you tell me which customers placed orders between 2009-01-01 and 2010-0101?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "do you want the id or the name of the customer?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed BETWEEN '2009-01-01' AND '2010-01-01'"
            },
            {
                "isuser": true,
                "text": "The names",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the names of customers who have placed orders between 2009-01-01 and 2010-01-01 is George",
                "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"",
                "result": [
                    [
                        [
                            "customer_name"
                        ],
                        [
                            "George"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed BETWEEN '2009-01-01' AND '2010-01-01'"
            },
            {
                "isuser": true,
                "text": "How many customers placed orders before George?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are 4 customers placed orders before George",
                "query": "SELECT count(T1.customer_name) FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed < (SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name ='George' order by T2.date_order_placed LIMIT 1)",
                "result": [
                    [
                        [
                            "count(T1.customer_name)"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name < 'George'"
            },
            {
                "isuser": true,
                "text": "What is the status of George's order?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the status for each order of date for George",
                "query": "SELECT T2.order_status  FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name ='George'",
                "result": [
                    [
                        [
                            "order_status"
                        ],
                        [
                            "Shipped"
                        ],
                        [
                            "On Road"
                        ],
                        [
                            "On Road"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT order_status FROM orders WHERE customer_id = (SELECT customer_id FROM customers WHERE customer_name = 'George')"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "world_1",
        "turns": [
            {
                "isuser": true,
                "text": "Can you list all nations whose government is US territory?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of the nations whose government form is US territory.",
                "query": "SELECT Name FROM country WHERE GovernmentForm  =  \"US Territory\"",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "American Samoa"
                        ],
                        [
                            "Guam"
                        ],
                        [
                            "Virgin Islands, U.S."
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM country WHERE GovernmentForm = 'US Territory'"
            },
            {
                "isuser": true,
                "text": "Hmm, I also want to know their GNP and population.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the GNP and population of nations whose government form is US territory.",
                "query": "SELECT GNP, population FROM country WHERE GovernmentForm  =  \"US Territory\"",
                "result": [
                    [
                        [
                            "GNP",
                            "Population"
                        ],
                        [
                            334.0,
                            68000
                        ],
                        [
                            1197.0,
                            168000
                        ],
                        [
                            0.0,
                            93000
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name, GNP, Population FROM country WHERE GovernmentForm = 'US Territory'"
            },
            {
                "isuser": true,
                "text": "Please find out the average GNP and total population of those nations.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the average GNP and total population in all nations whose government form is US territory, which are 510.3333333333333 and 329000.",
                "query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
                "result": [
                    [
                        [
                            "avg(GNP)",
                            "sum(population)"
                        ],
                        [
                            510.3333333333333,
                            329000
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(GNP) , sum(Population) FROM country WHERE GovernmentForm = 'US Territory'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "insurance_policies",
        "turns": [
            {
                "isuser": true,
                "text": "Hi there! From this database, what is the most popular payment method?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The most popular payment method  is MasterCard.",
                "query": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Payment_Method_Code"
                        ],
                        [
                            "MasterCard"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Can you tell me how many total MasterCard payments there are in this database?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes I can. There are 7 total MasterCard payments.",
                "query": "SELECT COUNT(*) from payments where payment_method_code = \"MasterCard\"",
                "result": [
                    [
                        [
                            "COUNT(*)"
                        ],
                        [
                            7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM Payments WHERE Payment_Method_Code = \"MasterCard\""
            },
            {
                "isuser": true,
                "text": "Great!  What is the second most popular payment method, and how many payments are there with that method?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "The second most popular payment method is Visa. The number of payments would need to be a separate question.",
                "query": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1,1",
                "result": [
                    [
                        [
                            "Payment_Method_Code"
                        ],
                        [
                            "Visa"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Payment_Method_Code, COUNT(*) AS payment_count FROM Payments GROUP BY Payment_Method_Code ORDER BY payment_count DESC LIMIT 1 OFFSET 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You're welcome. If there are no more questions, good bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "department_store",
        "turns": [
            {
                "isuser": true,
                "text": "What are the average amount purchased and value purchased for the supplier who supplies the most products",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the average amount purchased and average value purchased for the supplier who supplies the most products are  shown  in  the  table ",
                "query": "SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)",
                "result": [
                    [
                        [
                            "avg(total_amount_purchased)",
                            "avg(total_value_purchased)"
                        ],
                        [
                            27702.7975,
                            33126.1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM product_suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "How about for the supplier who supplies the least products?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did  you  want to get the supplier id  who supplies the least products?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM product_suppliers GROUP BY supplier_id ORDER BY count(*) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "I want the average amount purchased and value purchased for the supplier who supplies the least products",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the average amount purchased and average value purchased for the supplier who supplies the least products are shown in the table",
                "query": "SELECT avg(total_amount_purchased) , avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id = (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) LIMIT 1)\n\n",
                "result": [
                    [
                        [
                            "avg(total_amount_purchased)",
                            "avg(total_value_purchased)"
                        ],
                        [
                            45660.363333333335,
                            40093.58666666666
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM product_suppliers GROUP BY supplier_id ORDER BY count(*) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the supplier id who supplies the least products?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The  supplier id who supplies the least products  is 3",
                "query": "SELECT distinct supplier_id FROM Product_Suppliers WHERE supplier_id = (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) LIMIT 1)\n\n",
                "result": [
                    [
                        [
                            "supplier_id"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT supplier_id FROM product_suppliers GROUP BY supplier_id ORDER BY count(*) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the total value purchased for supplier id 3",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the total value purchased for supplier id 3 is 120280.76",
                "query": "SELECT sum(total_value_purchased) from Product_Suppliers where supplier_id=3\n\n",
                "result": [
                    [
                        [
                            "sum(total_value_purchased)"
                        ],
                        [
                            120280.76
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT sum(total_value_purchased) FROM product_suppliers WHERE supplier_id = 3"
            },
            {
                "isuser": true,
                "text": "What is the \"date supplied to\" of supplier id 3?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the \"date supplied to\" of supplier id 3  are  shown  in the  table ",
                "query": "SELECT \tdate_supplied_to  from Product_Suppliers where supplier_id=3\n\n",
                "result": [
                    [
                        [
                            "date_supplied_to"
                        ],
                        [
                            "2018-03-24 19:29:18"
                        ],
                        [
                            "2018-03-24 02:29:44"
                        ],
                        [
                            "2018-03-24 23:01:03"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT date_supplied_to FROM product_suppliers WHERE supplier_id = 3"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome  and  bye ",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "entrepreneur",
        "turns": [
            {
                "isuser": true,
                "text": "What are the investor name of Leonardo Binchi?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "THe investor of entrepreneur with name Leonardo Binchi is Doug Richard",
                "query": "SELECT T1.Investor FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Name= \"Leonardo Binchi\"",
                "result": [
                    [
                        [
                            "Investor"
                        ],
                        [
                            "Doug Richard"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Investor FROM entrepreneur WHERE People_ID = 2"
            },
            {
                "isuser": true,
                "text": "What is the total amount of money requested for three persons?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Sorry, which three persons do you want?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT SUM(Money_Requested) FROM entrepreneur WHERE People_ID IN (1, 2, 3)"
            },
            {
                "isuser": true,
                "text": "The three persons are Francesco Postiglione, Leonardo Binchi and Fabrizio Buonocore",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The total amount of money requested by Francesco Postiglione, Leonardo Binchi and Fabrizio Buonocore is 324000.0.",
                "query": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Name= \"Francesco Postiglione\" or  T2.Name=\"Leonardo Binchi\" or  T2.Name= \"Fabrizio Buonocore\"",
                "result": [
                    [
                        [
                            "sum(T1.Money_Requested)"
                        ],
                        [
                            324000.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT SUM(Money_Requested) FROM entrepreneur WHERE People_ID IN (1, 2, 3)"
            },
            {
                "isuser": true,
                "text": "What is the company name of Fabrizio Buonocore?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The company name of the entrepreneur named Fabrizio Buonocore is  Le Beanock.",
                "query": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Name= \"Fabrizio Buonocore\"",
                "result": [
                    [
                        [
                            "Company"
                        ],
                        [
                            "Le Beanock"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Company FROM entrepreneur WHERE People_ID = 3"
            },
            {
                "isuser": true,
                "text": "What are the name of entrepreneurs whose investor is not \"Rachel Elnaugh\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of the entrepreneurs whose investor is not Rachel Elnaugh.",
                "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor!= \"Rachel Elnaugh\"",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Francesco Postiglione"
                        ],
                        [
                            "Leonardo Binchi"
                        ],
                        [
                            "Roberto Calcaterra"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM entrepreneur WHERE Investor != \"Rachel Elnaugh\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "department_store",
        "turns": [
            {
                "isuser": true,
                "text": "Find the id of suppliers whose average amount purchased for each product is above 50000 or below 30000",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The ids of suppliers whose average amount purchased for each product is above 50000 or below 30000 are 1 and 2.",
                "query": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased) > 50000 OR avg(total_amount_purchased) < 30000",
                "result": [
                    [
                        [
                            "supplier_id"
                        ],
                        [
                            1
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT supplier_id FROM product_suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000"
            },
            {
                "isuser": true,
                "text": "Which of those suppliers purchased less than 30000?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The ids of suppliers whose average amount purchased for each product is less than 30000 is 1.",
                "query": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased) < 30000",
                "result": [
                    [
                        [
                            "supplier_id"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT supplier_id FROM product_suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  <  30000"
            },
            {
                "isuser": true,
                "text": "And how much was their average amount purchased for each product?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table that shows the average amount purchased for each product. For example, the average of product 3 is 15752.45.",
                "query": "select product_id, avg(total_amount_purchased) from Product_Suppliers group by product_id",
                "result": [
                    [
                        [
                            "product_id",
                            "avg(total_amount_purchased)"
                        ],
                        [
                            3,
                            15752.45
                        ],
                        [
                            4,
                            67187.91333333333
                        ],
                        [
                            5,
                            85922.86
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT supplier_id, AVG(total_amount_purchased) AS average_amount_purchased FROM product_suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  <  30000"
            },
            {
                "isuser": true,
                "text": "What was their most recent date_supplied_to?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The most recent date of the supplied to is \"2018-03-25 12:03:33\".",
                "query": "select date_supplied_to from Product_Suppliers order by date_supplied_to desc limit 1",
                "result": [
                    [
                        [
                            "date_supplied_to"
                        ],
                        [
                            "2018-03-25 12:03:33"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT supplier_id, MAX(date_supplied_to) AS most_recent_date_supplied_to FROM product_suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  <  30000"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "city_record",
        "turns": [
            {
                "isuser": true,
                "text": "Could you list all the cities in ascending alphabetical order?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are all the cities in ascending alphabetical order.",
                "query": "select city from city order by city asc",
                "result": [
                    [
                        [
                            "City"
                        ],
                        [
                            "Changzhou ( Jiangsu )"
                        ],
                        [
                            "Hangzhou ( Zhejiang )"
                        ],
                        [
                            "Jiaxing ( Zhejiang )"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT city FROM city ORDER BY city ASC"
            },
            {
                "isuser": true,
                "text": "Which cities were once host cities?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are all the cities which once were host cities.",
                "query": "SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
                "result": [
                    [
                        [
                            "City"
                        ],
                        [
                            "Shanghai"
                        ],
                        [
                            "Nanjing ( Jiangsu )"
                        ],
                        [
                            "Nanjing ( Jiangsu )"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT host_city FROM hosting_city"
            },
            {
                "isuser": true,
                "text": "Which cities had a higher temperature in Feb than in Jun or were a host city?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are all the cities whose temperature in Feb is higher than that in Jun or cities that were once host cities.",
                "query": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Feb  >  T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
                "result": [
                    [
                        [
                            "City"
                        ],
                        [
                            "Jiaxing ( Zhejiang )"
                        ],
                        [
                            "Nanjing ( Jiangsu )"
                        ],
                        [
                            "Shanghai"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT city FROM city WHERE Feb > (SELECT JUN FROM temperature) OR city IN (SELECT host_city FROM hosting_city)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "news_report",
        "turns": [
            {
                "isuser": true,
                "text": "Could you please tell me all the names of the journalists?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of all journalists.",
                "query": "SELECT name from journalist",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Herbert Swindells"
                        ],
                        [
                            "Fred Keenor"
                        ],
                        [
                            "George Gilchrist"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM journalist"
            },
            {
                "isuser": true,
                "text": "What are the names of the events they reported?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of journalists and the names of events they reported.",
                "query": "SELECT T3.Name ,  T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID",
                "result": [
                    [
                        [
                            "Name",
                            "Name"
                        ],
                        [
                            "Herbert Swindells",
                            "Public Debating"
                        ],
                        [
                            "Jackie Waring",
                            "Olympia Games Openning"
                        ],
                        [
                            "Jackie Waring",
                            "Government Hearing"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM event WHERE event_id IN (SELECT event_id FROM news_report)"
            },
            {
                "isuser": true,
                "text": "Could you please organize those in ascending order?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of journalists and the names of the events they reported in ascending order of event attendance.",
                "query": "SELECT T3.Name ,  T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID ORDER BY T2.Event_Attendance ASC",
                "result": [
                    [
                        [
                            "Name",
                            "Name"
                        ],
                        [
                            "John Meaney",
                            "Special Exhibition"
                        ],
                        [
                            "Tom Briggs",
                            "Special Exhibition"
                        ],
                        [
                            "Jackie Waring",
                            "Government Hearing"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM event WHERE event_id IN (SELECT event_id FROM news_report) ORDER BY name ASC"
            },
            {
                "isuser": true,
                "text": "What work type do those journalists do?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the work types each journalist does.",
                "query": "SELECT T3.Name ,  T1.Work_Type FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID",
                "result": [
                    [
                        [
                            "Name",
                            "Work_Type"
                        ],
                        [
                            "Herbert Swindells",
                            "Screening"
                        ],
                        [
                            "Tom Briggs",
                            "Screening"
                        ],
                        [
                            "Ray Ferris",
                            "Screening"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT work_type FROM news_report WHERE journalist_id IN (SELECT journalist_id FROM journalist WHERE name IN (SELECT name FROM journalist WHERE nationality = 'American'))"
            },
            {
                "isuser": true,
                "text": "How many years have they each been working, please?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of all journalists and numbers of years they have been working.",
                "query": "SELECT name,years_working from journalist",
                "result": [
                    [
                        [
                            "Name",
                            "Years_working"
                        ],
                        [
                            "Herbert Swindells",
                            10
                        ],
                        [
                            "Fred Keenor",
                            5
                        ],
                        [
                            "George Gilchrist",
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT years_working FROM journalist WHERE name IN (SELECT name FROM journalist WHERE nationality = 'American')"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "thanks. bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "culture_company",
        "turns": [
            {
                "isuser": true,
                "text": "how manty editors are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 12 editors.",
                "query": "SELECT COUNT(Author_or_Editor) from book_club",
                "result": [
                    [
                        [
                            "COUNT(Author_or_Editor)"
                        ],
                        [
                            12
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM book_club WHERE author_or_editor = 'Editor'"
            },
            {
                "isuser": true,
                "text": "how about the total number of companies?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the total number of companies is 6.",
                "query": "SELECT COUNT(*) from culture_company",
                "result": [
                    [
                        [
                            "COUNT(*)"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM culture_company"
            },
            {
                "isuser": true,
                "text": "is there a company that has a book published by Michael Nava?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "No there is not a company that has a book published by Michael Nava.",
                "query": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Michael Nava'",
                "result": [
                    [
                        [
                            "Company_name"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id = T2.book_club_id WHERE T2.Author_or_Editor = \"Editor\" AND T2.Publisher = \"Michael Nava\""
            },
            {
                "isuser": true,
                "text": "which company did Alyson published a book for?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The company Alyson published a book for is Culture China",
                "query": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'",
                "result": [
                    [
                        [
                            "Company_name"
                        ],
                        [
                            "Culture China"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id = T2.book_club_id WHERE T2.Author_or_Editor = \"Editor\" AND T2.Publisher = \"Alyson\""
            },
            {
                "isuser": true,
                "text": "does that company have another editor?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "No, it has only one author who is Michael Nava.",
                "query": "SELECT T2.Author_or_Editor FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T1.company_name  =  'Culture China'",
                "result": [
                    [
                        [
                            "Author_or_Editor"
                        ],
                        [
                            "Michael Nava"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM book_club WHERE author_or_editor = \"Editor\" AND book_club_id IN (SELECT book_club_id FROM culture_company WHERE company_name = \"Michael Nava\")"
            },
            {
                "isuser": true,
                "text": "Thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "baseball_1",
        "turns": [
            {
                "isuser": true,
                "text": "Which cities have 2 to 4 parks?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The following table shows cities that have 2 to 4 parks.",
                "query": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;",
                "result": [
                    [
                        [
                            "city"
                        ],
                        [
                            "Arlington"
                        ],
                        [
                            "Atlanta"
                        ],
                        [
                            "Buffalo"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4"
            },
            {
                "isuser": true,
                "text": "How many parks are in Atlanta?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 2 parks in Atlanta.",
                "query": "SELECT count(*) FROM park where city = \"Atlanta\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM park WHERE city = \"Atlanta\""
            },
            {
                "isuser": true,
                "text": "Which cities have exactly 4 parks?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The following table shows cities with exactly 4 parks.",
                "query": "SELECT city FROM park GROUP BY city HAVING count(*) = 4;",
                "result": [
                    [
                        [
                            "city"
                        ],
                        [
                            "Buffalo"
                        ],
                        [
                            "Columbus"
                        ],
                        [
                            "Louisville"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT city FROM park GROUP BY city HAVING count(*) = 4"
            },
            {
                "isuser": true,
                "text": "Which cities have exactly 3 parks?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The following table shows cities with exactly 3 parks.",
                "query": "SELECT city FROM park GROUP BY city HAVING count(*) = 3;",
                "result": [
                    [
                        [
                            "city"
                        ],
                        [
                            "Fort Wayne"
                        ],
                        [
                            "Houston"
                        ],
                        [
                            "Los Angeles"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT city FROM park GROUP BY city HAVING count(*) = 3"
            },
            {
                "isuser": true,
                "text": "Which cities have exactly 2 parks?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The following table shows cities with exactly 2 parks.",
                "query": "SELECT city FROM park GROUP BY city HAVING count(*) = 2;",
                "result": [
                    [
                        [
                            "city"
                        ],
                        [
                            "Arlington"
                        ],
                        [
                            "Atlanta"
                        ],
                        [
                            "Canton"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT city FROM park GROUP BY city HAVING count(*) = 2"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "college_1",
        "turns": [
            {
                "isuser": true,
                "text": "how many employees there",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 37 employees.",
                "query": "SELECT count(*) FROM employee",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            37
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM employee"
            },
            {
                "isuser": true,
                "text": "what is the employee DOB of  employee no 101",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "His birthday is 11/02/1961.",
                "query": "SELECT EMP_DOB FROM employee WHERE EMP_NUM = 101",
                "result": [
                    [
                        [
                            "EMP_DOB"
                        ],
                        [
                            "1961-11-2"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT emp_dob FROM employee WHERE emp_num = 101"
            },
            {
                "isuser": true,
                "text": "how many class is there",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 13 classes.",
                "query": "SELECT count(*) FROM CLASS",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            13
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM CLASS"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Welcome! Bye.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "college_1",
        "turns": [
            {
                "isuser": true,
                "text": "what is the school code of emp num 114",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the school code of emp num 114 is BUS",
                "query": "SELECT SCHOOL_CODE\t from DEPARTMENT where EMP_NUM=114",
                "result": [
                    [
                        [
                            "SCHOOL_CODE"
                        ],
                        [
                            "BUS"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.emp_num  =  114"
            },
            {
                "isuser": true,
                "text": "what is the school code of fine arts",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the school code of fine arts is A&SCI",
                "query": "SELECT SCHOOL_CODE\t from DEPARTMENT where DEPT_NAME='Fine Arts'",
                "result": [
                    [
                        [
                            "SCHOOL_CODE"
                        ],
                        [
                            "A&SCI"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.dept_name  =  \"Fine Arts\""
            },
            {
                "isuser": true,
                "text": "what is the dept address of accounting",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the dept address of accounting is KLR 211, Box 52",
                "query": "SELECT DEPT_ADDRESS\t from DEPARTMENT where DEPT_NAME='Accounting'",
                "result": [
                    [
                        [
                            "DEPT_ADDRESS"
                        ],
                        [
                            "KLR 211, Box 52"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.dept_address FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.dept_name  =  \"Accounting\""
            },
            {
                "isuser": true,
                "text": "what is the prof extension of hist",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the prof extension of hist is 6783",
                "query": "SELECT \tPROF_EXTENSION  from PROFESSOR where DEPT_CODE='HIST'",
                "result": [
                    [
                        [
                            "PROF_EXTENSION"
                        ],
                        [
                            "6783"
                        ],
                        [
                            "6783"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.prof_extension FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.dept_name  =  \"History\""
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome，goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "world_1",
        "turns": [
            {
                "isuser": true,
                "text": "give me the total surface area of the continent\n Asia ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The surface area of the continent Asia is 31881005.0.",
                "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent = \"Asia\"",
                "result": [
                    [
                        [
                            "sum(SurfaceArea)"
                        ],
                        [
                            31881005.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT sum(SurfaceArea) FROM country WHERE Continent = 'Asia'"
            },
            {
                "isuser": true,
                "text": "what is the local name ",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean to ask for all local names?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT LocalName FROM country WHERE Code = 'CHN'"
            },
            {
                "isuser": true,
                "text": "yes ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are all the local names.",
                "query": "SELECT LocalName FROM country",
                "result": [
                    [
                        [
                            "LocalName"
                        ],
                        [
                            "Aruba"
                        ],
                        [
                            "Afganistan/Afqanestan"
                        ],
                        [
                            "Angola"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT sum(SurfaceArea) FROM country WHERE Continent = 'Asia'"
            },
            {
                "isuser": true,
                "text": "What is Aruba's code? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Aruba's code is ABW.",
                "query": "SELECT Code FROM country WHERE Name = \"Aruba\"",
                "result": [
                    [
                        [
                            "Code"
                        ],
                        [
                            "ABW"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Code FROM country WHERE Name = 'Aruba'"
            }
        ]
    },
    {
        "db_name": "products_gen_characteristics",
        "turns": [
            {
                "isuser": true,
                "text": "what are the characteristic names of \"Cumin\"?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The characteristic name of the product named \"Cumin\" is \"slow\".",
                "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"cumin\"",
                "result": [
                    [
                        [
                            "characteristic_name"
                        ],
                        [
                            "slow"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT characteristic_name FROM Characteristics WHERE characteristic_id IN (SELECT characteristic_id FROM Product_Characteristics WHERE product_id IN (SELECT product_id FROM Products WHERE product_name = \"Cumin\"))"
            },
            {
                "isuser": true,
                "text": "\"Cumin\" data types",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The data type of the product named \"Cumin\" is \"mollitia\".",
                "query": "SELECT t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = \"cumin\"",
                "result": [
                    [
                        [
                            "characteristic_data_type"
                        ],
                        [
                            "mollitia"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT characteristic_data_type FROM Characteristics WHERE characteristic_id IN (SELECT characteristic_id FROM Product_Characteristics WHERE product_id IN (SELECT product_id FROM Products WHERE product_name = \"Cumin\"))"
            },
            {
                "isuser": true,
                "text": "what is the product id of \"cumin\"?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The product id of the product named \"cumin\" is 1.",
                "query": "select product_id from Products where product_name='cumin'",
                "result": [
                    [
                        [
                            "product_id"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product_id FROM Products WHERE product_name = \"Cumin\""
            },
            {
                "isuser": true,
                "text": "what is the product_category_code for product id 1?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The product category code for product id 1 is \"Spices\".",
                "query": "select product_category_code from Products where product_id='1'",
                "result": [
                    [
                        [
                            "product_category_code"
                        ],
                        [
                            "Spices"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product_category_code FROM Products WHERE product_id = 1"
            },
            {
                "isuser": true,
                "text": "what is the typical_selling_price of product id 1?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The typical selling price of product id 1 is \"2878.3\".",
                "query": "select typical_selling_price from Products where product_id='1'",
                "result": [
                    [
                        [
                            "typical_selling_price"
                        ],
                        [
                            "2878.3"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT typical_selling_price FROM Products WHERE product_id = 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "college_1",
        "turns": [
            {
                "isuser": true,
                "text": "show the info of students whose GPA is below 3?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is all info of students whose GPA is below 3.",
                "query": "SELECT * FROM student WHERE stu_gpa  < 3",
                "result": [
                    [
                        [
                            "STU_NUM",
                            "STU_LNAME",
                            "STU_FNAME",
                            "STU_INIT",
                            "STU_DOB",
                            "STU_HRS",
                            "STU_CLASS",
                            "STU_GPA",
                            "STU_TRANSFER",
                            "DEPT_CODE",
                            "STU_PHONE",
                            "PROF_NUM"
                        ],
                        [
                            321452,
                            "Bowser",
                            "William",
                            "C",
                            "1975-2-12",
                            42,
                            "So",
                            2.84,
                            0,
                            "BIOL",
                            "2134",
                            205
                        ],
                        [
                            324258,
                            "Brewer",
                            "Juliette",
                            "",
                            "1969-8-23",
                            36,
                            "So",
                            2.26,
                            1,
                            "ACCT",
                            "2256",
                            228
                        ],
                        [
                            324273,
                            "Smith",
                            "John",
                            "D",
                            "1958-12-30",
                            102,
                            "Sr",
                            2.11,
                            1,
                            "ENGL",
                            "2231",
                            199
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT * FROM STUDENT WHERE STU_GPA  <  3"
            },
            {
                "isuser": true,
                "text": "how about those whose GPA is greater than 3?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is all info of students whose GPA is higher than 3.",
                "query": "SELECT * FROM student WHERE stu_gpa > 3",
                "result": [
                    [
                        [
                            "STU_NUM",
                            "STU_LNAME",
                            "STU_FNAME",
                            "STU_INIT",
                            "STU_DOB",
                            "STU_HRS",
                            "STU_CLASS",
                            "STU_GPA",
                            "STU_TRANSFER",
                            "DEPT_CODE",
                            "STU_PHONE",
                            "PROF_NUM"
                        ],
                        [
                            324257,
                            "Smithson",
                            "Anne",
                            "K",
                            "1981-11-15",
                            81,
                            "Jr",
                            3.27,
                            1,
                            "CIS",
                            "2256",
                            222
                        ],
                        [
                            324269,
                            "Oblonski",
                            "Walter",
                            "H",
                            "1976-9-16",
                            66,
                            "Jr",
                            3.09,
                            0,
                            "CIS",
                            "2114",
                            222
                        ],
                        [
                            324274,
                            "Katinga",
                            "Raphael",
                            "P",
                            "1979-10-21",
                            114,
                            "Sr",
                            3.15,
                            0,
                            "ACCT",
                            "2267",
                            228
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT * FROM STUDENT WHERE STU_GPA  >  3"
            },
            {
                "isuser": true,
                "text": "Who is the youngest?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean the youngest students whose GPA is higher than 3?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT * FROM STUDENT WHERE STU_DOB  =  (SELECT MIN(STU_DOB) FROM STUDENT)"
            },
            {
                "isuser": true,
                "text": "Yes, please.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is the info of the youngest students whose GPA is higher than 3.",
                "query": "SELECT * FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1",
                "result": [
                    [
                        [
                            "STU_NUM",
                            "STU_LNAME",
                            "STU_FNAME",
                            "STU_INIT",
                            "STU_DOB",
                            "STU_HRS",
                            "STU_CLASS",
                            "STU_GPA",
                            "STU_TRANSFER",
                            "DEPT_CODE",
                            "STU_PHONE",
                            "PROF_NUM"
                        ],
                        [
                            324257,
                            "Smithson",
                            "Anne",
                            "K",
                            "1981-11-15",
                            81,
                            "Jr",
                            3.27,
                            1,
                            "CIS",
                            "2256",
                            222
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT * FROM STUDENT WHERE STU_DOB  =  (SELECT MIN(STU_DOB) FROM STUDENT)"
            },
            {
                "isuser": true,
                "text": "please just show the first, last name, and gpa.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The first name, last name, and gpa of the youngest students whose GPA is higher than 3 are Anne, Smithson, 3.27 respectively. ",
                "query": "SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1",
                "result": [
                    [
                        [
                            "STU_FNAME",
                            "STU_LNAME",
                            "STU_GPA"
                        ],
                        [
                            "Anne",
                            "Smithson",
                            3.27
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT STU_FNAME, STU_LNAME, STU_GPA FROM STUDENT WHERE STU_DOB  =  (SELECT MIN(STU_DOB) FROM STUDENT)"
            },
            {
                "isuser": true,
                "text": "Ok, thanks! bye.",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You're welcome, goodbye.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "Goodbye!"
            }
        ]
    },
    {
        "db_name": "tracking_grants_for_research",
        "turns": [
            {
                "isuser": true,
                "text": "What are the result descriptions of the project whose detail is \"sint\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "\"Research Patent\" is the result description of the project whose detail is \"sint\"",
                "query": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  'sint'",
                "result": [
                    [
                        [
                            "outcome_description"
                        ],
                        [
                            "Research Patent"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.outcome_description FROM Projects AS T1 JOIN Project_Outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T1.project_details  =  \"sint\""
            },
            {
                "isuser": true,
                "text": "What are the project ids of all outcome code \"Patent\"?",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Here is the table of project ids of  all outcome code with \"Patent\" .",
                "query": "SELECT T2.project_id FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T2.outcome_code  =  'Patent'",
                "result": [
                    [
                        [
                            "project_id"
                        ],
                        [
                            3
                        ],
                        [
                            9
                        ],
                        [
                            14
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.project_id FROM Project_Outcomes AS T1 WHERE T1.outcome_code  =  \"Patent\""
            },
            {
                "isuser": true,
                "text": "What are the project details of all of those project ids?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the table of project details for the project whose outcome code is \"Patent\". For example, the project details of id 3 is \"sint\". ",
                "query": "SELECT T2.project_id, T3.project_details FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T2.outcome_code  =  'Patent'",
                "result": [
                    [
                        [
                            "project_id",
                            "project_details"
                        ],
                        [
                            3,
                            "sint"
                        ],
                        [
                            9,
                            "sed"
                        ],
                        [
                            14,
                            "beatae"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_Outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  \"Patent\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "club_1",
        "turns": [
            {
                "isuser": true,
                "text": "What are the average age of all the members of the tennis club",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the average age of all the members of the tennis club.",
                "query": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"",
                "result": [
                    [
                        [
                            "avg(t3.age)"
                        ],
                        [
                            18.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(age) FROM student WHERE StuID IN (SELECT StuID FROM member_of_club WHERE ClubID = 2)"
            },
            {
                "isuser": true,
                "text": "Give me the first names and last names of all the members of the tennis club",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the first name and last name of the member in the tennis club",
                "query": "SELECT t3.Fname, t3.Lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"",
                "result": [
                    [
                        [
                            "Fname",
                            "LName"
                        ],
                        [
                            "Lisa",
                            "Apap"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT fname ,  lname FROM student WHERE StuID IN (SELECT StuID FROM member_of_club WHERE ClubID = 2)"
            },
            {
                "isuser": true,
                "text": "Can i have the city code of all members of the tennis club",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the city code of all members in tennis club.",
                "query": "SELECT t3.city_code FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"",
                "result": [
                    [
                        [
                            "city_code"
                        ],
                        [
                            "PIT"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT city_code FROM student WHERE StuID IN (SELECT StuID FROM member_of_club WHERE ClubID = 2)"
            },
            {
                "isuser": true,
                "text": "Give me the position of the member in the tennis club",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the position of the member in the tennis club.",
                "query": "SELECT t2.Position FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"",
                "result": [
                    [
                        [
                            "Position"
                        ],
                        [
                            "Vice-President"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT position FROM member_of_club WHERE ClubID = 2"
            },
            {
                "isuser": true,
                "text": "Thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You're welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "soccer_2",
        "turns": [
            {
                "isuser": true,
                "text": "Hi there! Can you provide me with a list of all of the player names?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The  player names are shown in the table ",
                "query": "SELECT pName  FROM player",
                "result": [
                    [
                        [
                            "pName"
                        ],
                        [
                            "Andrew"
                        ],
                        [
                            "Blake"
                        ],
                        [
                            "Charles"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT pName FROM Player"
            },
            {
                "isuser": true,
                "text": "Thank you for that! Can you filter the list to show the names of only the players whose decision is \"yes\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The   players  names  whose decision is \"yes\"  are  shown  in the  table  ",
                "query": "SELECT T1.pName  FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'",
                "result": [
                    [
                        [
                            "pName"
                        ],
                        [
                            "Andrew"
                        ],
                        [
                            "Blake"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT pName FROM Player WHERE pID IN (SELECT pID FROM Tryout WHERE decision = \"yes\")"
            },
            {
                "isuser": true,
                "text": "Perfect!  Can you update this list to show the college names associated with each of these 2 players?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Yes,the player names  and  the college names associated with are  shown  in  the  table ",
                "query": "SELECT T1.pName ,T2.cName  FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'",
                "result": [
                    [
                        [
                            "pName",
                            "cName"
                        ],
                        [
                            "Andrew",
                            "ASU"
                        ],
                        [
                            "Blake",
                            "FSU"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT cName FROM College WHERE cName IN (SELECT cName FROM Tryout WHERE pID IN (SELECT pID FROM Player WHERE pName IN (SELECT pName FROM Player WHERE pID IN (SELECT pID FROM Tryout WHERE decision = \"yes\"))))"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Welcome and goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "entertainment_awards",
        "turns": [
            {
                "isuser": true,
                "text": "State the location of flower awards held?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the location of flower awards held is United States",
                "query": "select Location from festival_detail where \tFestival_Name = 'Flower Awards'",
                "result": [
                    [
                        [
                            "Location"
                        ],
                        [
                            "United States"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT LOCATION FROM festival_detail WHERE Festival_Name = \"Flower Awards\""
            },
            {
                "isuser": true,
                "text": "Which festival has the least number of audience?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the festival which has the least number of audience is Panasonic Awards",
                "query": "select Festival_Name from festival_detail order by \tNum_of_Audience limit 1",
                "result": [
                    [
                        [
                            "Festival_Name"
                        ],
                        [
                            "Panasonic Awards"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Festival_Name, Num_of_Audience FROM festival_detail ORDER BY Num_of_Audience ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the name of artwork id 2?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the name of artwork id 2 is I Know",
                "query": "select Name from artwork where Artwork_ID = 2",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "I Know"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM artwork WHERE Artwork_ID = 2"
            },
            {
                "isuser": true,
                "text": "Show distinct types of artworks that are nominated in festivals in 2007?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "the distinct types of artworks that are nominated in festivals in 2007 is Program Music/Variety Show",
                "query": "SELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T3.Year  =  2007",
                "result": [
                    [
                        [
                            "Type"
                        ],
                        [
                            "Program Music/Variety Show"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.Type FROM artwork AS T1 JOIN nomination AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T2.Festival_ID = T3.Festival_ID WHERE T3.Year = 2007"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "employee_hire_evaluation",
        "turns": [
            {
                "isuser": true,
                "text": "How many shops do we have data for?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 9 shops total.",
                "query": "SELECT count(*) FROM shop",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            9
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM shop"
            },
            {
                "isuser": true,
                "text": "Can you give me their names?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Yes, these are all the shops' names.",
                "query": "SELECT * FROM shop",
                "result": [
                    [
                        [
                            "Shop_ID",
                            "Name",
                            "Location",
                            "District",
                            "Number_products",
                            "Manager_name"
                        ],
                        [
                            1,
                            "FC Haka",
                            "Valkeakoski",
                            "Tehtaan kenttä",
                            3516,
                            "Olli Huttunen"
                        ],
                        [
                            2,
                            "HJK",
                            "Helsinki",
                            "Finnair Stadium",
                            10770,
                            "Antti Muurinen"
                        ],
                        [
                            3,
                            "FC Honka",
                            "Espoo",
                            "Tapiolan Urheilupuisto",
                            6000,
                            "Mika Lehkosuo"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM shop"
            },
            {
                "isuser": true,
                "text": "And how many employees were hired by each shop?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the number of employees hired by each shop.",
                "query": "SELECT count(*) FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            2
                        ],
                        [
                            1
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) ,  T2.name FROM hiring AS T1 JOIN employee AS T2 ON T1.employee_id  =  T2.employee_id GROUP BY T1.shop_id"
            }
        ]
    },
    {
        "db_name": "icfp_1",
        "turns": [
            {
                "isuser": true,
                "text": "What are the paper id of Gibbons?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the paper id of Gibbons is 200",
                "query": "SELECT DISTINCT \tpaperID FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid  WHERE t1.lname  =  \"Gibbons\"",
                "result": [
                    [
                        [
                            "paperID"
                        ],
                        [
                            200
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT paperID FROM Authorship WHERE authID = 1"
            },
            {
                "isuser": true,
                "text": "Who studied at Norterstein University?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "did You mean list the name of authors who belong to the institution \"Northeastern University\"",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT DISTINCT fname, lname FROM Authors AS T1 JOIN Authorship AS T2 ON T1.authID = T2.authID WHERE T2.instID = 1"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Olin\t and Aaron belong to the institution \"Northeastern University\"",
                "query": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Northeastern University\"",
                "result": [
                    [
                        [
                            "fname",
                            "lname"
                        ],
                        [
                            "Olin",
                            "Shivers"
                        ],
                        [
                            "Aaron",
                            "Turon"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT fname, lname FROM Authors AS T1 JOIN Authorship AS T2 ON T1.authID = T2.authID WHERE T2.instID = 1"
            },
            {
                "isuser": true,
                "text": "What are the auth id of Ralf?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Ralf's  auth id is 51",
                "query": "SELECT  authID  FROM Authors  where \tfname=\"Ralf\"",
                "result": [
                    [
                        [
                            "authID"
                        ],
                        [
                            51
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT authID FROM Authors WHERE fname = 'Ralf'"
            },
            {
                "isuser": true,
                "text": "Which authors belong to the institution \"Google\"? Show the first names and last names?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Matthias \tBlume belong to the institution \"Google\"",
                "query": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"",
                "result": [
                    [
                        [
                            "fname",
                            "lname"
                        ],
                        [
                            "Matthias",
                            "Blume"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT fname, lname FROM Authors AS T1 JOIN Authorship AS T2 ON T1.authID = T2.authID WHERE T2.instID = 2"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome，goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "hospital_1",
        "turns": [
            {
                "isuser": true,
                "text": "What are all the names of the departments?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table shows all the names of the department.",
                "query": "select Name from Department",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "General Medicine"
                        ],
                        [
                            "Surgery"
                        ],
                        [
                            "Psychiatry"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM department"
            },
            {
                "isuser": true,
                "text": "How many employees are in the General Medicine department?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 4 employees in the department named \"General Medicine\".",
                "query": "select Head from Department where Name='General Medicine'",
                "result": [
                    [
                        [
                            "Head"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM nurse WHERE registered = 1 AND department = 1"
            },
            {
                "isuser": true,
                "text": "Please show which departments have greater than 4 employees\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The department named \"Surgery\" and \"Psychiatry\" have greater than 4 employees.",
                "query": "select Name from Department where Head>4",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Surgery"
                        ],
                        [
                            "Psychiatry"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM department WHERE departmentID IN (SELECT department FROM nurse GROUP BY department HAVING count(*)  >  4)"
            },
            {
                "isuser": true,
                "text": "Which of these has the largest number of employees?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "It's the department named \"Psychiatry\" that has the largest number of employees.",
                "query": "select Name from Department order by Head desc limit 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Psychiatry"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM department WHERE departmentID IN (SELECT department FROM nurse GROUP BY department HAVING count(*)  >  4)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "chinook_1",
        "turns": [
            {
                "isuser": true,
                "text": "thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "Tell me the artist id and album id for title Balls to the Wall ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the id for the album titled \"Balls to the Wall\" is 2, and its artist id is 2 too.",
                "query": "SELECT AlbumID, ArtistId FROM ALBUM where Title = 'Balls to the Wall'",
                "result": [
                    [
                        [
                            "AlbumId",
                            "ArtistId"
                        ],
                        [
                            2,
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT ArtistId, AlbumId FROM Album WHERE Title = 'Balls to the Wall'"
            },
            {
                "isuser": true,
                "text": "k. Who is the composer for For Those About To Rock (We Salute You) ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the composer for the Album titled 'For Those About To Rock We Salute You' is 'Angus Young, Malcolm Young, Brian Johnson'.",
                "query": "SELECT distinct T2.Composer FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId where t1.title = 'For Those About To Rock We Salute You'",
                "result": [
                    [
                        [
                            "Composer"
                        ],
                        [
                            "Angus Young, Malcolm Young, Brian Johnson"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Composer FROM Track WHERE Name = 'For Those About To Rock (We Salute You)'"
            },
            {
                "isuser": true,
                "text": "Which track id's do not have their composer name in the table...",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Sorry, could you rephrase your question?",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT TrackId FROM Track WHERE Composer NOT IN (SELECT Composer FROM Track)"
            },
            {
                "isuser": true,
                "text": "k. Who is the composer for Balls to the Wall ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the composer for the Album titled 'Balls to the Wall' is NULL.",
                "query": "SELECT distinct T2.Composer FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId where t1.title = 'Balls to the Wall'",
                "result": [
                    [
                        [
                            "Composer"
                        ],
                        [
                            null
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Composer FROM Track WHERE Name = 'Balls to the Wall'"
            },
            {
                "isuser": true,
                "text": "Show the album names , ids and the number of tracks for each album.",
                "type": "improper"
            },
            {
                "isuser": true,
                "text": "* I have left the chat *",
                "type": "answerable",
                "predict": "SELECT Title ,  AlbumId ,  COUNT(*) FROM Album GROUP BY AlbumId"
            },
            {
                "isuser": false,
                "text": "here is the list of the album name, id and the number of tracks for each album.",
                "query": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID",
                "result": [
                    [
                        [
                            "Title",
                            "AlbumId",
                            "COUNT(*)"
                        ],
                        [
                            "For Those About To Rock We Salute You",
                            1,
                            10
                        ],
                        [
                            "Balls to the Wall",
                            2,
                            1
                        ],
                        [
                            "Restless and Wild",
                            3,
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable"
            }
        ]
    },
    {
        "db_name": "customers_and_addresses",
        "turns": [
            {
                "isuser": true,
                "text": "show me the customer name of the order that have the status \"cancelled\"",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The result table shows the customer names of the orders that have the status \"cancelled\" .",
                "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Cancelled\"",
                "result": [
                    [
                        [
                            "customer_name"
                        ],
                        [
                            "Prof. Ibrahim Bashirian"
                        ],
                        [
                            "Rodrick Heaney"
                        ],
                        [
                            "Clifford Pagac"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"cancelled\""
            },
            {
                "isuser": true,
                "text": "name the customer which have  15 as customer id?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the customer with id 15 is Prof. Ibrahim Bashirian.",
                "query": "SELECT customer_name FROM customers where customer_id = 15",
                "result": [
                    [
                        [
                            "customer_name"
                        ],
                        [
                            "Prof. Ibrahim Bashirian"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_name FROM customers WHERE customer_id = 15"
            },
            {
                "isuser": true,
                "text": "find the customer name of the order that have status \"delivered\"",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The table shows the customer name of the orders that have the status \"delivered\".",
                "query": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\"",
                "result": [
                    [
                        [
                            "customer_name",
                            "order_date"
                        ],
                        [
                            "Prof. Reyes Berge II",
                            "2018-03-04 07:16:22"
                        ],
                        [
                            "Clifford Pagac",
                            "2018-03-08 15:30:24"
                        ],
                        [
                            "Kitty Padberg III",
                            "2018-03-16 03:16:57"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"delivered\""
            },
            {
                "isuser": true,
                "text": "find the customer date of the orders that have the status\" delivered\"",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "did you mean the order date?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T1.date_became_customer FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"delivered\""
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The table shows the order date of the orders that have the status\" delivered\".",
                "query": "SELECT t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\"",
                "result": [
                    [
                        [
                            "order_date"
                        ],
                        [
                            "2018-03-04 07:16:22"
                        ],
                        [
                            "2018-03-08 15:30:24"
                        ],
                        [
                            "2018-03-16 03:16:57"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"delivered\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "flight_4",
        "turns": [
            {
                "isuser": true,
                "text": "What are the names of airport which is the source for the most number of flight routes?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the airport which is the source for the most number of flight routes is Hartsfield Jackson Atlanta International Airport.",
                "query": "SELECT T1.name  FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Hartsfield Jackson Atlanta International Airport"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What are the names of city of airport which is the source for the most number of flight routes",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the name of city which is the source for the most number of flight routes?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T1.city FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T1.city ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of city which is the source for the most number of flight routes is Atlanta.",
                "query": "SELECT  T1.city  FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "city"
                        ],
                        [
                            "Atlanta"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Whats the elevation of hartsfueld jacksin atlanta?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the elevation of the airport named Hartsfield Jackson Atlanta International Airport?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT elevation FROM airports WHERE name = \"Hartsfield-Jackson Atlanta Intl.\""
            },
            {
                "isuser": true,
                "text": "Yes pleaee",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The elevation of the airport named Hartsfield Jackson Atlanta International Airport is 1026.",
                "query": "",
                "result": [],
                "predict_type": "answerable",
                "predict": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "concert_singer",
        "turns": [
            {
                "isuser": true,
                "text": "what are the singers name on this list?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The list of singers names are shown in the result table. ",
                "query": "SELECT name from singer",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Joe Sharp"
                        ],
                        [
                            "Timbaland"
                        ],
                        [
                            "Justin Brown"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.concert_ID  =  2"
            },
            {
                "isuser": true,
                "text": "Joe Sharp song \"You\" was released in what year?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The song named You by singer named Joe Sharp was released in 1992. ",
                "query": "SELECT song_release_year from singer where Name = \"Joe Sharp\" and Song_Name = \"You\"",
                "result": [
                    [
                        [
                            "Song_release_year"
                        ],
                        [
                            "1992"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Song_release_year FROM singer WHERE Name = \"Joe Sharp\" AND Song_Name = \"You\""
            },
            {
                "isuser": true,
                "text": "how many number of concert has Joe Sharp held?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of concerts that Joe Sharp has held is 0. ",
                "query": "SELECT count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id where T2.name = \"Joe Sharp\" GROUP BY T2.singer_id",
                "result": [
                    [
                        [
                            "count(*)"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM concert WHERE concert_Name = \"Joe Sharp\""
            },
            {
                "isuser": true,
                "text": "ok. what country is Joe sharp from?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Singer named Joe Sharp is from the Netherlands. ",
                "query": "SELECT country from singer where name = \"Joe Sharp\" ",
                "result": [
                    [
                        [
                            "Country"
                        ],
                        [
                            "Netherlands"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Country FROM singer WHERE Name = \"Joe Sharp\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, good bye. ",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "phone_1",
        "turns": [
            {
                "isuser": true,
                "text": "Find the average ram mib size of the chip models that are never used by any phone",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Sure. This is the average ram mib size of chip models that are never used by any phone.",
                "query": "SELECT avg(RAM_MiB) FROM chip_model WHERE model_name NOT IN (SELECT chip_model FROM phone)",
                "result": [
                    [
                        [
                            "avg(RAM_MiB)"
                        ],
                        [
                            60.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(RAM_MiB) FROM chip_model WHERE chip_model NOT IN ( SELECT chip_model FROM phone )"
            },
            {
                "isuser": true,
                "text": "How many chips is that which are never used by any phone?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 8 chips never used by any phone.",
                "query": "SELECT count(*) FROM chip_model WHERE model_name NOT IN (SELECT chip_model FROM phone)",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM chip_model WHERE chip_model NOT IN ( SELECT chip_model FROM phone )"
            },
            {
                "isuser": true,
                "text": "Give me all their model names and ram mib",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the model names and ram mib of chips never used by any phone.",
                "query": "SELECT Model_name,RAM_MiB FROM chip_model WHERE model_name NOT IN (SELECT chip_model FROM phone)",
                "result": [
                    [
                        [
                            "Model_name",
                            "RAM_MiB"
                        ],
                        [
                            "X5 high end",
                            64.0
                        ],
                        [
                            "X3 Basic",
                            32.0
                        ],
                        [
                            "X3 Advanced",
                            64.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Model_name, RAM_MiB FROM chip_model WHERE chip_model NOT IN ( SELECT chip_model FROM phone )"
            },
            {
                "isuser": true,
                "text": "What is the highest ram mib from those 8, and tell me how many chips which are used by phones have ram mib equal to or greater than that number",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry, I can only answer one question at a time.",
                "query": "",
                "result": [],
                "predict_type": "SORRY",
                "predict": "SELECT max(RAM_MiB) FROM chip_model WHERE chip_model IN ( SELECT chip_model FROM phone )"
            },
            {
                "isuser": true,
                "text": "How many chips used by phones have a ram mib higher or equal to 64",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 4 chips used by phones that have a ram mib higher or equal to 64.",
                "query": "SELECT count(*) FROM chip_model WHERE model_name IN (SELECT chip_model FROM phone) AND RAM_MiB >= 64",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM chip_model WHERE RAM_MiB >= 64 AND chip_model IN ( SELECT chip_model FROM phone )"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You're welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "customers_card_transactions",
        "turns": [
            {
                "isuser": true,
                "text": "how many customers are presented on the table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 15 entries in the table Customers.",
                "query": "SELECT count(*) FROM Customers",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Customers"
            },
            {
                "isuser": true,
                "text": "how many accounts on the table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 15 entries in the table Accounts.",
                "query": "SELECT count(*) FROM Accounts",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Accounts"
            },
            {
                "isuser": true,
                "text": "list out the customers first name",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the first names of the customers.",
                "query": "SELECT customer_first_name FROM Customers",
                "result": [
                    [
                        [
                            "customer_first_name"
                        ],
                        [
                            "Aniyah"
                        ],
                        [
                            "Susie"
                        ],
                        [
                            "Marcel"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_first_name FROM Customers"
            },
            {
                "isuser": true,
                "text": "what is the address of Aniyah",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean to ask for the address of the customer with first name Aniyah?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT customer_address FROM Customers WHERE customer_first_name = \"Aniyah\""
            },
            {
                "isuser": true,
                "text": "exactly",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The address of the customer with first name Aniyah is 55975 Theodore Estates Lake Brody, VT 57078.",
                "query": "SELECT customer_address FROM Customers WHERE customer_first_name = \"Aniyah\"",
                "result": [
                    [
                        [
                            "customer_address"
                        ],
                        [
                            "55975 Theodore Estates\nLake Brody, VT 57078"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_address FROM Customers WHERE customer_first_name = \"Aniyah\""
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Good bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "gymnast",
        "turns": [
            {
                "isuser": true,
                "text": "Hello there! Can you list all of the hometowns listed in this database?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "All the hometowns are listed in the result table. They are San Domingo, Bonao, Miami, etc.",
                "query": "SELECT DISTINCT Hometown FROM people",
                "result": [
                    [
                        [
                            "Hometown"
                        ],
                        [
                            "Santo Domingo"
                        ],
                        [
                            "Bonao"
                        ],
                        [
                            "Miami"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT Hometown FROM people"
            },
            {
                "isuser": true,
                "text": "Thank you for that information!  Can you filter that list to show just the hometowns for gymnasts whose total points are more than 57.5?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The hometowns for gymnasts whose total points are more than 57.5 are Santo Domingo and Bonao",
                "query": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5",
                "result": [
                    [
                        [
                            "Hometown"
                        ],
                        [
                            "Santo Domingo"
                        ],
                        [
                            "Bonao"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT Hometown FROM people WHERE Total_Points > 57.5"
            },
            {
                "isuser": true,
                "text": "Thank you! Can you show all of the names of the gymnasts for those hometowns?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names of the gymnasts whose hometown is Santo Domingo or Bonao are listed in the result table.",
                "query": "SELECT name FROM people WHERE Hometown = \"Santo Domingo\" or Hometown = \"Bonao\"",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Paul Hamm"
                        ],
                        [
                            "Lorraine Súarez Carmona"
                        ],
                        [
                            "Elizabeth Quiñónez Aroyo"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM people WHERE Hometown IN (SELECT Hometown FROM people WHERE Total_Points > 57.5)"
            }
        ]
    },
    {
        "db_name": "activity_1",
        "turns": [
            {
                "isuser": true,
                "text": "Show me all the buildings",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are all the information about buildings",
                "query": "SELECT building FROM Faculty",
                "result": [
                    [
                        [
                            "Building"
                        ],
                        [
                            "NEB"
                        ],
                        [
                            "NEB"
                        ],
                        [
                            "NEB"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT Building FROM Faculty"
            },
            {
                "isuser": true,
                "text": "Show me the details of all professors",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "do you mean all information about them?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT * FROM Faculty"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are all information about  professors",
                "query": "select * from Faculty",
                "result": [
                    [
                        [
                            "FacID",
                            "Lname",
                            "Fname",
                            "Rank",
                            "Sex",
                            "Phone",
                            "Room",
                            "Building"
                        ],
                        [
                            1082,
                            "Giuliano",
                            "Mark",
                            "Instructor",
                            "M",
                            2424,
                            "224",
                            "NEB"
                        ],
                        [
                            1121,
                            "Goodrich",
                            "Michael",
                            "Professor",
                            "M",
                            3593,
                            "219",
                            "NEB"
                        ],
                        [
                            1148,
                            "Masson",
                            "Gerald",
                            "Professor",
                            "M",
                            3402,
                            "224B",
                            "NEB"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT Building FROM Faculty"
            },
            {
                "isuser": true,
                "text": "Show me all the buildings that have at least 10 professors",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are  the buildings that have at least 10 professors ",
                "query": "SELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10",
                "result": [
                    [
                        [
                            "Building"
                        ],
                        [
                            "Barton"
                        ],
                        [
                            "Krieger"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Building FROM Faculty GROUP BY Building HAVING COUNT(*) >= 10"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "manufactory_1",
        "turns": [
            {
                "isuser": true,
                "text": "Hello!  Can you please provide me with the name of the founder for Sony?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Hi! The name of the founder of Sony is Andy.",
                "query": "SELECT founder FROM manufacturers WHERE name='Sony'",
                "result": [
                    [
                        [
                            "Founder"
                        ],
                        [
                            "Andy"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT founder FROM Manufacturers WHERE name = 'Sony'"
            },
            {
                "isuser": true,
                "text": "Thanks!  What city is the headquarters of Sony located in?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the headquarters of Sony is in Tokyo",
                "query": "SELECT Headquarter FROM manufacturers WHERE name='Sony'",
                "result": [
                    [
                        [
                            "Headquarter"
                        ],
                        [
                            "Tokyo"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT headquarter FROM Manufacturers WHERE name = 'Sony'"
            },
            {
                "isuser": true,
                "text": "Are there any other companies with a headquarters in Tokyo?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "No, only Sony has a headquarters in Tokyo",
                "query": "SELECT name FROM manufacturers WHERE Headquarter='Tokyo'",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Sony"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM Manufacturers WHERE headquarter = 'Tokyo'"
            },
            {
                "isuser": true,
                "text": "What was Sony's revenue?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The revenue of Sony is 120.0",
                "query": "SELECT Revenue FROM manufacturers WHERE name='Sony'",
                "result": [
                    [
                        [
                            "Revenue"
                        ],
                        [
                            120.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT revenue FROM Manufacturers WHERE name = 'Sony'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure! My pleasure",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "chinook_1",
        "turns": [
            {
                "isuser": true,
                "text": "List album titles for albums containing Reggae genre tracks.",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did  you  mean   both contain  'Reggae' and 'Rock' genre tracks?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T2.Title FROM GENRE AS T1 JOIN ALBUM AS T2 ON T1.GenreId = T2.GenreId JOIN TRACK AS T3 ON T2.AlbumId = T3.AlbumId WHERE T1.Name = \"Reggae\""
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The  album title for albums containing both 'Reggae' and 'Rock' genre tracks is Greatest Hits",
                "query": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'",
                "result": [
                    [
                        [
                            "Title"
                        ],
                        [
                            "Greatest Hits"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Title FROM GENRE AS T1 JOIN ALBUM AS T2 ON T1.GenreId = T2.GenreId JOIN TRACK AS T3 ON T2.AlbumId = T3.AlbumId WHERE T1.Name = \"Reggae\""
            },
            {
                "isuser": true,
                "text": "What is the composer of Greatest Hits?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "I can  not  find the info  about  Greatest Hits",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT T2.Composer FROM GENRE AS T1 JOIN ALBUM AS T2 ON T1.GenreId = T2.GenreId JOIN TRACK AS T3 ON T2.AlbumId = T3.AlbumId WHERE T1.Name = \"Reggae\" AND T2.Title = \"Greatest Hits\""
            },
            {
                "isuser": true,
                "text": "How many albums contain both 'Reggae' and 'Rock' genre tracks?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "There  is  only  one  album contain both 'Reggae' and 'Rock' genre tracks",
                "query": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Rock'",
                "result": [
                    [
                        [
                            "Title"
                        ],
                        [
                            "Greatest Hits"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM GENRE AS T1 JOIN ALBUM AS T2 ON T1.GenreId = T2.GenreId JOIN TRACK AS T3 ON T2.AlbumId = T3.AlbumId WHERE T1.Name = \"Reggae\" INTERSECT SELECT COUNT(*) FROM GENRE AS T1 JOIN ALBUM AS T2 ON T1.GenreId = T2.GenreId JOIN TRACK AS T3 ON T2.AlbumId = T3.AlbumId WHERE T1.Name = \"Rock\""
            },
            {
                "isuser": true,
                "text": "List album titles for albums containing Rock genre tracks ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The  album titles for albums containing Rock genre tracks is Greatest Hits",
                "query": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Rock'",
                "result": [
                    [
                        [
                            "Title"
                        ],
                        [
                            "Greatest Hits"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Title FROM GENRE AS T1 JOIN ALBUM AS T2 ON T1.GenreId = T2.GenreId JOIN TRACK AS T3 ON T2.AlbumId = T3.AlbumId WHERE T1.Name = \"Rock\""
            },
            {
                "isuser": true,
                "text": "List album titles for albums containing Metal genre tracks",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The album titles for albums containing Metal genre tracks  are  shown  in  the table ",
                "query": "SELECT distinct  T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Metal' ",
                "result": [
                    [
                        [
                            "Title"
                        ],
                        [
                            "Plays Metallica By Four Cellos"
                        ],
                        [
                            "Alcohol Fueled Brewtality Live! [Disc 1]"
                        ],
                        [
                            "Alcohol Fueled Brewtality Live! [Disc 2]"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Title FROM GENRE AS T1 JOIN ALBUM AS T2 ON T1.GenreId = T2.GenreId JOIN TRACK AS T3 ON T2.AlbumId = T3.AlbumId WHERE T1.Name = \"Metal\""
            },
            {
                "isuser": true,
                "text": "How many albums contain 'Metal' genre tracks?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The  count of albums containing 'Metal' genre tracks is 35",
                "query": "SELECT count(distinct  T1.Title )FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Metal' ",
                "result": [
                    [
                        [
                            "count(distinct  T1.Title )"
                        ],
                        [
                            35
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM GENRE AS T1 JOIN ALBUM AS T2 ON T1.GenreId = T2.GenreId JOIN TRACK AS T3 ON T2.AlbumId = T3.AlbumId WHERE T1.Name = \"Metal\""
            },
            {
                "isuser": true,
                "text": "Thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome  and  bye ",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "csu_1",
        "turns": [
            {
                "isuser": true,
                "text": "Which universities are in Los Angeles county and opened after 1950?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are universities in Los Angeles county that opened after 1950",
                "query": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950",
                "result": [
                    [
                        [
                            "Campus"
                        ],
                        [
                            "California State University-Dominguez Hills"
                        ],
                        [
                            "California State University-Northridge"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND year  >  1950"
            },
            {
                "isuser": true,
                "text": "What about before 1950?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are universities in Los Angeles county that opened before 1950",
                "query": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  <  1950",
                "result": [
                    [
                        [
                            "Campus"
                        ],
                        [
                            "Long Beach State University"
                        ],
                        [
                            "California State University-Los Angeles"
                        ],
                        [
                            "California State Polytechnic University-Pomona"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND year  <  1950"
            },
            {
                "isuser": true,
                "text": "What are the years they opened?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the open years of universities in Los Angeles County that opened before 1950",
                "query": "SELECT year FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  <  1950",
                "result": [
                    [
                        [
                            "Year"
                        ],
                        [
                            1949
                        ],
                        [
                            1947
                        ],
                        [
                            1938
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT year FROM campuses WHERE county  =  \"Los Angeles\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "thanks. bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "formula_1",
        "turns": [
            {
                "isuser": true,
                "text": "race circuits in spain",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Could you ask that in a more concrete way?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT DISTINCT T1.name FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId  =  T2.circuitId WHERE T1.country  =  \"Spain\""
            },
            {
                "isuser": true,
                "text": "what are  race circuits in Spain",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of circuits in Spain.",
                "query": "SELECT name FROM circuits WHERE country = \"Spain\"",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Circuit de Barcelona-Catalunya"
                        ],
                        [
                            "Valencia Street Circuit"
                        ],
                        [
                            "Circuito de Jerez"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.name FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId  =  T2.circuitId WHERE T1.country  =  \"Spain\""
            },
            {
                "isuser": true,
                "text": "races held after 2017",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of races held after year 2017.",
                "query": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T1.year > 2017",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Australian Grand Prix"
                        ],
                        [
                            "Bahrain Grand Prix"
                        ],
                        [
                            "Chinese Grand Prix"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.name FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId  =  T2.circuitId WHERE T2.year  >  2017"
            },
            {
                "isuser": true,
                "text": "races held after 2017 in spain circuits",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Spanish Grand Prix is the name of the race in Spain after 2017.",
                "query": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Spanish Grand Prix"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.name FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId  =  T2.circuitId WHERE T2.year  >  2017 AND T1.country  =  \"Spain\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome! Bye.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "department_store",
        "turns": [
            {
                "isuser": true,
                "text": "who is the department manager?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you want the ids of staffs who are department managers?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T2.staff_name FROM department_stores AS T1 JOIN staff_department_assignments AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = \"Marketing\""
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the ids of staffs who have a job title Department Manager.",
                "query": "SELECT staff_id FROM staff_department_assignments where job_title_code = \"Department Manager\"",
                "result": [
                    [
                        [
                            "staff_id"
                        ],
                        [
                            5
                        ],
                        [
                            15
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.staff_name FROM department_stores AS T1 JOIN staff_department_assignments AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = \"Marketing\""
            },
            {
                "isuser": true,
                "text": "which department id has the least amount of staff?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The department with id 1 has the least number of staff.",
                "query": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1",
                "result": [
                    [
                        [
                            "department_id"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "why does id 1 have the least amount of staff?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Here are the ids of departments and the corresponding number of staff order by the amount.",
                "query": "SELECT department_id, count(*) FROM staff_department_assignments GROUP BY department_id ORDER BY count(*)",
                "result": [
                    [
                        [
                            "department_id",
                            "count(*)"
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            3,
                            2
                        ],
                        [
                            4,
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks. bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "music_4",
        "turns": [
            {
                "isuser": true,
                "text": "Can you list the artist ids and their volume issues?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are all the pairs of artist ids and their volume issues of all the artists",
                "query": "SELECT T1.artist_id, T2.volume_issue FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID",
                "result": [
                    [
                        [
                            "Artist_ID",
                            "Volume_Issue"
                        ],
                        [
                            1,
                            "45:14 §"
                        ],
                        [
                            2,
                            "45:15"
                        ],
                        [
                            1,
                            "45:16"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Artist_ID, Volume_Issue FROM volume"
            },
            {
                "isuser": true,
                "text": "Which volumes have more than 2 weeks on top?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are all the information of volumes which have more than 2 weeks on top.",
                "query": "SELECT T2.* FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2",
                "result": [
                    [
                        [
                            "Volume_ID",
                            "Volume_Issue",
                            "Issue_Date",
                            "Weeks_on_Top",
                            "Song",
                            "Artist_ID"
                        ],
                        [
                            1,
                            "45:14 §",
                            "27 December 1986 - 10 January",
                            3.0,
                            " The Way",
                            1
                        ],
                        [
                            6,
                            "46:6-8",
                            "16 May - 30 May",
                            3.0,
                            " (I Just) Died in Your Arms ",
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Volume_ID, Volume_Issue FROM volume WHERE Weeks_on_Top > 2"
            },
            {
                "isuser": true,
                "text": "Hmm, I want to know the famous titles of the artists associated with volumes with more than 2 weeks on top.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the famous titles of the artists associated with volumes with more than 2 weeks on top. ",
                "query": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2",
                "result": [
                    [
                        [
                            "Famous_Title"
                        ],
                        [
                            "Bergen 1996"
                        ],
                        [
                            "Bergen 1996"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Famous_Title FROM volume AS T1 JOIN artist AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Weeks_on_Top > 2"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "car_1",
        "turns": [
            {
                "isuser": true,
                "text": "Can you list all the continents?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are all continents.",
                "query": "SELECT Continent FROM CONTINENTS",
                "result": [
                    [
                        [
                            "Continent"
                        ],
                        [
                            "america"
                        ],
                        [
                            "europe"
                        ],
                        [
                            "asia"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Continent FROM Continents"
            },
            {
                "isuser": true,
                "text": "Okay, now can you list the number of countries belonging to each continent, including the continent id as well?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the number of countries belonging to each continent along with the id and name of the corresponding continent.",
                "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
                "result": [
                    [
                        [
                            "ContId",
                            "Continent",
                            "count(*)"
                        ],
                        [
                            1,
                            "america",
                            3
                        ],
                        [
                            2,
                            "europe",
                            6
                        ],
                        [
                            3,
                            "asia",
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Continent, COUNT(*) AS CountryCount FROM Countries GROUP BY Continent"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Welcome. Bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "journal_committee",
        "turns": [
            {
                "isuser": true,
                "text": "Show the names of editors on the list with at least two journal committees.\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are  the names of editors on the list with at least two journal committees",
                "query": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Grażyna Wolszczak"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.Editor_ID HAVING COUNT(*) >= 2"
            },
            {
                "isuser": true,
                "text": "What are the ages of the editors that are at least two journal committees.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the ages of the editors that are on at least two journal committees",
                "query": "SELECT T1.Age FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*)  >=  2",
                "result": [
                    [
                        [
                            "Age"
                        ],
                        [
                            54.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Age FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.Editor_ID HAVING COUNT(*) >= 2"
            },
            {
                "isuser": true,
                "text": "What type of work does  Kamila Porczyk do?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The work type of the editor with name Kamila Porczyk is Photo",
                "query": "SELECT T2.work_type FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID where T1.name = \"Kamila Porczyk\"",
                "result": [
                    [
                        [
                            "Work_Type"
                        ],
                        [
                            "Photo"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Work_Type FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID WHERE T2.Name = 'Kamila Porczyk'"
            },
            {
                "isuser": true,
                "text": "Who is the youngest journal committee member?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Do you want the name of  the youngest journal committee member?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID ORDER BY T2.Age ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Yes please",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the name of the youngest editor that is on journal committee is Marek Siudym",
                "query": "SELECT T1.name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID order by T1.age asc limit 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Marek Siudym"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.Editor_ID HAVING COUNT(*) >= 2"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you! Bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "decoration_competition",
        "turns": [
            {
                "isuser": true,
                "text": "How many countries have professional golfers?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "we don't have that information.",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT COUNT(DISTINCT Country) FROM member WHERE Country IN (SELECT Country FROM member WHERE Country IN (SELECT Country FROM member WHERE Country NOT IN (SELECT Country FROM member WHERE Country = 'USA')))"
            },
            {
                "isuser": true,
                "text": "Which countries have members?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The United States and Canada have members",
                "query": "SELECT distinct(Country) FROM member",
                "result": [
                    [
                        [
                            "Country"
                        ],
                        [
                            "United States"
                        ],
                        [
                            "Canada"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Country FROM member GROUP BY Country"
            },
            {
                "isuser": true,
                "text": "Which country has the most members?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The United States has the most members",
                "query": "SELECT Country FROM member GROUP BY Country order by COUNT(*) desc limit 1",
                "result": [
                    [
                        [
                            "Country"
                        ],
                        [
                            "United States"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Country, COUNT(*) AS MemberCount FROM member GROUP BY Country ORDER BY MemberCount DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Which country has more than 2 members?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Canada and the United States  have more than 2 members",
                "query": "SELECT Country FROM member GROUP BY Country HAVING COUNT(*)  >  2",
                "result": [
                    [
                        [
                            "Country"
                        ],
                        [
                            "Canada"
                        ],
                        [
                            "United States"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Country FROM member GROUP BY Country HAVING COUNT(*)  >  2"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "behavior_monitoring",
        "turns": [
            {
                "isuser": true,
                "text": "What are the monthly rentals of student?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the monthly rentals of students",
                "query": "SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id",
                "result": [
                    [
                        [
                            "monthly_rental"
                        ],
                        [
                            826.4319
                        ],
                        [
                            1113.0996
                        ],
                        [
                            1297.3186
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.student_id ,  T2.address_id ,  T2.date_address_from ,  T2.date_address_to ,  T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T1.city  =  \"Toronto\""
            },
            {
                "isuser": true,
                "text": "what are the total number of student addresses in Texas state? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 2 students addresses in Texas state",
                "query": "SELECT count(T2.student_id) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id WHERE T1.state_province_county = \"Texas\"",
                "result": [
                    [
                        [
                            "count(T2.student_id)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Texas\""
            },
            {
                "isuser": true,
                "text": "what are the monthly rentals of student addresses in Texas state?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the monthly rentals of student addresses in Texas state",
                "query": "SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id WHERE T1.state_province_county = \"Texas\"",
                "result": [
                    [
                        [
                            "monthly_rental"
                        ],
                        [
                            894.0958
                        ],
                        [
                            800.1214
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.student_id ,  T2.address_id ,  T2.date_address_from ,  T2.date_address_to ,  T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Texas\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "car_1",
        "turns": [
            {
                "isuser": true,
                "text": "which models are lighter than 3500?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the models that are lighter than 3500.",
                "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500",
                "result": [
                    [
                        [
                            "Model"
                        ],
                        [
                            "plymouth"
                        ],
                        [
                            "amc"
                        ],
                        [
                            "ford"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Model FROM CAR_NAMES WHERE Weight  <  3500"
            },
            {
                "isuser": true,
                "text": "what is the weight of  BMW?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the weights of all BMW models.",
                "query": "SELECT DISTINCT T3.Weight FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T1.Model=\"bmw\"",
                "result": [
                    [
                        [
                            "Weight"
                        ],
                        [
                            2234
                        ],
                        [
                            2600
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Weight FROM CAR_NAMES WHERE Make  =  \"BMW\""
            },
            {
                "isuser": true,
                "text": "what is the name of the id 2?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Are you asking about the car or the carmaker?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT Model FROM CAR_NAMES WHERE MakeId  =  2"
            },
            {
                "isuser": true,
                "text": "carmaker?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The carmaker with id 2 is volkswagen.",
                "query": "SELECT Model FROM car_names WHERE MakeId=2",
                "result": [
                    [
                        [
                            "Model"
                        ],
                        [
                            "buick"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Maker FROM CAR_MAKERS WHERE Id  =  2"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            }
        ]
    },
    {
        "db_name": "hr_1",
        "turns": [
            {
                "isuser": true,
                "text": "Hello!  Can you provide me with a list of all employee IDs and their corresponding salaries?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the table that lists all employee IDs and their corresponding salaries. For example, employee number 100 has salary 24000.",
                "query": "SELECT employee_id ,  salary FROM employees;",
                "result": [
                    [
                        [
                            "EMPLOYEE_ID",
                            "SALARY"
                        ],
                        [
                            100,
                            24000
                        ],
                        [
                            101,
                            17000
                        ],
                        [
                            102,
                            17000
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT employee_id ,  salary FROM employees"
            },
            {
                "isuser": true,
                "text": "Awesome!  That's great! Can you filter this list to show only the employee IDs and correpsonding salaries that are above the average salary?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the table that lists all employee IDs who have a salary above the average and their corresponding salaries. For example, employee number 100 has salary 24000, which is above the average.",
                "query": "SELECT employee_id ,   salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees);",
                "result": [
                    [
                        [
                            "EMPLOYEE_ID",
                            "SALARY"
                        ],
                        [
                            100,
                            24000
                        ],
                        [
                            101,
                            17000
                        ],
                        [
                            102,
                            17000
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT employee_id ,  salary FROM employees WHERE salary  >  (SELECT avg(salary) FROM employees)"
            },
            {
                "isuser": true,
                "text": "Great!  Now can you display this list to include both the first and last name corresponding to each employee ID?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the table that lists all employee IDs who have a salary above the average, their first name and last name, and also their corresponding salaries. For example, employee number 100 named Steven King has salary 24000, which is above the average.",
                "query": "SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees );",
                "result": [
                    [
                        [
                            "EMPLOYEE_ID",
                            "FIRST_NAME",
                            "LAST_NAME",
                            "SALARY"
                        ],
                        [
                            100,
                            "Steven",
                            "King",
                            24000
                        ],
                        [
                            101,
                            "Neena",
                            "Kochhar",
                            17000
                        ],
                        [
                            102,
                            "Lex",
                            "De Haan",
                            17000
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  (SELECT avg(salary) FROM employees)"
            },
            {
                "isuser": true,
                "text": "Thank you so much for that! Can you filter this list to show only the rows in which the employee works in a department which has an employee with the letter J in their name?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is all the employee who works in a department with any employee with a 'J' in their first name, and also their wage is above the average. For example,  Nancy Greenburg is an employee among the list.",
                "query": "SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')",
                "result": [
                    [
                        [
                            "EMPLOYEE_ID",
                            "FIRST_NAME",
                            "LAST_NAME",
                            "SALARY"
                        ],
                        [
                            108,
                            "Nancy",
                            "Greenberg",
                            12000
                        ],
                        [
                            109,
                            "Daniel",
                            "Faviet",
                            9000
                        ],
                        [
                            110,
                            "John",
                            "Chen",
                            8200
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  (SELECT avg(salary) FROM employees) AND department_id IN (SELECT department_id FROM employees WHERE employee_id LIKE '%J%')"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "customers_card_transactions",
        "turns": [
            {
                "isuser": true,
                "text": "show the customer ids and first names without a credit card",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Ok, the customer ids and first names of customers without credit cards are  shown  in  the  table ",
                "query": "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\"",
                "result": [
                    [
                        [
                            "customer_id",
                            "customer_first_name"
                        ],
                        [
                            1,
                            "Aniyah"
                        ],
                        [
                            3,
                            "Marcel"
                        ],
                        [
                            4,
                            "Art"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_id ,  customer_first_name FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customers_cards WHERE card_type_code  =  \"Credit\")"
            },
            {
                "isuser": true,
                "text": "show the customer ids, first name and last name without a Debit card",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The customer ids, first names and last names without debit cards are shown in the table.",
                "query": "SELECT customer_id ,  customer_first_name ,customer_last_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name,T2.customer_last_name  FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"\tDebit\"",
                "result": [
                    [
                        [
                            "customer_id",
                            "customer_first_name",
                            "customer_last_name"
                        ],
                        [
                            1,
                            "Aniyah",
                            "Feest"
                        ],
                        [
                            2,
                            "Susie",
                            "Wiza"
                        ],
                        [
                            3,
                            "Marcel",
                            "Brekke"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_id ,  customer_first_name ,  customer_last_name FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customers_cards WHERE card_type_code  =  \"Debit\")"
            },
            {
                "isuser": true,
                "text": "show the customer ids, first name and last name with card type and number",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do  you  mean card  type code?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  card_type_code ,  card_number FROM customers AS T1 JOIN customers_cards AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\""
            },
            {
                "isuser": true,
                "text": "show the customer ids and card number",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "OK, all customer ids and card numbers are  shown  in the table",
                "query": " SELECT customer_id ,  card_number FROM Customers_cards ",
                "result": [
                    [
                        [
                            "customer_id",
                            "card_number"
                        ],
                        [
                            14,
                            "4560596484842"
                        ],
                        [
                            9,
                            "4859448397570735"
                        ],
                        [
                            6,
                            "348237249146948"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_id ,  card_number FROM customers_cards WHERE card_type_code  =  \"Credit\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome goodbye\n",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "film_rank",
        "turns": [
            {
                "isuser": true,
                "text": "Who is the director of \"walter hill\"?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "do you mean which film is directed by the director of \"walter hill\"?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT director FROM film WHERE title = \"walter hill\""
            },
            {
                "isuser": true,
                "text": "yes.\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the title of film which is directed by the director of \"walter hill\" is 48 Hrs",
                "query": "SELECT title FROM film WHERE Director  =  \"Walter Hill\"",
                "result": [
                    [
                        [
                            "Title"
                        ],
                        [
                            "48 Hrs"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT director FROM film WHERE title = \"walter hill\""
            },
            {
                "isuser": true,
                "text": "Which studios have produced films with the director \"Walter Hill\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the studios which have produced films with the director \"Walter Hill\" is Paramount",
                "query": "SELECT studio FROM film WHERE Director  =  \"Walter Hill\"",
                "result": [
                    [
                        [
                            "Studio"
                        ],
                        [
                            "Paramount"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT studio FROM film WHERE director = \"Walter Hill\""
            },
            {
                "isuser": true,
                "text": "What about the ones that haven't?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the studios which has not produced films with the director of \"walter hill\"",
                "query": "SELECT studio FROM film WHERE Director  !=  \"Walter Hill\"",
                "result": [
                    [
                        [
                            "Studio"
                        ],
                        [
                            "Universal"
                        ],
                        [
                            "Columbia"
                        ],
                        [
                            "Paramount / Lorimar"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT studio FROM film WHERE director != \"Walter Hill\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "inn_1",
        "turns": [
            {
                "isuser": true,
                "text": "which rooms have a king bed?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The rooms that have a king bed are shown in the result table. ",
                "query": "SELECT * FROM Rooms WHERE bedtype  =  'King'",
                "result": [
                    [
                        [
                            "RoomId",
                            "roomName",
                            "beds",
                            "bedType",
                            "maxOccupancy",
                            "basePrice",
                            "decor"
                        ],
                        [
                            "RND",
                            "Recluse and defiance",
                            1,
                            "King",
                            2,
                            150,
                            "modern"
                        ],
                        [
                            "IBS",
                            "Interim but salutary",
                            1,
                            "King",
                            2,
                            150,
                            "traditional"
                        ],
                        [
                            "CAS",
                            "Convoke and sanguine",
                            2,
                            "King",
                            4,
                            175,
                            "traditional"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT roomName FROM Rooms WHERE bedType = \"King\""
            },
            {
                "isuser": true,
                "text": "what are the decor of those rooms?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The different decors of the rooms that have a king bed are shown in the result table. ",
                "query": "SELECT distinct decor FROM Rooms WHERE bedtype  =  'King'",
                "result": [
                    [
                        [
                            "decor"
                        ],
                        [
                            "modern"
                        ],
                        [
                            "traditional"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT decor FROM Rooms WHERE bedType = \"King\""
            },
            {
                "isuser": true,
                "text": "show me the names and the decor of the rooms that have a king bed",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names and decor of the rooms that have a king bed are shown in the result table. ",
                "query": "SELECT roomName, decor FROM Rooms WHERE bedtype  =  'King'",
                "result": [
                    [
                        [
                            "roomName",
                            "decor"
                        ],
                        [
                            "Recluse and defiance",
                            "modern"
                        ],
                        [
                            "Interim but salutary",
                            "traditional"
                        ],
                        [
                            "Convoke and sanguine",
                            "traditional"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT roomName, decor FROM Rooms WHERE bedType = \"King\""
            },
            {
                "isuser": true,
                "text": "show me the price of the rooms also",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names, decor, and baseprices of the rooms that have a king bed are shown in the result table.",
                "query": "SELECT roomName, decor, basePrice FROM Rooms WHERE bedtype  =  'King'",
                "result": [
                    [
                        [
                            "roomName",
                            "decor",
                            "basePrice"
                        ],
                        [
                            "Recluse and defiance",
                            "modern",
                            150
                        ],
                        [
                            "Interim but salutary",
                            "traditional",
                            150
                        ],
                        [
                            "Convoke and sanguine",
                            "traditional",
                            175
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT roomName, decor, basePrice FROM Rooms WHERE bedType = \"King\""
            },
            {
                "isuser": true,
                "text": "now sort the list by price",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names, decor, and baseprices of the rooms that have a king bed ordered by basePrice are shown in the result table.",
                "query": "SELECT roomName, decor, basePrice FROM Rooms WHERE bedtype  =  'King' order by basePrice",
                "result": [
                    [
                        [
                            "roomName",
                            "decor",
                            "basePrice"
                        ],
                        [
                            "Recluse and defiance",
                            "modern",
                            150
                        ],
                        [
                            "Interim but salutary",
                            "traditional",
                            150
                        ],
                        [
                            "Convoke and sanguine",
                            "traditional",
                            175
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT roomName, decor, basePrice FROM Rooms WHERE bedType = \"King\" ORDER BY basePrice DESC"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, good bye. ",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "flight_company",
        "turns": [
            {
                "isuser": true,
                "text": "where is the location of the conference?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "What conference?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "Sorry, I don't have access to real-time information and cannot answer questions about the location of the conference."
            },
            {
                "isuser": true,
                "text": "Do you know any name of the pilot that provides cargo?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the pilot that provides cargo is Thompson",
                "query": "SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Cargo'",
                "result": [
                    [
                        [
                            "Pilot"
                        ],
                        [
                            "Thompson"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "Sorry, I don't have access to real-time information and cannot answer questions about the location of the conference."
            },
            {
                "isuser": true,
                "text": "Fine, that's nice to hear.  if any other?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "No. There is no other pilot that provides cargo services.",
                "query": "SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Cargo'",
                "result": [
                    [
                        [
                            "Pilot"
                        ],
                        [
                            "Thompson"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "Sorry, I don't have access to real-time information and cannot answer questions about the location of the conference."
            },
            {
                "isuser": true,
                "text": "Ok.  Do you know any name of the pilot that provides a company \"catering services\" activities?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Yes. The names of the pilot that provides a company \"catering services\" activities are Thompson and Peterson.",
                "query": "SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Catering services'",
                "result": [
                    [
                        [
                            "Pilot"
                        ],
                        [
                            "Thompson"
                        ],
                        [
                            "Peterson"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "Sorry, I don't have access to real-time information and cannot answer questions about the location of the conference."
            },
            {
                "isuser": true,
                "text": "If any other?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "No. There is no other pilot that provides a company \"catering services\" activities.",
                "query": "SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Catering services'",
                "result": [
                    [
                        [
                            "Pilot"
                        ],
                        [
                            "Thompson"
                        ],
                        [
                            "Peterson"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "Sorry, I don't have access to real-time information and cannot answer questions about the location of the conference."
            },
            {
                "isuser": true,
                "text": "Ohhh, fine.  Thank you so much for your response.  It was good enough.",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome."
            }
        ]
    },
    {
        "db_name": "activity_1",
        "turns": [
            {
                "isuser": true,
                "text": "how many students are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 34 students. ",
                "query": "SELECT count(*) from student",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            34
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Student"
            },
            {
                "isuser": true,
                "text": "how many don't participate in activities?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 4 students who don't participate in any activity.",
                "query": "select count(*) from (SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in)",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Participates_in)"
            },
            {
                "isuser": true,
                "text": "What are their Ids?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The ids of the students who don't participate in any activity are shown in the result table. ",
                "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in",
                "result": [
                    [
                        [
                            "StuID"
                        ],
                        [
                            1026
                        ],
                        [
                            1027
                        ],
                        [
                            1031
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Participates_in)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, would you like to ask any more questions? ",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "No",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, good bye. ",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "SELECT count(*) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Participates_in)"
            }
        ]
    },
    {
        "db_name": "sakila_1",
        "turns": [
            {
                "isuser": true,
                "text": "Hello!  Can you provide me with a list of the first names of all customers who rented films before '2005-08-23 02:06:01'?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of the first names of all customers who rented films before '2005-08-23 02:06:01'. For example, one of the first names is MARY.",
                "query": "SELECT first_name FROM customer WHERE customer_id IN ( SELECT customer_id FROM rental WHERE rental_date  <  '2005-08-23 02:06:01' )",
                "result": [
                    [
                        [
                            "first_name"
                        ],
                        [
                            "MARY"
                        ],
                        [
                            "PATRICIA"
                        ],
                        [
                            "LINDA"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.first_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.rental_date  <  '2005-08-23 02:06:01'"
            },
            {
                "isuser": true,
                "text": "Thank you!  That's a lot of people! Can you filter the list to show me only the active customers?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of the first names of all active customers who rented films before '2005-08-23 02:06:01'.",
                "query": "SELECT first_name FROM customer WHERE customer_id IN( SELECT customer_id FROM rental WHERE rental_date  <  '2005-08-23 02:06:01' ) AND active = 1",
                "result": [
                    [
                        [
                            "first_name"
                        ],
                        [
                            "MARY"
                        ],
                        [
                            "PATRICIA"
                        ],
                        [
                            "LINDA"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.first_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.rental_date  <  '2005-08-23 02:06:01' AND T1.active = 1"
            },
            {
                "isuser": true,
                "text": "Okay.  Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "protein_institute",
        "turns": [
            {
                "isuser": true,
                "text": "Can you list all the institution types with the number of institutions of each type?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the type of institutions and number of institutions of each type.",
                "query": "SELECT TYPE , count(*) FROM institution GROUP BY TYPE\n\n",
                "result": [
                    [
                        [
                            "Type",
                            "count(*)"
                        ],
                        [
                            "Private",
                            7
                        ],
                        [
                            "Public",
                            3
                        ],
                        [
                            "Tribal",
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT TYPE ,  COUNT(*) FROM institution GROUP BY TYPE"
            },
            {
                "isuser": true,
                "text": "Could you also show me the total enrollment for each type of institution?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the type of institutions, and number of institutions and total enrollment for each type.",
                "query": "SELECT TYPE , count(*) , sum(enrollment) FROM institution GROUP BY TYPE\n\n",
                "result": [
                    [
                        [
                            "Type",
                            "count(*)",
                            "sum(enrollment)"
                        ],
                        [
                            "Private",
                            7,
                            7868
                        ],
                        [
                            "Public",
                            3,
                            5267
                        ],
                        [
                            "Tribal",
                            1,
                            1000
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT TYPE ,  SUM(enrollment) FROM institution GROUP BY TYPE"
            },
            {
                "isuser": true,
                "text": "How many private institutions are there and what are their names?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "These are the private institutions. ",
                "query": "SELECT Institution FROM Institution WHERE Type = \"Private\"",
                "result": [
                    [
                        [
                            "Institution"
                        ],
                        [
                            "Ave Maria University"
                        ],
                        [
                            "Edward Waters College"
                        ],
                        [
                            "Jamestown College"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) ,  institution FROM institution WHERE type = \"Private\" GROUP BY institution"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Good bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "flight_1",
        "turns": [
            {
                "isuser": true,
                "text": "What is average and maximum salary of all employees.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average and maximum salary of all employees  are  shown  in  the table\n",
                "query": "SELECT avg(salary) ,  max(salary) FROM Employee",
                "result": [
                    [
                        [
                            "avg(salary)",
                            "max(salary)"
                        ],
                        [
                            109915.3870967742,
                            289950
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(salary) ,  max(salary) FROM employee"
            },
            {
                "isuser": true,
                "text": "What name has the highest salary?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The  name  of  the employee who has the highest salary is  George Wright",
                "query": "SELECT name FROM Employee order by salary desc  limit 1",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "George Wright"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM employee ORDER BY salary DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the employee id and salary of George Wright?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The  employee id and salary of George Wright are  shown  in the  table",
                "query": "SELECT eid , salary  FROM Employee  where  name=\"George Wright\"",
                "result": [
                    [
                        [
                            "eid",
                            "salary"
                        ],
                        [
                            269734834,
                            289950
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT eid, salary FROM employee WHERE name = \"George Wright\""
            },
            {
                "isuser": true,
                "text": "What is the name and employee id of the person with the lowest salary ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the name and employee id of the person with the lowest salary  are shown  in  the table",
                "query": "SELECT name , eid   FROM Employee  order by  salary limit 1",
                "result": [
                    [
                        [
                            "name",
                            "eid"
                        ],
                        [
                            "Milo Brooks",
                            574489457
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name, eid FROM employee ORDER BY salary ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome  and  bye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "music_1",
        "turns": [
            {
                "isuser": true,
                "text": "Give me the names of the English Artist",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the names of artists who sing in english.",
                "query": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\"",
                "result": [
                    [
                        [
                            "artist_name"
                        ],
                        [
                            "Enrique"
                        ],
                        [
                            "Michel"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT artist_name FROM artist WHERE country  =  'England'"
            },
            {
                "isuser": true,
                "text": "What are the names of the most popular English Artist",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "That information cannot be found in the database.",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT artist_name FROM artist WHERE country  =  'England' AND artist_name IN (SELECT artist_name FROM song WHERE genre_is = 'English')"
            },
            {
                "isuser": true,
                "text": "List the names of the English Artist whose song's rating is not 10",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the names of the English Artist whose song's rating is not 10",
                "query": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating=10",
                "result": [
                    [
                        [
                            "artist_name"
                        ],
                        [
                            "Enrique"
                        ],
                        [
                            "Michel"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT artist_name FROM artist WHERE country  =  'England' AND artist_name NOT IN (SELECT artist_name FROM song WHERE genre_is = 'English' AND rating = 10)"
            },
            {
                "isuser": true,
                "text": "Thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. ",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "mountain_photos",
        "turns": [
            {
                "isuser": true,
                "text": "How many different lens are there?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did  you  mean  the  different  brand of lens are there",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT count(DISTINCT brand) FROM camera_lens"
            },
            {
                "isuser": true,
                "text": "No, I meant the total number of lenses",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The  count  of  total camera lenses  is 11",
                "query": "SELECT  count(*)  from  camera_lens",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            11
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM camera_lens"
            },
            {
                "isuser": true,
                "text": "Can you please list the ones that contain substring \"Digital\" in their names?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "The names of the camera lens that contain substring \"Digital\" in their names are Olympus M.Zuiko Digital ED 45mm f/1.8,\nOlympus M.Zuiko Digital ED 75mm f/1.8",
                "query": "SELECT name FROM camera_lens WHERE name LIKE \"%Digital%\"",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Olympus M.Zuiko Digital ED 45mm f/1.8"
                        ],
                        [
                            "Olympus M.Zuiko Digital ED 75mm f/1.8"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM camera_lens WHERE name LIKE '%Digital%'"
            },
            {
                "isuser": true,
                "text": "Can you please also include their id?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "The names  and  ids of the camera lens that contain substring \"Digital\" in their names are  shown  in  the table ",
                "query": "SELECT name ,id FROM camera_lens WHERE name LIKE \"%Digital%\"",
                "result": [
                    [
                        [
                            "name",
                            "id"
                        ],
                        [
                            "Olympus M.Zuiko Digital ED 45mm f/1.8",
                            2
                        ],
                        [
                            "Olympus M.Zuiko Digital ED 75mm f/1.8",
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT id, name FROM camera_lens WHERE name LIKE '%Digital%'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome  and  goodbye ",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "network_2",
        "turns": [
            {
                "isuser": true,
                "text": "Can you list the person names and their friends?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the  person names and their friends",
                "query": "SELECT name, friend from personFriend",
                "result": [
                    [
                        [
                            "name",
                            "friend"
                        ],
                        [
                            "Alice",
                            "Bob"
                        ],
                        [
                            "Zach",
                            "Dan"
                        ],
                        [
                            "Bob",
                            "Zach"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name ,  friend FROM PersonFriend"
            },
            {
                "isuser": true,
                "text": "Hmm, I want to know which friends are above 40 years old or below 30 years old. ",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "do you mean the name of the person who has friends with age above 40 and under age 30?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT name ,  friend FROM PersonFriend WHERE year  >  40 UNION SELECT name ,  friend FROM PersonFriend WHERE year  <  30"
            },
            {
                "isuser": true,
                "text": "I want to know the ages of the friends first, please.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the ages of the friends of all the people",
                "query": "SELECT T2.friend, T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend",
                "result": [
                    [
                        [
                            "friend",
                            "age"
                        ],
                        [
                            "Bob",
                            35
                        ],
                        [
                            "Dan",
                            26
                        ],
                        [
                            "Zach",
                            45
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT friend ,  year FROM PersonFriend"
            },
            {
                "isuser": true,
                "text": "Please tell me the names of the person who has friends with age above 40 and under age 30.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is no person who has both friends with age above 40 and friends with age under age 30",
                "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age > 40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age < 30)",
                "result": [
                    [
                        [
                            "name"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name ,  friend FROM PersonFriend WHERE year  >  40 UNION SELECT name ,  friend FROM PersonFriend WHERE year  <  30"
            },
            {
                "isuser": true,
                "text": "How about the names of different persons who have friends with age above 40 and under age 30?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of the person who has friend with age above 40 or under age 30",
                "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age > 40) union SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age < 30)",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Bob"
                        ],
                        [
                            "Zach"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT name FROM PersonFriend WHERE year  >  40 UNION SELECT DISTINCT name FROM PersonFriend WHERE year  <  30"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you! Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "architecture",
        "turns": [
            {
                "isuser": true,
                "text": "What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the locations of the bridge named 'Kolob Arch' or 'Rainbow Bridge'",
                "query": "SELECT LOCATION FROM bridge WHERE name  =  'Kolob Arch' OR name  =  'Rainbow Bridge'",
                "result": [
                    [
                        [
                            "location"
                        ],
                        [
                            "Zion National Park , Utah , USA"
                        ],
                        [
                            "Glen Canyon National Recreation Area , Utah , USA"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT LOCATION FROM bridge WHERE name = 'Kolob Arch' OR name = 'Rainbow Bridge'"
            },
            {
                "isuser": true,
                "text": "What is the length of the Kolob Arch",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The bridge named Kolob Arch has a length of 87.0",
                "query": "SELECT length_meters FROM bridge WHERE name  =  'Kolob Arch'",
                "result": [
                    [
                        [
                            "length_meters"
                        ],
                        [
                            87.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT length_meters FROM bridge WHERE name = 'Kolob Arch'"
            },
            {
                "isuser": true,
                "text": "What bridge is the longest bridge measured in feet?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you want the name of the longest bridge measured in feet?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT name, length_feet FROM bridge ORDER BY length_feet DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Xian Ren Qiao (Fairy Bridge) is the name of the bridge with the longest length in feet.",
                "query": "SELECT name FROM bridge WHERE length_feet = (select max(length_feet) from bridge)",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Xian Ren Qiao (Fairy Bridge)"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT LOCATION FROM bridge WHERE name = 'Kolob Arch'"
            },
            {
                "isuser": true,
                "text": "Where is the Xian ren Qiao (fairy bridge) located? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The bridge named \"Xian ren Qiao (fairy bridge)\" is located in Guangxi , China.",
                "query": "SELECT location FROM bridge WHERE name = \"Xian Ren Qiao (Fairy Bridge)\"",
                "result": [
                    [
                        [
                            "location"
                        ],
                        [
                            "Guangxi , China"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT LOCATION FROM bridge WHERE name = 'Xian ren Qiao'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you very much. bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "csu_1",
        "turns": [
            {
                "isuser": true,
                "text": "Which year did any college confer the most amount of degrees?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The year that conferred the most number of degrees for any college is 2004.",
                "query": "SELECT T3.year FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year ORDER BY t3.degrees DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Year"
                        ],
                        [
                            2004
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(YEAR) FROM degrees"
            },
            {
                "isuser": true,
                "text": "How about the year before that? ",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean which college conferred the most number of degrees in 2003?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT max(YEAR) FROM degrees WHERE YEAR < (SELECT max(YEAR) FROM degrees)"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The campus that conferred the greatest number of degrees in 2003 is San Diego State University.",
                "query": "SELECT t1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t3.year = 2003 ORDER BY t3.degrees DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Campus"
                        ],
                        [
                            "San Diego State University"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(YEAR) FROM degrees WHERE YEAR < (SELECT max(YEAR) FROM degrees)"
            },
            {
                "isuser": true,
                "text": "How much of the faculty are males for California State University-Channel Islands, in the year of 2002?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry, we do not have information on the gender of the faculty.",
                "query": "",
                "result": [],
                "predict_type": "SORRY",
                "predict": "SELECT (SELECT sum(Faculty) FROM faculty WHERE YEAR = 2002 AND Campus = 1) / (SELECT sum(Faculty) FROM faculty WHERE YEAR = 2002)"
            },
            {
                "isuser": true,
                "text": "How many faculty were at California State University-Channel Islands, in the year of 2002?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of faculty at California State University-Channel Islands in 2002 is 48.4.",
                "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 AND t1.campus = \"California State University-Channel Islands\"",
                "result": [
                    [
                        [
                            "Faculty"
                        ],
                        [
                            48.4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT sum(Faculty) FROM faculty WHERE YEAR = 2002 AND Campus = 1"
            },
            {
                "isuser": true,
                "text": "How about for California State University-chico?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean in the year 2002?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT sum(Faculty) FROM faculty WHERE YEAR = 2002 AND Campus = 2"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of faculty at California State University-Chico in 2002 is 742.8.",
                "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 AND t1.campus = \"California State University-Chico\"",
                "result": [
                    [
                        [
                            "Faculty"
                        ],
                        [
                            742.8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT sum(Faculty) FROM faculty WHERE YEAR = 2002 AND Campus = 2"
            },
            {
                "isuser": true,
                "text": "What is the location for California State University-Bakersfield today?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry, we do not have location information for the current year.",
                "query": "SELECT T1.location FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2019 AND t1.campus = \"California State University-Bakersfield\"",
                "result": [
                    [
                        [
                            "Location"
                        ]
                    ]
                ],
                "predict_type": "SORRY",
                "predict": "SELECT LOCATION FROM campuses WHERE CAMPUS = 3"
            },
            {
                "isuser": true,
                "text": "How about for the year 1965?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The location for California State University-Bakersfield in 1965 is Bakersfield.",
                "query": "SELECT DISTINCT T1.location FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t1.year  =  1965 AND t1.campus = \"California State University-Bakersfield\"",
                "result": [
                    [
                        [
                            "Location"
                        ],
                        [
                            "Bakersfield"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT LOCATION FROM campuses WHERE CAMPUS = 3 AND YEAR = 1965"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "cinema",
        "turns": [
            {
                "isuser": true,
                "text": "Is there a film with the word \"Dummy\" in the title?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes, there is a film with the word \"Dummy\" in the title.",
                "query": "SELECT * FROM film WHERE title LIKE \"%Dummy%\"",
                "result": [
                    [
                        [
                            "Film_ID",
                            "Rank_in_series",
                            "Number_in_season",
                            "Title",
                            "Directed_by",
                            "Original_air_date",
                            "Production_code"
                        ],
                        [
                            2,
                            27,
                            2,
                            "The Case of the Smart Dummy",
                            "Bill Schreiner",
                            "September 28–October 2, 1992",
                            "50231–50235"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT title FROM film WHERE title LIKE '%Dummy%'"
            },
            {
                "isuser": true,
                "text": "Do any of the other films have the word \"Dummy\" in the title?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "No. No other films have the word \"Dummy\" in the title.",
                "query": "SELECT * FROM film WHERE title LIKE \"%Dummy%\"",
                "result": [
                    [
                        [
                            "Film_ID",
                            "Rank_in_series",
                            "Number_in_season",
                            "Title",
                            "Directed_by",
                            "Original_air_date",
                            "Production_code"
                        ],
                        [
                            2,
                            27,
                            2,
                            "The Case of the Smart Dummy",
                            "Bill Schreiner",
                            "September 28–October 2, 1992",
                            "50231–50235"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT title FROM film WHERE title NOT LIKE '%Dummy%'"
            },
            {
                "isuser": true,
                "text": "What are the names of each of the films?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of the film names. For example, one of the film names is The Case of the Mystery Weekend.",
                "query": "SELECT Title FROM film",
                "result": [
                    [
                        [
                            "Title"
                        ],
                        [
                            "The Case of the Mystery Weekend"
                        ],
                        [
                            "The Case of the Smart Dummy"
                        ],
                        [
                            "The Case: Off the Record"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT title FROM film WHERE title NOT LIKE '%Dummy%'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "world_1",
        "turns": [
            {
                "isuser": true,
                "text": "Hi. How many countries are listed in total?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Hi. There are 239 contries listed.",
                "query": "SELECT count(*) from country",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            239
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM country"
            },
            {
                "isuser": true,
                "text": "Of the 239 countries, how many different forms of government are there among them?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 35 different forms of government ",
                "query": "SELECT count(distinct GovernmentForm) from country",
                "result": [
                    [
                        [
                            "count(distinct GovernmentForm)"
                        ],
                        [
                            35
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(DISTINCT GovernmentForm) FROM country"
            },
            {
                "isuser": true,
                "text": "What are the 35 different forms of government from the 239 countries listed?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the  35 different forms of government ",
                "query": "SELECT distinct GovernmentForm from country",
                "result": [
                    [
                        [
                            "GovernmentForm"
                        ],
                        [
                            "Nonmetropolitan Territory of The Netherlands"
                        ],
                        [
                            "Islamic Emirate"
                        ],
                        [
                            "Republic"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT GovernmentForm FROM country"
            },
            {
                "isuser": true,
                "text": "Of the 239 countries, how many of them have a Republic government form?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 122 contries have a Republic government form",
                "query": "SELECT count(*) from country where GovernmentForm = \"Republic\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            122
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic'"
            },
            {
                "isuser": true,
                "text": "What are the names of the 122 countries that have a Republic government form?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of the 122 countries that have a Republic government form",
                "query": "SELECT name from country where GovernmentForm = \"Republic\"",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Angola"
                        ],
                        [
                            "Albania"
                        ],
                        [
                            "Armenia"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM country WHERE GovernmentForm = 'Republic'"
            },
            {
                "isuser": true,
                "text": "Since Latvia is a country with a Republic government form, which languages are spoken there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the languages spoken in the country with name Latvia ",
                "query": "SELECT T2.language from country as T1 join countrylanguage as T2 on T1.Code = T2.CountryCode where  T1.name = \"Latvia\"",
                "result": [
                    [
                        [
                            "Language"
                        ],
                        [
                            "Belorussian"
                        ],
                        [
                            "Latvian"
                        ],
                        [
                            "Lithuanian"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Language FROM countrylanguage WHERE CountryCode = 'LVA'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you! You did a really good job! Hope you can come back again!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "e_learning",
        "turns": [
            {
                "isuser": true,
                "text": "find the student id and personal name of the student whose course id is 2",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table shows the student id and personal name of the student whose course id is 2. For example, the student \"Clotilde\" with the id \"11\" choose the course with id \"2\".",
                "query": "SELECT T1.student_id , T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id where T1.course_id='2'",
                "result": [
                    [
                        [
                            "student_id",
                            "personal_name"
                        ],
                        [
                            11,
                            "Clotilde"
                        ],
                        [
                            8,
                            "Marshall"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT student_id, personal_name FROM Students WHERE student_id IN (SELECT student_id FROM Student_Course_Enrolment WHERE course_id = 2)"
            },
            {
                "isuser": true,
                "text": "show the date of registration for the student id 1",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The date of registration for the student id 1 is \"2015-07-22 13:32:35\".",
                "query": "select \tdate_of_registration from students where student_id='1'",
                "result": [
                    [
                        [
                            "date_of_registration"
                        ],
                        [
                            "2015-07-22 13:32:35"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT date_of_registration FROM Students WHERE student_id = 1"
            },
            {
                "isuser": true,
                "text": "show the login name and password for registration id  2",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The login name and password for registration id 2 are \"jgulgowski\" and \"0f37421f02\".",
                "query": "select T1.login_name, T1.password from students AS T1 JOIN Student_Course_Enrolment AS T2 ON T2.student_id=T1.student_id WHERE registration_id=2",
                "result": [
                    [
                        [
                            "login_name",
                            "password"
                        ],
                        [
                            "jgulgowski",
                            "0f37421f02"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT login_name, password FROM Students WHERE registration_id = 2"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "game_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many students are playing multiple sports?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are 2 students playing multiple sports.",
                "query": "SELECT count(*) FROM (SELECT * FROM Sportsinfo GROUP BY StuID having count(*) > 1)",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM SportsInfo GROUP BY StuID HAVING count(*)  >  1"
            },
            {
                "isuser": true,
                "text": "What are the names of the two students who are playing multiple sports?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Arthur Pang and David Shieber are the full names of students playing multiple sports.",
                "query": "SELECT T2.Fname , T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID having count(*)>1",
                "result": [
                    [
                        [
                            "Fname",
                            "LName"
                        ],
                        [
                            "Arthur",
                            "Pang"
                        ],
                        [
                            "David",
                            "Shieber"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT StuID, count(*) FROM SportsInfo GROUP BY StuID HAVING count(*)  >  1"
            },
            {
                "isuser": true,
                "text": "Is Arthur Pang playing more sports than David Schieber?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "No. They are tied.",
                "query": "SELECT T2.Lname, count(*) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID having count(*)>1",
                "result": [
                    [
                        [
                            "LName",
                            "count(*)"
                        ],
                        [
                            "Pang",
                            2
                        ],
                        [
                            "Shieber",
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT StuID, count(*) FROM SportsInfo GROUP BY StuID ORDER BY count(*) DESC"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You're welcome! Bye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "cre_Theme_park",
        "turns": [
            {
                "isuser": true,
                "text": "What are the names of the tourist attractions that can be accessed by bus or walk?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of the tourist attractions that can be accessed by bus or walk",
                "query": "SELECT Name  FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\" OR How_to_Get_There  =  \"walk\"",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "art museum"
                        ],
                        [
                            "UK gallery"
                        ],
                        [
                            "film festival"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM Tourist_Attractions WHERE How_to_Get_There = \"Bus\" OR How_to_Get_There = \"Walk\""
            },
            {
                "isuser": true,
                "text": "What are their opening hours, please?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names and opening hours of the tourist attractions that can be accessed by bus or walk",
                "query": "SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\" OR How_to_Get_There  =  \"walk\"",
                "result": [
                    [
                        [
                            "Name",
                            "Opening_Hours"
                        ],
                        [
                            "art museum",
                            null
                        ],
                        [
                            "UK gallery",
                            null
                        ],
                        [
                            "film festival",
                            null
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Opening_Hours FROM Tourist_Attractions WHERE How_to_Get_There = \"Bus\" OR How_to_Get_There = \"Walk\""
            },
            {
                "isuser": true,
                "text": "What are the names of the tourist attractions that can be accessed by shuttle?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of the tourist attractions that can be accessed by shuttle.",
                "query": "SELECT Name  FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"shuttle\"",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "flying elephant"
                        ],
                        [
                            "US museum"
                        ],
                        [
                            "fun shops"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM Tourist_Attractions WHERE How_to_Get_There = \"Shuttle\""
            },
            {
                "isuser": true,
                "text": "What are their opening hours?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are their names and corresponding opening hours in the record.",
                "query": "SELECT Name,opening_hours  FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"shuttle\"",
                "result": [
                    [
                        [
                            "Name",
                            "Opening_Hours"
                        ],
                        [
                            "flying elephant",
                            null
                        ],
                        [
                            "US museum",
                            null
                        ],
                        [
                            "fun shops",
                            null
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Opening_Hours FROM Tourist_Attractions WHERE How_to_Get_There = \"Shuttle\""
            },
            {
                "isuser": true,
                "text": "What are the location ids of those?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are their names and corresponding location ids ",
                "query": "SELECT Name,Location_ID  FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"shuttle\"",
                "result": [
                    [
                        [
                            "Name",
                            "Location_ID"
                        ],
                        [
                            "flying elephant",
                            868
                        ],
                        [
                            "US museum",
                            417
                        ],
                        [
                            "fun shops",
                            868
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Location_ID FROM Tourist_Attractions WHERE How_to_Get_There = \"Shuttle\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "thanks. bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "college_3",
        "turns": [
            {
                "isuser": false,
                "text": "Do you mean the first and last names?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable",
                "predict": "SELECT Fname, Lname FROM Student WHERE Age > 18"
            },
            {
                "isuser": true,
                "text": "Show me the name of instructors?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Here is the table of first and last names of faculties. ",
                "query": "SELECT Fname,Lname from Faculty",
                "result": [
                    [
                        [
                            "Fname",
                            "Lname"
                        ],
                        [
                            "Mark",
                            "Giuliano"
                        ],
                        [
                            "Michael",
                            "Goodrich"
                        ],
                        [
                            "Gerald",
                            "Masson"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Fname, Lname FROM Faculty WHERE Rank = \"Professor\""
            },
            {
                "isuser": true,
                "text": "How many instructors are teaching top 3 number of courses?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "3  instructors are teaching top 3 number of courses",
                "query": "select count(*) from (SELECT T2.* FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3)",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM Course WHERE Instructor IN (SELECT FacID FROM Faculty WHERE Rank = \"Professor\")"
            },
            {
                "isuser": true,
                "text": "Show the first and last names of them",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the first and last names of instructors teaching top 3 number of courses.",
                "query": "SELECT T2.Fname, T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3",
                "result": [
                    [
                        [
                            "Fname",
                            "Lname"
                        ],
                        [
                            "Luigi",
                            "Burzio"
                        ],
                        [
                            "Louis",
                            "Beach"
                        ],
                        [
                            "Alexander",
                            "Kaplan"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Fname, Lname FROM Faculty WHERE Rank = \"Professor\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye ",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "Yes.",
                "type": "answerable"
            }
        ]
    },
    {
        "db_name": "voter_2",
        "turns": [
            {
                "isuser": true,
                "text": "how many Student there",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 34 students in total.",
                "query": "SELECT count(*) FROM STUDENT",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            34
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Student"
            },
            {
                "isuser": true,
                "text": "what is the fname of Tracy",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean LName of Tracy? Tracy is the first name?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT Fname FROM Student WHERE StuID = 101"
            },
            {
                "isuser": true,
                "text": "Fname",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "I cannot understand that yet. Could you ask your question in another way?",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT Fname FROM Student WHERE StuID = 101"
            },
            {
                "isuser": true,
                "text": "what is the city code of student id 1001",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "BAL is the city code of the student with id 1001.",
                "query": "SELECT city_code FROM STUDENT WHERE StuID = 1001",
                "result": [
                    [
                        [
                            "city_code"
                        ],
                        [
                            "BAL"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT city_code FROM Student WHERE StuID = 1001"
            },
            {
                "isuser": true,
                "text": "what is age of student id 1003",
                "type": "improper"
            },
            {
                "isuser": true,
                "text": "* I have left the chat *",
                "type": "answerable",
                "predict": "SELECT Age FROM Student WHERE StuID = 1003"
            },
            {
                "isuser": false,
                "text": "21 is the age of the student with id 1003.",
                "query": "SELECT age FROM STUDENT WHERE StuID = 1003",
                "result": [
                    [
                        [
                            "Age"
                        ],
                        [
                            21
                        ]
                    ]
                ],
                "predict_type": "answerable"
            }
        ]
    },
    {
        "db_name": "activity_1",
        "turns": [
            {
                "isuser": true,
                "text": "Hello!  Can you provide me with a list of first name, last name, and faculty ID of all faculty?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Sure. Here are the first name, last name, and faculty ID of all faculty",
                "query": "SELECT Fname, Lname, FacID from Faculty",
                "result": [
                    [
                        [
                            "Fname",
                            "Lname",
                            "FacID"
                        ],
                        [
                            "Mark",
                            "Giuliano",
                            1082
                        ],
                        [
                            "Michael",
                            "Goodrich",
                            1121
                        ],
                        [
                            "Gerald",
                            "Masson",
                            1148
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Fname, Lname, FacID FROM Faculty"
            },
            {
                "isuser": true,
                "text": "Great!  Can you update this list to include the activity name associated with each individual faculty member?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are  the first name, last name, faculty ID with the associated activities for all the faculties",
                "query": "SELECT T1.Fname, T1.Lname, T1.FacID, T3.activity_name from Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T3.actid  ",
                "result": [
                    [
                        [
                            "Fname",
                            "Lname",
                            "FacID",
                            "activity_name"
                        ],
                        [
                            "Mark",
                            "Giuliano",
                            1082,
                            "Canasta"
                        ],
                        [
                            "Mark",
                            "Giuliano",
                            1082,
                            "Chess"
                        ],
                        [
                            "Mark",
                            "Giuliano",
                            1082,
                            "Crossword Puzzles"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Fname, Lname, FacID, Activity_name FROM Faculty AS T1 JOIN Faculty_Participates_in AS T2 ON T1.FacID = T2.FacID JOIN Activity AS T3 ON T2.actid = T3.actid"
            },
            {
                "isuser": true,
                "text": "Excellent!  Can you filter this list to remove all professors who are associated with either Canoeing or Kayaking?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the first name, last name, faculty ID with the associated activities for all the faculties except for the professors who are associated with either Canoeing or Kayaking",
                "query": "SELECT T1.Fname, T1.Lname, T1.FacID, T3.activity_name from Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T3.actid WHERE T3.activity_name != 'Canoeing' OR T3.activity_name != 'Kayaking'",
                "result": [
                    [
                        [
                            "Fname",
                            "Lname",
                            "FacID",
                            "activity_name"
                        ],
                        [
                            "Mark",
                            "Giuliano",
                            1082,
                            "Canasta"
                        ],
                        [
                            "Mark",
                            "Giuliano",
                            1082,
                            "Chess"
                        ],
                        [
                            "Mark",
                            "Giuliano",
                            1082,
                            "Crossword Puzzles"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Fname, Lname, FacID, Activity_name FROM Faculty AS T1 JOIN Faculty_Participates_in AS T2 ON T1.FacID = T2.FacID JOIN Activity AS T3 ON T2.actid = T3.actid WHERE T3.activity_name NOT IN ('Canoeing', 'Kayaking')"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "tracking_grants_for_research",
        "turns": [
            {
                "isuser": true,
                "text": "Show the role description of the project staff involved in the most number of project outcomes?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The role description of the project staff involved in the most number of project outcomes is Project Researcher.",
                "query": "SELECT T1.role_description  FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "role_description"
                        ],
                        [
                            "Project Researcher"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT role_description FROM Staff_Roles WHERE role_code IN (SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY COUNT(*) DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "Show the staff ids of the project staff involved in the most number of project outcomes?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The staff id of the project staff involved in the most number of project outcomes is 5137097.0. ",
                "query": "SELECT T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code  =  T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.staff_id ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "staff_id"
                        ],
                        [
                            5137097.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT staff_id FROM Project_Staff GROUP BY staff_id ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What are the project ids that staff member worked on?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The project id of the staff with id 5137097.0 is 7.",
                "query": "SELECT project_id from Project_staff where staff_id = '5137097.0'",
                "result": [
                    [
                        [
                            "project_id"
                        ],
                        [
                            7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT project_id FROM Project_Staff WHERE staff_id = 1"
            },
            {
                "isuser": true,
                "text": "What are the date from and date to of that project?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The project was from 1991-01-11 16:57:50 to 1993-06-09 12:44:28.",
                "query": "SELECT date_from, date_to from Project_staff where project_id ='7'",
                "result": [
                    [
                        [
                            "date_from",
                            "date_to"
                        ],
                        [
                            "1991-01-11 16:57:50",
                            "1993-06-09 12:44:28"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT date_from, date_to FROM Project_Staff WHERE staff_id = 1"
            },
            {
                "isuser": true,
                "text": "What is the outcome code for that project?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The outcome code for the project 7 is Paper.",
                "query": "SELECT outcome_code from Project_Outcomes where project_id ='7'",
                "result": [
                    [
                        [
                            "outcome_code"
                        ],
                        [
                            "Paper"
                        ],
                        [
                            "Paper"
                        ],
                        [
                            "Paper"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT outcome_code FROM Project_Outcomes WHERE project_id = 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "body_builder",
        "turns": [
            {
                "isuser": true,
                "text": "Hi there!  Can you show me a list of all body builder names and their associated birth dates?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "All the body builder names and their associated birth dates are listed in the result table. For example, name Jack Campell's birth date is january 1, 1992",
                "query": "SELECT T2.name, T2.birth_date FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id",
                "result": [
                    [
                        [
                            "Name",
                            "Birth_Date"
                        ],
                        [
                            "Jack Campbell",
                            "January 1, 1992"
                        ],
                        [
                            "Ty Conklin",
                            "March 30, 1976"
                        ],
                        [
                            "Al Montoya",
                            "February 13, 1985"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Name ,  T2.Birth_Date FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID"
            },
            {
                "isuser": true,
                "text": "Could you filter this list to show only the rows which are associated with body builders whose birthday value contains the work \"January\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Sure! The body builder name and the associated birth date of the body builder whose birthday value contains the word \"January\" are Jack Campbell and January 1, 1992 respectively.",
                "query": "SELECT T2.name, T2.birth_date FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.Birth_Date LIKE \"%January%\";\n\n",
                "result": [
                    [
                        [
                            "Name",
                            "Birth_Date"
                        ],
                        [
                            "Jack Campbell",
                            "January 1, 1992"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Name ,  T2.Birth_Date FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Birth_Date LIKE '%January%'"
            },
            {
                "isuser": true,
                "text": "Great! Can you tell me where Jack Campbells birthplace was?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The birth place of name Jack Campbell is Port Huron, Michigan",
                "query": "SELECT birth_place FROM people WHERE name = \"Jack Campbell\"\n\n",
                "result": [
                    [
                        [
                            "Birth_Place"
                        ],
                        [
                            "Port Huron, Michigan"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Name = \"Jack Campbell\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "No problem, bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "flight_2",
        "turns": [
            {
                "isuser": true,
                "text": "how many airline's there",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of airlines is 12.",
                "query": "SELECT count(*) FROM AIRLINES",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            12
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM airlines"
            },
            {
                "isuser": true,
                "text": "what is the name of the usa airline",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "What did you mean by \"the name of the USA airline?\"",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "SELECT Airline FROM airlines WHERE Country = 'USA'"
            },
            {
                "isuser": true,
                "text": "united sates of america",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the USA airline is United Airlines.",
                "query": "SELECT Airline FROM AIRLINES WHERE Airline=\"United Airlines\"",
                "result": [
                    [
                        [
                            "Airline"
                        ],
                        [
                            "United Airlines"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Airline FROM airlines WHERE Country = 'USA'"
            },
            {
                "isuser": true,
                "text": "what is the abbreviation of us airways",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The abbreviation of US Airways is USAir.",
                "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline=\"US Airways\"",
                "result": [
                    [
                        [
                            "Abbreviation"
                        ],
                        [
                            "USAir"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Abbreviation FROM airlines WHERE Airline = 'US Airways'"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "wedding",
        "turns": [
            {
                "isuser": true,
                "text": "what is the minimum age of all people",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The minimum age of all people is 25.",
                "query": "SELECT min(age) FROM people",
                "result": [
                    [
                        [
                            "min(age)"
                        ],
                        [
                            25
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT min(age) FROM people"
            },
            {
                "isuser": true,
                "text": "what is the maximum age for all people",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The maximum age of all people is 36",
                "query": "SELECT max(age) FROM people",
                "result": [
                    [
                        [
                            "max(age)"
                        ],
                        [
                            36
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(age) FROM people"
            },
            {
                "isuser": true,
                "text": "what is the average age for all people",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average age for all people is 30.166666666666668.",
                "query": "SELECT avg(age) FROM people",
                "result": [
                    [
                        [
                            "avg(age)"
                        ],
                        [
                            30.166666666666668
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(age) FROM people"
            },
            {
                "isuser": true,
                "text": "now, list the minimum, maximum and average age for all people",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Minimum age is 25. Maximum age is 36. And the average is 30.166666666666668.",
                "query": "SELECT min(age) ,  max(age) ,  avg(age) FROM people",
                "result": [
                    [
                        [
                            "min(age)",
                            "max(age)",
                            "avg(age)"
                        ],
                        [
                            25,
                            36,
                            30.166666666666668
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT min(age) ,  max(age) ,  avg(age) FROM people"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "flight_4",
        "turns": [
            {
                "isuser": true,
                "text": "Name the airport in Madang city?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the airport in the city named Madang is Madang Airport.",
                "query": "SELECT name from airports where city = 'Madang'",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Madang Airport"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM airports WHERE city = 'Madang'"
            },
            {
                "isuser": true,
                "text": "How many airports are in Papua New Guinea country?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There 26 airports in the country named Papua New Guinea.",
                "query": "SELECT count(*) from airports where country = 'Papua New Guinea'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            26
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM airports WHERE country = 'Papua New Guinea'"
            },
            {
                "isuser": true,
                "text": "Find the number of routes with destination airports in Italy?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of routes with destination airports in Italy is 1779.",
                "query": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            1779
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country = 'Italy')"
            },
            {
                "isuser": true,
                "text": "What is the elevation of Mount Hagen Kagamuga Airport?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The elevation of the airport named Mount Hagen Kagamuga Airport is 5388.",
                "query": "SELECT elevation from airports where name='Mount Hagen Kagamuga Airport' ",
                "result": [
                    [
                        [
                            "elevation"
                        ],
                        [
                            5388
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT elevation FROM airports WHERE name = 'Mount Hagen Kagamuga Airport'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "baseball_1",
        "turns": [
            {
                "isuser": true,
                "text": "hi, can you tell me the first and last name for the player with player ID: gomezle01?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the first and last name for the player with player ID gomezle01 is Lefty Gomez",
                "query": "SELECT name_first ,  name_last FROM player where player_id = \"gomezle01\"",
                "result": [
                    [
                        [
                            "name_first",
                            "name_last"
                        ],
                        [
                            "Lefty",
                            "Gomez"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name_first ,  name_last FROM player WHERE player_id = 'gomezle01'"
            },
            {
                "isuser": true,
                "text": "and who is the player represented by player ID: ferreri01?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Do you mean the first and last name of the player?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT name_first ,  name_last FROM player WHERE player_id = 'ferreri01'"
            },
            {
                "isuser": true,
                "text": " yes. What is the player's first and last name for player ID: ferreri01?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The player's first and last name for player ID ferreri01 is Rick Ferrell",
                "query": "SELECT name_first ,  name_last FROM player where player_id = \"ferreri01\"",
                "result": [
                    [
                        [
                            "name_first",
                            "name_last"
                        ],
                        [
                            "Rick",
                            "Ferrell"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name_first ,  name_last FROM player WHERE player_id = 'ferreri01'"
            },
            {
                "isuser": true,
                "text": "in addition to Rick Ferrell, Lefty Gomez, and player ID gehrilo01, can you tell me the first and last names of the other players participating in 1998 all star game?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the first and last name  of the other players participating in 1998 all star game except Rick Ferrell, Lefty Gomez, and player ID gehrilo01",
                "query": "SELECT name_first , name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id WHERE YEAR = 1998 and name_first != \"Rick\" or name_last != \"Ferrell\" INTERSECT SELECT name_first , name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id WHERE YEAR = 1998 and name_first != \"Lefty\" or name_last != \"Gomez\" INTERSECT SELECT name_first , name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id WHERE YEAR = 1998 and T1.player_id != \"gehrilo01\"",
                "result": [
                    [
                        [
                            "name_first",
                            "name_last"
                        ],
                        [
                            "David",
                            "Wells"
                        ],
                        [
                            "Ivan",
                            "Rodriguez"
                        ],
                        [
                            "Jim",
                            "Thome"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name_first ,  name_last FROM player WHERE player_id IN (SELECT player_id FROM all_star WHERE year = 1998) AND player_id NOT IN ('gehrilo01', 'ferreri01', 'gomezle01')"
            },
            {
                "isuser": true,
                "text": "great. what is the player with player ID gehrilo01 first and last name?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The first and last name of the player with id gehrilo01 is Lou\tGehrig.",
                "query": "SELECT name_first , name_last FROM player  where player_id = \"gehrilo01\"",
                "result": [
                    [
                        [
                            "name_first",
                            "name_last"
                        ],
                        [
                            "Lou",
                            "Gehrig"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name_first ,  name_last FROM player WHERE player_id = 'gehrilo01'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "chinook_1",
        "turns": [
            {
                "isuser": true,
                "text": "Hi, could you please let me know the genre ID for Latin and Pop?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the genre Id's for Latin and Pop.",
                "query": "SELECT GenreId FROM Genre WHERE Name=\"Latin\" OR Name=\"Pop\"",
                "result": [
                    [
                        [
                            "GenreId"
                        ],
                        [
                            7
                        ],
                        [
                            9
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT GenreId FROM GENRE WHERE Name = \"Latin\" UNION SELECT GenreId FROM GENRE WHERE Name = \"Pop\""
            },
            {
                "isuser": true,
                "text": "That was very quick, thank you very much :) Then, could you please let me know the average duration (milliseconds) of Latin and Pop?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "You are welcome. This is the average duration of tracks of Latin and Pop genres.",
                "query": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name=\"Latin\" OR T1.Name=\"Pop\"",
                "result": [
                    [
                        [
                            "AVG(Milliseconds)"
                        ],
                        [
                            232566.4274322169
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(Milliseconds) FROM TRACK WHERE GenreId IN (SELECT GenreId FROM GENRE WHERE Name = \"Latin\" UNION SELECT GenreId FROM GENRE WHERE Name = \"Pop\")"
            },
            {
                "isuser": true,
                "text": "That's an amazingly precise number, thank you again. Then what about the average unit price of Latin and Pop?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the average unit price of Latin and Pop Genres.",
                "query": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\"",
                "result": [
                    [
                        [
                            "AVG(UnitPrice)"
                        ],
                        [
                            0.9900000000000068
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(UnitPrice) FROM TRACK WHERE GenreId IN (SELECT GenreId FROM GENRE WHERE Name = \"Latin\" UNION SELECT GenreId FROM GENRE WHERE Name = \"Pop\")"
            }
        ]
    },
    {
        "db_name": "network_2",
        "turns": [
            {
                "isuser": true,
                "text": "how many persons are presented on the table",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "4 persons are presented on the table of Persons.",
                "query": "SELECT COUNT(*) FROM Person",
                "result": [
                    [
                        [
                            "COUNT(*)"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Person"
            },
            {
                "isuser": true,
                "text": "how many female persons are in the table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 2 female persons in the table of Persons.",
                "query": "SELECT COUNT(*) FROM Person WHERE gender = \"female\"",
                "result": [
                    [
                        [
                            "COUNT(*)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Person WHERE gender = 'female'"
            },
            {
                "isuser": true,
                "text": "please tell me alice friend name",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of Alice's friend is Bob.",
                "query": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.name = 'Alice'",
                "result": [
                    [
                        [
                            "friend"
                        ],
                        [
                            "Bob"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT friend FROM PersonFriend WHERE name = 'Alice'"
            },
            {
                "isuser": true,
                "text": "what is the age of bob",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Bob's age is 35.",
                "query": "SELECT age FROM Person WHERE name = \"Bob\"",
                "result": [
                    [
                        [
                            "age"
                        ],
                        [
                            35
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT age FROM Person WHERE name = 'Bob'"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Do you have any more questions?",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "what is the zach job name",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "The name of Zach's job is doctor.",
                "query": "SELECT job FROM Person WHERE name = \"Zach\"",
                "result": [
                    [
                        [
                            "job"
                        ],
                        [
                            "doctor"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT job FROM Person WHERE name = 'Zach'"
            },
            {
                "isuser": true,
                "text": "ok thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Do you have any more questions?",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "no",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Good bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "Sorry, I don't understand."
            }
        ]
    },
    {
        "db_name": "college_2",
        "turns": [
            {
                "isuser": true,
                "text": "What is the average salary for the physics department?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average salary for the physics department is 114576.9",
                "query": "SELECT avg(salary) FROM instructor WHERE  dept_name  =  'Physics'",
                "result": [
                    [
                        [
                            "avg(salary)"
                        ],
                        [
                            114576.9
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(salary) FROM instructor WHERE dept_name = 'Physics'"
            },
            {
                "isuser": true,
                "text": "How many instructors in the physics department make less than that?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of instructors in the physics department that make less than the average salary for the physics department is 1.",
                "query": "Select count(*) from instructor where dept_name = 'Physics' and salary < (SELECT avg(salary) FROM instructor WHERE  dept_name  =  'Physics')",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM instructor WHERE dept_name = 'Physics' AND salary < (SELECT avg(salary) FROM instructor WHERE dept_name = 'Physics')"
            },
            {
                "isuser": true,
                "text": "What is the name and salary of that instructor?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the name of that instructor in the physics department who makes less than the average salary for the physics department is Shuming and his salary is 108011.81.",
                "query": "Select name, salary from instructor where dept_name = 'Physics' and salary < (SELECT avg(salary) FROM instructor WHERE  dept_name  =  'Physics')",
                "result": [
                    [
                        [
                            "name",
                            "salary"
                        ],
                        [
                            "Shuming",
                            108011.81
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name, salary FROM instructor WHERE dept_name = 'Physics' AND salary < (SELECT avg(salary) FROM instructor WHERE dept_name = 'Physics')"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome, goodbye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "e_learning",
        "turns": [
            {
                "isuser": true,
                "text": "How many different student logins are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 15 different student logins.",
                "query": "SELECT count(distinct login_name) from students",
                "result": [
                    [
                        [
                            "count(distinct login_name)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(DISTINCT login_name) FROM Students"
            },
            {
                "isuser": true,
                "text": "how many different author logins are there?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 15 different author logins.",
                "query": "SELECT count(distinct login_name) from Course_Authors_and_Tutors",
                "result": [
                    [
                        [
                            "count(distinct login_name)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(DISTINCT login_name) FROM Course_Authors_and_Tutors WHERE gender_mf = 'M'"
            },
            {
                "isuser": true,
                "text": "How many login names are in both authors and students?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is no such login name.",
                "query": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students",
                "result": [
                    [
                        [
                            "login_name"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(DISTINCT login_name) FROM Course_Authors_and_Tutors WHERE gender_mf = 'M' INTERSECT SELECT COUNT(DISTINCT login_name) FROM Students"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "singer",
        "turns": [
            {
                "isuser": true,
                "text": "how many  singer there",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 8 singers.",
                "query": "SELECT count(*) from singer",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM singer"
            },
            {
                "isuser": true,
                "text": "what is the Citizenship of Alice Walton",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The Citizenship of Alice Walton is United States",
                "query": "SELECT citizenship from singer where name = \"Alice Walton\"",
                "result": [
                    [
                        [
                            "Citizenship"
                        ],
                        [
                            "United States"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Citizenship FROM singer WHERE Name = \"Alice Walton\""
            },
            {
                "isuser": true,
                "text": "how many sales from song id 3",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The sales from song id 3 is 351421.0.",
                "query": "SELECT Sales from song where song_id = 3",
                "result": [
                    [
                        [
                            "Sales"
                        ],
                        [
                            351421.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Sales FROM song WHERE Song_ID = 3"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "flight_2",
        "turns": [
            {
                "isuser": true,
                "text": "delta airline is from which country?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Delta Airlines is from the country 'USA'.",
                "query": "SELECT country FROM AIRLINES where Airline = 'Delta Airlines'",
                "result": [
                    [
                        [
                            "Country"
                        ],
                        [
                            "USA"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Country FROM airlines WHERE Airline = \"Delta\""
            },
            {
                "isuser": true,
                "text": "what is the destination airport of flight no 44?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The destination airports of flight no 44 are ACV and ABR.",
                "query": "SELECT \tDestAirport FROM flights where FlightNo = 44",
                "result": [
                    [
                        [
                            "DestAirport"
                        ],
                        [
                            " ACV"
                        ],
                        [
                            " ABR"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DestAirport FROM flights WHERE FlightNo = 44"
            },
            {
                "isuser": true,
                "text": "which airline has most number of flights?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "AirTran Airways is the airline has the most number of flights.",
                "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Airline"
                        ],
                        [
                            "AirTran Airways"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) DESC LIMIT 1"
            }
        ]
    },
    {
        "db_name": "soccer_1",
        "turns": [
            {
                "isuser": true,
                "text": "what players have a overall rating greater than 80?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is all the info of players who have an overall rating greater than 80.",
                "query": "SELECT * FROM Player_Attributes WHERE overall_rating  >  80",
                "result": [
                    [
                        [
                            "id",
                            "player_fifa_api_id",
                            "player_api_id",
                            "date",
                            "overall_rating",
                            "potential",
                            "preferred_foot",
                            "attacking_work_rate",
                            "defensive_work_rate",
                            "crossing",
                            "finishing",
                            "heading_accuracy",
                            "short_passing",
                            "volleys",
                            "dribbling",
                            "curve",
                            "free_kick_accuracy",
                            "long_passing",
                            "ball_control",
                            "acceleration",
                            "sprint_speed",
                            "agility",
                            "reactions",
                            "balance",
                            "shot_power",
                            "jumping",
                            "stamina",
                            "strength",
                            "long_shots",
                            "aggression",
                            "interceptions",
                            "positioning",
                            "vision",
                            "penalties",
                            "marking",
                            "standing_tackle",
                            "sliding_tackle",
                            "gk_diving",
                            "gk_handling",
                            "gk_kicking",
                            "gk_positioning",
                            "gk_reflexes"
                        ],
                        [
                            160,
                            152747,
                            30895,
                            "2013-03-15 00:00:00",
                            81,
                            82,
                            "right",
                            "high",
                            "medium",
                            80,
                            68,
                            27,
                            79,
                            69,
                            83,
                            62,
                            54,
                            53,
                            84,
                            94,
                            91,
                            94,
                            81,
                            92,
                            61,
                            64,
                            85,
                            52,
                            56,
                            56,
                            36,
                            79,
                            81,
                            61,
                            18,
                            23,
                            14,
                            13,
                            6,
                            6,
                            15,
                            10
                        ],
                        [
                            161,
                            152747,
                            30895,
                            "2013-02-15 00:00:00",
                            81,
                            82,
                            "right",
                            "high",
                            "medium",
                            80,
                            68,
                            27,
                            79,
                            69,
                            83,
                            62,
                            54,
                            53,
                            84,
                            94,
                            91,
                            94,
                            81,
                            92,
                            61,
                            64,
                            84,
                            52,
                            56,
                            56,
                            36,
                            79,
                            81,
                            61,
                            18,
                            23,
                            14,
                            13,
                            6,
                            6,
                            15,
                            10
                        ],
                        [
                            163,
                            152747,
                            30895,
                            "2012-02-22 00:00:00",
                            81,
                            84,
                            "right",
                            "high",
                            "medium",
                            79,
                            68,
                            27,
                            77,
                            69,
                            82,
                            62,
                            54,
                            53,
                            88,
                            96,
                            95,
                            94,
                            79,
                            94,
                            61,
                            64,
                            86,
                            52,
                            56,
                            56,
                            36,
                            79,
                            79,
                            61,
                            18,
                            23,
                            14,
                            13,
                            6,
                            6,
                            15,
                            10
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT player_api_id FROM Player_Attributes WHERE overall_rating > 80"
            },
            {
                "isuser": true,
                "text": "of those players how many are right-footed?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of players who have an overall rating over 80 and prefer the right foot is 5955.",
                "query": "SELECT count(*) FROM Player_Attributes WHERE overall_rating  >  80 and preferred_foot = 'right'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            5955
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Player_Attributes WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE preferred_foot = 'R')"
            },
            {
                "isuser": true,
                "text": "of the players with an overall rating greater than 80 how many are left-footed?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of players with an overall rating greater than 80 who prefer the left foot is 1606.",
                "query": "SELECT count(*) FROM Player_Attributes WHERE overall_rating  >  80 and preferred_foot = 'left'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            1606
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Player_Attributes WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE preferred_foot = 'L') AND overall_rating > 80"
            },
            {
                "isuser": true,
                "text": "of the players with an overall rating greater than 80 how many are right-footed?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of players with an overall rating greater than 80 who prefer the right foot is 5955.",
                "query": "SELECT count(*) FROM Player_Attributes WHERE overall_rating  >  80 and preferred_foot = 'right'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            5955
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Player_Attributes WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE preferred_foot = 'R') AND overall_rating > 80"
            },
            {
                "isuser": true,
                "text": "could add the right-footed and left-footed players that have an overall rating greater than 80 together?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the number of players with an overall rating greater than 80 in terms of their preferred_foot.",
                "query": "SELECT preferred_foot , count(*) FROM Player_Attributes WHERE overall_rating > 80 GROUP BY preferred_foot\n",
                "result": [
                    [
                        [
                            "preferred_foot",
                            "count(*)"
                        ],
                        [
                            "left",
                            1606
                        ],
                        [
                            "right",
                            5955
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Player_Attributes WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE preferred_foot = 'R') OR player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE preferred_foot = 'L') AND overall_rating > 80"
            },
            {
                "isuser": true,
                "text": "thanks!\n",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "station_weather",
        "turns": [
            {
                "isuser": true,
                "text": "how many origin in the train table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 9 distinct origins in the table.",
                "query": "SELECT count(distinct origin) FROM train",
                "result": [
                    [
                        [
                            "count(distinct origin)"
                        ],
                        [
                            9
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM train WHERE origin = 'London'"
            },
            {
                "isuser": true,
                "text": "what highest time in the train table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The highest time in the train table is 4.49",
                "query": "SELECT time FROM train order by time desc limit 1",
                "result": [
                    [
                        [
                            "time"
                        ],
                        [
                            "4:49"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(time) FROM train"
            },
            {
                "isuser": true,
                "text": "how many train number in the train table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 11 train numbers in the table",
                "query": "SELECT count(train_number) FROM train",
                "result": [
                    [
                        [
                            "count(train_number)"
                        ],
                        [
                            11
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM train"
            },
            {
                "isuser": true,
                "text": "how many interval in the trail table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 11 intervals in the trail table.",
                "query": "SELECT count(interval) FROM train",
                "result": [
                    [
                        [
                            "count(interval)"
                        ],
                        [
                            11
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM route"
            },
            {
                "isuser": true,
                "text": "thnaks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "hospital_1",
        "turns": [
            {
                "isuser": true,
                "text": "Find the name of Physicians who are affiliate with surgery or Psychiatry department.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of Physicians who are affiliated to surgery or Psychiatry department.",
                "query": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Christopher Turk"
                        ],
                        [
                            "Todd Quinlan"
                        ],
                        [
                            "John Wen"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.employeeid  =  T2.physician WHERE T2.department  =  2 OR T2.department  =  3"
            },
            {
                "isuser": true,
                "text": "What is the Physician name of the following Employee ID?  tell me the SSN.",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Sorry what employee IDs are you talking about?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.employeeid  =  T2.physician WHERE T2.department  =  2 OR T2.department  =  3"
            },
            {
                "isuser": true,
                "text": "Sorry for my mistake. \nWhat is the Physician name of the following Employee ID 2? tell me the SSN.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the name and SSn of the physician with an employee id of 2.",
                "query": "select name,SSN from physician where employeeid = 2",
                "result": [
                    [
                        [
                            "Name",
                            "SSN"
                        ],
                        [
                            "Elliot Reid",
                            222222222
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.employeeid  =  T2.physician WHERE T2.department  =  2 OR T2.department  =  3"
            },
            {
                "isuser": true,
                "text": "What is the Physician name of the following Position Staff Internist ? tell me the SSN, and Employee ID,",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you want the name, SSN, and employee ID?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T1.name,T1.employeeid FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.employeeid  =  T2.physician WHERE T2.department  =  2 OR T2.department  =  3"
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the name, SSN, and employee ID of the physician with a position of Staff Internist.",
                "query": "select name,SSN,employeeid from physician where position = \"Staff Internist\"",
                "result": [
                    [
                        [
                            "Name",
                            "SSN",
                            "EmployeeID"
                        ],
                        [
                            "John Dorian",
                            111111111,
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.name,T1.employeeid FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.employeeid  =  T2.physician WHERE T2.department  =  2 OR T2.department  =  3"
            },
            {
                "isuser": true,
                "text": "which department has most number of head? tell me department ID,",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "3 is the id of the department which has the most head.",
                "query": "select departmentid from department order by head desc limit 1",
                "result": [
                    [
                        [
                            "DepartmentID"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.departmentid FROM department AS T1 JOIN affiliated_with AS T2 ON T1.departmentid  =  T2.department GROUP BY T1.departmentid ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "which department has least number of head? tell me department ID,And department name?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the id and name of the department with least number of head.",
                "query": "select departmentid,name from department order by head limit 1",
                "result": [
                    [
                        [
                            "DepartmentID",
                            "Name"
                        ],
                        [
                            1,
                            "General Medicine"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.departmentid,T1.name FROM department AS T1 JOIN affiliated_with AS T2 ON T1.departmentid  =  T2.department GROUP BY T1.departmentid ORDER BY count(*) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "good, thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "flight_4",
        "turns": [
            {
                "isuser": true,
                "text": "Which countries have the most number of airlines whose active status is Y?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "United States  has the most number of airlines whose active status is Y",
                "query": "SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "country"
                        ],
                        [
                            "United States"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT country FROM airlines WHERE active = 'Y' GROUP BY country ORDER BY count(*) DESC"
            },
            {
                "isuser": true,
                "text": "What are the names of those airlines?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Here are the names of airlines who are active.",
                "query": "SELECT name FROM airlines WHERE active  =  'Y' ",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Unknown"
                        ],
                        [
                            "Private flight"
                        ],
                        [
                            "1Time Airline"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM airlines WHERE active = 'Y' GROUP BY country ORDER BY count(*) DESC"
            },
            {
                "isuser": true,
                "text": "What is the airline id of Aloha Airlines?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the airline id of Aloha Airlines is 22",
                "query": "SELECT alid FROM airlines WHERE name  =  'Aloha Airlines' ",
                "result": [
                    [
                        [
                            "alid"
                        ],
                        [
                            22
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT alid FROM airlines WHERE name = \"Aloha Airlines\""
            },
            {
                "isuser": true,
                "text": "What about the call sign?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "the call sign of  Aloha Airlines is ALOHA",
                "query": "SELECT callsign FROM airlines WHERE name  =  'Aloha Airlines' ",
                "result": [
                    [
                        [
                            "callsign"
                        ],
                        [
                            "ALOHA"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT callsign FROM airlines WHERE name = \"Aloha Airlines\""
            },
            {
                "isuser": true,
                "text": "What about the icao?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "the icao of Aloha Airlines is AAH",
                "query": "SELECT icao FROM airlines WHERE name  =  'Aloha Airlines' ",
                "result": [
                    [
                        [
                            "icao"
                        ],
                        [
                            "AAH"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT icao FROM airlines WHERE name = \"Aloha Airlines\""
            },
            {
                "isuser": true,
                "text": "What's the call sign of airline id 5?",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "The callsign of airline id 5 is NULL",
                "query": "SELECT callsign from airlines where alid = 5",
                "result": [
                    [
                        [
                            "callsign"
                        ],
                        [
                            ""
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT callsign FROM airlines WHERE alid = 5"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "election",
        "turns": [
            {
                "isuser": true,
                "text": "Which delegates are from countries with population smaller than 100000?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of delegates who are from countries with a population smaller than 100000. For example, one of the delegates is Bates, Gail H. Gail H. Bates",
                "query": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000",
                "result": [
                    [
                        [
                            "Delegate"
                        ],
                        [
                            "Bates, Gail H. Gail H. Bates"
                        ],
                        [
                            "Miller, Warren E. Warren E. Miller"
                        ],
                        [
                            "DeBoy, Steven J. Sr. Steven J. DeBoy, Sr."
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T2.Delegate FROM election AS T1 JOIN county AS T2 ON T1.District = T2.County_id WHERE T2.Population < 100000"
            },
            {
                "isuser": true,
                "text": "Can you give the name of the countries with population smaller than 100000?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Yes. Here is the result table of the names of the countries with a population smaller than 100000. For example, one of the countries is Howard.",
                "query": "SELECT County_name FROM county WHERE Population  <  100000",
                "result": [
                    [
                        [
                            "County_name"
                        ],
                        [
                            "Howard"
                        ],
                        [
                            "Baltimore County"
                        ],
                        [
                            "Colony"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T2.County_name FROM election AS T1 JOIN county AS T2 ON T1.District = T2.County_id WHERE T2.Population < 100000"
            },
            {
                "isuser": true,
                "text": "What is the number of counties with population greater than 100000?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the number of counties with a population greater than 100000 is 0.",
                "query": "SELECT COUNT(County_name) FROM county WHERE Population  >  100000",
                "result": [
                    [
                        [
                            "COUNT(County_name)"
                        ],
                        [
                            0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM county WHERE Population > 100000"
            },
            {
                "isuser": true,
                "text": "Can you give me the name of the counties with population between 50000 and 100000?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of the counties with a population between 50000 and 100000 ",
                "query": "SELECT County_name FROM county WHERE Population  <  100000 AND Population  >  50000",
                "result": [
                    [
                        [
                            "County_name"
                        ],
                        [
                            "Baltimore County"
                        ],
                        [
                            "Colony"
                        ],
                        [
                            "Mansfield"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT County_name FROM county WHERE Population BETWEEN 50000 AND 100000"
            },
            {
                "isuser": true,
                "text": "What are the committee names for the counties with population smaller than 100000?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of the committee names of the countries with a population smaller than 100000. For example, one of the committee names is Appropriations. ",
                "query": "SELECT T2.Committee FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000",
                "result": [
                    [
                        [
                            "Committee"
                        ],
                        [
                            "Appropriations"
                        ],
                        [
                            "Economic Matters"
                        ],
                        [
                            "Appropriations"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T2.Committee FROM election AS T1 JOIN county AS T2 ON T1.District = T2.County_id WHERE T2.Population < 100000"
            },
            {
                "isuser": true,
                "text": "What are the committee names for the counties with population between 50000-100000?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of the committee names for the counties with a population between 50000 and 100000. For example, one of the committee names is Environmental Matters.",
                "query": "SELECT T2.Committee FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000 AND T1.Population  >  50000 ",
                "result": [
                    [
                        [
                            "Committee"
                        ],
                        [
                            "Appropriations"
                        ],
                        [
                            "Environmental Matters (Vice-Chair)"
                        ],
                        [
                            "Environmental Matters"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T2.Committee FROM election AS T1 JOIN county AS T2 ON T1.District = T2.County_id WHERE T2.Population BETWEEN 50000 AND 100000"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "student_transcripts_tracking",
        "turns": [
            {
                "isuser": true,
                "text": "How many courses in this table?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the number of the courses with different course ids?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT count(*) FROM Courses"
            },
            {
                "isuser": true,
                "text": "Yes.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of the courses with different course ids is 15.",
                "query": "SELECT  count(distinct course_id) from courses",
                "result": [
                    [
                        [
                            "count(distinct course_id)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Courses"
            },
            {
                "isuser": true,
                "text": "What's the name of the course with least number of students of enrollments?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the course with least number of students of enrollments is ai.",
                "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) LIMIT 1",
                "result": [
                    [
                        [
                            "course_name"
                        ],
                        [
                            "ai"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id ORDER BY count(*) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "How many students in this table?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry, I can't answer this question.",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT count(*) FROM Students"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "music_1",
        "turns": [
            {
                "isuser": true,
                "text": "Can you show the artist name of f id 2?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The artist name of the one whose file id is \"2\" is \"Prity\".",
                "query": "SELECT \tartist_name FROM files WHERE f_id='2'",
                "result": [
                    [
                        [
                            "artist_name"
                        ],
                        [
                            "Prity"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT artist_name FROM files WHERE f_id = 2"
            },
            {
                "isuser": true,
                "text": "Can you show the ids of songs that are available in either mp4 format or have resolution above 720?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table that shows the ids of songs that are available in either mp4 format or have resolution above 720. ",
                "query": "SELECT f_id FROM files WHERE formats = \"mp4\" UNION SELECT f_id FROM song WHERE resolution > 720",
                "result": [
                    [
                        [
                            "f_id"
                        ],
                        [
                            1
                        ],
                        [
                            3
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT f_id FROM files WHERE formats LIKE '%mp4%' OR resolution > 720"
            },
            {
                "isuser": true,
                "text": "Can you the artist name of Song Tum robe nirobe?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The artist name of song \"Tum robe nirobe\" is \"Shrikanta\".",
                "query": "select artist_name from song where song_name='Tumi robe nirobe'",
                "result": [
                    [
                        [
                            "artist_name"
                        ],
                        [
                            "Shrikanta"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT artist_name FROM song WHERE song_name = \"Song Tum Rober Nirobe\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome！",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "flight_4",
        "turns": [
            {
                "isuser": true,
                "text": "Find the cities which have exactly two airports",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the list of cities with exactly two airports",
                "query": "SELECT city FROM airports GROUP BY city HAVING count(*)  =  2",
                "result": [
                    [
                        [
                            "city"
                        ],
                        [
                            "Abilene"
                        ],
                        [
                            "Adana"
                        ],
                        [
                            "Addis Ababa"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT city FROM airports GROUP BY city HAVING count(*)  =  2"
            },
            {
                "isuser": true,
                "text": "What location airports is near by me has two airports?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "What do you mean by near by you? Sorry, We cannot answer this.",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT city FROM airports GROUP BY city HAVING count(*)  =  2"
            },
            {
                "isuser": true,
                "text": "what is the name of airport in the country Papua New Guinea",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the list of airport names in country Papua New Guinea",
                "query": "SELECT name FROM airports where country ='Papua New Guinea'",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Goroka Airport"
                        ],
                        [
                            "Madang Airport"
                        ],
                        [
                            "Mount Hagen Kagamuga Airport"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM airports WHERE country  =  'Papua New Guinea'"
            },
            {
                "isuser": true,
                "text": "what is the elevation of Madang Airport?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the elevation of Madang Airport is 20",
                "query": "SELECT elevation FROM airports where name ='Madang Airport'",
                "result": [
                    [
                        [
                            "elevation"
                        ],
                        [
                            20
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT elevation FROM airports WHERE name  =  'Madang Airport'"
            },
            {
                "isuser": true,
                "text": "What is the elevation of Goroka Airport",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the elevation of Goroka Airport is 5282",
                "query": "SELECT elevation FROM airports where name ='Goroka Airport'",
                "result": [
                    [
                        [
                            "elevation"
                        ],
                        [
                            5282
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT elevation FROM airports WHERE name  =  'Goroka Airport'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure! Bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "concert_singer",
        "turns": [
            {
                "isuser": true,
                "text": "how many concert are presented on the table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 6 concerts ",
                "query": "SELECT  count(*) FROM concert",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM concert"
            },
            {
                "isuser": true,
                "text": "show the stadium name and the number of concerts in each stadium",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the stadium names and the number of concerts in each stadium",
                "query": "SELECT T2.name , count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id",
                "result": [
                    [
                        [
                            "Name",
                            "count(*)"
                        ],
                        [
                            "Stark's Park",
                            1
                        ],
                        [
                            "Glebe Park",
                            1
                        ],
                        [
                            "Somerset Park",
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.name ,  count(*) FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.name"
            },
            {
                "isuser": true,
                "text": "what is the capacity of Stark's Park",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the capacity of the stadium with the name Stark's Park is 10104",
                "query": "SELECT capacity from stadium where name = \"Stark s Park\"",
                "result": [
                    [
                        [
                            "Capacity"
                        ],
                        [
                            10104
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT capacity FROM stadium WHERE name = 'Stark''s Park'"
            },
            {
                "isuser": true,
                "text": "list out the concert names",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are all the concert names",
                "query": "SELECT concert_name from concert",
                "result": [
                    [
                        [
                            "concert_Name"
                        ],
                        [
                            "Auditions"
                        ],
                        [
                            "Super bootcamp"
                        ],
                        [
                            "Home Visits"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT concert_name FROM concert"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "bye",
                "type": "improper"
            }
        ]
    },
    {
        "db_name": "baseball_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many home games did the team  Boston Red Stockings play from 1990 to 2000 in total? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The total number of games played by the Boston Red Stockings from 1990 to 2000 was 4325.",
                "query": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;",
                "result": [
                    [
                        [
                            "sum(T1.games)"
                        ],
                        [
                            4325
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT sum(games) FROM home_game WHERE year BETWEEN 1990 AND 2000 AND team_id = 'BOS'"
            },
            {
                "isuser": true,
                "text": "What is the one of the best team?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the team with the most number of wins?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT team_id FROM team WHERE rank = (SELECT min(rank) FROM team)"
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the team with the most number of wins is Pittsburgh Pirates.",
                "query": "SELECT t2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br GROUP BY T1.team_ID ORDER BY sum(T2.w) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Pittsburgh Pirates"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT team_id FROM team WHERE rank = (SELECT min(rank) FROM team)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "college_2",
        "turns": [
            {
                "isuser": true,
                "text": "Find the year that offers the largest number of courses?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the year that offers the largest number of courses is 2002.",
                "query": "SELECT YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "year"
                        ],
                        [
                            2002
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What semester in that year offers the largest number of courses?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the semester in year of 2002 that offers the largest number of courses is Fall. ",
                "query": "SELECT semester FROM SECTION where year = 2002 GROUP BY semester ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "semester"
                        ],
                        [
                            "Fall"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT SEMESTER FROM SECTION WHERE YEAR = (SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1) GROUP BY SEMESTER ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Are there any courses at that time offered in the Chandler building?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes. There is all the info of the course section offered in the fall semester of the year 2002 and in the Chandler building.",
                "query": "SELECT * FROM SECTION where semester = 'Fall' and YEAR = 2002 and building = 'Chandler'",
                "result": [
                    [
                        [
                            "course_id",
                            "sec_id",
                            "semester",
                            "year",
                            "building",
                            "room_number",
                            "time_slot_id"
                        ],
                        [
                            "200",
                            "2",
                            "Fall",
                            2002,
                            "Chandler",
                            "375",
                            "D"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM SECTION WHERE building = 'Chandler' AND YEAR = (SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "What about the Gates building?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "No. There is no course section offered in the fall semester of the year 2002 and in the Gates building.",
                "query": "SELECT * FROM SECTION where semester = 'Fall' and YEAR = 2002 and building = 'Gates'",
                "result": [
                    [
                        [
                            "course_id",
                            "sec_id",
                            "semester",
                            "year",
                            "building",
                            "room_number",
                            "time_slot_id"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM SECTION WHERE building = 'Gates' AND YEAR = (SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "What about in the Whitman building?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "No. There is no course section offered in the fall semester of the year 2002 and in the Whitman building.",
                "query": "SELECT * FROM SECTION where semester = 'Fall' and YEAR = 2002 and building = 'Whitman'",
                "result": [
                    [
                        [
                            "course_id",
                            "sec_id",
                            "semester",
                            "year",
                            "building",
                            "room_number",
                            "time_slot_id"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM SECTION WHERE building = 'Whitman' AND YEAR = (SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "What buildings have course sections offered then?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "They are buildings that have course sections offered in the fall semester of the year 2002.",
                "query": "SELECT building FROM SECTION where semester = 'Fall' and YEAR = 2002",
                "result": [
                    [
                        [
                            "building"
                        ],
                        [
                            "Lamberton"
                        ],
                        [
                            "Saucon"
                        ],
                        [
                            "Main"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT building FROM SECTION WHERE YEAR = (SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "ship_1",
        "turns": [
            {
                "isuser": true,
                "text": "what ship is steered by a captain with lieutenant rank? ",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "do you want to return the names of these ships?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT name FROM ship WHERE ship_id IN (SELECT ship_id FROM captain WHERE rank = 'Lieutenant')"
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names of the ships steered by a captain with the liutenant rank are 'HMS Destiny' and 'HMS Gorgon'.",
                "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant'",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "HMS Destiny"
                        ],
                        [
                            "HMS Gorgon"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM ship WHERE ship_id IN (SELECT ship_id FROM captain WHERE rank = 'Lieutenant')"
            },
            {
                "isuser": true,
                "text": "give me the ship id",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The ids of the ships steered by a captain with the Lieutenant rank are 5 and 2.",
                "query": "SELECT t1.Ship_ID FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant'",
                "result": [
                    [
                        [
                            "Ship_ID"
                        ],
                        [
                            5
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT ship_id FROM captain WHERE rank = 'Lieutenant'"
            },
            {
                "isuser": true,
                "text": "what is the captain's age?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The ages of the captains with the Lieutenant rank are 38 and 60.",
                "query": "SELECT t2.age FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant'",
                "result": [
                    [
                        [
                            "age"
                        ],
                        [
                            "38"
                        ],
                        [
                            "60"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT age FROM captain WHERE rank = 'Lieutenant'"
            },
            {
                "isuser": true,
                "text": "Thanks! ",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "products_gen_characteristics",
        "turns": [
            {
                "isuser": true,
                "text": "how many colors are in list in the description?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Eight colors are listed in the description.",
                "query": "SELECT count(*) FROM Ref_colors",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "I'm sorry, I don't understand your question."
            },
            {
                "isuser": true,
                "text": "Find the product list of the product name?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table that shows the product names. For example, one of the product names is cumin.",
                "query": " SELECT product_name FROM products",
                "result": [
                    [
                        [
                            "product_name"
                        ],
                        [
                            "cumin"
                        ],
                        [
                            "peper"
                        ],
                        [
                            "basil"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product_name FROM products WHERE product_name LIKE '%list%'"
            },
            {
                "isuser": true,
                "text": "Find the color of the product id 2?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The color description of the product with id 2 is white.",
                "query": "SELECT T2.color_description FROM Products AS T1 JOIN Ref_Colors AS T2 on T1.color_code = T2.color_code  WHERE product_id = \"2\"",
                "result": [
                    [
                        [
                            "color_description"
                        ],
                        [
                            "white"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT color_description FROM ref_colors WHERE color_code = (SELECT color_code FROM products WHERE product_id = 2)"
            },
            {
                "isuser": true,
                "text": "how many herbs in the product category code?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are 6 products with category code of herbs.",
                "query": "SELECT COUNT(*) FROM Products WHERE product_category_code = \"Herbs\"",
                "result": [
                    [
                        [
                            "COUNT(*)"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM products WHERE product_category_code = 'Herbs'"
            },
            {
                "isuser": true,
                "text": "Thanks and bye.",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome! Goodbye!"
            }
        ]
    },
    {
        "db_name": "coffee_shop",
        "turns": [
            {
                "isuser": false,
                "text": "Do you mean how many different types of membership cards are there?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable",
                "predict": "SELECT COUNT(DISTINCT membership_card) FROM member"
            },
            {
                "isuser": true,
                "text": "how many membership cards?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "There are 2 different membership cards.",
                "query": "SELECT count(distinct membership_card) from member ",
                "result": [
                    [
                        [
                            "count(distinct membership_card)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM member"
            },
            {
                "isuser": true,
                "text": "what is age of Ashby Lazale",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The age of Ashby, Lazale is 29.",
                "query": "SELECT age from member where name = 'Ashby, Lazale'",
                "result": [
                    [
                        [
                            "Age"
                        ],
                        [
                            29
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT age FROM member WHERE name = \"Ashby Lazale\""
            },
            {
                "isuser": true,
                "text": "how many time of purchase in ashby lazale",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The time of purchase of Ashby, Lazale is 18.",
                "query": "SELECT Time_of_purchase from member where name = 'Ashby, Lazale'",
                "result": [
                    [
                        [
                            "Time_of_purchase"
                        ],
                        [
                            18
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT time_of_purchase FROM member WHERE name = \"Ashby Lazale\""
            },
            {
                "isuser": true,
                "text": "Level of membership Breton, Robert",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The level of membership of Breton Robert is 4.",
                "query": "SELECT Level_of_membership from member where name = 'Breton, Robert'",
                "result": [
                    [
                        [
                            "Level_of_membership"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT level_of_membership FROM member WHERE name = \"Breton, Robert\""
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "dog_kennels",
        "turns": [
            {
                "isuser": true,
                "text": "How many different treatments are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are three different treatment type.",
                "query": "select count(*) from (SELECT distinct treatment_type_code from treatments)",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Treatment_Types"
            },
            {
                "isuser": true,
                "text": "which one is the most expensive?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the information about the most expensive treatment.",
                "query": "SELECT * FROM Treatments ORDER BY cost_of_treatment DESC LIMIT 1",
                "result": [
                    [
                        [
                            "treatment_id",
                            "dog_id",
                            "professional_id",
                            "treatment_type_code",
                            "date_of_treatment",
                            "cost_of_treatment"
                        ],
                        [
                            13,
                            7,
                            8,
                            "VAC",
                            "2018-02-26 09:08:53",
                            945
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.treatment_type_description ,  T1.cost_of_treatment FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code ORDER BY T1.cost_of_treatment DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "And how about the price of the most recent treatment? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The most recent treatment has a price of 407.",
                "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
                "result": [
                    [
                        [
                            "cost_of_treatment"
                        ],
                        [
                            407
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.treatment_type_description ,  T1.cost_of_treatment FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code ORDER BY T1.date_of_treatment DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks. Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "game_1",
        "turns": [
            {
                "isuser": true,
                "text": "can you please show me all the advisors?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are all the advisors.",
                "query": "SELECT advisor FROM Student",
                "result": [
                    [
                        [
                            "Advisor"
                        ],
                        [
                            1121
                        ],
                        [
                            7712
                        ],
                        [
                            7792
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT Advisor FROM Student"
            },
            {
                "isuser": true,
                "text": "show me all advisors who does not have at least two students?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are all advisors who do not have at least two students.",
                "query": "SELECT advisor FROM Student GROUP BY advisor HAVING count(*) < 2",
                "result": [
                    [
                        [
                            "Advisor"
                        ],
                        [
                            7712
                        ],
                        [
                            7723
                        ],
                        [
                            7792
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Advisor FROM Student WHERE StuID NOT IN (SELECT StuID FROM Plays_Games GROUP BY StuID HAVING COUNT(*) >= 2)"
            },
            {
                "isuser": true,
                "text": "which advisors have at least two students?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are all advisors who have at least two students.",
                "query": "SELECT advisor FROM Student GROUP BY advisor HAVING count(*)  >=  2",
                "result": [
                    [
                        [
                            "Advisor"
                        ],
                        [
                            1121
                        ],
                        [
                            1148
                        ],
                        [
                            2192
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Advisor FROM Student WHERE StuID IN (SELECT StuID FROM Plays_Games GROUP BY StuID HAVING COUNT(*) >= 2)"
            },
            {
                "isuser": true,
                "text": "thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "entertainment_awards",
        "turns": [
            {
                "isuser": true,
                "text": "Which year had the most festivals?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "2007 has the most festivals.",
                "query": "SELECT year FROM festival_detail group by year order by count(*) desc limit 1",
                "result": [
                    [
                        [
                            "Year"
                        ],
                        [
                            2007
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Year, COUNT(*) AS num_festivals FROM festival_detail GROUP BY Year ORDER BY num_festivals DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "How many festivals were there in 2008?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There was 1 festival in 2008.",
                "query": "SELECT count(*) FROM festival_detail group by year having year = 2008",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM festival_detail WHERE Year = 2008"
            },
            {
                "isuser": true,
                "text": "What was the number of the audience for it?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There were 160 audience in 2008.",
                "query": "SELECT num_of_audience FROM festival_detail where year = 2008",
                "result": [
                    [
                        [
                            "Num_of_Audience"
                        ],
                        [
                            160
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Num_of_Audience FROM festival_detail WHERE Year = 2008"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks. Good bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "network_2",
        "turns": [
            {
                "isuser": true,
                "text": "How many friends does Zach have?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Zach has two friends",
                "query": "SELECT count(friend) from PersonFriend  where name='Zach'",
                "result": [
                    [
                        [
                            "count(friend)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM PersonFriend WHERE name = \"Zach\""
            },
            {
                "isuser": true,
                "text": "How long has zach been friends with each of them?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "this shows years the zach been friends with his friends",
                "query": "SELECT name,friend,year from PersonFriend  where name='Zach'",
                "result": [
                    [
                        [
                            "name",
                            "friend",
                            "year"
                        ],
                        [
                            "Zach",
                            "Dan",
                            12
                        ],
                        [
                            "Zach",
                            "Alice",
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.name ,  T2.year FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  \"Zach\""
            },
            {
                "isuser": true,
                "text": "What are the ages of Zach's friends?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "this shows the age of Zach's friends",
                "query": "SELECT t1.name,friend,year,age from PersonFriend as t1 join  Person as t2 on t1.friend=t2.name\nwhere t1.name='Zach'",
                "result": [
                    [
                        [
                            "name",
                            "friend",
                            "year",
                            "age"
                        ],
                        [
                            "Zach",
                            "Dan",
                            12,
                            26
                        ],
                        [
                            "Zach",
                            "Alice",
                            6,
                            25
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  \"Zach\""
            },
            {
                "isuser": true,
                "text": "Which person has zach been friends with the longest?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Dan has zach been friends with the longest",
                "query": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')",
                "result": [
                    [
                        [
                            "age"
                        ],
                        [
                            26
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.name ,  T2.year FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.year  =  (SELECT max(year) FROM PersonFriend WHERE name  =  \"Zach\")"
            },
            {
                "isuser": true,
                "text": "What does dan do for work?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "dan‘s job a student",
                "query": "SELECT job FROM Person  WHERE name =  'Dan' ",
                "result": [
                    [
                        [
                            "job"
                        ],
                        [
                            "student"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT job FROM Person WHERE name = \"Dan\""
            },
            {
                "isuser": true,
                "text": "How old is dan?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " dan is 26 years old",
                "query": "SELECT \tage FROM Person  WHERE name =  'Dan' ",
                "result": [
                    [
                        [
                            "age"
                        ],
                        [
                            26
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT age FROM Person WHERE name = \"Dan\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome,goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "soccer_2",
        "turns": [
            {
                "isuser": true,
                "text": "What is the name of the college whos size is bigger than 10000?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here're the  name of the college whose enrollment size is bigger than 10000",
                "query": "SELECT cName  FROM College WHERE enr  >  10000 ",
                "result": [
                    [
                        [
                            "cName"
                        ],
                        [
                            "LSU"
                        ],
                        [
                            "ASU"
                        ],
                        [
                            "OU"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT cName FROM College WHERE enr > 10000"
            },
            {
                "isuser": true,
                "text": "Which of those colleges are located in LA?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here's the information of the college whose size is bigger than 10000 and is located in LA",
                "query": "SELECT * FROM College WHERE enr  >  10000 AND state = \"LA\"",
                "result": [
                    [
                        [
                            "cName",
                            "state",
                            "enr"
                        ],
                        [
                            "LSU",
                            "LA",
                            18000
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT cName FROM College WHERE state = \"CA\" AND enr > 10000"
            },
            {
                "isuser": true,
                "text": "What is the enrollment of that college?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the enrollment of the college whose size is bigger than 10000 and is located in LA is 18000",
                "query": "SELECT enr FROM College WHERE enr  >  10000 AND state = \"LA\"",
                "result": [
                    [
                        [
                            "enr"
                        ],
                        [
                            18000
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT enr FROM College WHERE cName = \"Harvard\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "customers_and_products_contacts",
        "turns": [
            {
                "isuser": true,
                "text": "Can you show the product name and total order quantity of each product please?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The product name and total order quantity of each product are listed.",
                "query": "SELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id",
                "result": [
                    [
                        [
                            "product_name",
                            "sum(T2.order_quantity)"
                        ],
                        [
                            "jcrew",
                            14.0
                        ],
                        [
                            "Apple",
                            11
                        ],
                        [
                            "Apple",
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.product_name ,  sum(T1.order_quantity) FROM order_items AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id"
            },
            {
                "isuser": true,
                "text": "Could you add the product type codes to the table please?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The product type code, product name and total order quantity of each product are listed.",
                "query": "SELECT T1.product_name ,  sum(T2.order_quantity),T1.product_type_code FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id",
                "result": [
                    [
                        [
                            "product_name",
                            "sum(T2.order_quantity)",
                            "product_type_code"
                        ],
                        [
                            "jcrew",
                            14.0,
                            "Clothes"
                        ],
                        [
                            "Apple",
                            11,
                            "Hardware"
                        ],
                        [
                            "Apple",
                            8,
                            "Hardware"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.product_name ,  sum(T1.order_quantity) ,  T2.product_type_code FROM order_items AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id"
            },
            {
                "isuser": true,
                "text": "What is the average product price of all the products?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average product price of all the products is 28612946.784182724.",
                "query": "SELECT avg(product_price) from products",
                "result": [
                    [
                        [
                            "avg(product_price)"
                        ],
                        [
                            28612946.784182724
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(product_price) FROM products"
            },
            {
                "isuser": true,
                "text": "Can you list the product names of all products with prices below the average product price?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The product names of all products whose prices are below the average product price are listed.",
                "query": "select product_name from products where product_price <(SELECT avg(product_price) from products)",
                "result": [
                    [
                        [
                            "product_name"
                        ],
                        [
                            "Apple"
                        ],
                        [
                            "Apple"
                        ],
                        [
                            "jcrew"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product_name FROM products WHERE product_price < (SELECT avg(product_price) FROM products)"
            },
            {
                "isuser": true,
                "text": "The product ids of all products whose prices are above the average product price are listed.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The product ids of all products whose prices are above the average product price are listed.",
                "query": "select product_name from products where product_price>(SELECT avg(product_price) from products)",
                "result": [
                    [
                        [
                            "product_name"
                        ],
                        [
                            "Apple"
                        ],
                        [
                            "jcrew"
                        ],
                        [
                            "gucci"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product_id FROM products WHERE product_price > (SELECT avg(product_price) FROM products)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "flight_4",
        "turns": [
            {
                "isuser": true,
                "text": "Find the routes operated by all airlines?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean return all the routes?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT DISTINCT T1.rid ,  T1.dst_ap ,  T1.src_ap ,  T1.alid ,  T1.airline ,  T1.codeshare FROM routes AS T1 JOIN airlines AS T2 ON T1.alid  =  T2.alid"
            },
            {
                "isuser": true,
                "text": "yes.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are all the routes.",
                "query": "select * from routes",
                "result": [
                    [
                        [
                            "rid",
                            "dst_apid",
                            "dst_ap",
                            "src_apid",
                            "src_ap",
                            "alid",
                            "airline",
                            "codeshare"
                        ],
                        [
                            37,
                            2990,
                            "KZ",
                            2965,
                            "AER",
                            410,
                            "2B",
                            null
                        ],
                        [
                            38,
                            2990,
                            "KZ",
                            2966,
                            "ASF",
                            410,
                            "2B",
                            null
                        ],
                        [
                            39,
                            2962,
                            "MRV",
                            2966,
                            "ASF",
                            410,
                            "2B",
                            null
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.rid ,  T1.dst_ap ,  T1.src_ap ,  T1.alid ,  T1.airline ,  T1.codeshare FROM routes AS T1 JOIN airlines AS T2 ON T1.alid  =  T2.alid"
            },
            {
                "isuser": true,
                "text": "Which of these is operated by American Airlines?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are all the routes operated by American Airlines",
                "query": "SELECT * FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'",
                "result": [
                    [
                        [
                            "alid",
                            "name",
                            "iata",
                            "icao",
                            "callsign",
                            "country",
                            "active",
                            "rid",
                            "dst_apid",
                            "dst_ap",
                            "src_apid",
                            "src_ap",
                            "alid",
                            "airline",
                            "codeshare"
                        ],
                        [
                            24,
                            "American Airlines",
                            "AA",
                            "AAL",
                            "AMERICAN",
                            "United States",
                            "Y",
                            4692,
                            3876,
                            "CT",
                            4355,
                            "ABE",
                            24,
                            "AA",
                            "Y"
                        ],
                        [
                            24,
                            "American Airlines",
                            "AA",
                            "AAL",
                            "AMERICAN",
                            "United States",
                            "Y",
                            4693,
                            3752,
                            "PH",
                            4355,
                            "ABE",
                            24,
                            "AA",
                            null
                        ],
                        [
                            24,
                            "American Airlines",
                            "AA",
                            "AAL",
                            "AMERICAN",
                            "United States",
                            "Y",
                            4694,
                            3670,
                            "DFW",
                            3718,
                            "ABI",
                            24,
                            "AA",
                            "Y"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.rid ,  T1.dst_ap ,  T1.src_ap ,  T1.alid ,  T1.airline ,  T1.codeshare FROM routes AS T1 JOIN airlines AS T2 ON T1.alid  =  T2.alid WHERE T2.name = \"American Airlines\""
            },
            {
                "isuser": true,
                "text": "How many are they?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 2352 routes operated by American Airlines",
                "query": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            2352
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM routes AS T1 JOIN airlines AS T2 ON T1.alid  =  T2.alid WHERE T2.name = \"American Airlines\""
            },
            {
                "isuser": true,
                "text": "What of those not operated by American Airlines?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are all the routes not operated by American Airlines",
                "query": "SELECT * FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  !=  'American Airlines'",
                "result": [
                    [
                        [
                            "alid",
                            "name",
                            "iata",
                            "icao",
                            "callsign",
                            "country",
                            "active",
                            "rid",
                            "dst_apid",
                            "dst_ap",
                            "src_apid",
                            "src_ap",
                            "alid",
                            "airline",
                            "codeshare"
                        ],
                        [
                            410,
                            "Aerocondor",
                            "2B",
                            "ARD",
                            "AEROCONDOR",
                            "Portugal",
                            "Y",
                            37,
                            2990,
                            "KZ",
                            2965,
                            "AER",
                            410,
                            "2B",
                            null
                        ],
                        [
                            410,
                            "Aerocondor",
                            "2B",
                            "ARD",
                            "AEROCONDOR",
                            "Portugal",
                            "Y",
                            38,
                            2990,
                            "KZ",
                            2966,
                            "ASF",
                            410,
                            "2B",
                            null
                        ],
                        [
                            410,
                            "Aerocondor",
                            "2B",
                            "ARD",
                            "AEROCONDOR",
                            "Portugal",
                            "Y",
                            39,
                            2962,
                            "MRV",
                            2966,
                            "ASF",
                            410,
                            "2B",
                            null
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM routes AS T1 JOIN airlines AS T2 ON T1.alid  =  T2.alid WHERE T2.name != \"American Airlines\""
            },
            {
                "isuser": true,
                "text": "How many routes are not operated by American Airlines?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 64413 routes not operated by American Airlines",
                "query": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  !=  'American Airlines'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            64413
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM routes AS T1 JOIN airlines AS T2 ON T1.alid  =  T2.alid WHERE T2.name != \"American Airlines\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "tracking_orders",
        "turns": [
            {
                "isuser": true,
                "text": "which customers placed an order",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the information for all customers who have an order.",
                "query": "SELECT * FROM customers where customer_id in (select customer_id from Orders)",
                "result": [
                    [
                        [
                            "customer_id",
                            "customer_name",
                            "customer_details"
                        ],
                        [
                            2,
                            "George",
                            "est"
                        ],
                        [
                            3,
                            "Alberto",
                            "deleniti"
                        ],
                        [
                            4,
                            "Leilani",
                            "sequi"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id"
            },
            {
                "isuser": true,
                "text": "who has the most orders?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you want just the customer name?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The customer name for the customer with most number of orders is George",
                "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "customer_name"
                        ],
                        [
                            "George"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure! Anything else?",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "OK Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "company_office",
        "turns": [
            {
                "isuser": true,
                "text": "Which company has the most buildings?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you want to the name of the company?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T1.name FROM Companies AS T1 JOIN Office_locations AS T2 ON T1.id = T2.company_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Yes and the company ID.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the name and id of the company that has the most buildings.",
                "query": "select name,id from companies where id = (SELECT company_id from office_locations group by company_id order by count(*) desc limit 1)",
                "result": [
                    [
                        [
                            "name",
                            "id"
                        ],
                        [
                            "Petrobras",
                            9
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.name ,  T1.id FROM Companies AS T1 JOIN Office_locations AS T2 ON T1.id  =  T2.company_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the building ID that has the most company offices?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The building with id 3 has the most company offices.",
                "query": "SELECT T2.id FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "id"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.building_id FROM Office_locations AS T1 GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the name of building with ID 3?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Punto Chapultepec is the name of the building with id 3.",
                "query": "SELECT name FROM buildings where id = \"3\"",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Punto Chapultepec"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM Buildings WHERE id = 3"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "thanks. bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "musical",
        "turns": [
            {
                "isuser": true,
                "text": "What is the duration of the oldest actor?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the duration of the oldest actor is 1988—",
                "query": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Duration"
                        ],
                        [
                            "1988—"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Duration FROM actor WHERE age = (SELECT MAX(age) FROM actor)"
            },
            {
                "isuser": true,
                "text": "What is the character of Tom Oliver?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the character of the actor Tom Oliver is Lou Carpenter",
                "query": "SELECT \tCharacter FROM actor where Name = 'Tom Oliver'",
                "result": [
                    [
                        [
                            "Character"
                        ],
                        [
                            "Lou Carpenter"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Character FROM actor WHERE Name = \"Tom Oliver\""
            },
            {
                "isuser": true,
                "text": "Please List out the Actors name?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the names of the actors",
                "query": "SELECT Name FROM actor ",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Ray Meagher"
                        ],
                        [
                            "Tom Oliver"
                        ],
                        [
                            "Lynne McGranger"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM actor"
            },
            {
                "isuser": true,
                "text": "Thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "flight_2",
        "turns": [
            {
                "isuser": true,
                "text": "hey",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "hi, how can i help you? ",
                "query": "",
                "result": [],
                "predict_type": "GREETING",
                "predict": "Sorry, I don't understand your question."
            },
            {
                "isuser": true,
                "text": "Find all airlines that have fewer than 200 flights.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The airlines that have fewer than 200 flights are shown in the result table. ",
                "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
                "result": [
                    [
                        [
                            "Airline"
                        ],
                        [
                            "AirTran Airways"
                        ],
                        [
                            "Allegiant Air"
                        ],
                        [
                            "American Airlines"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING COUNT(*) < 200"
            },
            {
                "isuser": true,
                "text": "which ones are London bound?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry, This question is not answerable by the table information. You can ask what country is their destination. ",
                "query": "",
                "result": [],
                "predict_type": "SORRY",
                "predict": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = 'LGW'"
            },
            {
                "isuser": true,
                "text": "what country is their destination of the first three?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The destination airport of the first three of the airlines that have fewer than 200 flights are show in the result table. The country is not available. ",
                "query": "SELECT T1.Airline, T2.DestAirport FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200 limit 3",
                "result": [
                    [
                        [
                            "Airline",
                            "DestAirport"
                        ],
                        [
                            "AirTran Airways",
                            " AIV"
                        ],
                        [
                            "Allegiant Air",
                            " KQA"
                        ],
                        [
                            "American Airlines",
                            " CAK"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = 'LGW' LIMIT 3"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, good bye. ",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "county_public_safety",
        "turns": [
            {
                "isuser": true,
                "text": "show the names of cities",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the names of the cities. ",
                "query": "SELECT Name FROM city",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Adjuntas"
                        ],
                        [
                            "Aguada"
                        ],
                        [
                            "Aguadilla"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM city"
            },
            {
                "isuser": true,
                "text": "list out the names",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the names of the cities.",
                "query": "SELECT Name FROM city",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Adjuntas"
                        ],
                        [
                            "Aguada"
                        ],
                        [
                            "Aguadilla"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM city"
            },
            {
                "isuser": true,
                "text": "what is the population of Abbotsford",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The population of Abbotsford is 128165.",
                "query": "SELECT Population FROM county_public_safety WHERE Name = \"Abbotsford\"",
                "result": [
                    [
                        [
                            "Population"
                        ],
                        [
                            128165
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Population FROM county_public_safety WHERE Name = 'Abbotsford'"
            },
            {
                "isuser": true,
                "text": "what is the crime rate of Campbell River",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The crime rate of Campbell River is 178.0.",
                "query": "SELECT Crime_rate FROM county_public_safety WHERE Name = \"Campbell River\"",
                "result": [
                    [
                        [
                            "Crime_rate"
                        ],
                        [
                            178.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Crime_rate FROM county_public_safety WHERE Name = 'Campbell River'"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Good bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "debate",
        "turns": [
            {
                "isuser": true,
                "text": "can you show me a list of people names?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the names of people in the table.",
                "query": "SELECT Name FROM people",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Luther C. Carter"
                        ],
                        [
                            "James Humphrey"
                        ],
                        [
                            "Daniel Sickles"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM people"
            },
            {
                "isuser": true,
                "text": "can you show me the oldest one?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Yes. This is the name of the oldest person.",
                "query": "SELECT Name FROM people ORDER BY Age DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Thomas J. Barr"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM people ORDER BY Age DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "can you show me average of ages?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the average age.",
                "query": "SELECT avg(Age) FROM people",
                "result": [
                    [
                        [
                            "avg(Age)"
                        ],
                        [
                            41.5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(Age) FROM people"
            },
            {
                "isuser": true,
                "text": "Show the party that has the most people",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The Republican party has the most people.",
                "query": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Party"
                        ],
                        [
                            "Republican"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1"
            }
        ]
    },
    {
        "db_name": "riding_club",
        "turns": [
            {
                "isuser": true,
                "text": "Hello. Can you list the top three vote getters?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of the player names with the top three number of votes.",
                "query": "SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 3",
                "result": [
                    [
                        [
                            "Player_name"
                        ],
                        [
                            "Jim Maloway"
                        ],
                        [
                            "Judy Wasylycia-Leis"
                        ],
                        [
                            "Pat Martin"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Player_name ,  T1.Votes FROM player AS T1 JOIN player_coach AS T2 ON T1.Player_ID  =  T2.Player_ID JOIN coach AS T3 ON T2.Coach_ID  =  T3.Coach_ID WHERE T3.Rank  =  1 ORDER BY T1.Votes DESC LIMIT 3"
            },
            {
                "isuser": true,
                "text": "Excellent! Which had the greatest number of votes?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The player name with the largest number of votes is Jim Maloway.",
                "query": "SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Player_name"
                        ],
                        [
                            "Jim Maloway"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Player_name ,  T1.Votes FROM player AS T1 JOIN player_coach AS T2 ON T1.Player_ID  =  T2.Player_ID JOIN coach AS T3 ON T2.Coach_ID  =  T3.Coach_ID WHERE T3.Rank  =  1 ORDER BY T1.Votes DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "And who were the top three, in order from most to least?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of the player names with the top three number of votes in descending order.",
                "query": "SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 3",
                "result": [
                    [
                        [
                            "Player_name"
                        ],
                        [
                            "Jim Maloway"
                        ],
                        [
                            "Judy Wasylycia-Leis"
                        ],
                        [
                            "Pat Martin"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Player_name ,  T1.Votes FROM player AS T1 JOIN player_coach AS T2 ON T1.Player_ID  =  T2.Player_ID JOIN coach AS T3 ON T2.Coach_ID  =  T3.Coach_ID WHERE T3.Rank  =  1 ORDER BY T1.Votes DESC LIMIT 3"
            },
            {
                "isuser": true,
                "text": "How many votes did Jim receive?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of votes received by Jim is 14355.",
                "query": "SELECT votes from player WHERE Player_name LIKE \"Jim%\"",
                "result": [
                    [
                        [
                            "Votes"
                        ],
                        [
                            14355
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Player_name ,  T1.Votes FROM player AS T1 JOIN player_coach AS T2 ON T1.Player_ID  =  T2.Player_ID JOIN coach AS T3 ON T2.Coach_ID  =  T3.Coach_ID WHERE T3.Rank  =  1 AND T1.Player_name = 'Jim'"
            },
            {
                "isuser": true,
                "text": "And what is his occupation?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The occupation of Jim is small businessman.",
                "query": "SELECT occupation from player WHERE Player_name LIKE \"Jim%\"",
                "result": [
                    [
                        [
                            "Occupation"
                        ],
                        [
                            "Small Businessman"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Player_name ,  T1.Occupation FROM player AS T1 JOIN player_coach AS T2 ON T1.Player_ID  =  T2.Player_ID JOIN coach AS T3 ON T2.Coach_ID  =  T3.Coach_ID WHERE T3.Rank  =  1 AND T1.Player_name = 'Jim'"
            },
            {
                "isuser": true,
                "text": "Who got more than 10,000 votes?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of player names who received more than 10000 votes.",
                "query": "SELECT player_name from player WHERE votes > 10000",
                "result": [
                    [
                        [
                            "Player_name"
                        ],
                        [
                            "Jim Maloway"
                        ],
                        [
                            "Ross Eadie"
                        ],
                        [
                            "Pat Martin"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Player_name ,  T1.Votes FROM player AS T1 JOIN player_coach AS T2 ON T1.Player_ID  =  T2.Player_ID JOIN coach AS T3 ON T2.Coach_ID  =  T3.Coach_ID WHERE T3.Rank  =  1 AND T1.Votes  >  10000"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "formula_1",
        "turns": [
            {
                "isuser": true,
                "text": "What are the drivers' last names who had 11 pit stops and participated in more than 5 race results?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the last names of the drivers who had 11 pit stops and participated in more than 5 race results.",
                "query": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",
                "result": [
                    [
                        [
                            "surname",
                            "driverId"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.surname FROM pitStops AS T1 JOIN drivers AS T2 ON T1.driverId  =  T2.driverId GROUP BY T1.driverId HAVING count(*)  >=  5"
            },
            {
                "isuser": true,
                "text": "What are the drivers' last names who had 11 pit stops?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the last names of the drivers who had 11 pit stops.",
                "query": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11",
                "result": [
                    [
                        [
                            "surname",
                            "driverId"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.surname FROM pitStops AS T1 JOIN drivers AS T2 ON T1.driverId  =  T2.driverId GROUP BY T1.driverId HAVING count(*)  =  11"
            },
            {
                "isuser": true,
                "text": "Did any drivers have more than 10 pit stops?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "No, there are no drivers that have more than 10 pit stops.",
                "query": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  10",
                "result": [
                    [
                        [
                            "surname",
                            "driverId"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.surname FROM pitStops AS T1 JOIN drivers AS T2 ON T1.driverId  =  T2.driverId GROUP BY T1.driverId HAVING count(*)  >  10"
            },
            {
                "isuser": true,
                "text": "Did any drivers participate in more than 5 races?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes! Here are the last names and ids for the drivers who participated in more than 5 races.",
                "query": " SELECT T1.surname , T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING count(*) > 5",
                "result": [
                    [
                        [
                            "surname",
                            "driverId"
                        ],
                        [
                            "Hamilton",
                            1
                        ],
                        [
                            "Heidfeld",
                            2
                        ],
                        [
                            "Rosberg",
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.surname FROM pitStops AS T1 JOIN drivers AS T2 ON T1.driverId  =  T2.driverId GROUP BY T1.driverId HAVING count(*)  >  5"
            },
            {
                "isuser": true,
                "text": "What is the average amount of pit stops those drivers had? I have an internal server error on that table, so I don't know if that's the right name for it.",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry, I cannot answer this.",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT avg(stop) FROM pitStops"
            },
            {
                "isuser": true,
                "text": "What are the race ids that the driver with the surname Nakajima was in?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list of the race ids that the driver with the surname Nakajima was in",
                "query": " SELECT T2.raceID FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid where T1.surname=\"Nakajima\"",
                "result": [
                    [
                        [
                            "raceId"
                        ],
                        [
                            18
                        ],
                        [
                            19
                        ],
                        [
                            20
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT raceId FROM pitStops WHERE driverId = 12"
            },
            {
                "isuser": true,
                "text": "How many wins does that driver have?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are no wins for the driver with the surname Nakajima.",
                "query": " SELECT count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid where T1.surname=\"Nakajima\" and T2.rank=1",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM pitStops WHERE driverId = 12"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Of course!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "Have a great day!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You too. Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You too!"
            }
        ]
    },
    {
        "db_name": "store_1",
        "turns": [
            {
                "isuser": false,
                "text": "Did you mean the customers that Steve Johnson supports?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Yes.",
                "type": "answerable",
                "predict": "SELECT first_name ,  last_name FROM customers WHERE support_rep_id = 2"
            },
            {
                "isuser": true,
                "text": "What are the names of all the employees?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you want first name or last name?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT first_name ,  last_name FROM employees"
            },
            {
                "isuser": true,
                "text": "First name please.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "OK. This is the list of first names for all employees",
                "query": "SELECT first_name FROM employees",
                "result": [
                    [
                        [
                            "first_name"
                        ],
                        [
                            "Andrew"
                        ],
                        [
                            "Nancy"
                        ],
                        [
                            "Jane"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name FROM employees"
            },
            {
                "isuser": true,
                "text": "How about their last names?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the list of last names for all employees",
                "query": "SELECT last_name FROM employees",
                "result": [
                    [
                        [
                            "last_name"
                        ],
                        [
                            "Adams"
                        ],
                        [
                            "Edwards"
                        ],
                        [
                            "Peacock"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT last_name FROM employees"
            },
            {
                "isuser": true,
                "text": "How many last names start with the letter J?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "only 1 last name starts with the letter J",
                "query": "SELECT count(*) FROM employees where last_name like 'J%'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM employees WHERE last_name LIKE 'J%'"
            },
            {
                "isuser": true,
                "text": "What is that person's first name?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Steve is the first name of the employee with the last name starting with the letter J",
                "query": "SELECT first_name FROM employees where last_name like 'J%'",
                "result": [
                    [
                        [
                            "first_name"
                        ],
                        [
                            "Steve"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name FROM employees WHERE last_name = 'Johnson'"
            },
            {
                "isuser": true,
                "text": "Who are the customers that Steve supports?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "This is the information for all the customers that Steve Johnson  supports",
                "query": "SELECT T1.* FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";",
                "result": [
                    [
                        [
                            "id",
                            "last_name",
                            "first_name",
                            "title",
                            "reports_to",
                            "birth_date",
                            "hire_date",
                            "address",
                            "city",
                            "state",
                            "country",
                            "postal_code",
                            "phone",
                            "fax",
                            "email"
                        ],
                        [
                            5,
                            "Johnson",
                            "Steve",
                            "Sales Support Agent",
                            2,
                            "1965-03-03 00:00:00",
                            "2003-10-17 00:00:00",
                            "7727B 41 Ave",
                            "Calgary",
                            "AB",
                            "Canada",
                            "T3B 1Y7",
                            "1 (780) 836-9987",
                            "1 (780) 836-9543",
                            "steve@chinookcorp.com"
                        ],
                        [
                            5,
                            "Johnson",
                            "Steve",
                            "Sales Support Agent",
                            2,
                            "1965-03-03 00:00:00",
                            "2003-10-17 00:00:00",
                            "7727B 41 Ave",
                            "Calgary",
                            "AB",
                            "Canada",
                            "T3B 1Y7",
                            "1 (780) 836-9987",
                            "1 (780) 836-9543",
                            "steve@chinookcorp.com"
                        ],
                        [
                            5,
                            "Johnson",
                            "Steve",
                            "Sales Support Agent",
                            2,
                            "1965-03-03 00:00:00",
                            "2003-10-17 00:00:00",
                            "7727B 41 Ave",
                            "Calgary",
                            "AB",
                            "Canada",
                            "T3B 1Y7",
                            "1 (780) 836-9987",
                            "1 (780) 836-9543",
                            "steve@chinookcorp.com"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name ,  last_name FROM customers WHERE support_rep_id = 2"
            },
            {
                "isuser": true,
                "text": "How many customers does he support?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The employee Steve Johnson supports 18 customers",
                "query": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            18
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM customers WHERE support_rep_id = 2"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure! Anything else?",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "Nope, That's all.",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "SELECT first_name ,  last_name FROM customers WHERE support_rep_id = 2"
            }
        ]
    },
    {
        "db_name": "behavior_monitoring",
        "turns": [
            {
                "isuser": true,
                "text": "What is the address of address id 3?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The following table shows information of address id 3.",
                "query": "SELECT * FROM Addresses where address_id = 3",
                "result": [
                    [
                        [
                            "address_id",
                            "line_1",
                            "line_2",
                            "line_3",
                            "city",
                            "zip_postcode",
                            "state_province_county",
                            "country",
                            "other_address_details"
                        ],
                        [
                            3,
                            "027 Kim Divide Apt. 492",
                            null,
                            null,
                            "Beierview",
                            "918",
                            "Texas",
                            "USA",
                            null
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.line_1,T1.line_2,T1.line_3,T1.city,T1.zip_postcode,T1.state_province_county,T1.country FROM Addresses AS T1 WHERE T1.address_id = 3"
            },
            {
                "isuser": true,
                "text": "How much does the rental cost for address id 3?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The following table shows the monthly rental information of address id 3",
                "query": "SELECT monthly_rental from Student_Addresses where address_id = 3",
                "result": [
                    [
                        [
                            "monthly_rental"
                        ],
                        [
                            894.0958
                        ],
                        [
                            800.1214
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.monthly_rental FROM Student_Addresses AS T1 WHERE T1.address_id = 3"
            },
            {
                "isuser": true,
                "text": "What is the cost for address id 1?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The following table shows the monthly rental information of address id 1",
                "query": "SELECT monthly_rental from Student_Addresses where address_id = 1",
                "result": [
                    [
                        [
                            "monthly_rental"
                        ],
                        [
                            1297.3186
                        ],
                        [
                            756.6745
                        ],
                        [
                            1032.8717
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.monthly_rental FROM Student_Addresses AS T1 WHERE T1.address_id = 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "store_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many tracks in this table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of tracks is 3503.",
                "query": "SELECT count(*) from tracks",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            3503
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM tracks"
            },
            {
                "isuser": true,
                "text": "How many playlists in this table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of playlists is 18.",
                "query": "SELECT count(id) from playlists",
                "result": [
                    [
                        [
                            "count(id)"
                        ],
                        [
                            18
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM playlists"
            },
            {
                "isuser": true,
                "text": "Find average unit price?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average unit price of the tracks is 1.0508050242648312.",
                "query": "SELECT avg(unit_price ) from tracks",
                "result": [
                    [
                        [
                            "avg(unit_price )"
                        ],
                        [
                            1.0508050242648312
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(unit_price) FROM tracks"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "hospital_1",
        "turns": [
            {
                "isuser": true,
                "text": "Which procedure has the highest cost?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the name of the procedure that has the highest cost?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT name FROM procedures ORDER BY cost DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Yes. What is the name of the procedure that has the highest cost?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Complete Walletectomy is the name of the procedure that has the highest cost.",
                "query": "SELECT Name FROM procedures order by cost desc limit 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Complete Walletectomy"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM procedures ORDER BY cost DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the name of the procedure that has the lowest cost?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Follicular Demiectomy is the name of the procedure that has the lowest cost.",
                "query": "SELECT Name FROM procedures order by cost asc limit 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Follicular Demiectomy"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM procedures ORDER BY cost ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "And what is the name of the procedure that has the most average cost?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "I cannot understand what is \"most average cost\". Please rephrase.",
                "query": "",
                "result": [],
                "predict_type": "SORRY",
                "predict": "SELECT name FROM procedures ORDER BY cost DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What are the highest cost, lowest cost and average cost of procedures?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The following table shows the highest cost, lowest cost and average cost of procedures.",
                "query": "SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures",
                "result": [
                    [
                        [
                            "MAX(cost)",
                            "MIN(cost)",
                            "AVG(cost)"
                        ],
                        [
                            10000.0,
                            25.0,
                            4324.857142857143
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name, cost FROM procedures ORDER BY cost DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "e_government",
        "turns": [
            {
                "isuser": false,
                "text": "Did you mean the last name of the latest contact individual?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable",
                "predict": "Yes, I meant the last name of the latest contact individual."
            },
            {
                "isuser": true,
                "text": "What are the names of contact individuals of the \"Labour Party\"? ",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you want to know the first name, middle name, last name?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T1.individual_first_name ,  T1.individual_last_name FROM Individuals AS T1 JOIN Organization_Contact_Individuals AS T2 ON T1.individual_id  =  T2.individual_id WHERE T2.organization_id  =  (SELECT organization_id FROM Organizations WHERE organization_name  =  \"Labour Party\")"
            },
            {
                "isuser": true,
                "text": "Just the last names.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The last name of contact individuals of the \"Labour Party\" are Rutherford Rogahn and Bradtke",
                "query": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1",
                "result": [
                    [
                        [
                            "individual_last_name"
                        ],
                        [
                            "Bradtke"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.individual_last_name FROM Individuals AS T1 JOIN Organization_Contact_Individuals AS T2 ON T1.individual_id  =  T2.individual_id WHERE T2.organization_id  =  (SELECT organization_id FROM Organizations WHERE organization_name  =  \"Labour Party\")"
            },
            {
                "isuser": true,
                "text": "Who is the latest contact individual? ",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "the last name of the latest contact individual of the organization \"Labour Party\" is Bradtke",
                "query": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1",
                "result": [
                    [
                        [
                            "individual_last_name"
                        ],
                        [
                            "Bradtke"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.individual_first_name ,  T1.individual_last_name FROM Individuals AS T1 JOIN Organization_Contact_Individuals AS T2 ON T1.individual_id  =  T2.individual_id WHERE T2.organization_id  =  (SELECT organization_id FROM Organizations WHERE organization_name  =  \"Labour Party\") ORDER BY T2.date_contact_from DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "And what is the date of contact? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The date of contact of the latest contact individual of the organization \"Labour Party\" is from 2016-08-16 22:09:11 to 2018-03-25 10:27:18",
                "query": "SELECT t2.date_contact_from, t2.date_contact_to FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1",
                "result": [
                    [
                        [
                            "date_contact_from",
                            "date_contact_to"
                        ],
                        [
                            "2016-08-16 22:09:11",
                            "2018-03-25 10:27:18"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.date_contact_from FROM Individuals AS T1 JOIN Organization_Contact_Individuals AS T2 ON T1.individual_id  =  T2.individual_id WHERE T2.organization_id  =  (SELECT organization_id FROM Organizations WHERE organization_name  =  \"Labour Party\") ORDER BY T2.date_contact_from DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure! Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "twitter_1",
        "turns": [
            {
                "isuser": true,
                "text": "Which users had some tweets?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table shows the name of the users who had some tweets.",
                "query": "SELECT name FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Iron Man"
                        ],
                        [
                            "Black Widow\n"
                        ],
                        [
                            "Susan"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT uid FROM tweets"
            },
            {
                "isuser": true,
                "text": "Can you find me the average number of followers for these users?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average number of followers for the users who had some tweets is 33203172.0",
                "query": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)",
                "result": [
                    [
                        [
                            "avg(followers)"
                        ],
                        [
                            33203172.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(followers) FROM user_profiles WHERE uid IN (SELECT DISTINCT uid FROM tweets)"
            },
            {
                "isuser": true,
                "text": "How about the minimum and maximum number of tweets for these users?\n",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Here is the result table shows the number of tweets for each user who had some tweets.  As you can see, the maximum number of tweets for these users is 2 and the minimum is 1.",
                "query": "select count(*) from tweets group by uid",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            2
                        ],
                        [
                            1
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT min(num_tweets), max(num_tweets) FROM (SELECT COUNT(*) AS num_tweets FROM tweets WHERE uid IN (SELECT DISTINCT uid FROM tweets))"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "flight_4",
        "turns": [
            {
                "isuser": true,
                "text": "How many airlines are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 6162 airlines.",
                "query": "SELECT COUNT(*) FROM airlines",
                "result": [
                    [
                        [
                            "COUNT(*)"
                        ],
                        [
                            6162
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM Airlines"
            },
            {
                "isuser": true,
                "text": "What's the least number of routes that an airline runs?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The least number of routes that an airline runs is 1.",
                "query": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T1.name ORDER BY count(*) ASC LIMIT 1",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT min(count(*)) FROM routes AS T1 JOIN airlines AS T2 ON T1.alid = T2.alid"
            },
            {
                "isuser": true,
                "text": "how about the most number of routes that an airline runs?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The most number of routes that an airline runs is 2484.",
                "query": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            2484
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(count(*)) FROM routes AS T1 JOIN airlines AS T2 ON T1.alid = T2.alid"
            },
            {
                "isuser": true,
                "text": "What is the name of that airline?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of that airline is Ryanair.",
                "query": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Ryanair"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.name FROM routes AS T1 JOIN airlines AS T2 ON T1.alid = T2.alid GROUP BY T1.alid ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What country does Ryanair belong to?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Ryanair belongs to Ireland.",
                "query": "SELECT country FROM airlines WHERE name = \"Ryanair\"",
                "result": [
                    [
                        [
                            "country"
                        ],
                        [
                            "Ireland"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.country FROM airlines AS T1 JOIN airlines AS T2 ON T1.alid = T2.alid WHERE T1.name = \"Ryanair\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "cre_Theme_park",
        "turns": [
            {
                "isuser": true,
                "text": "What is the name of photo ID 280",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the name of photo with id 280 is game2",
                "query": "SELECT Name FROM PHOTOS where photo_id=280",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "game2"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM Photos WHERE photo_id = 280"
            },
            {
                "isuser": true,
                "text": "What is the description of game2?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The description of photo with name game2 is null",
                "query": "SELECT Description FROM PHOTOS where name='game2'",
                "result": [
                    [
                        [
                            "Description"
                        ],
                        [
                            null
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT description FROM Tourist_Attractions WHERE name = \"game2\""
            },
            {
                "isuser": true,
                "text": "What is the tourist attraction id of game2",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The tourist attraction id of photo with name game2 is 7067.",
                "query": "SELECT Tourist_Attraction_ID FROM PHOTOS where \tName='game2'",
                "result": [
                    [
                        [
                            "Tourist_Attraction_ID"
                        ],
                        [
                            7067
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT tourist_attraction_id FROM Tourist_Attractions WHERE name = \"game2\""
            },
            {
                "isuser": true,
                "text": "What is game2 tourist attraction name?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The tourist attraction name for photo with name game2 is haunted mansion",
                "query": "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"game2\"",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "haunted mansion"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM Tourist_Attractions WHERE name = \"game2\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure! Do you want to know more?",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "No thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks. Bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "I'm sorry to hear that. Is there anything else I can help you with?"
            }
        ]
    },
    {
        "db_name": "browser_web",
        "turns": [
            {
                "isuser": true,
                "text": "how many accelerators on the table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 19 web client accelerators",
                "query": "SELECT COUNT(*) FROM web_client_accelerator",
                "result": [
                    [
                        [
                            "COUNT(*)"
                        ],
                        [
                            19
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM web_client_accelerator"
            },
            {
                "isuser": true,
                "text": "what is the connection of CACHEbox",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The connection of name CACHEbox is Broadband, Satellite, Wireless, Fiber, DSL",
                "query": "SELECT connection FROM web_client_accelerator WHERE name = \"CACHEbox\"",
                "result": [
                    [
                        [
                            "Connection"
                        ],
                        [
                            "Broadband, Satellite, Wireless, Fiber, DSL"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT connection FROM web_client_accelerator WHERE name = \"CACHEbox\""
            },
            {
                "isuser": true,
                "text": "please list out the operating system",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Can you please clarify which operating system do you need?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT operating_system FROM web_client_accelerator"
            },
            {
                "isuser": true,
                "text": "list out the all operating system on client accelerator",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The operating systems for all web client accelerators are listed in the table. There are Appliance (Linux), Windows, etc",
                "query": "SELECT operating_system FROM web_client_accelerator",
                "result": [
                    [
                        [
                            "Operating_system"
                        ],
                        [
                            "Appliance (Linux)"
                        ],
                        [
                            "Windows"
                        ],
                        [
                            "Windows, Mac, Linux and Mobile devices"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT operating_system FROM web_client_accelerator GROUP BY operating_system"
            },
            {
                "isuser": true,
                "text": "what are all the client accelerators on the table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names of all web client accelerators are shown. There are CACHEbox, CProxy, etc",
                "query": "SELECT name  FROM web_client_accelerator",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "CACHEbox"
                        ],
                        [
                            "CProxy"
                        ],
                        [
                            "Fasterfox"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT client FROM web_client_accelerator"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "No problem. goodbye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "product_catalog",
        "turns": [
            {
                "isuser": true,
                "text": "LIST THE  NAME OF CATALOGS",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The table shows the name of catalogs.",
                "query": "SELECT \tcatalog_name FROM catalogs",
                "result": [
                    [
                        [
                            "catalog_name"
                        ],
                        [
                            "Chocolate"
                        ],
                        [
                            "Coffee Bean"
                        ],
                        [
                            "Lemonade"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT catalog_name FROM Catalogs"
            },
            {
                "isuser": true,
                "text": "WHICH PUBLISHER HAS PUBLISHED MORE CATALOGS",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are three publishers who have published 2 catalogs.",
                "query": "select catalog_publisher,count(*) from Catalogs group by catalog_publisher order by count(*) desc",
                "result": [
                    [
                        [
                            "catalog_publisher",
                            "count(*)"
                        ],
                        [
                            "Grady & Kautzer",
                            2
                        ],
                        [
                            "Murray Coffee shop",
                            2
                        ],
                        [
                            "Russel-Gislason Lemon shop",
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT catalog_publisher FROM Catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "WHICH ONE HAS THE HIGHEST PUBLISHED RECORD",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry, there are three publishers who published the same number of catalogs.",
                "query": "select catalog_publisher from Catalogs group by catalog_publisher order by count(*) desc",
                "result": [
                    [
                        [
                            "catalog_publisher"
                        ],
                        [
                            "Grady & Kautzer"
                        ],
                        [
                            "Murray Coffee shop"
                        ],
                        [
                            "Russel-Gislason Lemon shop"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT catalog_publisher FROM Catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "THANKS",
                "type": "improper"
            }
        ]
    },
    {
        "db_name": "company_office",
        "turns": [
            {
                "isuser": true,
                "text": "Which company has its headquarter in the US?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean to ask for the companies with headquarters in USA?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT name FROM Companies WHERE headquarters = \"US\""
            },
            {
                "isuser": true,
                "text": "yes.\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the names of companies with headquarters in USA",
                "query": "SELECT name FROM Companies WHERE Headquarters = \"USA\"",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "JPMorgan Chase"
                        ],
                        [
                            "General Electric"
                        ],
                        [
                            "ExxonMobil"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM Companies WHERE headquarters = \"US\""
            },
            {
                "isuser": true,
                "text": "What is the industry of the company named General Electric?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The company named General Electric is in the Conglomerate industry.",
                "query": "SELECT Industry FROM Companies WHERE name = \"General Electric\"",
                "result": [
                    [
                        [
                            "Industry"
                        ],
                        [
                            "Conglomerate"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT industry FROM Companies WHERE name = \"General Electric\""
            },
            {
                "isuser": true,
                "text": "How much profit did it make ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "General Electric made 11.6 profits in billions.",
                "query": "SELECT Profits_billion FROM Companies WHERE name = \"General Electric\"",
                "result": [
                    [
                        [
                            "Profits_billion"
                        ],
                        [
                            11.6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT profits_billion FROM Companies WHERE name = \"General Electric\""
            },
            {
                "isuser": true,
                "text": "Which company has the highest amount of assets?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "BNP Paribas has the highest number of assets in billion.",
                "query": "SELECT name FROM Companies ORDER BY Assets_billion DESC LIMIT 1",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "BNP Paribas"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name, assets_billion FROM Companies ORDER BY assets_billion DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "how much is it worth?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean to ask for the market value in billions for BNP Paribas?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT market_value_billion FROM Companies ORDER BY market_value_billion DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "BNP Paribas has market value of 88 in billions.",
                "query": "SELECT Market_Value_billion FROM Companies WHERE name = \"BNP Paribas\"",
                "result": [
                    [
                        [
                            "Market_Value_billion"
                        ],
                        [
                            "88"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM Companies WHERE market_value_billion = (SELECT MAX(market_value_billion) FROM Companies)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Good bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "poker_player",
        "turns": [
            {
                "isuser": true,
                "text": "Hello!  Which nationalities are shared by more than one person?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Russia is the only nationality shared by more than 1 person.",
                "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >  1",
                "result": [
                    [
                        [
                            "Nationality"
                        ],
                        [
                            "Russia"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >  1"
            },
            {
                "isuser": true,
                "text": "Okay.  Thanks for that!  Can you show me all of the people IDs that have Russia as the nationality?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the IDs for people having a nationality of Russia.",
                "query": "SELECT People_ID FROM people WHERE Nationality = 'Russia'",
                "result": [
                    [
                        [
                            "People_ID"
                        ],
                        [
                            1
                        ],
                        [
                            3
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT People_ID FROM people WHERE Nationality = \"Russia\""
            },
            {
                "isuser": true,
                "text": "Excellent!  Can you  update this list to show the names of all of the associated individuals?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the IDs and names for people having a nationality of Russia.",
                "query": "SELECT People_ID, name FROM people WHERE Nationality = 'Russia'",
                "result": [
                    [
                        [
                            "People_ID",
                            "Name"
                        ],
                        [
                            1,
                            "Aleksey Ostapenko"
                        ],
                        [
                            3,
                            "Roman Bragin"
                        ],
                        [
                            4,
                            "Sergey Grankin"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM people WHERE Nationality = \"Russia\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you! Goodbye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "debate",
        "turns": [
            {
                "isuser": true,
                "text": "What are the names of the people who have been on the affirmative side of debates?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names of the people who have been on the affirmative side of debates are listed.",
                "query": "SELECT T2.Name  FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative  =  T2.People_ID GROUP BY T2.Name",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "James Humphrey"
                        ],
                        [
                            "Luther C. Carter"
                        ],
                        [
                            "Thomas J. Barr"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative = T2.People_ID"
            },
            {
                "isuser": true,
                "text": "What are their party affiliations?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The party affiliations of the people who have  been on the affirmative side of debates are listed.",
                "query": "SELECT T2.Party FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative  =  T2.People_ID GROUP BY T2.Name",
                "result": [
                    [
                        [
                            "Party"
                        ],
                        [
                            "Republican"
                        ],
                        [
                            "Republican"
                        ],
                        [
                            "Independent Democrat"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Party FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative = T2.People_ID"
            },
            {
                "isuser": true,
                "text": "How many debates did they win total?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of wins achieved by the people who were on the affirmative side of debates is 2.",
                "query": "SELECT count(*) FROM debate_people WHERE If_Affirmative_Win = 'T'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative = T2.People_ID WHERE T1.If_Affirmative_Win = 'Yes'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Goodbye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "tracking_grants_for_research",
        "turns": [
            {
                "isuser": true,
                "text": "tell me the staff details of staff id 1 ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The staff details of staff with id 1 is quo",
                "query": "SELECT staff_details FROM  Research_Staff where staff_id=1",
                "result": [
                    [
                        [
                            "staff_details"
                        ],
                        [
                            "quo"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT staff_details FROM Research_Staff WHERE staff_id = 1"
            },
            {
                "isuser": true,
                "text": "Tell me the organization type of organisation_id 1?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the organisation type of the organisation with id 1 is RES",
                "query": "SELECT organisation_type FROM   Organisations where organisation_id=1",
                "result": [
                    [
                        [
                            "organisation_type"
                        ],
                        [
                            "RES"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT organisation_type FROM Organisations WHERE organisation_id = 1"
            },
            {
                "isuser": true,
                "text": "Which organisation type hires most research staff ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "RES is the organisation type hiring most research staff",
                "query": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "organisation_type"
                        ],
                        [
                            "RES"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT organisation_type FROM Organisations WHERE organisation_id IN (SELECT employer_organisation_id FROM Research_Staff GROUP BY employer_organisation_id ORDER BY count(*) DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure! Bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "flight_company",
        "turns": [
            {
                "isuser": true,
                "text": "What are all the names of the pilots who flew a flight in the United States?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of the pilots who flew a flight in the United States",
                "query": "SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.country  =  'United States' ",
                "result": [
                    [
                        [
                            "Pilot"
                        ],
                        [
                            "Thompson"
                        ],
                        [
                            "Peterson"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.Pilot FROM Flight AS T1 JOIN Airport AS T2 ON T1.airport_id = T2.id WHERE T2.Country = \"United States\""
            },
            {
                "isuser": true,
                "text": "What are the names of all the pilots who flew a flight in the Billund Airport?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is no pilot who flew a flight in the Billund Airport",
                "query": "SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.name = 'Billund Airport'",
                "result": [
                    [
                        [
                            "Pilot"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.Pilot FROM Flight AS T1 JOIN Airport AS T2 ON T1.airport_id = T2.id WHERE T2.name = \"Billund\""
            },
            {
                "isuser": true,
                "text": "Can you list the names and velocities of all pilots who flew out of Ted Stevens Airport?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the name and velocity of the flight that flew out of Ted Stevens Airport",
                "query": "SELECT T2.pilot, T2.velocity FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.name = 'Ted Stevens Airport'",
                "result": [
                    [
                        [
                            "Pilot",
                            "Velocity"
                        ],
                        [
                            "Thompson",
                            240.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Pilot, T1.Velocity FROM Flight AS T1 JOIN Airport AS T2 ON T1.airport_id = T2.id WHERE T2.name = \"Ted Stevens Airport\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "candidate_poll",
        "turns": [
            {
                "isuser": true,
                "text": "I want to know the lowest oppose rate among the candidates.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The lowest oppose rate among candidates is 0.32",
                "query": "SELECT oppose_rate FROM candidate ORDER BY oppose_rate LIMIT 1",
                "result": [
                    [
                        [
                            "Oppose_rate"
                        ],
                        [
                            0.32
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT min(oppose_rate) FROM candidate"
            },
            {
                "isuser": true,
                "text": "Which candidate got this lowest oppose rate?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The candidate that got the lowest oppose rate was the candidate with id 2. ",
                "query": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1",
                "result": [
                    [
                        [
                            "Candidate_ID"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT candidate_id, oppose_rate FROM candidate ORDER BY oppose_rate ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Hmm, which poll source did this candidate belong to?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The poll source associated with the candidate with the lowest oppose rate is WNBC/Marist Poll.",
                "query": "SELECT poll_source FROM candidate ORDER BY oppose_rate LIMIT 1",
                "result": [
                    [
                        [
                            "Poll_Source"
                        ],
                        [
                            "WNBC/Marist Poll"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT poll_source FROM candidate WHERE candidate_id = 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, good bye. ",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "icfp_1",
        "turns": [
            {
                "isuser": true,
                "text": "Hi! What is the name of the institution that \"Mathias Blume\" is associated with?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of institution that \"Mathias Blume\" is associated with is Google.",
                "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Google"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.name FROM authors AS T1 JOIN inst AS T2 ON T1.instID = T2.instID WHERE T1.fname = \"Mathias\" AND T1.lname = \"Blume\""
            },
            {
                "isuser": true,
                "text": "How many papers does Mathias Blume have authorship of?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Mathias Blume has authorship of 1 paper.",
                "query": "SELECT COUNT(t1.authID) FROM authorship as t1 join authors as t2 on t1.authID = t2.authID where t2.fname = \"Matthias\" AND t2.lname = \"Blume\"",
                "result": [
                    [
                        [
                            "COUNT(t1.authID)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM Authorship AS T1 JOIN Papers AS T2 ON T1.paperID = T2.paperID WHERE T1.authID = 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Your'e welcome, if there are no more questions, good bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "insurance_and_eClaims",
        "turns": [
            {
                "isuser": true,
                "text": "Show me all the claims that are documents.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of the claim header ID's that have type code Document.",
                "query": "SELECT t1.claim_header_id FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.document_type_code = \"Document\"",
                "result": [
                    [
                        [
                            "Claim_Header_ID"
                        ],
                        [
                            24
                        ],
                        [
                            27
                        ],
                        [
                            39
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Claim_ID ,  T2.Document_Type_Code FROM Claims_Documents AS T1 JOIN Claim_Headers AS T2 ON T1.Claim_ID  =  T2.Claim_ID WHERE T1.Document_Type_Code  =  'DOCUMENT'"
            },
            {
                "isuser": true,
                "text": "Which of these claims is most recently created?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The claim header ID with type Document that was most recently created is 69.",
                "query": "SELECT t1.claim_header_id FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.document_type_code = \"Document\" ORDER BY created_date LIMIT 1",
                "result": [
                    [
                        [
                            "Claim_Header_ID"
                        ],
                        [
                            69
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Claim_ID ,  T2.Document_Type_Code FROM Claims_Documents AS T1 JOIN Claim_Headers AS T2 ON T1.Claim_ID  =  T2.Claim_ID WHERE T1.Document_Type_Code  =  'DOCUMENT' ORDER BY T1.Created_Date DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the amount claimed for this claim?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of the amounts claimed by this the most recently created claim.",
                "query": "SELECT t1.amount_claimed FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)",
                "result": [
                    [
                        [
                            "Amount_Claimed"
                        ],
                        [
                            867.57
                        ],
                        [
                            425.98
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Claim_ID ,  T2.Amount_Claimed FROM Claims_Documents AS T1 JOIN Claim_Headers AS T2 ON T1.Claim_ID  =  T2.Claim_ID WHERE T1.Document_Type_Code  =  'DOCUMENT' ORDER BY T1.Created_Date DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Please give me the sum of these amounts.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the total amount claimed in the most recently created document.",
                "query": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)",
                "result": [
                    [
                        [
                            "sum(t1.amount_claimed)"
                        ],
                        [
                            1293.5500000000002
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT SUM(T2.Amount_Claimed) FROM Claims_Documents AS T1 JOIN Claim_Headers AS T2 ON T1.Claim_ID  =  T2.Claim_ID WHERE T1.Document_Type_Code  =  'DOCUMENT'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "manufactory_1",
        "turns": [
            {
                "isuser": true,
                "text": "What are the names of all companies whose revenue is smaller than the revenue of all companies based in Austin?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Hewlett-Packard and Winchester 's revenue are the names of companies whose revenue is smaller than the revenue of all companies based in Austin",
                "query": "SELECT name FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Hewlett-Packard"
                        ],
                        [
                            "Winchester"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM Manufacturers WHERE revenue < (SELECT min(revenue) FROM Manufacturers WHERE headquarter = \"Austin\")"
            },
            {
                "isuser": true,
                "text": "What are the companies' revenues whose revenue is smaller than the revenue of all companies based in Austin?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The revenues of companies whose revenue is smaller than the revenue of companies based in Austin are 50.0 or 30.0",
                "query": "SELECT Revenue FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')",
                "result": [
                    [
                        [
                            "Revenue"
                        ],
                        [
                            50.0
                        ],
                        [
                            30.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT revenue FROM Manufacturers WHERE revenue < (SELECT min(revenue) FROM Manufacturers WHERE headquarter = \"Austin\")"
            },
            {
                "isuser": true,
                "text": "What are the revenues of the companies whose revenue is smaller than the revenue of all companies based in Austin?",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "The revenues of companies whose revenue is smaller than the revenue of companies based in Austin are 50.0 or 30.0.",
                "query": "SELECT Revenue FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')",
                "result": [
                    [
                        [
                            "Revenue"
                        ],
                        [
                            50.0
                        ],
                        [
                            30.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT revenue FROM Manufacturers WHERE revenue < (SELECT min(revenue) FROM Manufacturers WHERE headquarter = \"Austin\")"
            },
            {
                "isuser": true,
                "text": "What is the numerical value of those two companies' revenues?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the revenus of Hewlett-Packard is 50.0 and the revenue of  Winchester is 30.0",
                "query": "SELECT name,Revenue FROM manufacturers WHERE revenue  <  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')",
                "result": [
                    [
                        [
                            "Name",
                            "Revenue"
                        ],
                        [
                            "Hewlett-Packard",
                            50.0
                        ],
                        [
                            "Winchester",
                            30.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT revenue FROM Manufacturers WHERE revenue < (SELECT min(revenue) FROM Manufacturers WHERE headquarter = \"Austin\")"
            },
            {
                "isuser": true,
                "text": "What are the names of all companies whose revenue is larger than the revenue of all companies based in Austin?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of all companies whose revenue is larger than the revenue of all comanies based in austin are Sony, Iomega and Fujitsu.",
                "query": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Sony"
                        ],
                        [
                            "Iomega"
                        ],
                        [
                            "Fujitsu"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM Manufacturers WHERE revenue > (SELECT max(revenue) FROM Manufacturers WHERE headquarter = \"Austin\")"
            },
            {
                "isuser": true,
                "text": "What are the numerical values of their revenues, please?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name and revenue is Sony with 120.0, Iomega with 200.0 and Fujitsu with 130.0",
                "query": "SELECT name,revenue FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')",
                "result": [
                    [
                        [
                            "Name",
                            "Revenue"
                        ],
                        [
                            "Sony",
                            120.0
                        ],
                        [
                            "Iomega",
                            200.0
                        ],
                        [
                            "Fujitsu",
                            130.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT revenue FROM Manufacturers WHERE revenue > (SELECT max(revenue) FROM Manufacturers WHERE headquarter = \"Austin\")"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "musical",
        "turns": [
            {
                "isuser": true,
                "text": "Which nominees have nominated musicals for \"Tony Award\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Bob Fosse and Cleavant Derricks are the distinct nominees that have been nominated musicals for \"Tony Award\".",
                "query": "SELECT distinct Nominee FROM musical WHERE Award  =  \"Tony Award\"",
                "result": [
                    [
                        [
                            "Nominee"
                        ],
                        [
                            "Bob Fosse"
                        ],
                        [
                            "Cleavant Derricks"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Nominee FROM musical WHERE Category = \"Tony Award\""
            },
            {
                "isuser": true,
                "text": "Which nominees have nominated musicals for \"Drama Desk Award\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Bob Fosse and Cleavant Derricks are the distinct nominees that have nominated musicals for \"Drama Desk Award\".",
                "query": "SELECT distinct Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"",
                "result": [
                    [
                        [
                            "Nominee"
                        ],
                        [
                            "Cleavant Derricks"
                        ],
                        [
                            "Bob Fosse"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Nominee FROM musical WHERE Category = \"Drama Desk Award\""
            },
            {
                "isuser": true,
                "text": "Which of these have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Bob Fosse and Cleavant Derricks are the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\"",
                "query": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"",
                "result": [
                    [
                        [
                            "Nominee"
                        ],
                        [
                            "Bob Fosse"
                        ],
                        [
                            "Cleavant Derricks"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Nominee FROM musical WHERE Category IN (\"Tony Award\", \"Drama Desk Award\")"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks. bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "activity_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many professors are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 27 professors.",
                "query": "SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            27
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Faculty WHERE rank = 'Professor'"
            },
            {
                "isuser": true,
                "text": "How many different buildings do you have?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 3 different buildings.",
                "query": "SELECT count(distinct building) FROM Faculty",
                "result": [
                    [
                        [
                            "count(distinct building)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(DISTINCT building) FROM Faculty"
            },
            {
                "isuser": true,
                "text": "Can you tell me the number of Professors in the building NEB?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 5 professors in the building NEB.",
                "query": "SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Faculty WHERE building = 'NEB' AND rank = 'Professor'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "sakila_1",
        "turns": [
            {
                "isuser": true,
                "text": "Which film actors and actresses played a role in more than 30 films? List their first and last names.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table that shows the names of the actors and actresses who played a role in more than 30 films. For example, Karl Berry is one them who played a role in more than 30 films",
                "query": "SELECT T2.first_name , T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id HAVING count(*) > 30",
                "result": [
                    [
                        [
                            "first_name",
                            "last_name"
                        ],
                        [
                            "KARL",
                            "BERRY"
                        ],
                        [
                            "UMA",
                            "WOOD"
                        ],
                        [
                            "HELEN",
                            "VOIGHT"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.first_name ,  T1.last_name FROM actor AS T1 JOIN film_actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T1.actor_id HAVING count(*)  >  30"
            },
            {
                "isuser": true,
                "text": "What about just actors?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "I'm sorry. Here is no info about gender.",
                "query": "",
                "result": [],
                "predict_type": "SORRY",
                "predict": "SELECT T1.first_name ,  T1.last_name FROM actor AS T1 JOIN film_actor AS T2 ON T1.actor_id  =  T2.actor_id WHERE T1.actor_id IN (SELECT T3.actor_id FROM actor AS T3 JOIN film_actor AS T4 ON T3.actor_id  =  T4.actor_id GROUP BY T3.actor_id HAVING count(*)  >  30)"
            },
            {
                "isuser": true,
                "text": "Who had the most films?",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "It's Penelope Guiness who has played the most movies.",
                "query": "SELECT T2.first_name , T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id limit 1",
                "result": [
                    [
                        [
                            "first_name",
                            "last_name"
                        ],
                        [
                            "PENELOPE",
                            "GUINESS"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.first_name ,  T1.last_name FROM actor AS T1 JOIN film_actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T1.actor_id ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "How many films were all people with names that start with N in?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "I'm sorry. But here is no info about film names.",
                "query": "",
                "result": [],
                "predict_type": "SORRY",
                "predict": "SELECT count(*) FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id WHERE T2.first_name LIKE 'N%'"
            },
            {
                "isuser": true,
                "text": "How many films was actor id 9 in?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 25 movies that actor id 9 in.",
                "query": "select count(*) from film_actor where actor_id='9'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            25
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id WHERE T2.actor_id = 9"
            },
            {
                "isuser": true,
                "text": "What's that person's name?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "It's Joe Swank whose actor id  is 9.",
                "query": "select first_name,last_name from actor where actor_id='9'",
                "result": [
                    [
                        [
                            "first_name",
                            "last_name"
                        ],
                        [
                            "JOE",
                            "SWANK"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.first_name ,  T1.last_name FROM actor AS T1 JOIN film_actor AS T2 ON T1.actor_id  =  T2.actor_id WHERE T1.actor_id = 9"
            },
            {
                "isuser": true,
                "text": "Is there anyone else with the first name Joe?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is nobody whose first name is \"Joe\" except \"Joe Swank\".",
                "query": "select first_name, last_name from actor where first_name='JOE' and last_name != 'SWANK'",
                "result": [
                    null
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.first_name ,  T1.last_name FROM actor AS T1 JOIN film_actor AS T2 ON T1.actor_id  =  T2.actor_id WHERE T1.first_name = 'Joe'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "ship_mission",
        "turns": [
            {
                "isuser": true,
                "text": "Show the names  of all ships from United States?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list of the names of all ships from United States.",
                "query": "SELECT Name FROM ship WHERE Nationality  =  \"United States\"",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Farringford"
                        ],
                        [
                            "Ariadne"
                        ],
                        [
                            "Clan McTavish"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM ship WHERE Nationality = \"United States\""
            },
            {
                "isuser": true,
                "text": "Show the names of all ships from United Kingdom?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of the names of all ships from United Kingdom",
                "query": "SELECT Name FROM ship WHERE Nationality  =  \"United Kingdom\"",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Corbridge"
                        ],
                        [
                            "Dromonby"
                        ],
                        [
                            "Author"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM ship WHERE Nationality = \"United Kingdom\""
            },
            {
                "isuser": true,
                "text": "What type of ship is the Corbridge ? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The type of ship Corbridge is Cargo ship",
                "query": "SELECT type FROM ship WHERE name  =  \"Corbridge\"",
                "result": [
                    [
                        [
                            "Type"
                        ],
                        [
                            "Cargo ship"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT TYPE FROM ship WHERE name = \"Corbridge\""
            },
            {
                "isuser": true,
                "text": "What is the tonnage of the Corbridge ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the tonnage of the Corbridge is 3687",
                "query": "SELECT tonnage FROM ship WHERE name  =  \"Corbridge\"",
                "result": [
                    [
                        [
                            "Tonnage"
                        ],
                        [
                            3687
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Tonnage FROM ship WHERE name = \"Corbridge\""
            },
            {
                "isuser": true,
                "text": "What is the name of the ship with 3146 tonnage ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the name of the ship with 3146 tonnages is Farringford",
                "query": "SELECT name FROM ship WHERE tonnage  =  \"3146\"",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Farringford"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM ship WHERE Tonnage = 3146"
            },
            {
                "isuser": true,
                "text": "What is the name of the ship with the most tonnage ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the name of the ship with the most tonnage is Appam",
                "query": "SELECT name FROM ship order by  tonnage desc limit 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Appam"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM ship ORDER BY Tonnage DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "How many different types of ships are there ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of different ship types is 2",
                "query": "SELECT count(distinct type) FROM ship",
                "result": [
                    [
                        [
                            "count(distinct type)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(DISTINCT Type) FROM ship"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "assets_maintenance",
        "turns": [
            {
                "isuser": true,
                "text": "What is the skill code for skill id 1, 2 and 3 ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The skill codes for skill id 1, 2 and 3 are shown in the result table. ",
                "query": "SELECT skill_id, skill_code FROM skills where skill_id  =  1 or skill_id = 2 or skill_id = 3",
                "result": [
                    [
                        [
                            "skill_id",
                            "skill_code"
                        ],
                        [
                            1,
                            "ELEC"
                        ],
                        [
                            2,
                            "MECH"
                        ],
                        [
                            3,
                            "TV"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT skill_code FROM Skills WHERE skill_id IN (1, 2, 3)"
            },
            {
                "isuser": true,
                "text": "How many ids are in part_fault_id...Tell me total number",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 11 distinct part_fault_ids. ",
                "query": "SELECT count(distinct part_fault_id) from skills_required_to_fix",
                "result": [
                    [
                        [
                            "count(distinct part_fault_id)"
                        ],
                        [
                            11
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM Part_Faults"
            },
            {
                "isuser": true,
                "text": "What is the skill description for skill id 3 ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The skill description for skill id is TV, Video. ",
                "query": "SELECT skill_description from skills where skill_id = 3",
                "result": [
                    [
                        [
                            "skill_description"
                        ],
                        [
                            "TV, Video"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT skill_description FROM Skills WHERE skill_id = 3"
            },
            {
                "isuser": true,
                "text": "Which skill is used in fixing the most number of faults ? List the skill id and description",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The skill used in fixing the most number of faults is the skill with id 3, and skill description TV, Video. ",
                "query": "SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "skill_id",
                            "skill_description"
                        ],
                        [
                            3,
                            "TV, Video"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, good bye. ",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "school_player",
        "turns": [
            {
                "isuser": true,
                "text": "how many player are presented on the table",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean to ask for the number of entries in the table player?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT count(*) FROM player"
            },
            {
                "isuser": true,
                "text": "exactly",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 23 entries in the table player.",
                "query": "SELECT COUNT(*) FROM player",
                "result": [
                    [
                        [
                            "COUNT(*)"
                        ],
                        [
                            23
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM player"
            },
            {
                "isuser": true,
                "text": "list out the player",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the players.",
                "query": "SELECT Player FROM player",
                "result": [
                    [
                        [
                            "Player"
                        ],
                        [
                            "Timothy Beckham"
                        ],
                        [
                            "Pedro Álvarez"
                        ],
                        [
                            "Eric Hosmer"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT player FROM player"
            },
            {
                "isuser": true,
                "text": "what is the age of Timothy Beckham",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The age of Timothy Beckham is 15.",
                "query": "SELECT Age FROM player WHERE Player = \"Timothy Beckham\"",
                "result": [
                    [
                        [
                            "Age"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT age FROM player WHERE player = 'Timothy Beckham'"
            },
            {
                "isuser": true,
                "text": "what is the position of Pedro Álvarez",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Pedro Álvarez is position Third baseman.",
                "query": "SELECT Position FROM player WHERE Player = \"Pedro Álvarez\"",
                "result": [
                    [
                        [
                            "Position"
                        ],
                        [
                            "Third baseman"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT position FROM player WHERE player = 'Pedro Álvarez'"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Good bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "epinions_1",
        "turns": [
            {
                "isuser": true,
                "text": "What is the name of the good with the highest average rank?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Cup is the title of the good with the highest average rank",
                "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "title"
                        ],
                        [
                            "cup"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T1.i_id ORDER BY avg(T2.rank) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the ID of cup?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "7 is the id of the item with the title cup.",
                "query": "SELECT i_id FROM item where title = \"cup\"",
                "result": [
                    [
                        [
                            "i_id"
                        ],
                        [
                            7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT i_id FROM item WHERE title = \"cup\""
            },
            {
                "isuser": true,
                "text": "Now, can you please tell me the name and id of the good with the highest average rank?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The following table shows  the title and id of the good with the highest average rank.",
                "query": "SELECT T1.title ,  T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rank) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "title",
                            "i_id"
                        ],
                        [
                            "cup",
                            7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.title,T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T1.i_id ORDER BY avg(T2.rank) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "college_2",
        "turns": [
            {
                "isuser": true,
                "text": "Who is the instructor of the statistics department?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the table of the names of instructors in the statistics department.",
                "query": "SELECT name FROM instructor WHERE \tdept_name = \"Statistics\"",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Pingr"
                        ],
                        [
                            "Arias"
                        ],
                        [
                            "Choll"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM instructor WHERE dept_name = 'Statistics'"
            },
            {
                "isuser": true,
                "text": "What is their average salary?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average salary  of the instructor in statistic department is 67795.44166666667",
                "query": "SELECT avg(salary) FROM instructor WHERE \tdept_name = \"Statistics\"",
                "result": [
                    [
                        [
                            "avg(salary)"
                        ],
                        [
                            67795.44166666667
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(salary) FROM instructor WHERE dept_name = 'Statistics'"
            },
            {
                "isuser": true,
                "text": "Who in the statistics department has the highest salary?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Arias is the name of the instructor in the statistics department that has the highest salary.",
                "query": "SELECT name  FROM instructor where dept_name = \"Statistics\" order by salary desc limit 1 ",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Arias"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM instructor WHERE dept_name = 'Statistics' ORDER BY salary DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "How much is his salary?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The highest salary in statistics department is 104563.38",
                "query": "SELECT salary FROM instructor where dept_name = \"Statistics\" order by salary desc limit 1 ",
                "result": [
                    [
                        [
                            "salary"
                        ],
                        [
                            104563.38
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT salary FROM instructor WHERE dept_name = 'Statistics' ORDER BY salary DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "candidate_poll",
        "turns": [
            {
                "isuser": true,
                "text": "Hello, how many candidates total are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The total number of candidates is 6.",
                "query": "SELECT count(*) FROM candidate",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM candidate"
            },
            {
                "isuser": true,
                "text": "Perfect, and who has the highest support percentage?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you want the people id?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT Name FROM candidate WHERE Support_rate = (SELECT max(Support_rate) FROM candidate)"
            },
            {
                "isuser": true,
                "text": "Actually, just the percentage please.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the highest support percentage is 0.33",
                "query": "SELECT max(support_rate) FROM candidate",
                "result": [
                    [
                        [
                            "max(support_rate)"
                        ],
                        [
                            0.33
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(Support_rate) FROM candidate"
            },
            {
                "isuser": true,
                "text": "Perfect, what about the lowest consider rate?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the lowest consider rate is 0.2",
                "query": "SELECT min(consider_rate)  FROM candidate",
                "result": [
                    [
                        [
                            "min(consider_rate)"
                        ],
                        [
                            0.2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT min(Consider_rate) FROM candidate"
            },
            {
                "isuser": true,
                "text": "And what about the lowest oppose rate?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the lowest oppose rate is 0.32",
                "query": "SELECT min(Oppose_rate)  FROM candidate",
                "result": [
                    [
                        [
                            "min(Oppose_rate)"
                        ],
                        [
                            0.32
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT min(Oppose_rate) FROM candidate"
            },
            {
                "isuser": true,
                "text": "And finally, can you tell me the average unsure rate?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the average unsure rate is 0.3666666666666667",
                "query": "SELECT avg(Unsure_rate)  FROM candidate",
                "result": [
                    [
                        [
                            "avg(Unsure_rate)"
                        ],
                        [
                            0.3666666666666667
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(Unsure_rate) FROM candidate"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "dorm_1",
        "turns": [
            {
                "isuser": true,
                "text": "Which dorm has the largest capacity?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Hi do you need the dorm name or dorm id ?",
                "query": "",
                "result": [],
                "predict_type": "answerable",
                "predict": "SELECT dorm_name, student_capacity FROM dorm ORDER BY student_capacity DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "dorm id , please.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The dorm id that has the largest student capacity is 160",
                "query": "SELECT dormid FROM dorm ORDER BY student_capacity DESC LIMIT 1",
                "result": [
                    [
                        [
                            "dormid"
                        ],
                        [
                            160
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT dormid FROM dorm ORDER BY student_capacity DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "How many students live there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 10 students living in the dorm that has the largest student capacity.",
                "query": "SELECT COUNT(T1.stuid) FROM lives_in AS T1 JOIN dorm AS T2 ON T1.dormid = T2.dormid WHERE T2.student_capacity  =  (SELECT max(student_capacity) FROM dorm)",
                "result": [
                    [
                        [
                            "COUNT(T1.stuid)"
                        ],
                        [
                            10
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM lives_in WHERE dormid = (SELECT dormid FROM dorm ORDER BY student_capacity DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "What is their average age?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average age of students who are living in the dorm with the largest capacity is 19.6",
                "query": "SELECT avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.student_capacity  =  (SELECT max(student_capacity) FROM dorm)",
                "result": [
                    [
                        [
                            "avg(T1.age)"
                        ],
                        [
                            19.6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(age) FROM student WHERE stuid IN (SELECT stuid FROM lives_in WHERE dormid = (SELECT dormid FROM dorm ORDER BY student_capacity DESC LIMIT 1))"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome, bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "baseball_1",
        "turns": [
            {
                "isuser": true,
                "text": "Can you tell me the id of the player that got the highest salary from Boston Red Stockings in 2010?",
                "type": "answerable"
            },
            {
                "isuser": true,
                "text": "What is the team id for Boston Red Stockings?",
                "type": "answerable",
                "predict": "SELECT player_id FROM salary WHERE team_id = \"BOS\" AND year = 2010 ORDER BY salary DESC LIMIT 1"
            },
            {
                "isuser": false,
                "text": "Here is the team id for the team with name Boston Red Stockings",
                "query": "SELECT distinct(team_id) FROM team where name = \"Boston Red Stockings\"",
                "result": [
                    [
                        [
                            "team_id"
                        ],
                        [
                            "BS1"
                        ]
                    ]
                ],
                "predict_type": "answerable"
            },
            {
                "isuser": true,
                "text": "Hmm, I want to know which players does Boston Red Stockings have.",
                "type": "answerable",
                "predict": "SELECT team_id FROM team WHERE name = \"Boston Red Stockings\""
            },
            {
                "isuser": false,
                "text": "do you want the id of those players?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Yes please.",
                "type": "answerable",
                "predict": "SELECT player_id FROM salary WHERE team_id = \"BOS\" AND year = 2010 ORDER BY salary DESC LIMIT 1"
            },
            {
                "isuser": false,
                "text": "Here are the ids of the players that play for the team with name Boston Red Stockings",
                "query": "SELECT T1.player_id FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' ",
                "result": [
                    [
                        [
                            "player_id"
                        ],
                        [
                            "aardsda01"
                        ],
                        [
                            "aceveal01"
                        ],
                        [
                            "aceveal01"
                        ]
                    ]
                ],
                "predict_type": "answerable"
            },
            {
                "isuser": true,
                "text": "Can you calculate the total salary paid by team Boston Red Stockings in 2010?",
                "type": "answerable",
                "predict": "SELECT player_id FROM salary WHERE team_id = \"BOS\" AND year = 2010 ORDER BY salary DESC LIMIT 1"
            },
            {
                "isuser": false,
                "text": "the id of the player got the highest salary from Boston Red Stockings in 2010 is lackejo01",
                "query": "select player_id from salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2010 and salary = (SELECT max(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2010)",
                "result": [
                    [
                        [
                            "sum(T1.salary)"
                        ],
                        [
                            812236665
                        ]
                    ],
                    [
                        [
                            "player_id"
                        ],
                        [
                            "lackejo01"
                        ],
                        [
                            "lackejo01"
                        ],
                        [
                            "lackejo01"
                        ]
                    ]
                ],
                "predict_type": "answerable"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper",
                "predict": "SELECT player_id FROM salary WHERE team_id = \"BOS\" AND year = 2010 ORDER BY salary DESC LIMIT 1"
            },
            {
                "isuser": false,
                "text": "Thank you! Bye",
                "query": "",
                "result": [],
                "predict_type": "improper"
            }
        ]
    },
    {
        "db_name": "architecture",
        "turns": [
            {
                "isuser": true,
                "text": "Can you please show me the names of all male architects by their names lexicographically?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The table shows the names of all male architects by their names lexicographically.",
                "query": "SELECT name FROM architect WHERE gender = 'male' ORDER BY name",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Frank Gehry"
                        ],
                        [
                            "Frank Lloyd Wright"
                        ],
                        [
                            "Le Corbusier"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM architect WHERE gender = 'M' ORDER BY name ASC"
            },
            {
                "isuser": true,
                "text": "Can you please show me all female architects by their names lexicographically?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table that shows the names of all female architects order by their name lexicographically.",
                "query": "SELECT name FROM architect WHERE gender = 'male' ORDER BY name",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Frank Gehry"
                        ],
                        [
                            "Frank Lloyd Wright"
                        ],
                        [
                            "Le Corbusier"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM architect WHERE gender = 'F' ORDER BY name ASC"
            },
            {
                "isuser": true,
                "text": "can you please show me all the female architects?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The table shows all the names of the female architects.",
                "query": "SELECT name FROM architect WHERE gender = 'male' ",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Frank Lloyd Wright"
                        ],
                        [
                            "Frank Gehry"
                        ],
                        [
                            "Mies Van Der Rohe"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM architect WHERE gender = 'F' ORDER BY name ASC"
            },
            {
                "isuser": true,
                "text": "List the name, nationality and id of all male architects ordered by their names lexicographically?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the results of  the name, nationality and id of all male architects ordered by their names lexicographically..",
                "query": "SELECT name , nationality , id FROM architect WHERE gender = 'male' ORDER BY name\n",
                "result": [
                    [
                        [
                            "name",
                            "nationality",
                            "id"
                        ],
                        [
                            "Frank Gehry",
                            "Canadian",
                            "2"
                        ],
                        [
                            "Frank Lloyd Wright",
                            "American",
                            "1"
                        ],
                        [
                            "Le Corbusier",
                            "Swiss, French",
                            "5"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name, nationality, id FROM architect WHERE gender = 'M' ORDER BY name ASC"
            }
        ]
    },
    {
        "db_name": "hr_1",
        "turns": [
            {
                "isuser": true,
                "text": "Display the first name of all employees. ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of the first names of all employees.",
                "query": "SELECT first_name FROM employees ",
                "result": [
                    [
                        [
                            "FIRST_NAME"
                        ],
                        [
                            "Steven"
                        ],
                        [
                            "Neena"
                        ],
                        [
                            "Lex"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name FROM employees"
            },
            {
                "isuser": true,
                "text": "Show the first name of all employees and their salary. ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a table of the first name and salary of all employees. For example, Steven has a salary of 24000.",
                "query": "SELECT first_name, salary FROM employees ",
                "result": [
                    [
                        [
                            "FIRST_NAME",
                            "SALARY"
                        ],
                        [
                            "Steven",
                            24000
                        ],
                        [
                            "Neena",
                            17000
                        ],
                        [
                            "Lex",
                            17000
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name ,  salary FROM employees"
            },
            {
                "isuser": true,
                "text": "Show the first name of all employees and their salary for employees whose first name does not contain the letter M. ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a table of the first name of all employees and their salary for employees whose first name does not contain the letter M. For example, Steven has a salary of 24000.",
                "query": "SELECT first_name,  salary FROM employees WHERE first_name NOT LIKE '%M%'",
                "result": [
                    [
                        [
                            "FIRST_NAME",
                            "SALARY"
                        ],
                        [
                            "Steven",
                            24000
                        ],
                        [
                            "Neena",
                            17000
                        ],
                        [
                            "Lex",
                            17000
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name ,  salary FROM employees WHERE first_name NOT LIKE '%M%'"
            },
            {
                "isuser": true,
                "text": "Show the first name of all employees and list their salary in descending order for employees whose first name does not contain the letter M. ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a table of the first name of all employees and their salary in descending for employees whose first name does not contain the letter M. For example, Steven has a salary of 24000.",
                "query": "SELECT first_name,  salary FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY salary DESC",
                "result": [
                    [
                        [
                            "FIRST_NAME",
                            "SALARY"
                        ],
                        [
                            "Steven",
                            24000
                        ],
                        [
                            "Neena",
                            17000
                        ],
                        [
                            "Lex",
                            17000
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name ,  salary FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY salary DESC"
            },
            {
                "isuser": true,
                "text": "Out of these employees what is the phone number for the employee with the highest salary.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The phone number for the employee whose first name does not contain the letter M with the highest salary is 515.123.4567.",
                "query": "SELECT phone_number FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY salary DESC LIMIT 1",
                "result": [
                    [
                        [
                            "PHONE_NUMBER"
                        ],
                        [
                            "515.123.4567"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT phone_number FROM employees WHERE salary = (SELECT MAX(salary) FROM employees)"
            },
            {
                "isuser": true,
                "text": "What is the email for the employee whose first name does not contain the letter M with the highest salary. ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The email for the employee whose first name does not contain the letter M with the highest salary is SKING.",
                "query": "SELECT email FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY salary DESC LIMIT 1",
                "result": [
                    [
                        [
                            "EMAIL"
                        ],
                        [
                            "SKING"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT email FROM employees WHERE salary = (SELECT MAX(salary) FROM employees WHERE first_name NOT LIKE '%M%')"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "wta_1",
        "turns": [
            {
                "isuser": true,
                "text": "What's the average age of all losers of all matches?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "27.31121386258453 is the average age of all losers of all matches.",
                "query": "SELECT avg(loser_age) FROM matches",
                "result": [
                    [
                        [
                            "avg(loser_age)"
                        ],
                        [
                            27.31121386258453
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(loser_age) FROM matches"
            },
            {
                "isuser": true,
                "text": "What's the average age of all winners of all matches?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "27.062177773183823 is the average age of all winners of all matches.",
                "query": "SELECT avg(loser_rank) FROM matches",
                "result": [
                    [
                        [
                            "avg(winner_age)"
                        ],
                        [
                            27.062177773183823
                        ]
                    ],
                    [
                        [
                            "avg(loser_rank)"
                        ],
                        [
                            15.97841726618705
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(winner_age) FROM matches"
            },
            {
                "isuser": true,
                "text": "What are the average minutes of all matches?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "98.78057553956835 is the average munites of all matches.",
                "query": "SELECT avg(minutes) FROM matches",
                "result": [
                    [
                        [
                            "avg(minutes)"
                        ],
                        [
                            98.78057553956835
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(minutes) FROM matches"
            },
            {
                "isuser": true,
                "text": "What was the longest match in minutes?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The longest match had 199 minutes.",
                "query": "SELECT max(minutes) FROM matches",
                "result": [
                    [
                        [
                            "max(minutes)"
                        ],
                        [
                            199
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT MAX(minutes) FROM matches"
            },
            {
                "isuser": true,
                "text": "What was the shortest match in minutes?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The shortest match had 0 minute.",
                "query": "SELECT min(minutes) FROM matches",
                "result": [
                    [
                        [
                            "min(minutes)"
                        ],
                        [
                            0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT MIN(minutes) FROM matches"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks. bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "browser_web",
        "turns": [
            {
                "isuser": true,
                "text": "what are the ids and names of the web accelerators that are compatible with two or more browsers?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the ids and names of the web accelerators that are compatible with two or more browsers",
                "query": "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
                "result": [
                    [
                        [
                            "id",
                            "name"
                        ],
                        [
                            1,
                            "CACHEbox"
                        ],
                        [
                            2,
                            "CProxy"
                        ],
                        [
                            3,
                            "Fasterfox"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.id ,  T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.accelerator_id GROUP BY T2.accelerator_id HAVING count(*)  >=  2"
            },
            {
                "isuser": true,
                "text": "what is the survery?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Please ask questions related to the tables. Thanks",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "I'm sorry, I don't understand what you mean by \"survey\". Could you please clarify?"
            },
            {
                "isuser": true,
                "text": "how many browser id?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 4 different browser ids",
                "query": "SELECT count(distinct browser_id) from accelerator_compatible_browser",
                "result": [
                    [
                        [
                            "count(distinct browser_id)"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM browser"
            },
            {
                "isuser": true,
                "text": "what is browser id 2 name?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry we don't have the information about the names of the browsers. ",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT name FROM browser WHERE id = 2"
            },
            {
                "isuser": true,
                "text": "what are using CProxy in Operating system?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The accelerator with name CProxy is used on the WIndows operating system.",
                "query": "SELECT operating_system from Web_client_accelerator where name = \"CProxy\"",
                "result": [
                    [
                        [
                            "Operating_system"
                        ],
                        [
                            "Windows"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.accelerator_id WHERE T1.Operating_system = \"CProxy\""
            },
            {
                "isuser": true,
                "text": "who is using Appliance (Linux) Operating system?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you want the name of the accelerator?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.accelerator_id WHERE T1.Operating_system = \"Appliance (Linux)\""
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the accelerator using Appliance (Linux) operating system is CACHEbox",
                "query": "SELECT name from Web_client_accelerator where operating_system = \"Appliance (Linux)\"",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "CACHEbox"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.accelerator_id WHERE T1.Operating_system = \"Appliance (Linux)\""
            },
            {
                "isuser": true,
                "text": "thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "insurance_and_eClaims",
        "turns": [
            {
                "isuser": true,
                "text": "Hi, can I see the list of customers?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of all customers.",
                "query": "Select * from customers",
                "result": [
                    [
                        [
                            "Customer_ID",
                            "Customer_Details"
                        ],
                        [
                            252,
                            "America Jaskolski"
                        ],
                        [
                            263,
                            "Ellsworth Paucek"
                        ],
                        [
                            334,
                            "Mrs. Hanna Willms"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_details FROM customers"
            },
            {
                "isuser": true,
                "text": "What customers have a policy?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is information about all the customers who have a policy.",
                "query": "SELECT t2.* FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id",
                "result": [
                    [
                        [
                            "Customer_ID",
                            "Customer_Details"
                        ],
                        [
                            808,
                            "Buddy Marquardt"
                        ],
                        [
                            380,
                            "Dr. Diana Rath"
                        ],
                        [
                            334,
                            "Mrs. Hanna Willms"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_details FROM customers WHERE customer_id IN (SELECT customer_id FROM policies)"
            },
            {
                "isuser": true,
                "text": "What customers don't have a policy?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the information about all the customers who don't have any policy.",
                "query": "SELECT * FROM customers EXCEPT SELECT t2.* FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id",
                "result": [
                    [
                        [
                            "Customer_ID",
                            "Customer_Details"
                        ],
                        [
                            263,
                            "Ellsworth Paucek"
                        ],
                        [
                            520,
                            "Sydnie Friesen"
                        ],
                        [
                            593,
                            "Mr. Edwardo Blanda I"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_details FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM policies)"
            },
            {
                "isuser": true,
                "text": "When did they get a policy?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Who are they?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT start_date FROM policies WHERE customer_id IN (SELECT customer_id FROM customers WHERE customer_details NOT LIKE '%John%')"
            },
            {
                "isuser": true,
                "text": "When did the policy holders get their policy?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are all the policies start dates.",
                "query": "select start_date from policies",
                "result": [
                    [
                        [
                            "Start_Date"
                        ],
                        [
                            "2018-02-10 08:56:30"
                        ],
                        [
                            "2017-12-20 06:02:31"
                        ],
                        [
                            "2017-03-16 18:16:52"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT start_date FROM policies WHERE customer_id IN (SELECT customer_id FROM customers WHERE customer_details LIKE '%John%')"
            },
            {
                "isuser": true,
                "text": "Did any policy holder cancel a policy?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry, we don't have that information.",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT start_date FROM policies WHERE customer_id IN (SELECT customer_id FROM customers WHERE customer_details LIKE '%John%') AND policy_type_code = 'Cancel'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "flight_2",
        "turns": [
            {
                "isuser": true,
                "text": "how many flights are landing in the city of aberdeen or abilene",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The count of  flights are landing in the city of aberdeen or abilene  is 0",
                "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  like  \"%Aberdeen%\" OR T2.city  like  \"%Abilene%\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\" OR T2.City  =  \"Abilene\""
            },
            {
                "isuser": true,
                "text": "what is the airport code for the city abilene",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "The airport codes for the city Abilene are shown  in the  table ",
                "query": "SELECT airportCode FROM  Airports  WHERE  city like \"%Abilene%\"",
                "result": [
                    [
                        [
                            "AirportCode"
                        ],
                        [
                            "DYS"
                        ],
                        [
                            "ABI"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AirportCode FROM airports WHERE City = \"Abilene\""
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome  and  goodbye ",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "city_record",
        "turns": [
            {
                "isuser": true,
                "text": "What is the largest population among the cities?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The largest population among the cities is 23019148.",
                "query": "SELECT regional_population FROM city ORDER BY Regional_Population DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Regional_Population"
                        ],
                        [
                            23019148
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT MAX(Regional_Population) FROM city"
            },
            {
                "isuser": true,
                "text": "Hmm, I want to know the name of the city with this population.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the city with the largest population among the cities is Shanghai.",
                "query": "SELECT city FROM city ORDER BY Regional_Population DESC LIMIT 1",
                "result": [
                    [
                        [
                            "City"
                        ],
                        [
                            "Shanghai"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT City FROM city WHERE Regional_Population = (SELECT MAX(Regional_Population) FROM city)"
            },
            {
                "isuser": true,
                "text": "What is the GDP of Shanghai?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The GDP of Shanghai is 1919.57.",
                "query": "SELECT GDP FROM city where city = \"Shanghai\" ",
                "result": [
                    [
                        [
                            "GDP"
                        ],
                        [
                            1919.57
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT GDP FROM city WHERE City = \"Shanghai\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, goodbye. ",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "riding_club",
        "turns": [
            {
                "isuser": true,
                "text": "can you show me  a list of starting year?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are all starting years.",
                "query": "SELECT Starting_year FROM player_coach",
                "result": [
                    [
                        [
                            "Starting_year"
                        ],
                        [
                            2010
                        ],
                        [
                            2011
                        ],
                        [
                            2012
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT Starting_year FROM player_coach"
            },
            {
                "isuser": true,
                "text": "can you show me which gender is much?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Could you clarify what you mean?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT Gender, COUNT(*) AS num_players FROM player WHERE Gender IN ('M', 'F') GROUP BY Gender ORDER BY num_players DESC"
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "What information do you want to know about each gender?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT Gender, COUNT(*) AS num_players FROM player WHERE Gender IN ('M', 'F') GROUP BY Gender ORDER BY num_players DESC"
            },
            {
                "isuser": true,
                "text": "which coach gender is much?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the coaches with gender \"M\"",
                "query": "SELECT Coach_name FROM coach WHERE Gender=\"M\"",
                "result": [
                    [
                        [
                            "Coach_name"
                        ],
                        [
                            "Jameson Tomas"
                        ],
                        [
                            "Robert Chen"
                        ],
                        [
                            "James Wong"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Gender, COUNT(*) AS num_players FROM coach WHERE Gender IN ('M', 'F') GROUP BY Gender ORDER BY num_players DESC"
            },
            {
                "isuser": true,
                "text": "can you show me a list of player's residence?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the list of player's residence.",
                "query": "SELECT Residence FROM player",
                "result": [
                    [
                        [
                            "Residence"
                        ],
                        [
                            "Brandon"
                        ],
                        [
                            "Winnipeg"
                        ],
                        [
                            "Thompson"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Residence FROM player WHERE Residence IN ('USA', 'CHN', 'JPN')"
            },
            {
                "isuser": true,
                "text": "Show the names and genders of players with a coach starting after 2011",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the names and genders of players with a coach starting after 2011.",
                "query": "SELECT T3.Player_name ,  T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T1.Starting_year  >  2011",
                "result": [
                    [
                        [
                            "Player_name",
                            "Gender"
                        ],
                        [
                            "Niki Ashton",
                            "F"
                        ],
                        [
                            "Ron Strynadka",
                            "M"
                        ],
                        [
                            "Ross Eadie",
                            "M"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Player_name ,  T2.Gender FROM player_coach AS T1 JOIN player AS T2 ON T1.Player_ID  =  T2.Player_ID WHERE T1.Starting_year  >  2011"
            }
        ]
    },
    {
        "db_name": "department_store",
        "turns": [
            {
                "isuser": true,
                "text": "Show me id of all departments.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table shows the ids of all the departments.",
                "query": "SELECT distinct department_id FROM staff_department_assignments ",
                "result": [
                    [
                        [
                            "department_id"
                        ],
                        [
                            4
                        ],
                        [
                            5
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT department_id FROM departments"
            },
            {
                "isuser": true,
                "text": "show me the number of staff of all departments.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table that shows the number of staffs in each department. For example, number of staff of department 1 is 2.",
                "query": "SELECT department_id,count(staff_id) FROM staff_department_assignments GROUP BY department_id ORDER BY count(*)",
                "result": [
                    [
                        [
                            "department_id",
                            "count(staff_id)"
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            3,
                            2
                        ],
                        [
                            4,
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM staff WHERE department_id IN (SELECT department_id FROM departments)"
            },
            {
                "isuser": true,
                "text": "show me the department with lowest staff",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The department with lowest staff is department with the department id '1'.",
                "query": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1",
                "result": [
                    [
                        [
                            "department_id"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT department_id FROM staff GROUP BY department_id ORDER BY count(*) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks.",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "ship_1",
        "turns": [
            {
                "isuser": true,
                "text": "Which flag is least widely used among all ships?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Malta is the flag that is least widely used among all ships.",
                "query": "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) LIMIT 1",
                "result": [
                    [
                        [
                            "Flag"
                        ],
                        [
                            "Malta"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "How many flags in this table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 9 flags in the ship table.",
                "query": "SELECT count(flag) FROM ship",
                "result": [
                    [
                        [
                            "count(flag)"
                        ],
                        [
                            9
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM ship"
            },
            {
                "isuser": true,
                "text": "How many built year same in this table?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "did you mean 'How many built year saved this table'?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT count(*) FROM ship GROUP BY Built_Year"
            },
            {
                "isuser": true,
                "text": "Yes.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 2 unique built years in the ship table.",
                "query": "SELECT count(distinct Built_Year) FROM ship",
                "result": [
                    [
                        [
                            "count(distinct Built_Year)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM ship WHERE built_year = 1800"
            },
            {
                "isuser": true,
                "text": "How many names in this table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 9 distinct names in the ship table.",
                "query": "SELECT count(distinct Name) FROM ship",
                "result": [
                    [
                        [
                            "count(distinct Name)"
                        ],
                        [
                            9
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM ship"
            },
            {
                "isuser": true,
                "text": "How many types in this table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is only one distinct type in the ship table.",
                "query": "SELECT count(distinct Type) FROM ship",
                "result": [
                    [
                        [
                            "count(distinct Type)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM ship"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "sakila_1",
        "turns": [
            {
                "isuser": true,
                "text": "Which staff handled payments?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is no staff who handled payments.",
                "query": "SELECT * FROM staff",
                "result": [
                    [
                        [
                            "staff_id",
                            "first_name",
                            "last_name",
                            "address_id",
                            "picture",
                            "email",
                            "store_id",
                            "active",
                            "username",
                            "password",
                            "last_update"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id"
            },
            {
                "isuser": true,
                "text": "What is the payment?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "I am not sure what you mean. Could you please clarify?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T1.amount FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id"
            },
            {
                "isuser": true,
                "text": "How do staff get paid?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry, I am not sure how the staff gets paid.",
                "query": "",
                "result": [],
                "predict_type": "SORRY",
                "predict": "SELECT T1.first_name ,  T1.last_name ,  T1.email FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Anything else you would like to know?",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "No Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Good bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "I apologize, I can't answer your question."
            }
        ]
    },
    {
        "db_name": "loan_1",
        "turns": [
            {
                "isuser": true,
                "text": "List names of customers with more than 1 loan\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Mary is the only name of customers who have more than one loan.",
                "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1",
                "result": [
                    [
                        [
                            "cust_name"
                        ],
                        [
                            "Mary"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING count(*) > 1"
            },
            {
                "isuser": true,
                "text": "How about those with only 1 loan?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Owen is the only name of customers who have only 1 loan.",
                "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  =  1",
                "result": [
                    [
                        [
                            "cust_name"
                        ],
                        [
                            "Owen"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING count(*) = 1"
            },
            {
                "isuser": true,
                "text": "How about those with no loans?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The table shows that there isn't anybody who have no loans.",
                "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  =  0",
                "result": [
                    [
                        [
                            "cust_name"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.cust_name FROM customer AS T1 LEFT JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE T2.cust_id IS NULL"
            },
            {
                "isuser": true,
                "text": "List the customers who have mortgages",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The customer with ID 1 have mortgages.",
                "query": "select loan_ID from loan where loan_type='Mortgages'",
                "result": [
                    [
                        [
                            "loan_ID"
                        ],
                        [
                            "1"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE T2.loan_type = \"Mortgage\""
            },
            {
                "isuser": true,
                "text": "What is their name?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of Mary have mortgages. ",
                "query": "\nSELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id where loan_type='Mortgages'",
                "result": [
                    [
                        [
                            "cust_name"
                        ],
                        [
                            "Mary"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE T2.loan_type = \"Mortgage\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "apartment_rentals",
        "turns": [
            {
                "isuser": true,
                "text": "Show me the addresses of the buildings.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are all the building addresses.",
                "query": "SELECT building_address FROM Apartment_Buildings",
                "result": [
                    [
                        [
                            "building_address"
                        ],
                        [
                            "7950 Casper Vista Apt. 176\nMarquiseberg, CA 70496"
                        ],
                        [
                            "354 Otto Villages\nCharliefort, VT 71664"
                        ],
                        [
                            "71537 Gorczany Inlet\nWisozkburgh, AL 08256"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT building_address FROM Apartment_Buildings"
            },
            {
                "isuser": true,
                "text": "Any of those have apartments with more than 1 bedrooms?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Sorry, do you want me to list apartments with more than 1 bedrooms?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT building_address FROM Apartment_Buildings WHERE building_id IN (SELECT building_id FROM Apartments GROUP BY building_id HAVING count(*)  >  1)"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the addresses of apartments with more than 1 bedrooms.",
                "query": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bedroom_count  >  1",
                "result": [
                    [
                        [
                            "building_address"
                        ],
                        [
                            "54686 Christopher Circles Apt. 321\nDaytonland, ID 88081-3991"
                        ],
                        [
                            "101 Queenie Mountains Suite 619\nNew Korbinmouth, KS 88726-1376"
                        ],
                        [
                            "0703 Danika Mountains Apt. 362\nMohrland, AL 56839-5028"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT building_address FROM Apartment_Buildings WHERE building_id IN (SELECT building_id FROM Apartments GROUP BY building_id HAVING count(*)  >  1)"
            },
            {
                "isuser": true,
                "text": "How about more than 2 bathrooms?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the addresses of apartments with more than 2 bathrooms.",
                "query": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2",
                "result": [
                    [
                        [
                            "building_address"
                        ],
                        [
                            "71537 Gorczany Inlet\nWisozkburgh, AL 08256"
                        ],
                        [
                            "489 Josh Orchard Apt. 998\nSipesview, DE 69053"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT building_address FROM Apartment_Buildings WHERE building_id IN (SELECT building_id FROM Apartments GROUP BY building_id HAVING count(*)  >  2)"
            },
            {
                "isuser": true,
                "text": "Thank you",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "baseball_1",
        "turns": [
            {
                "isuser": true,
                "text": "Who won the most manager award?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the first name of the person who won the most manager award?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T1.player_id ,  T1.award_id FROM manager_award AS T1 JOIN (SELECT award_id ,  COUNT(*) AS award_count FROM manager_award GROUP BY award_id) AS T2 ON T1.award_id  =  T2.award_id ORDER BY T2.award_count DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Yes, and tell me the last name and the id of that person as well.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Bobby Cox with ID coxbo01 was the person who won the most manager award.",
                "query": "SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1;",
                "result": [
                    [
                        [
                            "name_first",
                            "name_last",
                            "player_id"
                        ],
                        [
                            "Bobby",
                            "Cox",
                            "coxbo01"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.player_id ,  T1.award_id ,  T2.name_last FROM manager_award AS T1 JOIN player AS T2 ON T1.player_id  =  T2.player_id WHERE T1.award_id  =  'ALM' ORDER BY T2.name_last DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "bike_1",
        "turns": [
            {
                "isuser": true,
                "text": "What are the names of station with lowest lattitude?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of station with the lowest latitude is San Jose Diridon Caltrain Station.",
                "query": "SELECT name FROM station ORDER BY lat LIMIT 1",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "San Jose Diridon Caltrain Station"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM station ORDER BY lat ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the latitude of the station with the lowest latitude?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The lowest latitude of the all stations is 37.329732.",
                "query": "SELECT lat FROM station ORDER BY lat LIMIT 1",
                "result": [
                    [
                        [
                            "lat"
                        ],
                        [
                            37.329732
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT lat FROM station ORDER BY lat ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Which city is san jose diridon caltrain station located?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "San jose diridon caltrain station is located in the city of San Jose",
                "query": "SELECT city FROM station WHERE name = \"San Jose Diridon Caltrain Station\"",
                "result": [
                    [
                        [
                            "city"
                        ],
                        [
                            "San Jose"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT city FROM station WHERE name = \"San Jose Diridon Caltrain Station\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "No problem. Bye bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "perpetrator",
        "turns": [
            {
                "isuser": true,
                "text": "tell me the total number of injured in both china and japan\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the total number of injured in both China and Japan is 99 ",
                "query": "SELECT sum(injured) FROM perpetrator WHERE country = \"China\" OR country = \"Japan\"",
                "result": [
                    [
                        [
                            "sum(injured)"
                        ],
                        [
                            99
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT SUM(T1.Injured) FROM perpetrator AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\""
            },
            {
                "isuser": true,
                "text": "what is the rate of kill in south korea",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the kill number in South Korea is 56",
                "query": "SELECT Killed FROM perpetrator WHERE country = \"South Korea\"",
                "result": [
                    [
                        [
                            "Killed"
                        ],
                        [
                            56
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT (SUM(T1.Killed)/COUNT(T1.People_ID)) FROM perpetrator AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"South Korea\""
            },
            {
                "isuser": true,
                "text": "how many survied  entirely",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry, we don't have this information.",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT COUNT(*) FROM people WHERE Height  >  180"
            },
            {
                "isuser": true,
                "text": "what is the location of ID 3",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the perpetrator ID?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT Location FROM perpetrator WHERE People_ID = 3"
            },
            {
                "isuser": true,
                "text": "yes the prepetrator ID",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the location of perpetrator with an ID 3 is Kaio",
                "query": "SELECT location FROM perpetrator WHERE  Perpetrator_ID = \"3\"",
                "result": [
                    [
                        [
                            "Location"
                        ],
                        [
                            "Kaio"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT People_ID FROM perpetrator WHERE Location = \"South Korea\""
            },
            {
                "isuser": true,
                "text": "how many country in the prepetrator table and what are they",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "The number of countries in the perpetrator table is 4 and they are South Korea, China, Japan, and India.",
                "query": "SELECT distinct country FROM  perpetrator",
                "result": [
                    [
                        [
                            "Country"
                        ],
                        [
                            "South Korea"
                        ],
                        [
                            "China"
                        ],
                        [
                            "Japan"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(DISTINCT Country) ,  Country FROM perpetrator GROUP BY Country"
            },
            {
                "isuser": true,
                "text": "Thanks!\n",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "manufactory_1",
        "turns": [
            {
                "isuser": true,
                "text": "how many names or products in the table",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do  you  mean  the  names of products in the products table ",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT count(*) FROM products UNION SELECT count(*) FROM manufacturers"
            },
            {
                "isuser": true,
                "text": "how many headquarter in the Manufacturers table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The  count  of  headquarter in the Manufacturers table is  6 ",
                "query": "SELECT count(Headquarter) from Manufacturers",
                "result": [
                    [
                        [
                            "count(Headquarter)"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Manufacturers WHERE headquarter IS NOT NULL"
            },
            {
                "isuser": true,
                "text": "how many revenue in the Manufacturers table",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you  mean  the  sum of  revenue in the Manufacturers table ",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT count(*) FROM Manufacturers WHERE revenue IS NOT NULL"
            },
            {
                "isuser": true,
                "text": "what highest price in the Products table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the  max  price  in the Products table  is 270",
                "query": "SELECT max(Price) from Products",
                "result": [
                    [
                        [
                            "max(Price)"
                        ],
                        [
                            270
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(price) FROM Products"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Welcome and goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "tracking_orders",
        "turns": [
            {
                "isuser": true,
                "text": "Can I receive a list of all orders?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did  you mean the  order ID？\n",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT order_id FROM Orders"
            },
            {
                "isuser": true,
                "text": "Yes, from that list can I have it sorted by order ID?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did  you  mean  in the Order  table  order  by \norder id ? desc  or asc?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT order_id FROM Orders ORDER BY order_id ASC"
            },
            {
                "isuser": true,
                "text": "My apologies, I meant can I have list of orders which includes the product ids from the orders placed?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "OK ,The orders which includes the product ids from the orders placed are shown  in  the table ",
                "query": "SELECT T1.order_id ,T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id ",
                "result": [
                    [
                        [
                            "order_id",
                            "product_id"
                        ],
                        [
                            6,
                            4
                        ],
                        [
                            6,
                            15
                        ],
                        [
                            15,
                            12
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT order_id ,  product_id FROM Order_Items WHERE order_item_status  =  \"shipped\""
            },
            {
                "isuser": true,
                "text": "Can I also have the dates of the order included in the table?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "The ids, product ids, order placed dates of the orders are shown in the table.",
                "query": "SELECT T1.order_id ,T2.product_id,T1.date_order_placed FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id ",
                "result": [
                    [
                        [
                            "order_id",
                            "product_id",
                            "date_order_placed"
                        ],
                        [
                            6,
                            4,
                            "1975-12-23 15:59:43"
                        ],
                        [
                            6,
                            15,
                            "1975-12-23 15:59:43"
                        ],
                        [
                            15,
                            12,
                            "1971-05-10 01:54:18"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT order_id ,  product_id ,  date_order_placed FROM Order_Items WHERE order_item_status  =  \"shipped\""
            },
            {
                "isuser": true,
                "text": "Is it possible to narrow the results?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "how  to  narrow? could  give  more infor?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT order_id ,  product_id ,  date_order_placed FROM Order_Items WHERE order_item_status  =  \"shipped\" AND order_id IN (SELECT order_id FROM Orders WHERE order_status = \"shipped\")"
            },
            {
                "isuser": true,
                "text": "Yes, can I narrow the table based on the date order was placed?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did  you  mean  you just  want only \tdate order placed?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT order_id ,  product_id ,  date_order_placed FROM Order_Items WHERE order_item_status  =  \"shipped\" AND date_order_placed BETWEEN \"2019-07-01\" AND \"2019-07-31\""
            },
            {
                "isuser": true,
                "text": "No. Is it possible to only receive results from orders placed from 1975-01-01 to 1976-01-01?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The ids, product ids,order placed dates of the orders placed from 1975-01-01 to 1976-01-01 are shown  in the table",
                "query": "SELECT T1.order_id ,T2.product_id,T1.date_order_placed FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\"",
                "result": [
                    [
                        [
                            "order_id",
                            "product_id",
                            "date_order_placed"
                        ],
                        [
                            6,
                            4,
                            "1975-12-23 15:59:43"
                        ],
                        [
                            6,
                            15,
                            "1975-12-23 15:59:43"
                        ],
                        [
                            6,
                            11,
                            "1975-12-23 15:59:43"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT order_id ,  product_id ,  date_order_placed FROM Order_Items WHERE order_item_status  =  \"shipped\" AND date_order_placed BETWEEN \"1975-01-01\" AND \"1976-01-01\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome  and  bye ",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "hospital_1",
        "turns": [
            {
                "isuser": true,
                "text": "Which department has the least number of employees?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the information about the department with the least number of employees.",
                "query": "SELECT * FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1",
                "result": [
                    [
                        [
                            "DepartmentID",
                            "Name",
                            "Head",
                            "EmployeeID",
                            "Name",
                            "Position",
                            "SSN"
                        ],
                        [
                            1,
                            "General Medicine",
                            4,
                            4,
                            "Percival Cox",
                            "Senior Attending Physician",
                            444444444
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM department GROUP BY departmentID ORDER BY count(*) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the name of the department head of General Medicine?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the head of department General Medicine is Percival Cox.",
                "query": "SELECT T2.name FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID where T1.name='General Medicine'",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Percival Cox"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM department WHERE departmentID = 1"
            },
            {
                "isuser": true,
                "text": "Thank you!  What is Percival Cox's position?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Sure! The position of the physician named Percival Cox is Senior Attending Physician",
                "query": "select position from physician where name = \"Percival Cox\"",
                "result": [
                    [
                        [
                            "Position"
                        ],
                        [
                            "Senior Attending Physician"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT position FROM physician WHERE name = \"Percival Cox\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure! Anything else?",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "No.  Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Okay. Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "customers_and_invoices",
        "turns": [
            {
                "isuser": true,
                "text": "How many orders have more than two invoices?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of orders that have more than two invoices is 2.",
                "query": "SELECT COUNT(*) FROM (SELECT * FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2)",
                "result": [
                    [
                        [
                            "COUNT(*)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM orders WHERE order_id IN (SELECT order_id FROM invoices GROUP BY order_id HAVING count(*)  >  2)"
            },
            {
                "isuser": true,
                "text": "What are the order IDs and details?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the ids and details of orders which have more than 2 invoices.",
                "query": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2",
                "result": [
                    [
                        [
                            "order_id",
                            "order_details"
                        ],
                        [
                            3,
                            null
                        ],
                        [
                            9,
                            null
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT order_id ,  order_details FROM orders WHERE order_id IN (SELECT order_id FROM invoices GROUP BY order_id HAVING count(*)  >  2)"
            },
            {
                "isuser": true,
                "text": "What are the customer ID's for these orders?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the customer IDs for orders that have more than 2 invoices.",
                "query": "SELECT t2.customer_id FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2",
                "result": [
                    [
                        [
                            "customer_id"
                        ],
                        [
                            8
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_id FROM orders WHERE order_id IN (SELECT order_id FROM invoices GROUP BY order_id HAVING count(*)  >  2)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "local_govt_in_alabama",
        "turns": [
            {
                "isuser": true,
                "text": "how many participants on the table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 15 participants in total",
                "query": "SELECT COUNT(*) FROM Participants",
                "result": [
                    [
                        [
                            "COUNT(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Participants"
            },
            {
                "isuser": true,
                "text": "what is participant type code of karlee batz",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The participant type code for participant detail of karlee Batz is organizer.",
                "query": "SELECT \tParticipant_Type_Code FROM Participants WHERE Participant_Details = \"Karlee Batz\"",
                "result": [
                    [
                        [
                            "Participant_Type_Code"
                        ],
                        [
                            "Organizer"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Participant_Type_Code FROM Participants WHERE Participant_Details = \"karlee batz\""
            },
            {
                "isuser": true,
                "text": "what is most common participant type",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The most common participant type code of participants is participant",
                "query": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Participant_Type_Code"
                        ],
                        [
                            "Participant"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Participant_Type_Code, COUNT(*) AS count FROM Participants GROUP BY Participant_Type_Code ORDER BY count DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "what is the participant id in lupe deckow",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The participant id of the participant with participant detail of Lupe Deckow is 28. ",
                "query": "SELECT participant_id FROM participants WHERE Participant_Details = \"Lupe Deckow\"",
                "result": [
                    [
                        [
                            "Participant_ID"
                        ],
                        [
                            28
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Participant_ID FROM Participants WHERE Participant_Details = \"lupe deckow\""
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "No problem. bye bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "college_2",
        "turns": [
            {
                "isuser": true,
                "text": "Find the names of top 3 departments?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "What do you mean by top?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT dept_name FROM department GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3"
            },
            {
                "isuser": true,
                "text": "Top three departments that provide the largest amount of courses?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The Top three departments that provide the largest amount of courses are Cybernetics, Finance, and Psychology.",
                "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3",
                "result": [
                    [
                        [
                            "dept_name"
                        ],
                        [
                            "Cybernetics"
                        ],
                        [
                            "Finance"
                        ],
                        [
                            "Psychology"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3"
            },
            {
                "isuser": true,
                "text": "Find the names of top 3 departments that provide the lowest amount of courses?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The Top three departments that provide the lowest amount of courses are Marketing, Pol. Sci., Statistics.",
                "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*)  LIMIT 3",
                "result": [
                    [
                        [
                            "dept_name"
                        ],
                        [
                            "Marketing"
                        ],
                        [
                            "Pol. Sci."
                        ],
                        [
                            "Statistics"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) ASC LIMIT 3"
            },
            {
                "isuser": true,
                "text": "What is the average amount of courses that provided by top three departments?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the average amount of courses that provided by top three departments IS 15.666666666666666",
                "query": "select avg(amount) from (SELECT count(*) as amount  FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3)",
                "result": [
                    [
                        [
                            "avg(amount)"
                        ],
                        [
                            15.666666666666666
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(course_count) FROM (SELECT count(*) AS course_count FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3) AS subquery"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "yoU ARE WELCOME",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "dorm_1",
        "turns": [
            {
                "isuser": true,
                "text": "Please show me how many female students have the major 600",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 6 female students have the major 600",
                "query": "SELECT count(*) FROM student WHERE sex  =  'F' AND Major=600",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Student WHERE major = 600 AND sex = 'F'"
            },
            {
                "isuser": true,
                "text": "How many female students are there total?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 10 female students in total.",
                "query": "SELECT count(*) FROM student WHERE sex  =  'F'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            10
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Student WHERE sex = 'F'"
            },
            {
                "isuser": true,
                "text": "How many of these women are under 25 years old?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 9 female students who are are under 25 years olds.",
                "query": "SELECT count(*) FROM student WHERE sex = 'F' AND age < 25",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            9
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Student WHERE sex = 'F' AND age < 25"
            },
            {
                "isuser": true,
                "text": "Show me the ages of the 9 female students with ages under 25 years.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table that shows the ages of the 9 female students with ages under 25 years.",
                "query": "SELECT Age FROM student WHERE sex = 'F' AND age < 25",
                "result": [
                    [
                        [
                            "Age"
                        ],
                        [
                            18
                        ],
                        [
                            19
                        ],
                        [
                            21
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT age FROM Student WHERE sex = 'F' AND age < 25"
            },
            {
                "isuser": true,
                "text": "Of all the students under 25, how many are female?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 9 female students of all the students under 25.",
                "query": "SELECT count(*) FROM student WHERE sex = 'F' AND age < 25",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            9
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Student WHERE age < 25 AND sex = 'F'"
            },
            {
                "isuser": true,
                "text": "What are the names of the female students that are under 25?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table that shows the names of the female students that are under 25.",
                "query": "SELECT FName,LName FROM student WHERE sex = 'F' AND age < 25",
                "result": [
                    [
                        [
                            "Fname",
                            "LName"
                        ],
                        [
                            "Linda",
                            "Smith"
                        ],
                        [
                            "Tracy",
                            "Kim"
                        ],
                        [
                            "Shiela",
                            "Jones"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT fname FROM Student WHERE age < 25 AND sex = 'F'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "twitter_1",
        "turns": [
            {
                "isuser": true,
                "text": "List the names of 5 users followed by the largest number of other users.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of 5 users followed by the largest number of other users.",
                "query": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Tyler Swift"
                        ],
                        [
                            "Natalie Portman"
                        ],
                        [
                            "Black Widow\n"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM user_profiles WHERE uid IN (SELECT follower_id FROM follows GROUP BY follower_id ORDER BY count(*) DESC LIMIT 5)"
            },
            {
                "isuser": true,
                "text": "What is the email and followers of Iron Man?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the email and followers of Iron Man are ts@richest.com and 6662425.",
                "query": "SELECT email,followers FROM user_profiles where name = \"Iron Man\"",
                "result": [
                    [
                        [
                            "email",
                            "followers"
                        ],
                        [
                            "ts@richest.com",
                            6662425
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT email, followers FROM user_profiles WHERE uid = 2"
            },
            {
                "isuser": true,
                "text": "What name has the highest followers?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of user that has the most followers is Tyler Swift",
                "query": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Tyler Swift"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM user_profiles WHERE followers = (SELECT max(followers) FROM user_profiles)"
            },
            {
                "isuser": true,
                "text": "How many followers does Tyler Swift have?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of followers  that Tyler Swift has is 99999998",
                "query": "SELECT followers FROM user_profiles where name = \"Tyler Swift\"",
                "result": [
                    [
                        [
                            "followers"
                        ],
                        [
                            99999998
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT followers FROM user_profiles WHERE name = \"Tyler Swift\""
            },
            {
                "isuser": true,
                "text": "What is the email and partition id of Tyler Swift? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the email and partition id of Tyler Swift are ts@superstar.com and 10.",
                "query": "SELECT email,partitionid FROM user_profiles where name = \"Tyler Swift\"",
                "result": [
                    [
                        [
                            "email",
                            "partitionid"
                        ],
                        [
                            "ts@superstar.com\n",
                            10
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT email, partitionid FROM user_profiles WHERE name = \"Tyler Swift\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "insurance_and_eClaims",
        "turns": [
            {
                "isuser": true,
                "text": "How many claim stage ids in this table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 2 claim stage ids.",
                "query": "SELECT count(Claim_Stage_ID) from Claims_Processing_Stages",
                "result": [
                    [
                        [
                            "count(Claim_Stage_ID)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Claims_Processing_Stages"
            },
            {
                "isuser": true,
                "text": "How many different staff ids in this table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of different staff ids is 9.",
                "query": "SELECT count(distinct Staff_ID) from Claims_Processing",
                "result": [
                    [
                        [
                            "count(distinct Staff_ID)"
                        ],
                        [
                            9
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(DISTINCT staff_id) FROM Claims_Processing"
            },
            {
                "isuser": true,
                "text": "How many claim processing stages in this table?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "The number of different claim status names is 2.",
                "query": "select count(distinct claim_status_name) from Claims_Processing_Stages",
                "result": [
                    [
                        [
                            "count(distinct claim_status_name)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Claims_Processing_Stages"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Do you mean the number of different claim status' names in the table?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "Yes.",
                "type": "answerable"
            }
        ]
    },
    {
        "db_name": "party_host",
        "turns": [
            {
                "isuser": true,
                "text": "What are the names of the hosts that held parties with more than 20 hosts?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the host names for parties with number of hosts greater than 20 is Ed Davis",
                "query": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Ed Davis"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Name FROM party_host AS T1 JOIN host AS T2 ON T1.Host_ID  =  T2.Host_ID GROUP BY T1.Host_ID HAVING COUNT(*)  >  20"
            },
            {
                "isuser": true,
                "text": "What are the names of the hosts that held parties with the least number of hosts?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the name of the hosts that held parties with the least number of hosts is Kornel David",
                "query": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID order by T3.Number_of_hosts asc limit 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Kornel David"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Name FROM party_host AS T1 JOIN host AS T2 ON T1.Host_ID  =  T2.Host_ID GROUP BY T1.Host_ID ORDER BY COUNT(*) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the location of the party with the oldest host?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the location of the party with the oldest host is Heineken Music Hall Amsterdam",
                "query": "SELECT T3.location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID order by T2.age desc limit 1",
                "result": [
                    [
                        [
                            "Location"
                        ],
                        [
                            "Heineken Music Hall Amsterdam"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Location FROM party_host AS T1 JOIN host AS T2 ON T1.Host_ID  =  T2.Host_ID WHERE T2.Age = (SELECT MIN(Age) FROM host)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "entrepreneur",
        "turns": [
            {
                "isuser": true,
                "text": "Hi, could you please let me know the date of birth of the investors Simon Woodroffe and Peter Jones?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The table shows the date of birth of the investors Simon Woodroffe and Peter Jones.",
                "query": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\"",
                "result": [
                    [
                        [
                            "Date_of_Birth"
                        ],
                        [
                            "1972-02-06"
                        ],
                        [
                            "1981-11-21"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Date_of_Birth FROM people WHERE Name IN ('Simon Woodroffe', 'Peter Jones')"
            },
            {
                "isuser": true,
                "text": "That was really quick, thank you. Then can you please tell me how much money they requested, respectively?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "lol. You got me. The table shows the money requested of the investors Simon Woodroffe and Peter Jones.",
                "query": "SELECT Money_Requested from entrepreneur where \tInvestor = 'Simon Woodroffe' or Investor = 'Peter Jones'",
                "result": [
                    [
                        [
                            "Money_Requested"
                        ],
                        [
                            50000.0
                        ],
                        [
                            75000.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Money_Requested FROM entrepreneur WHERE Investor IN ('Simon Woodroffe', 'Peter Jones')"
            },
            {
                "isuser": true,
                "text": "haha I am sorry, Thanks again for your answer! :) Then could you please let me know which entrepreneur requested for the biggest amount of money?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This one is easy. The table shows the entrepreneur id that requested the greatest amount of money.",
                "query": "SELECT Entrepreneur_ID from entrepreneur order by \tMoney_Requested desc limit 1",
                "result": [
                    [
                        [
                            "Entrepreneur_ID"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Investor, Money_Requested FROM entrepreneur ORDER BY Money_Requested DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Glad that I didn't trouble you again :) Thank you, then could you please let me know the investor's name and company for the ID?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The table shows the entrepreneur ID, investor, and company of the entrepreneur who requested the greatest amount of money.",
                "query": "SELECT Entrepreneur_ID,Investor,Company from entrepreneur order by \tMoney_Requested desc limit 1",
                "result": [
                    [
                        [
                            "Entrepreneur_ID",
                            "Investor",
                            "Company"
                        ],
                        [
                            1,
                            "Duncan Bannatyne",
                            "Umbrolly"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Investor, Company FROM entrepreneur WHERE Entrepreneur_ID = 1"
            },
            {
                "isuser": true,
                "text": "That's great! Then this will be my last question, could you please let me know the height and weight of Duncan Bannatyne?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry the table doesn't tell us the  height and weight of Duncan Bannatyne.",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT Height, Weight FROM people WHERE Name = 'Duncan Bannatyne'"
            },
            {
                "isuser": true,
                "text": "Oops, I didn't expect that. It's fine, Thanks! I appreciate your help, hope you have a great day ahead :)",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are very very very nice! Have a good day~ Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome! I'm glad I could help. Have a great day!"
            }
        ]
    },
    {
        "db_name": "college_3",
        "turns": [
            {
                "isuser": false,
                "text": "Do you mean the average of all grade points?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable",
                "predict": "SELECT avg(gradepoint) FROM GRADECONVERSION"
            },
            {
                "isuser": true,
                "text": "List grade points by letter grade?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of the grade points by letter grade. For example, A has grade point 4.0.",
                "query": "SELECT gradepoint,lettergrade FROM GRADECONVERSION",
                "result": [
                    [
                        [
                            "gradepoint",
                            "lettergrade"
                        ],
                        [
                            4.0,
                            "A+"
                        ],
                        [
                            4.0,
                            "A"
                        ],
                        [
                            3.7,
                            "A-"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT lettergrade, gradepoint FROM GRADECONVERSION"
            },
            {
                "isuser": true,
                "text": "List max of each grade for all letter grades?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The max of grade points for all letter grades is 4.0",
                "query": "SELECT max(gradepoint) FROM GRADECONVERSION",
                "result": [
                    [
                        [
                            "max(gradepoint)"
                        ],
                        [
                            4.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(gradepoint) ,  lettergrade FROM GRADECONVERSION GROUP BY lettergrade"
            },
            {
                "isuser": true,
                "text": "The max for each letter grade?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the max grade points for each letter grade. For example, A has a max grade point of 4.0",
                "query": "SELECT LETTERGRADE, max(gradepoint) FROM GRADECONVERSION GROUP BY LETTERGRADE",
                "result": [
                    [
                        [
                            "lettergrade",
                            "max(gradepoint)"
                        ],
                        [
                            "A",
                            4.0
                        ],
                        [
                            "A+",
                            4.0
                        ],
                        [
                            "A-",
                            3.7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(gradepoint) ,  lettergrade FROM GRADECONVERSION GROUP BY lettergrade"
            },
            {
                "isuser": true,
                "text": "List the min grade point for each letter grade?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of min grade point for each letter grade. For example, A has a min grade point of 4.0",
                "query": "SELECT min(gradepoint), lettergrade FROM GRADECONVERSION group by lettergrade",
                "result": [
                    [
                        [
                            "min(gradepoint)",
                            "lettergrade"
                        ],
                        [
                            4.0,
                            "A"
                        ],
                        [
                            4.0,
                            "A+"
                        ],
                        [
                            3.7,
                            "A-"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT min(gradepoint) ,  lettergrade FROM GRADECONVERSION GROUP BY lettergrade"
            },
            {
                "isuser": true,
                "text": "Find the min grade point for all letter grade?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the min grade point for all letter grade is 0.0",
                "query": "SELECT min(gradepoint) FROM GRADECONVERSION ",
                "result": [
                    [
                        [
                            "min(gradepoint)"
                        ],
                        [
                            0.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT min(gradepoint) ,  lettergrade FROM GRADECONVERSION GROUP BY lettergrade"
            },
            {
                "isuser": true,
                "text": "Find the max and min grade point for all letter grade?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the max and min grade point for all letter grade are 4.0 and 0.0",
                "query": "SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION",
                "result": [
                    [
                        [
                            "max(gradepoint)",
                            "min(gradepoint)"
                        ],
                        [
                            4.0,
                            0.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(gradepoint) ,  min(gradepoint) ,  lettergrade FROM GRADECONVERSION GROUP BY lettergrade"
            },
            {
                "isuser": true,
                "text": "What of the median?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "I cannot find the median.",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT median(gradepoint) ,  lettergrade FROM GRADECONVERSION GROUP BY lettergrade"
            },
            {
                "isuser": true,
                "text": "What of the mean?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "the mean for all grade points is 2.2846153846153845",
                "query": "SELECT avg(gradepoint)  FROM GRADECONVERSION",
                "result": [
                    [
                        [
                            "avg(gradepoint)"
                        ],
                        [
                            2.2846153846153845
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(gradepoint) ,  lettergrade FROM GRADECONVERSION GROUP BY lettergrade"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "college_1",
        "turns": [
            {
                "isuser": true,
                "text": "What is the first name of each student entrolled in class ACCT-211?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The first names of each student enrolled in class ACCT-211 are William and Anne.",
                "query": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211'",
                "result": [
                    [
                        [
                            "STU_FNAME"
                        ],
                        [
                            "William"
                        ],
                        [
                            "Anne"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.class_code  =  'ACCT-211'"
            },
            {
                "isuser": true,
                "text": "How many class sections?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 3 class sections.",
                "query": "SELECT COUNT(DISTINCT CLASS_SECTION) FROM CLASS ",
                "result": [
                    [
                        [
                            "COUNT(DISTINCT CLASS_SECTION)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM CLASS"
            },
            {
                "isuser": true,
                "text": "What is the class time of ACCT-211?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "There are multiple class times for ACCT-211, would you like all of them?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT CLASS_TIME FROM CLASS WHERE CLASS_CODE = 'ACCT-211'"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The class times for ACCT-211 are MWF 8:00-8:50 a.m., MWF 9:00-9:50 a.m., and TTh 2:30-3:45 p.m..",
                "query": "SELECT CLASS_TIME FROM CLASS WHERE CRS_CODE = \"ACCT-211\"",
                "result": [
                    [
                        [
                            "CLASS_TIME"
                        ],
                        [
                            "MWF 8:00-8:50 a.m."
                        ],
                        [
                            "MWF 9:00-9:50 a.m."
                        ],
                        [
                            "TTh 2:30-3:45 p.m."
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT CLASS_TIME FROM CLASS WHERE CLASS_CODE = 'ACCT-211'"
            },
            {
                "isuser": true,
                "text": "Thanks",
                "type": "improper"
            }
        ]
    },
    {
        "db_name": "manufactory_1",
        "turns": [
            {
                "isuser": true,
                "text": "Can you list all companies based in Austin and their revenues?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The company based in Austin and their revenues is Creative Labs and its revenue is 100.0",
                "query": "select Name,Revenue from Manufacturers where Headquarter='Austin'",
                "result": [
                    [
                        [
                            "Name",
                            "Revenue"
                        ],
                        [
                            "Creative Labs",
                            100.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name ,  revenue FROM manufacturers WHERE headquarter  =  \"Austin\""
            },
            {
                "isuser": true,
                "text": "Can you list all companies whose revenue is less than 100?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Yes, the companies whose revenue is less than 100 are Hewlett-Packard and Winchester.",
                "query": "select Name from Manufacturers where Revenue<100",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Hewlett-Packard"
                        ],
                        [
                            "Winchester"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name ,  revenue FROM manufacturers WHERE revenue  <  100"
            },
            {
                "isuser": true,
                "text": "Thanks! What is the respective revenues of Hewlett-Packard and Winchester?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "As you can see,  the respective revenues of Hewlett-Packard and Winchester are 50.0 and 30.0",
                "query": "select Name,Revenue from Manufacturers where Revenue<100",
                "result": [
                    [
                        [
                            "Name",
                            "Revenue"
                        ],
                        [
                            "Hewlett-Packard",
                            50.0
                        ],
                        [
                            "Winchester",
                            30.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT revenue FROM manufacturers WHERE name = \"Hewlett-Packard\" OR name = \"Winchester\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "game_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many hours per week did David Shieber play?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the total hours per week did David Shieber play? (He can play different sports)",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT HoursPerWeek FROM SportsInfo WHERE StuID = 2"
            },
            {
                "isuser": true,
                "text": "Yes, total hours",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the student with the full name David Shieber played 15  hours per week in total",
                "query": "SELECT sum(hoursperweek)  FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.Fname  =  \"David\" AND T2.Lname  =  \"Shieber\"",
                "result": [
                    [
                        [
                            "sum(hoursperweek)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT SUM(HoursPerWeek) FROM SportsInfo"
            },
            {
                "isuser": true,
                "text": "What are the total number of games he played?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The student with the full name David Shieber played 64 games in total",
                "query": "SELECT sum(GamesPlayed)  FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.Fname  =  \"David\" AND T2.Lname  =  \"Shieber\"",
                "result": [
                    [
                        [
                            "sum(GamesPlayed)"
                        ],
                        [
                            64
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT SUM(GamesPlayed) FROM SportsInfo WHERE StuID = 2"
            },
            {
                "isuser": true,
                "text": "What are the first and last names of the student who played the most total hours per week?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the first and last names of the student who played the most total hours per week is Sarah Schmidt",
                "query": "SELECT Fname, Lname from student where stuid = (select stuid from sportsinfo group by stuid order by sum(hoursperweek) desc limit 1)",
                "result": [
                    [
                        [
                            "Fname",
                            "LName"
                        ],
                        [
                            "Sarah",
                            "Schmidt"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Fname, LName FROM SportsInfo WHERE HoursPerWeek = (SELECT MAX(HoursPerWeek) FROM SportsInfo)"
            },
            {
                "isuser": true,
                "text": "How many total games did she play?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the student who played the most total hours per week  played 94 games in total",
                "query": "select sum(Gamesplayed) from sportsinfo group by stuid order by sum(hoursperweek) desc limit 1",
                "result": [
                    [
                        [
                            "sum(Gamesplayed)"
                        ],
                        [
                            94
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT SUM(GamesPlayed) FROM SportsInfo WHERE StuID = 2"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "thank you! Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "university_basketball",
        "turns": [
            {
                "isuser": true,
                "text": "Hi, when was the University of Delaware founded?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Hi! The University of Delaware was founded in 1743",
                "query": "SELECT founded FROM university WHERE school='University of Delaware'",
                "result": [
                    [
                        [
                            "Founded"
                        ],
                        [
                            1743.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT founded FROM university WHERE school = \"University of Delaware\""
            },
            {
                "isuser": true,
                "text": "and Lebanon Valley College?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Lebanon Valley College was founded in 1866.0",
                "query": "SELECT founded FROM university WHERE school='Lebanon Valley College'",
                "result": [
                    [
                        [
                            "Founded"
                        ],
                        [
                            1866.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT founded FROM university WHERE school = \"Lebanon Valley College\""
            },
            {
                "isuser": true,
                "text": "What is University of Rhode Island's affiliation?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The University of Rhode Island's affiliation is public.",
                "query": "SELECT Affiliation FROM university WHERE school='University of Rhode Island'",
                "result": [
                    [
                        [
                            "Affiliation"
                        ],
                        [
                            "Public"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT affiliation FROM university WHERE school = \"University of Rhode Island\""
            },
            {
                "isuser": true,
                "text": "How many female students attend Lebanon Valley College?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry, I cannot answer this.",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "Sorry, I don't have access to information about gender or student enrollment."
            },
            {
                "isuser": true,
                "text": "ok. Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "OK. Bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "match_season",
        "turns": [
            {
                "isuser": true,
                "text": "Tell me the Draft Class for the season 1996.0 ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the Draft Class for the season 1996.0 is 1996 MLS College Draft",
                "query": "SELECT Draft_Class from match_season WHERE season = 1996.0",
                "result": [
                    [
                        [
                            "Draft_Class"
                        ],
                        [
                            "1996 MLS College Draft"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Draft_Class FROM match_season WHERE Season = 1996.0"
            },
            {
                "isuser": true,
                "text": "Tell me the Draft Pick Number for the country 6 ?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "For which season do you want?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT Draft_Pick_Number FROM match_season WHERE Country = 6"
            },
            {
                "isuser": true,
                "text": "for 1998.0",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is no result.",
                "query": "SELECT Draft_Pick_Number from match_season WHERE season = \"1998.0\" AND country = \"6\"",
                "result": [
                    [
                        [
                            "Draft_Pick_Number"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Draft_Pick_Number FROM match_season WHERE Season = 1998.0"
            },
            {
                "isuser": true,
                "text": "Tell me the player for team 1 in the season 1996 ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the player for team 1 in the season 1996 is Steve Ralston Category:Articles with hCards",
                "query": "SELECT player from match_season WHERE season = \"1996.0\" AND team = \"1\"",
                "result": [
                    [
                        [
                            "Player"
                        ],
                        [
                            "Steve Ralston Category:Articles with hCards"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Player FROM match_season WHERE Team = 1 AND Season = 1996"
            },
            {
                "isuser": true,
                "text": "Which college have both players with position midfielder and players with position defender ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Maryland is the school that has both players with position midfielder and players with position defender.",
                "query": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\"",
                "result": [
                    [
                        [
                            "College"
                        ],
                        [
                            "Maryland"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "hr_1",
        "turns": [
            {
                "isuser": true,
                "text": "WHAT IS THE DEPARTMENT id OF CLARA",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "* I have left the chat *",
                "query": "SELECT DEPARTMENT_ID FROM employees WHERE first_name  =  \"Clara\"",
                "result": [
                    [
                        [
                            "DEPARTMENT_ID"
                        ],
                        [
                            80
                        ]
                    ]
                ],
                "predict_type": "INFER_SQL",
                "predict": "SELECT department_id FROM employees WHERE first_name = 'Clara'"
            },
            {
                "isuser": true,
                "text": " HIRE  DATE FOR ALL THESE EMPLOYEES",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "The table shows the hire dates of the employees.",
                "query": "SELECT HIRE_DATE FROM employees",
                "result": [
                    [
                        [
                            "HIRE_DATE"
                        ],
                        [
                            "1987-06-17"
                        ],
                        [
                            "1987-06-18"
                        ],
                        [
                            "1987-06-19"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT hire_date FROM employees WHERE employee_id IN (SELECT employee_id FROM job_history WHERE department_id = 2)"
            },
            {
                "isuser": true,
                "text": "THANKS\n",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "museum_visit",
        "turns": [
            {
                "isuser": true,
                "text": "what are the name of the museums?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names of the museums are in the result table. ",
                "query": "SELECT name from museum",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Plaza Museum"
                        ],
                        [
                            "Capital Plaza Museum"
                        ],
                        [
                            "Jefferson Development Museum"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM museum"
            },
            {
                "isuser": true,
                "text": "which museums are visited the most?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "The name of the museum that was visited the most is in the result table.",
                "query": "SELECT t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Capital Plaza Museum"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM museum ORDER BY num_of_staff DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "can i have the id and name of the museum?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "The id and name of the museum that was visited the most are in the result table. ",
                "query": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Museum_ID",
                            "Name"
                        ],
                        [
                            2,
                            "Capital Plaza Museum"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, good bye. ",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "riding_club",
        "turns": [
            {
                "isuser": true,
                "text": "What are the residences of the players?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The following table shows the residence of all players.",
                "query": "SELECT Residence FROM player ",
                "result": [
                    [
                        [
                            "Residence"
                        ],
                        [
                            "Brandon"
                        ],
                        [
                            "Winnipeg"
                        ],
                        [
                            "Thompson"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Residence FROM player"
            },
            {
                "isuser": true,
                "text": "Which of those residences have both male and female players?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Winnipeg is the residence with both male and female players",
                "query": "SELECT Residence FROM player where gender = \"M\" intersect SELECT Residence FROM player where gender = \"F\"",
                "result": [
                    [
                        [
                            "Residence"
                        ],
                        [
                            "Winnipeg"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Residence FROM player WHERE gender  =  'M' INTERSECT SELECT Residence FROM player WHERE gender  =  'F'"
            },
            {
                "isuser": true,
                "text": "How many male players does Winnipeg have?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are six male players with residence in Winnipeg.",
                "query": "SELECT count(*) FROM player where gender = \"M\" and residence = \"Winnipeg\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM player WHERE Residence  =  'Winnipeg' AND Gender  =  'M'"
            },
            {
                "isuser": true,
                "text": "How many female players does Winnipeg have?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are three female players with residence in Winnipeg.",
                "query": "SELECT count(*) FROM player where gender = \"F\" and residence = \"Winnipeg\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM player WHERE Residence  =  'Winnipeg' AND Gender  =  'F'"
            },
            {
                "isuser": true,
                "text": "How many residences are there in total?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are six distinct residences",
                "query": "SELECT count(distinct residence) FROM player ",
                "result": [
                    [
                        [
                            "count(distinct residence)"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(DISTINCT Residence) FROM player"
            },
            {
                "isuser": true,
                "text": "And how many of those six distinct residences have More than one player?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are one residence with more than one player.",
                "query": "select count(*) from (SELECT * FROM player GROUP BY Residence HAVING COUNT(*) > 1)",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(DISTINCT Residence) FROM player WHERE Residence IN (SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*)  >  1)"
            },
            {
                "isuser": true,
                "text": "Which residence is the one with more than one player?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Winnipeg is the residence with more than one player.",
                "query": "SELECT residence FROM player GROUP BY Residence HAVING COUNT(*) > 1",
                "result": [
                    [
                        [
                            "Residence"
                        ],
                        [
                            "Winnipeg"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*)  >  1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "candidate_poll",
        "turns": [
            {
                "isuser": true,
                "text": "Can you show me the top three highest support rates for the candidates?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The top three highest support rates for candidates are as follows.",
                "query": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
                "result": [
                    [
                        [
                            "Support_rate"
                        ],
                        [
                            0.33
                        ],
                        [
                            0.25
                        ],
                        [
                            0.24
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3"
            },
            {
                "isuser": true,
                "text": "What polls are those from?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you want the poll source for these polls?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT Poll_Source FROM candidate ORDER BY support_rate DESC LIMIT 3"
            },
            {
                "isuser": true,
                "text": "Yes, please",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the poll sources and top three highest support rates.",
                "query": "SELECT Poll_Source, Support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
                "result": [
                    [
                        [
                            "Poll_Source",
                            "Support_rate"
                        ],
                        [
                            "Newsweek Poll",
                            0.33
                        ],
                        [
                            "WNBC/Marist Poll",
                            0.25
                        ],
                        [
                            "Newsweek Poll",
                            0.24
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Poll_Source FROM candidate ORDER BY support_rate DESC LIMIT 3"
            },
            {
                "isuser": true,
                "text": "What is the name of the poll source with the earliest date?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Newsweek Poll is the poll source with the earliest date.",
                "query": "SELECT Poll_Source FROM candidate ORDER BY Date DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Poll_Source"
                        ],
                        [
                            "Newsweek Poll"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Poll_Source FROM candidate ORDER BY Date ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Good bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "roller_coaster",
        "turns": [
            {
                "isuser": true,
                "text": "How many countries have roller coaster?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are 3 countries that have a roller coaster. ",
                "query": "SELECT count(distinct T1.Name) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID",
                "result": [
                    [
                        [
                            "count(distinct T1.Name)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM country WHERE Country_ID IN (SELECT Country_ID FROM roller_coaster)"
            },
            {
                "isuser": true,
                "text": "How many countries have more than one roller coaster?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 2 countries that have more than one roller coaster. ",
                "query": "select count(*) from (SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1)",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM country WHERE Country_ID IN (SELECT Country_ID FROM roller_coaster GROUP BY Country_ID HAVING COUNT(*) > 1)"
            },
            {
                "isuser": true,
                "text": "Show the names of the countries that have more than one roller coaster.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names of the countries have more than one roller coasters are Austria and Finland.",
                "query": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Austria"
                        ],
                        [
                            "Finland"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name HAVING COUNT(*) > 1"
            },
            {
                "isuser": true,
                "text": "Show the number of roller coasters of Australia and Finland.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The result table shows the number of roller coasters in countries Australia and Finland.",
                "query": "SELECT T1.Name,count(*) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
                "result": [
                    [
                        [
                            "Name",
                            "count(*)"
                        ],
                        [
                            "Austria",
                            3
                        ],
                        [
                            "Finland",
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM roller_coaster WHERE Country_ID = 2 OR Country_ID = 4"
            },
            {
                "isuser": true,
                "text": "Show the names of roller coasters of Australia and Finland in separate table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The result table shows the names of roller coasters in countries Australia and Finland.",
                "query": "SELECT T2.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID where T1.Name = 'Austria' or T1.Name = 'Finland'",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Boardwalk Bullet"
                        ],
                        [
                            "Dauling Dragon"
                        ],
                        [
                            "Hades 360"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID WHERE T1.Country_ID = 2 OR T1.Country_ID = 4"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome, goodbye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "baseball_1",
        "turns": [
            {
                "isuser": true,
                "text": "Show me the attendance of the team_id CH1?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The attendance of the team id CH1 is listed.",
                "query": "SELECT attendance FROM home_game where team_id = 'CH1'",
                "result": [
                    [
                        [
                            "attendance"
                        ],
                        [
                            85500
                        ],
                        [
                            600
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT attendance FROM team WHERE team_id = 'CH1'"
            },
            {
                "isuser": true,
                "text": "Show me the id of the team that has the largest average number of attendance in 2014?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The id of the team that has the largest average number of attendance in 2014 is LAN.",
                "query": "SELECT T2.team_id FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id WHERE T1.year  =  2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1;",
                "result": [
                    [
                        [
                            "team_id"
                        ],
                        [
                            "LAN"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT team_id FROM team WHERE year = 2014 GROUP BY team_id ORDER BY avg(attendance) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Show me the team_id with attendance 3000?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The team ids with attendance 3000 are listed.",
                "query": "SELECT team_id FROM home_game where attendance = 3000",
                "result": [
                    [
                        [
                            "team_id"
                        ],
                        [
                            "BS1"
                        ],
                        [
                            "CHN"
                        ],
                        [
                            "LS2"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT team_id FROM team WHERE attendance = 3000"
            },
            {
                "isuser": true,
                "text": "Show me the rank of the team that has the largest average number of attendance?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The rank of the team that has the largest average number of attendance is 6.",
                "query": "SELECT  T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id  GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1;",
                "result": [
                    [
                        [
                            "rank"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT rank FROM team WHERE year = 2014 GROUP BY rank ORDER BY avg(attendance) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Bye.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "behavior_monitoring",
        "turns": [
            {
                "isuser": true,
                "text": "What is the highest average monthly rental?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "what do you mean by \"highest average monthly rental\"",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT max(avg_monthly_rental) FROM (SELECT student_id, avg(monthly_rental) AS avg_monthly_rental FROM Student_Addresses GROUP BY student_id)"
            },
            {
                "isuser": true,
                "text": "sorry, highest monthly rental",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The highest monthly rental is 1297.807",
                "query": "select max(monthly_rental) from student_addresses",
                "result": [
                    [
                        [
                            "max(monthly_rental)"
                        ],
                        [
                            1297.807
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(avg_monthly_rental) FROM (SELECT student_id, avg(monthly_rental) AS avg_monthly_rental FROM Student_Addresses GROUP BY student_id)"
            },
            {
                "isuser": true,
                "text": "What is the address ID of that rental?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The address ID of the student address with the highest monthly rental is 16",
                "query": "select address_id from student_addresses order by monthly_rental desc limit 1",
                "result": [
                    [
                        [
                            "address_id"
                        ],
                        [
                            16
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT address_id FROM Student_Addresses WHERE student_id = 1 AND date_address_to = (SELECT max(date_address_to) FROM Student_Addresses WHERE student_id = 1)"
            },
            {
                "isuser": true,
                "text": "What is the city of that address?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The city of the place with the highest monthly rental is Tressamouth",
                "query": "SELECT T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id ORDER BY monthly_rental DESC LIMIT 1",
                "result": [
                    [
                        [
                            "city"
                        ],
                        [
                            "Tressamouth"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT city FROM Addresses WHERE address_id = (SELECT address_id FROM Student_Addresses WHERE student_id = 1 AND date_address_to = (SELECT max(date_address_to) FROM Student_Addresses WHERE student_id = 1))"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "flight_4",
        "turns": [
            {
                "isuser": true,
                "text": "What is the name of the airport in Mount Hagen city?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the airport in the city named Mount Hagen is Mount Hagen Kagamuga Airport.",
                "query": "SELECT name from airports where city ='Mount Hagen'",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Mount Hagen Kagamuga Airport"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM airports WHERE city = \"Mount Hagen\""
            },
            {
                "isuser": true,
                "text": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of routes with destination airport in Italy operated by the airline with name 'American Airlines' is 13.",
                "query": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            13
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country = \"Italy\") AND alid IN (SELECT alid FROM airlines WHERE name = \"American Airlines\")"
            },
            {
                "isuser": true,
                "text": "How many active airlines are on the list?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of active airlines on the list is 1255.",
                "query": "SELECT count(*) from airlines where active = 'Y'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            1255
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM airlines WHERE active = \"Y\""
            },
            {
                "isuser": true,
                "text": "What is the elevation of Madang Airport airport?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The elevation of the airport named Madang Airport is 20.",
                "query": "SELECT elevation from airports where name = 'Madang Airport'",
                "result": [
                    [
                        [
                            "elevation"
                        ],
                        [
                            20
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT elevation FROM airports WHERE name = \"Madang Airport\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "dorm_1",
        "turns": [
            {
                "isuser": true,
                "text": "Oh, sorry. I meant to ask what dorm does the student with the last name of Smith live in?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the dorms that  has student with the last name of Smith living in",
                "query": "SELECT T1.dorm_name FROM dorm AS T1 JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'",
                "result": [
                    [
                        [
                            "dorm_name"
                        ],
                        [
                            "Anonymous Donor Hall"
                        ],
                        [
                            "Smith Hall"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT dorm_name FROM Dorm AS T1 JOIN Lives_in AS T2 ON T1.dormid = T2.dormid WHERE T2.stuid = 1002"
            },
            {
                "isuser": true,
                "text": "What are the amenities of those dorms?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the amenities of the dorm that  has student with the last name of Smith living in",
                "query": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid JOIN lives_in AS T4 ON T4.dormid = T1.dormid JOIN student AS T5 ON T5.stuid = T4.stuid WHERE T5.lname = 'Smith'",
                "result": [
                    [
                        [
                            "amenity_name"
                        ],
                        [
                            "TV Lounge"
                        ],
                        [
                            "Study Room"
                        ],
                        [
                            "Carpeted Rooms"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.amenity_name FROM Dorm_amenity AS T1 JOIN Has_amenity AS T2 ON T1.amenid = T2.amenid JOIN Dorm AS T3 ON T2.dormid = T3.dormid WHERE T3.dorm_name = \"King's\""
            },
            {
                "isuser": true,
                "text": "What are the amenities of the dorm that the student with the last name of Jones lives in?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the amenities of the dorm that the student with the last name of Jones lives in",
                "query": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid JOIN lives_in AS T4 ON T4.dormid = T1.dormid JOIN student AS T5 ON T5.stuid = T4.stuid WHERE T5.lname = 'Jones'",
                "result": [
                    [
                        [
                            "amenity_name"
                        ],
                        [
                            "Study Room"
                        ],
                        [
                            "Carpeted Rooms"
                        ],
                        [
                            "4 Walls"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.amenity_name FROM Dorm_amenity AS T1 JOIN Has_amenity AS T2 ON T1.amenid = T2.amenid JOIN Dorm AS T3 ON T2.dormid = T3.dormid WHERE T3.dorm_name = \"King's\" AND T3.dormid IN (SELECT T4.dormid FROM Lives_in AS T4 WHERE T4.stuid = 1003)"
            },
            {
                "isuser": true,
                "text": "What are the amenities of the dorm that the oldest student lives in?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the amenities of the dorm that student with the largest age lives in",
                "query": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid JOIN lives_in AS T4 ON T4.dormid = T1.dormid JOIN student AS T5 ON T5.stuid = T4.stuid WHERE T5.age = (select max(age) from student)",
                "result": [
                    [
                        [
                            "amenity_name"
                        ],
                        [
                            "TV Lounge"
                        ],
                        [
                            "Pub in Basement"
                        ],
                        [
                            "4 Walls"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.amenity_name FROM Dorm_amenity AS T1 JOIN Has_amenity AS T2 ON T1.amenid = T2.amenid JOIN Dorm AS T3 ON T2.dormid = T3.dormid WHERE T3.dorm_name = \"King's\" AND T3.dormid IN (SELECT T4.dormid FROM Lives_in AS T4 WHERE T4.stuid IN (SELECT T5.stuid FROM Student AS T5 WHERE T5.age = (SELECT MAX(age) FROM Student)))"
            },
            {
                "isuser": true,
                "text": "What are the amenities of the dorm that has the most female students living in it?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the amenities of the dorm that has the most female students living in it",
                "query": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid JOIN lives_in AS T4 ON T4.dormid = T1.dormid JOIN student AS T5 ON T5.stuid = T4.stuid WHERE T1.dormid = (select T1.dormid from dorm as T1 join lives_in as T4 on T1.dormid = T4.dormid join student as T5 on T4.stuid = T5.stuid where T5.sex = \"F\" group by T1.dormid order by count(*) desc limit 1)",
                "result": [
                    [
                        [
                            "amenity_name"
                        ],
                        [
                            "Study Room"
                        ],
                        [
                            "Carpeted Rooms"
                        ],
                        [
                            "4 Walls"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.amenity_name FROM Dorm_amenity AS T1 JOIN Has_amenity AS T2 ON T1.amenid = T2.amenid JOIN Dorm AS T3 ON T2.dormid = T3.dormid WHERE T3.dorm_name = \"King's\" AND T3.dormid IN (SELECT T4.dormid FROM Lives_in AS T4 WHERE T4.gender = \"Female\")"
            },
            {
                "isuser": true,
                "text": "What are the amenities of the dorm that has the smallest student capacity?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the amenities of the dorm that has the smallest student capacity",
                "query": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid jOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid where T1.student_capacity = (select min(student_capacity) from dorm)",
                "result": [
                    [
                        [
                            "amenity_name"
                        ],
                        [
                            "Roof"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.amenity_name FROM Dorm_amenity AS T1 JOIN Has_amenity AS T2 ON T1.amenid = T2.amenid JOIN Dorm AS T3 ON T2.dormid = T3.dormid WHERE T3.dorm_name = \"King's\" AND T3.student_capacity = (SELECT MIN(student_capacity) FROM Dorm)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "student_assessment",
        "turns": [
            {
                "isuser": true,
                "text": "Please list all IDs of students who have registered courses",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "this shows all ids of students who have registered courses",
                "query": "SELECT student_id FROM student_course_registrations ",
                "result": [
                    [
                        [
                            "student_id"
                        ],
                        [
                            111
                        ],
                        [
                            121
                        ],
                        [
                            121
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT student_id FROM Student_Course_Registrations"
            },
            {
                "isuser": true,
                "text": "are these current registrations?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "some of them are  current registrations",
                "query": "SELECT t1.student_id, t1.registration_date, t2.date_of_attendance\n FROM student_course_registrations as t1 join\n student_course_attendance as t2 on t1.student_id=t2.student_id and t1.course_id=t2.course_id",
                "result": [
                    [
                        [
                            "student_id",
                            "registration_date",
                            "date_of_attendance"
                        ],
                        [
                            111,
                            "2008-11-04 10:35:13",
                            "2008-11-04 10:35:13"
                        ],
                        [
                            121,
                            "2008-10-04 10:35:13",
                            "2012-04-09 11:44:34"
                        ],
                        [
                            121,
                            "2008-11-14 10:35:13",
                            "2014-04-09 11:44:34"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "Do you want to know the student IDs of students who have registered courses but not attended any courses?"
            },
            {
                "isuser": true,
                "text": "how many total students is that?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are 7 different students in total who have registered courses",
                "query": "select count(distinct student_id) from (SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance)",
                "result": [
                    [
                        [
                            "count(distinct student_id)"
                        ],
                        [
                            7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Student_Course_Registrations WHERE student_id NOT IN ( SELECT student_id FROM Student_Course_Attendance )"
            },
            {
                "isuser": true,
                "text": "Thanks!\n",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome, goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "manufactory_1",
        "turns": [
            {
                "isuser": true,
                "text": "Who the founder of Sony?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean the founder of the manufacturer named Sony?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT founder FROM Manufacturers WHERE name = \"Sony\""
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Andy is the founder of the manufacturer named Sony.",
                "query": "SELECT founder from manufacturers where name = \"Sony\"",
                "result": [
                    [
                        [
                            "Founder"
                        ],
                        [
                            "Andy"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT founder FROM Manufacturers WHERE name = \"Sony\""
            },
            {
                "isuser": true,
                "text": "Which company is headed by Austin city?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean the name of manufacturers whose headquarters are Austin?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT name FROM Manufacturers WHERE headquarter = \"Austin\""
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Creative Labs is the name of manufacturers whose headquarters are Austin.",
                "query": "SELECT name from manufacturers where headquarter = \"Austin\"",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Creative Labs"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM Manufacturers WHERE headquarter = \"Austin\""
            },
            {
                "isuser": true,
                "text": "What are the revenue of manufacture name Hewlett-Packard?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The manufacturer named Hewlett-Packard has a revenue of 50.0",
                "query": "SELECT revenue from manufacturers where name = \"Hewlett-Packard\"",
                "result": [
                    [
                        [
                            "Revenue"
                        ],
                        [
                            50.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT revenue FROM Manufacturers WHERE name = \"Hewlett-Packard\""
            },
            {
                "isuser": true,
                "text": "Find the number of manufactures that are based in Tokyo or Beijing.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 2 manufacturers that are based in Tokyo or Beijing",
                "query": "SELECT count(*) FROM manufacturers WHERE headquarter  =  'Tokyo' OR headquarter  =  'Beijing'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Manufacturers WHERE headquarter = \"Tokyo\" OR headquarter = \"Beijing\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "assets_maintenance",
        "turns": [
            {
                "isuser": false,
                "text": "Did you mean the names of the parts?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable",
                "predict": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id WHERE T2.fault_short_name = \"Faulty Wiring\""
            },
            {
                "isuser": true,
                "text": "Are there parts that have faults?\n",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes. Here are the number of parts that have some faults.",
                "query": "SELECT count(T1.part_id) FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_id HAVING count(*)  >  0",
                "result": [
                    [
                        [
                            "count(T1.part_id)"
                        ],
                        [
                            7
                        ],
                        [
                            2
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id WHERE T2.fault_short_name = \"Faulty Wiring\""
            },
            {
                "isuser": true,
                "text": "How many parts have more than 2 faults?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of parts that have more than 2 faults is 2",
                "query": "SELECT COUNT(*) FROM (SELECT T1.part_name ,  T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_id HAVING count(*)  >  2)",
                "result": [
                    [
                        [
                            "COUNT(*)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM (SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name HAVING count(*) > 2) AS T3"
            },
            {
                "isuser": true,
                "text": "What are the parts with more than 2 faults?\n",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Here are the names of the parts with more than 2 faults",
                "query": "SELECT T1.part_name  FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_id HAVING count(*)  >  2",
                "result": [
                    [
                        [
                            "part_name"
                        ],
                        [
                            "top"
                        ],
                        [
                            "package"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name HAVING count(*) > 2"
            },
            {
                "isuser": true,
                "text": "What are the name's and id's of the parts with more than 2 faults?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of the names and IDs of the parts with more than 2 faults. For example, one of them is top with part id 1.",
                "query": "SELECT T1.part_name ,  T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_id HAVING count(*)  >  2",
                "result": [
                    [
                        [
                            "part_name",
                            "part_id"
                        ],
                        [
                            "top",
                            1
                        ],
                        [
                            "package",
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.part_name, T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name HAVING count(*) > 2"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "college_2",
        "turns": [
            {
                "isuser": true,
                "text": "How many courses are offered?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are 200 courses offered",
                "query": "select count(course_id) from course",
                "result": [
                    [
                        [
                            "count(course_id)"
                        ],
                        [
                            200
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM course"
            },
            {
                "isuser": true,
                "text": "How many courses have more than one prerequisite?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are 18 courses that  have more than one prerequisite",
                "query": "select count(*) from (SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1)",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            18
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM course WHERE course_id IN (SELECT course_id FROM prereq GROUP BY course_id HAVING COUNT(*) > 1)"
            },
            {
                "isuser": true,
                "text": "Can you tell me the titles of those courses?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the titles of the courses that have more than one prerequisite",
                "query": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1",
                "result": [
                    [
                        [
                            "title"
                        ],
                        [
                            "Rock and Roll"
                        ],
                        [
                            "Ponzi Schemes"
                        ],
                        [
                            "Graph Theory"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT title FROM course WHERE course_id IN (SELECT course_id FROM prereq GROUP BY course_id HAVING COUNT(*) > 1)"
            },
            {
                "isuser": true,
                "text": "What departments are those courses in?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the department name and the course id for each course that has more than one prerequisite",
                "query": "SELECT T1.dept_name,T1.course_id FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1",
                "result": [
                    [
                        [
                            "dept_name",
                            "course_id"
                        ],
                        [
                            "Marketing",
                            "242"
                        ],
                        [
                            "Civil Eng.",
                            "324"
                        ],
                        [
                            "Psychology",
                            "338"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT dept_name FROM course WHERE course_id IN (SELECT course_id FROM prereq GROUP BY course_id HAVING COUNT(*) > 1)"
            },
            {
                "isuser": true,
                "text": "Can you also provide the number of credits for each of those courses?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the credits and course id for each course that has more than one prerequisite",
                "query": "SELECT T1.credits,T1.course_id FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1",
                "result": [
                    [
                        [
                            "credits",
                            "course_id"
                        ],
                        [
                            3,
                            "242"
                        ],
                        [
                            3,
                            "324"
                        ],
                        [
                            3,
                            "338"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT title, credits FROM course WHERE course_id IN (SELECT course_id FROM prereq GROUP BY course_id HAVING COUNT(*) > 1)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "allergy_1",
        "turns": [
            {
                "isuser": true,
                "text": "Hello\n",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Hello.",
                "query": "",
                "result": [],
                "predict_type": "GREETING",
                "predict": "Hello! How can I help you?"
            },
            {
                "isuser": true,
                "text": "Where does the student live?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Which student are you referring to?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT city_code FROM Student WHERE StuID = 1"
            },
            {
                "isuser": true,
                "text": "Is there any students living in HKG or CHI?\n",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes.",
                "query": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "ambiguous",
                "predict": "SELECT count(*) FROM Student WHERE city_code  =  'HKG' OR city_code  =  'CHI'"
            }
        ]
    },
    {
        "db_name": "customers_and_products_contacts",
        "turns": [
            {
                "isuser": true,
                "text": "how many customers are presented on the table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 15 customers in the table.",
                "query": "SELECT count(*) FROM Customers ",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM customers"
            },
            {
                "isuser": true,
                "text": "show all the customers name",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are all the customer names.",
                "query": "SELECT customer_name FROM Customers ",
                "result": [
                    [
                        [
                            "customer_name"
                        ],
                        [
                            "Kayley"
                        ],
                        [
                            "Sterling"
                        ],
                        [
                            "Buford"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_name FROM customers"
            },
            {
                "isuser": true,
                "text": "what is the customer number of Kayley",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Customer number of Kayley is 456.",
                "query": "SELECT customer_number FROM Customers WHERE customer_name=\"Kayley\"",
                "result": [
                    [
                        [
                            "customer_number"
                        ],
                        [
                            "456"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_number FROM customers WHERE customer_name = \"Kayley\""
            },
            {
                "isuser": true,
                "text": "what is the order status code of Sterling",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the order status codes for customer with name Sterling.",
                "query": "SELECT T2.order_status_code FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.customer_name=\"Sterling\"",
                "result": [
                    [
                        [
                            "order_status_code"
                        ],
                        [
                            "Completed"
                        ],
                        [
                            "Part"
                        ],
                        [
                            "Part"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT order_status_code FROM customer_orders WHERE customer_id = 2"
            },
            {
                "isuser": true,
                "text": "show the name of the customer who has the most orders",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the name of the customer who has the most orders.",
                "query": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "customer_name"
                        ],
                        [
                            "Sterling"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_name FROM customers WHERE customer_id IN (SELECT customer_id FROM customer_orders GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1)"
            }
        ]
    },
    {
        "db_name": "hospital_1",
        "turns": [
            {
                "isuser": true,
                "text": "Could you please find all the procedures that cost more than 1000?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of information about the procedures that cost more than 1000. For example, one of the procedures is Reverse Rhinopodoplasty.",
                "query": "SELECT * FROM procedures WHERE cost  >  1000 ",
                "result": [
                    [
                        [
                            "Code",
                            "Name",
                            "Cost"
                        ],
                        [
                            1,
                            "Reverse Rhinopodoplasty",
                            1500.0
                        ],
                        [
                            2,
                            "Obtuse Pyloric Recombobulation",
                            3750.0
                        ],
                        [
                            3,
                            "Folded Demiophtalmectomy",
                            4500.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM procedures WHERE cost > 1000"
            },
            {
                "isuser": true,
                "text": "Could you please find all the procedure that Jon Wen was trained in?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of information about all the procedure that Jon Wen was trained in. For example, one of the procedures is Reverse Rhinopodoplasty.",
                "query": "SELECT * FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
                "result": [
                    [
                        [
                            "EmployeeID",
                            "Name",
                            "Position",
                            "SSN",
                            "Physician",
                            "Treatment",
                            "CertificationDate",
                            "CertificationExpires",
                            "Code",
                            "Name",
                            "Cost"
                        ],
                        [
                            7,
                            "John Wen",
                            "Surgical Attending Physician",
                            777777777,
                            7,
                            1,
                            "2008-01-01",
                            "2008-12-31",
                            1,
                            "Reverse Rhinopodoplasty",
                            1500.0
                        ],
                        [
                            7,
                            "John Wen",
                            "Surgical Attending Physician",
                            777777777,
                            7,
                            2,
                            "2008-01-01",
                            "2008-12-31",
                            2,
                            "Obtuse Pyloric Recombobulation",
                            3750.0
                        ],
                        [
                            7,
                            "John Wen",
                            "Surgical Attending Physician",
                            777777777,
                            7,
                            3,
                            "2008-01-01",
                            "2008-12-31",
                            3,
                            "Folded Demiophtalmectomy",
                            4500.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM procedures WHERE code IN (SELECT treatment FROM Trained_In WHERE physician = 1)"
            },
            {
                "isuser": true,
                "text": "What are the names of the procedures that cost more than 1000 and are procedures John Wen was trained in?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of the procedures that cost more than 1000 and John Wen was trained in. For example, one of the procedures is Complete Walletectomy.",
                "query": "SELECT name FROM procedures WHERE cost  >  1000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Complete Walletectomy"
                        ],
                        [
                            "Folded Demiophtalmectomy"
                        ],
                        [
                            "Obfuscated Dermogastrotomy"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM procedures WHERE cost > 1000 AND code IN (SELECT treatment FROM Trained_In WHERE physician = 1)"
            },
            {
                "isuser": true,
                "text": "When do all of John Wen's certifications expire?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of all John Wen's certifications expiration dates. For example, one of the dates is 2008-12-31.",
                "query": "SELECT T2.CertificationExpires  FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
                "result": [
                    [
                        [
                            "CertificationExpires"
                        ],
                        [
                            "2008-12-31"
                        ],
                        [
                            "2008-12-31"
                        ],
                        [
                            "2008-12-31"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT certificationExpires FROM Trained_In WHERE physician = 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "game_injury",
        "turns": [
            {
                "isuser": true,
                "text": "How many stadiums are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 13 stadiums in total.",
                "query": "select count(*) from stadium",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            13
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM stadium"
            },
            {
                "isuser": true,
                "text": "How many games has each stadium held?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table that shows the ids of the stadium and the number of the games each stadium held.",
                "query": "SELECT T1.id , count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id GROUP BY T1.id",
                "result": [
                    [
                        [
                            "id",
                            "count(*)"
                        ],
                        [
                            1,
                            2
                        ],
                        [
                            2,
                            2
                        ],
                        [
                            3,
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT stadium.name, count(*) AS num_games FROM stadium JOIN game ON stadium.id = game.stadium_id GROUP BY stadium.id"
            },
            {
                "isuser": true,
                "text": "How many teams have winning records?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "I'm sorry. I cannot answer you with sql. Could you please give me another question?",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT count(*) FROM game WHERE score = 'win'"
            },
            {
                "isuser": true,
                "text": "What is the total attendance of each stadium?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table that shows the ids of the stadium and the total attendance of each stadium.",
                "query": "SELECT T1.id , sum(Total_Attendance) FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id GROUP BY T1.id",
                "result": [
                    [
                        [
                            "id",
                            "sum(Total_Attendance)"
                        ],
                        [
                            1,
                            1392754.0
                        ],
                        [
                            2,
                            1330760.0
                        ],
                        [
                            3,
                            1264312.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT stadium.name, stadium.total_attendance FROM stadium"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "assets_maintenance",
        "turns": [
            {
                "isuser": true,
                "text": "what is the fault status of engineer visit id 1?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the fault status of engineer visit id 1 is Waiting",
                "query": "SELECT  fault_status from Engineer_Visits where engineer_visit_id=1",
                "result": [
                    [
                        [
                            "fault_status"
                        ],
                        [
                            "Waiting"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT fault_status FROM Engineer_Visits WHERE engineer_visit_id = 1"
            },
            {
                "isuser": true,
                "text": "what is fault status of engineer id 8?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the fault status of engineer id 8 is Waiting",
                "query": "SELECT  fault_status from Engineer_Visits where engineer_id=8",
                "result": [
                    [
                        [
                            "fault_status"
                        ],
                        [
                            "Waiting"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT fault_status FROM Engineer_Visits WHERE engineer_id = 8"
            },
            {
                "isuser": true,
                "text": "what about the other visit details of engineer id 8?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the other visit details of engineer id 8 is null",
                "query": "SELECT  \tother_visit_details from Engineer_Visits where engineer_id=8",
                "result": [
                    [
                        [
                            "other_visit_details"
                        ],
                        [
                            null
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT other_visit_details FROM Engineer_Visits WHERE engineer_id = 8"
            },
            {
                "isuser": true,
                "text": "thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome,goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "sakila_1",
        "turns": [
            {
                "isuser": false,
                "text": "Do you mean the customer with first name Mary?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Yes.",
                "type": "answerable",
                "predict": "SELECT first_name FROM customer WHERE first_name = 'Mary'"
            },
            {
                "isuser": false,
                "text": "Do you mean the customer with first name Patricia?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Yes.",
                "type": "answerable",
                "predict": "SELECT first_name FROM customer WHERE first_name = 'Patricia'"
            },
            {
                "isuser": true,
                "text": "how many customers are presented on the table",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean to ask how many entries there are in the table customer?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT COUNT(*) FROM customer"
            },
            {
                "isuser": true,
                "text": "exactly",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 599 entries in the table customer.",
                "query": "SELECT COUNT(*) FROM customer",
                "result": [
                    [
                        [
                            "COUNT(*)"
                        ],
                        [
                            599
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM customer"
            },
            {
                "isuser": true,
                "text": "list out the customers first name",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the first names of the customers.",
                "query": "SELECT first_name FROM customer",
                "result": [
                    [
                        [
                            "first_name"
                        ],
                        [
                            "MARY"
                        ],
                        [
                            "PATRICIA"
                        ],
                        [
                            "LINDA"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name FROM customer"
            },
            {
                "isuser": true,
                "text": "what is the city id of mary",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "The city id of the customer with first name mary is 463.",
                "query": "SELECT T2.city_id FROM customer AS T1 JOIN address AS T2 ON T2.address_id = T1.address_id WHERE T1.first_name = 'MARY'\n\n",
                "result": [
                    [
                        [
                            "city_id"
                        ],
                        [
                            463
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT city_id FROM address WHERE address_id IN (SELECT address_id FROM customer WHERE first_name = 'Mary')"
            },
            {
                "isuser": true,
                "text": "what is the district of PATRICIA",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "The district of the customer with first name PATRICIA is California.",
                "query": "SELECT T2.district FROM customer AS T1 JOIN address AS T2 ON T2.address_id = T1.address_id WHERE T1.first_name = 'PATRICIA'\n\n",
                "result": [
                    [
                        [
                            "district"
                        ],
                        [
                            "California"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT district FROM address WHERE address_id IN (SELECT address_id FROM customer WHERE first_name = 'PATRICIA')"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Good bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "store_1",
        "turns": [
            {
                "isuser": true,
                "text": "Display the 10 least expensive invoices",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Would you like a list of the id's of these invoices?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T1.id ,  T1.customer_id ,  T1.invoice_date ,  T1.billing_address ,  T1.billing_city ,  T1.billing_state ,  T1.billing_country ,  T1.billing_postal_code ,  T1.total FROM invoices AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.id ORDER BY T1.total ASC LIMIT 10"
            },
            {
                "isuser": true,
                "text": "No.",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sorry, would you like a list of the dates of these invoices then?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T1.id ,  T1.customer_id ,  T1.invoice_date ,  T1.billing_address ,  T1.billing_city ,  T1.billing_state ,  T1.billing_country ,  T1.billing_postal_code ,  T1.total FROM invoices AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.id ORDER BY T1.total ASC LIMIT 10"
            },
            {
                "isuser": true,
                "text": "Yes.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The following table is a list of the dates of the invoices for the 10 least expensive invoices.",
                "query": "SELECT T2.invoice_date FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;",
                "result": [
                    [
                        [
                            "invoice_date"
                        ],
                        [
                            "2007-01-19 00:00:00"
                        ],
                        [
                            "2007-02-19 00:00:00"
                        ],
                        [
                            "2007-03-22 00:00:00"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.id ,  T1.customer_id ,  T1.invoice_date ,  T1.billing_address ,  T1.billing_city ,  T1.billing_state ,  T1.billing_country ,  T1.billing_postal_code ,  T1.total FROM invoices AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.id ORDER BY T1.total ASC LIMIT 10"
            },
            {
                "isuser": true,
                "text": "Does any customer appear more than once on these 10 invoices?\n",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes.",
                "query": "SELECT T2.customer_id FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;",
                "result": [
                    [
                        [
                            "customer_id"
                        ],
                        [
                            37
                        ],
                        [
                            16
                        ],
                        [
                            54
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.customer_id ,  count(*) FROM invoices AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.id GROUP BY T2.customer_id HAVING count(*)  >  1"
            },
            {
                "isuser": true,
                "text": "Please list the first and last names of each customer on this list.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The following table is a list of the first and last names of each customer for the 10 least expensive invoices.",
                "query": "SELECT T1.first_name, T1.last_name  FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;",
                "result": [
                    [
                        [
                            "first_name",
                            "last_name"
                        ],
                        [
                            "Fynn",
                            "Zimmermann"
                        ],
                        [
                            "Frank",
                            "Harris"
                        ],
                        [
                            "Steve",
                            "Murray"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.first_name ,  T2.last_name FROM invoices AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.id GROUP BY T2.customer_id HAVING count(*)  >  1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "city_record",
        "turns": [
            {
                "isuser": true,
                "text": "How many cities have a regional population over 8000000?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 4 cities having a regional population over 8000000",
                "query": "SELECT count(city) FROM city WHERE regional_population  >  8000000 ",
                "result": [
                    [
                        [
                            "count(city)"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM city WHERE regional_population > 8000000"
            },
            {
                "isuser": true,
                "text": "How many cities have a population under 5000000?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 5 cities having a regional population under 5000000",
                "query": "SELECT count(city) FROM city WHERE regional_population  <  5000000 ",
                "result": [
                    [
                        [
                            "count(city)"
                        ],
                        [
                            5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM city WHERE regional_population < 5000000"
            },
            {
                "isuser": true,
                "text": "What are the names of those cities?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of the cities having a regional population under 5000000",
                "query": "SELECT city FROM city WHERE regional_population  <  5000000 ",
                "result": [
                    [
                        [
                            "City"
                        ],
                        [
                            "Shaoxing ( Zhejiang )"
                        ],
                        [
                            "Changzhou ( Jiangsu )"
                        ],
                        [
                            "Jinhua ( Zhejiang )"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT city FROM city WHERE regional_population < 5000000"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "tvshow",
        "turns": [
            {
                "isuser": true,
                "text": "Which titles were directed by Ben Jones or Brandon Vietti?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of the titles or cartoons directed by Ben Jones or Brandon Vietti.",
                "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
                "result": [
                    [
                        [
                            "Title"
                        ],
                        [
                            "The Rise of the Blue Beetle!"
                        ],
                        [
                            "Terror on Dinosaur Island!"
                        ],
                        [
                            "Day of the Dark Knight!"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Title FROM Cartoon WHERE Directed_by  =  \"Ben Jones\" OR Directed_by  =  \"Brandon Vietti\""
            },
            {
                "isuser": true,
                "text": "What are their original air dates?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a table of the titles of cartoons directed by Ben Jones or Brandon Vietti and their original air dates.",
                "query": "SELECT Title, original_air_date FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
                "result": [
                    [
                        [
                            "Title",
                            "Original_air_date"
                        ],
                        [
                            "The Rise of the Blue Beetle!",
                            "November14,2008"
                        ],
                        [
                            "Terror on Dinosaur Island!",
                            "November21,2008"
                        ],
                        [
                            "Day of the Dark Knight!",
                            "January2,2009"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Original_air_date FROM Cartoon WHERE Directed_by  =  \"Ben Jones\" OR Directed_by  =  \"Brandon Vietti\""
            },
            {
                "isuser": true,
                "text": "Who are the writers of these cartoons?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a table of the titles of cartoons directed by Ben Jones or Brandon Vietti and their writers.",
                "query": "SELECT Title, written_by FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
                "result": [
                    [
                        [
                            "Title",
                            "Written_by"
                        ],
                        [
                            "The Rise of the Blue Beetle!",
                            "Michael Jelenic"
                        ],
                        [
                            "Terror on Dinosaur Island!",
                            "Steven Melching"
                        ],
                        [
                            "Day of the Dark Knight!",
                            "J. M. DeMatteis"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Written_by FROM Cartoon WHERE Directed_by  =  \"Ben Jones\" OR Directed_by  =  \"Brandon Vietti\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "apartment_rentals",
        "turns": [
            {
                "isuser": true,
                "text": "What is the apartment code of the apartment with the most number of rooms?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "the apartment code of the apartment with the most number of rooms is flat",
                "query": "select apt_type_code from Apartments order by room_count desc limit 1",
                "result": [
                    [
                        [
                            "apt_type_code"
                        ],
                        [
                            "Flat"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY room_count DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What about the code with the least rooms?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the apartment code of the apartment with the least number of rooms is flat",
                "query": "select apt_type_code from Apartments order by room_count  limit 1",
                "result": [
                    [
                        [
                            "apt_type_code"
                        ],
                        [
                            "Flat"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY room_count ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the building ID  with  apartment Suite 645?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the  building ID of the apartment with the apartment number Suite 645 is 808",
                "query": "select \tbuilding_id from Apartments where apt_number = 'Suite 645'",
                "result": [
                    [
                        [
                            "building_id"
                        ],
                        [
                            808
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT building_id FROM Apartments WHERE apt_number = 'Suite 645'"
            },
            {
                "isuser": true,
                "text": "Thank you!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "allergy_1",
        "turns": [
            {
                "isuser": true,
                "text": "can you show me a list of allergies?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the list of all allergies.",
                "query": "SELECT Allergy FROM Allergy_Type",
                "result": [
                    [
                        [
                            "Allergy"
                        ],
                        [
                            "Anchovies"
                        ],
                        [
                            "Bee Stings"
                        ],
                        [
                            "Cat"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Allergy FROM Allergy_Type"
            },
            {
                "isuser": true,
                "text": "can you show me a list of allergy name?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the list of all allergy names.",
                "query": "SELECT Allergy FROM Allergy_Type",
                "result": [
                    [
                        [
                            "Allergy"
                        ],
                        [
                            "Anchovies"
                        ],
                        [
                            "Bee Stings"
                        ],
                        [
                            "Cat"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Allergy FROM Allergy_Type"
            },
            {
                "isuser": true,
                "text": "what is their allergy types?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the allergy types.",
                "query": "SELECT distinct AllergyType FROM Allergy_Type",
                "result": [
                    [
                        [
                            "AllergyType"
                        ],
                        [
                            "food"
                        ],
                        [
                            "environmental"
                        ],
                        [
                            "animal"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Allergy, AllergyType FROM Allergy_Type"
            },
            {
                "isuser": true,
                "text": "how many students have a food allergy?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "28 students have food allergy.",
                "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            28
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Has_Allergy WHERE Allergy = 'Food'"
            },
            {
                "isuser": true,
                "text": "thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Good bye.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "company_office",
        "turns": [
            {
                "isuser": true,
                "text": "hello\n",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "hello! what can i help for you?",
                "query": "",
                "result": [],
                "predict_type": "GREETING",
                "predict": "I am sorry, I am not able to answer your question."
            },
            {
                "isuser": true,
                "text": "Which building is the highest?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The highest building is named Torre Reforma.",
                "query": "SELECT name FROM buildings ORDER BY Height DESC LIMIT 1",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Torre Reforma"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM buildings ORDER BY height DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "How tall is the Torre Reforma?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Torre Reforma has 57 stories.",
                "query": "SELECT Stories FROM buildings where name = \"Torre Reforma\"",
                "result": [
                    [
                        [
                            "Stories"
                        ],
                        [
                            57
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT height FROM buildings WHERE name = \"Torre Reforma\""
            },
            {
                "isuser": true,
                "text": "How many stories does the highest building have?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The highest building has 57 stories. |",
                "query": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Stories"
                        ],
                        [
                            57
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT stories FROM buildings ORDER BY height DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome! do you need any other help?",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "nope.\n",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "okay! see you.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "I'm sorry, I don't understand."
            }
        ]
    },
    {
        "db_name": "voter_2",
        "turns": [
            {
                "isuser": true,
                "text": "Find the number of students whose city code is NYC, please?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of students whose city code is NYC is 0.",
                "query": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  \"NYC\" ",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Student WHERE city_code = 'NYC'"
            },
            {
                "isuser": true,
                "text": "What is the number of students who have class senator votes in the spring election cycle?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of students who have class senator votes in the spring election cycle is 5.",
                "query": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE  T2.Election_Cycle  =  \"Spring\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Voting_record WHERE Election_Cycle = 'Spring' AND Class_Senator_Vote = 1"
            },
            {
                "isuser": true,
                "text": "What are the first names and last names of those students?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The first name and last name of the students who have class senator votes in the spring election cycle are listed.",
                "query": "SELECT distinct T1.Fname, T1.Lname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE  T2.Election_Cycle  =  \"Spring\"",
                "result": [
                    [
                        [
                            "Fname",
                            "LName"
                        ],
                        [
                            "Eric",
                            "Rugh"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Fname, LName FROM Student WHERE StuID IN (SELECT StuID FROM Voting_record WHERE Election_Cycle = 'Spring' AND Class_Senator_Vote = 1)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "club_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many students are majoring in \"600\"?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are 18 students who are majoring in \"600\"",
                "query": "select count(stuid) from student where major = 600",
                "result": [
                    [
                        [
                            "count(stuid)"
                        ],
                        [
                            18
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Student WHERE Major = 600"
            },
            {
                "isuser": true,
                "text": "Can you show me only those students?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the ids of student who are majoring in 600",
                "query": "select stuid from student where major = 600",
                "result": [
                    [
                        [
                            "StuID"
                        ],
                        [
                            1001
                        ],
                        [
                            1002
                        ],
                        [
                            1003
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT StuID, LName, Fname, Age, Sex, Major, Advisor, city_code FROM Student WHERE Major = 600"
            },
            {
                "isuser": true,
                "text": "Can you also show me what clubs they are in?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the names of club where the student who are majoring in 600 ",
                "query": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  \"600\" GROUP BY t1.clubname ",
                "result": [
                    [
                        [
                            "ClubName"
                        ],
                        [
                            "Bootup Baltimore"
                        ],
                        [
                            "Hopkins Student Enterprises"
                        ],
                        [
                            "Tennis Club"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT ClubName FROM Club WHERE ClubID IN (SELECT ClubID FROM Member_of_club WHERE StuID IN (SELECT StuID FROM Student WHERE Major = 600))"
            },
            {
                "isuser": true,
                "text": "How many students who are majoring in 600 are in each of those clubs?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the number of students who are majoring in 600 are in each of those clubs",
                "query": "SELECT t1.clubname,count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  \"600\" GROUP BY t1.clubname ORDER BY count(*) ",
                "result": [
                    [
                        [
                            "ClubName",
                            "count(*)"
                        ],
                        [
                            "Hopkins Student Enterprises",
                            1
                        ],
                        [
                            "Tennis Club",
                            1
                        ],
                        [
                            "Bootup Baltimore",
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT ClubName, COUNT(*) AS NumStudents FROM Club WHERE ClubID IN (SELECT ClubID FROM Member_of_club WHERE StuID IN (SELECT StuID FROM Student WHERE Major = 600)) GROUP BY ClubName"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "apartment_rentals",
        "turns": [
            {
                "isuser": true,
                "text": "what is the building id for the apt number suite 645",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The building id for apt number suite 645 is 808",
                "query": "SELECT building_id FROM Apartments where apt_number = \"Suite 645\"",
                "result": [
                    [
                        [
                            "building_id"
                        ],
                        [
                            808
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT building_id FROM Apartments WHERE apt_number = 'suite 645'"
            },
            {
                "isuser": true,
                "text": "what is the bathroom count and bedroom count of the apartment number suite 645?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "For apt number suite 645, there is 1 bathroom and 3 bedrooms.",
                "query": "SELECT bathroom_count, bedroom_count  FROM Apartments where  apt_number = \"Suite 645\"",
                "result": [
                    [
                        [
                            "bathroom_count",
                            "bedroom_count"
                        ],
                        [
                            1,
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT bathroom_count, bedroom_count FROM Apartments WHERE apt_number = 'suite 645'"
            },
            {
                "isuser": true,
                "text": "what is the room count in the building 624?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are two apartments with building id 624, one has 5 rooms and another has 8 rooms",
                "query": "SELECT room_count FROM Apartments where  building_id = 624",
                "result": [
                    [
                        [
                            "room_count"
                        ],
                        [
                            "5"
                        ],
                        [
                            "8"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT room_count FROM Apartments WHERE building_id = 624"
            },
            {
                "isuser": true,
                "text": "what is minimum and maximum number of bathrooms and bedrooms of all the apartments?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The minimum and maximum number of bathrooms are 1 and 3. The minimum and maximum number of bedrooms are 3 and 6.",
                "query": "SELECT min(bathroom_count) ,  max(bathroom_count), min(bedroom_count), max(bedroom_count) FROM Apartments",
                "result": [
                    [
                        [
                            "min(bathroom_count)",
                            "max(bathroom_count)",
                            "min(bedroom_count)",
                            "max(bedroom_count)"
                        ],
                        [
                            1,
                            3,
                            3,
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT min(bathroom_count) ,  max(bathroom_count) ,  min(bedroom_count) ,  max(bedroom_count) FROM Apartments"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "SORRY",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "what is the building_id of the apartment apt.908?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The building_id is 225 for apartment apt.908.",
                "query": "SELECT building_id FROM Apartments where apt_number = \"Apt. 908\"",
                "result": [
                    [
                        [
                            "building_id"
                        ],
                        [
                            225
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT building_id FROM Apartments WHERE apt_number = 'apt.908'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "ok bye",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "Goodbye!"
            }
        ]
    },
    {
        "db_name": "hospital_1",
        "turns": [
            {
                "isuser": true,
                "text": "What are the names and positions of all physicians who prescribed brand X medications?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the name and  the position of the physician who prescribed brand X medications",
                "query": "SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\"",
                "result": [
                    [
                        [
                            "Name",
                            "Position"
                        ],
                        [
                            "John Dorian",
                            "Staff Internist"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Name ,  T2.Position FROM Prescribes AS T1 JOIN Physician AS T2 ON T1.Physician  =  T2.EmployeeID JOIN Medication AS T3 ON T1.Medication  =  T3.Code WHERE T3.Brand  =  \"X\""
            },
            {
                "isuser": true,
                "text": "What were the dates he prescribed those medications?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the date when the physician prescribed a brand X medication is 2008-04-24 10:47",
                "query": "SELECT DISTINCT T2.date FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\"",
                "result": [
                    [
                        [
                            "Date"
                        ],
                        [
                            "2008-04-24 10:47"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Date FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.Brand  =  \"X\""
            },
            {
                "isuser": true,
                "text": "What was the dose of that medication?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the dose of the prescrition of a brand X medication is 5",
                "query": "SELECT dose FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\"",
                "result": [
                    [
                        [
                            "Dose"
                        ],
                        [
                            "5"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Dose FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.Brand  =  \"X\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you! Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "machine_repair",
        "turns": [
            {
                "isuser": true,
                "text": "Who are the technicians?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The table shows the names of all technicians.",
                "query": "SELECT Name FROM technician",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Joe Sewell"
                        ],
                        [
                            "John Brown"
                        ],
                        [
                            "Tony Sewell"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM technician"
            },
            {
                "isuser": true,
                "text": "What are the machines they are assigned to repair?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "do you want to return the machine ids?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT machine_series FROM machine WHERE machine_id IN (SELECT machine_id FROM repair_assignment WHERE technician_id IN (SELECT technician_id FROM technician WHERE age > 30))"
            },
            {
                "isuser": true,
                "text": "I want the names of the machines they are assigned to repair",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "There is no information about the names of machines.",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT machine_series FROM machine WHERE machine_id IN (SELECT machine_id FROM repair_assignment WHERE technician_id IN (SELECT technician_id FROM technician WHERE age > 30))"
            },
            {
                "isuser": true,
                "text": "Show me which team of machine each technician is assigned.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The table shows the teams of the machines and the names of the corresponding technicians assigned to repair them.",
                "query": "SELECT T3.Name ,  T2.Team FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID",
                "result": [
                    [
                        [
                            "Name",
                            "Team"
                        ],
                        [
                            "Joe Sewell",
                            "Hero Sports TS- Honda"
                        ],
                        [
                            "John Brown",
                            "Marlboro Pileri - Honda"
                        ],
                        [
                            "Tony Sewell",
                            "Marlboro Pileri - Honda"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.team FROM machine AS T1 JOIN repair_assignment AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T2.technician_id  =  T3.technician_id WHERE T3.age  >  30"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome, bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "flight_company",
        "turns": [
            {
                "isuser": true,
                "text": "Which flight has the least velocity in the list?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "What info do you want about that flight? id? date? number? or something else?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T1.Vehicle_Flight_number, MIN(T1.Velocity) AS Min_Velocity FROM Flight AS T1 GROUP BY T1.Vehicle_Flight_number"
            },
            {
                "isuser": true,
                "text": "I want the number",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The flight with the vehicle flight number \"M2-F1 #0\" has the least velocity in the list.",
                "query": "select Vehicle_Flight_number from flight order by Velocity limit 1",
                "result": [
                    [
                        [
                            "Vehicle_Flight_number"
                        ],
                        [
                            "M2-F1 #0"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Vehicle_Flight_number, MIN(T1.Velocity) AS Min_Velocity FROM Flight AS T1 GROUP BY T1.Vehicle_Flight_number"
            },
            {
                "isuser": true,
                "text": "State the principal activities of Air Hong Kong?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The principal activities of the company \"Air Hong Kong\" is \"Cargo airline\".",
                "query": "select distinct Principal_activities from operate_company where name='Air Hong Kong'",
                "result": [
                    [
                        [
                            "Principal_activities"
                        ],
                        [
                            "Cargo airline"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Principal_activities FROM operate_company AS T1 WHERE T1.name = \"Air Hong Kong\""
            },
            {
                "isuser": true,
                "text": "What are the distinct types of the companies that have operated any flights with velocity less than 200?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The distinct type of the companies that have operated any flights with velocity less than 200 is \"Joint Venture\".",
                "query": "SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id WHERE T2.velocity < 200",
                "result": [
                    [
                        [
                            "Type"
                        ],
                        [
                            "Joint Venture"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.Type FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id WHERE T2.Velocity < 200"
            },
            {
                "isuser": true,
                "text": "State the type of air china in the list?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The type of air china is \"Corporate\".",
                "query": "select type from operate_company where name='Air China'",
                "result": [
                    [
                        [
                            "Type"
                        ],
                        [
                            "Corporate"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Type FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id WHERE T2.Velocity < 200 AND T1.name = \"Air China\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "baseball_1",
        "turns": [
            {
                "isuser": false,
                "text": "Did you mean the full names and ids for those players?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable",
                "predict": "SELECT name_full ,  player_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id WHERE T1.name_full LIKE '%%K%'"
            },
            {
                "isuser": true,
                "text": "What are the ids of 3 players that won the most awards?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The result shows the ids of 3 players that won the most awards.",
                "query": "SELECT T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3;",
                "result": [
                    [
                        [
                            "player_id"
                        ],
                        [
                            "bondsba01"
                        ],
                        [
                            "willite01"
                        ],
                        [
                            "dimagjo01"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT player_id FROM player_award GROUP BY player_id ORDER BY count(*) DESC LIMIT 3"
            },
            {
                "isuser": true,
                "text": "Can you show me the names and ids for this list?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "The result shows the full names and ids of 3 players that won the most awards.",
                "query": "SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3;",
                "result": [
                    [
                        [
                            "name_first",
                            "name_last",
                            "player_id"
                        ],
                        [
                            "Barry",
                            "Bonds",
                            "bondsba01"
                        ],
                        [
                            "Ted",
                            "Williams",
                            "willite01"
                        ],
                        [
                            "Joe",
                            "DiMaggio",
                            "dimagjo01"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name_first ,  player_id FROM player WHERE player_id IN (SELECT player_id FROM player_award GROUP BY player_id ORDER BY count(*) DESC LIMIT 3)"
            },
            {
                "isuser": true,
                "text": "What are the city, state and country for these players?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The result shows the birth cities, states and countries of 3 players that won the most awards.",
                "query": "SELECT T1.birth_city , T1.birth_state , T1.birth_country FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3;",
                "result": [
                    [
                        [
                            "birth_city",
                            "birth_state",
                            "birth_country"
                        ],
                        [
                            "Riverside",
                            "CA",
                            "USA"
                        ],
                        [
                            "San Diego",
                            "CA",
                            "USA"
                        ],
                        [
                            "Martinez",
                            "CA",
                            "USA"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT city ,  state ,  country FROM park WHERE park_id IN (SELECT park_id FROM home_game WHERE year IN (SELECT year FROM home_game GROUP BY year ORDER BY count(*) DESC LIMIT 3))"
            },
            {
                "isuser": true,
                "text": "Can you also show me the birth dates?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The result shows the birth year, month and day of 3 players that won the most awards. ",
                "query": "SELECT T1.birth_year, T1.birth_month, T1.birth_day FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3;",
                "result": [
                    [
                        [
                            "birth_year",
                            "birth_month",
                            "birth_day"
                        ],
                        [
                            1964,
                            7,
                            24
                        ],
                        [
                            1918,
                            8,
                            30
                        ],
                        [
                            1914,
                            11,
                            25
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT birth_year ,  birth_month ,  birth_day FROM player WHERE player_id IN (SELECT player_id FROM player_award GROUP BY player_id ORDER BY count(*) DESC LIMIT 3)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "products_gen_characteristics",
        "turns": [
            {
                "isuser": true,
                "text": "Can you list the color code that has a color description of 'white'?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Of course, the color code that has a color description of 'white' is '2'.",
                "query": "select color_code from Ref_Colors where color_description='white'",
                "result": [
                    [
                        [
                            "color_code"
                        ],
                        [
                            "2"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT color_code FROM Ref_Colors WHERE color_description = 'white'"
            },
            {
                "isuser": true,
                "text": "Can you list all product ids and their associated product category codes that have a color code value of 2?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table that shows all product ids and their associated product category codes that have a color code value of 2. ",
                "query": "select product_id,product_category_code from Products where color_code='2'",
                "result": [
                    [
                        [
                            "product_id",
                            "product_category_code"
                        ],
                        [
                            2,
                            "Spices"
                        ],
                        [
                            9,
                            "Herbs"
                        ],
                        [
                            15,
                            "Herbs"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product_id ,  product_category_code FROM Products WHERE color_code = 2"
            },
            {
                "isuser": true,
                "text": "Sure, can you add to the table the unit of measure values for the product category codes of Spices and Herbs?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The unit of measure values for the product category codes of \"Spices\" and \"Herbs\" are \"Handful\" and \"Weight - pound,kilo\".",
                "query": "select unit_of_measure from Ref_Product_Categories where \nproduct_category_code='Herbs' or product_category_code='Spices'",
                "result": [
                    [
                        [
                            "unit_of_measure"
                        ],
                        [
                            "Handful             "
                        ],
                        [
                            "Weight - pound,kilo."
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product_category_code ,  unit_of_measure FROM Ref_Product_Categories WHERE product_category_code IN (SELECT product_category_code FROM Products WHERE color_code = 2)"
            },
            {
                "isuser": true,
                "text": "Please delete that information and only show the product name for the product with a product id of 2.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The product name for the product with a product id of 2 is 'peper'.",
                "query": "select product_name from Products where product_id='2'",
                "result": [
                    [
                        [
                            "product_name"
                        ],
                        [
                            "peper"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product_name FROM Products WHERE product_id = 2"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "cre_Doc_Template_Mgt",
        "turns": [
            {
                "isuser": true,
                "text": "Can I get all the documents with 'w' in them",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you want documents with 'w' in the name or description?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT document_name FROM Documents WHERE document_name LIKE '%w%'"
            },
            {
                "isuser": true,
                "text": "Description pls",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the information about documents with a \"w\" in their description.",
                "query": "SELECT * from Documents WHERE Document_Description LIKE \"%w%\"",
                "result": [
                    [
                        [
                            "Document_ID",
                            "Template_ID",
                            "Document_Name",
                            "Document_Description",
                            "Other_Details"
                        ],
                        [
                            82,
                            11,
                            "Data base",
                            "w",
                            null
                        ],
                        [
                            801801,
                            4,
                            "How to read a book",
                            "w",
                            null
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_description FROM Documents WHERE document_name LIKE '%w%'"
            },
            {
                "isuser": true,
                "text": "Ok can I get just their names",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Sure, these are the names of documents that have a \"w\" in the description.",
                "query": "SELECT document_name from Documents WHERE Document_Description LIKE \"%w%\"",
                "result": [
                    [
                        [
                            "Document_Name"
                        ],
                        [
                            "Data base"
                        ],
                        [
                            "How to read a book"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_name FROM Documents WHERE document_name LIKE '%w%'"
            },
            {
                "isuser": true,
                "text": "I need the template ids too oops",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the names and template ids of documents whose description contain a \"w\"",
                "query": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE \"%w%\"\n\n",
                "result": [
                    [
                        [
                            "Document_Name",
                            "Template_ID"
                        ],
                        [
                            "Data base",
                            11
                        ],
                        [
                            "How to read a book",
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT template_id FROM Documents WHERE document_name LIKE '%w%'"
            },
            {
                "isuser": true,
                "text": "Thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Goodbye!",
                "query": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE \"%w%\"\n\n",
                "result": [
                    [
                        [
                            "Document_Name",
                            "Template_ID"
                        ],
                        [
                            "Data base",
                            11
                        ],
                        [
                            "How to read a book",
                            4
                        ]
                    ]
                ],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "apartment_rentals",
        "turns": [
            {
                "isuser": true,
                "text": "how many apartments have bookings with status code \"confirmed\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 7 apartments that have bookings with status code \"confirmed\".",
                "query": "SELECT count(*) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Apartment_Bookings WHERE booking_status_code = \"confirmed\""
            },
            {
                "isuser": true,
                "text": "show me the apartment type for the 7 apartments",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list of all apartment types for those 7 apartments that have bookings with status code \"Confirmed\".",
                "query": "SELECT t2.apt_type_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\"",
                "result": [
                    [
                        [
                            "apt_type_code"
                        ],
                        [
                            "Duplex"
                        ],
                        [
                            "Studio"
                        ],
                        [
                            "Duplex"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT apt_type_code FROM Apartments WHERE apt_id IN (SELECT apt_id FROM Apartment_Bookings WHERE booking_status_code = \"confirmed\")"
            },
            {
                "isuser": true,
                "text": "what are the apartment numbers for those 7?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list of all apartment numbers for those 7 apartments that have bookings with status code \"Confirmed\".",
                "query": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\"",
                "result": [
                    [
                        [
                            "apt_number"
                        ],
                        [
                            "Suite 749"
                        ],
                        [
                            "Apt. 940"
                        ],
                        [
                            "Apt. 859"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT apt_number FROM Apartments WHERE apt_id IN (SELECT apt_id FROM Apartment_Bookings WHERE booking_status_code = \"confirmed\")"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks. bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "dorm_1",
        "turns": [
            {
                "isuser": true,
                "text": "how many names or student in the table",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do  you  mean  the  LName  or  Fname ?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT count(*) FROM Student"
            },
            {
                "isuser": true,
                "text": "how many count in male or female in the student table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The  count in male or female in the student table  are  shown   in  the table ",
                "query": "SELECT count(*) ,  sex FROM Student GROUP BY sex",
                "result": [
                    [
                        [
                            "count(*)",
                            "Sex"
                        ],
                        [
                            10,
                            "F"
                        ],
                        [
                            24,
                            "M"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Student WHERE sex = 'M'"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Welcome and goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "csu_1",
        "turns": [
            {
                "isuser": true,
                "text": "What are the degrees conferred in \"San Francisco State University\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The table shows the degrees conferred in \"San Francisco State University\".",
                "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = \"San Francisco State University\"",
                "result": [
                    [
                        [
                            "Degrees"
                        ],
                        [
                            3871
                        ],
                        [
                            4170
                        ],
                        [
                            3879
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Degrees FROM degrees WHERE Campus = 2"
            },
            {
                "isuser": true,
                "text": "What are the degrees conferred in \"San Francisco State University\" in 2001?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The degrees 4469 is conferred in \"San Francisco State University\" in 2001.",
                "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = \"San Francisco State University\" AND t2.year = 2001",
                "result": [
                    [
                        [
                            "Degrees"
                        ],
                        [
                            4469
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Degrees FROM degrees WHERE Campus = 2 AND Year = 2001"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            }
        ]
    },
    {
        "db_name": "college_1",
        "turns": [
            {
                "isuser": true,
                "text": "list all department code and department name\n ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a table of department codes and names. For example, the department code ACCT corresponds with the Accounting department.",
                "query": "SELECT dept_code, dept_name FROM department",
                "result": [
                    [
                        [
                            "DEPT_CODE",
                            "DEPT_NAME"
                        ],
                        [
                            "ACCT",
                            "Accounting"
                        ],
                        [
                            "ART",
                            "Fine Arts"
                        ],
                        [
                            "BIOL",
                            "Biology"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DEPT_CODE, DEPT_NAME FROM DEPARTMENT"
            },
            {
                "isuser": true,
                "text": "show me all the course codes where department name is \"CIS\"\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Do you mean where department name is Computer Info. Systems?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT CRS_CODE FROM COURSE WHERE DEPT_CODE = 'CIS'"
            },
            {
                "isuser": true,
                "text": "Sorry, I meant to show me all the course codes where department code is \"CIS\"",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of course codes offered by the department with code \"CIS\".",
                "query": "SELECT t2.crs_code FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE t1.dept_code  =  \"CIS\"",
                "result": [
                    [
                        [
                            "CRS_CODE"
                        ],
                        [
                            "CIS-220"
                        ],
                        [
                            "CIS-420"
                        ],
                        [
                            "QM-261"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT CRS_CODE FROM COURSE WHERE DEPT_CODE = 'CIS'"
            },
            {
                "isuser": true,
                "text": "can I get a count of these courses where department code is \"CIS\"?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of course codes offered by the department with code \"CIS\" is 4.",
                "query": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE t1.dept_code  =  \"CIS\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM COURSE WHERE DEPT_CODE = 'CIS'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "wta_1",
        "turns": [
            {
                "isuser": true,
                "text": "What is the average age of the losers from all matches?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average age the the losers are 27.31121386258453",
                "query": "SELECT avg(loser_age)  FROM matches",
                "result": [
                    [
                        [
                            "avg(loser_age)"
                        ],
                        [
                            27.31121386258453
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(loser_age) FROM matches"
            },
            {
                "isuser": true,
                "text": "What about the average age of the winners from all matches?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the average age of the winners is 27.062177773183823",
                "query": "SELECT avg(winner_age)  FROM matches",
                "result": [
                    [
                        [
                            "avg(winner_age)"
                        ],
                        [
                            27.062177773183823
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(winner_age) FROM matches"
            },
            {
                "isuser": true,
                "text": "How many winners are left handed?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 47 winners that are left handed",
                "query": "SELECT count(*) from matches where winner_hand = \"L\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            47
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM matches WHERE winner_hand = 'L'"
            },
            {
                "isuser": true,
                "text": "What are the names of the winner and loser from the longest match?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the names of the winner and loser from the longest match are Petra Kvitova and Angelique Kerber respectively.",
                "query": "SELECT winner_name, loser_name from matches where minutes = (select max(minutes) from matches)",
                "result": [
                    [
                        [
                            "winner_name",
                            "loser_name"
                        ],
                        [
                            "Petra Kvitova",
                            "Angelique Kerber"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you! Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "restaurant_1",
        "turns": [
            {
                "isuser": true,
                "text": "What is the student Id of Linda Smith?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the student Id of Linda Smith is 1001.",
                "query": "SELECT stuid FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\"",
                "result": [
                    [
                        [
                            "StuID"
                        ],
                        [
                            1001
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT StuID FROM Student WHERE Fname = \"Linda\" AND LName = \"Smith\""
            },
            {
                "isuser": true,
                "text": "What is her age?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the student Linda Smith is at age 18",
                "query": "SELECT age FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\"",
                "result": [
                    [
                        [
                            "Age"
                        ],
                        [
                            18
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Age FROM Student WHERE Fname = \"Linda\" AND LName = \"Smith\""
            },
            {
                "isuser": true,
                "text": "What city is she in?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Linda Smith is in the city BAL",
                "query": "SELECT \tcity_code FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\"",
                "result": [
                    [
                        [
                            "city_code"
                        ],
                        [
                            "BAL"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT city_code FROM Student WHERE Fname = \"Linda\" AND LName = \"Smith\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "flight_4",
        "turns": [
            {
                "isuser": true,
                "text": "What is the name of airport in the city Goroka?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of airport in the city Goroka is Goroka Airport.",
                "query": "SELECT name FROM airports WHERE city = \"Goroka\"",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Goroka Airport"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM airports WHERE city = \"Goroka\""
            },
            {
                "isuser": true,
                "text": "Which airport situate in the elevation 5282?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The airport with name Goroka Airport situates in the elevation 5282",
                "query": "SELECT name FROM airports WHERE elevation = 5282",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Goroka Airport"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM airports WHERE elevation = 5282"
            },
            {
                "isuser": true,
                "text": "What is the iata of Madang airport?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The iata of airport name Madang Airport is MAG",
                "query": "SELECT iata FROM airports WHERE name = \"Madang Airport\"",
                "result": [
                    [
                        [
                            "iata"
                        ],
                        [
                            "MAG"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT iata FROM airports WHERE name = \"Madang\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome, bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "cre_Doc_Tracking_DB",
        "turns": [
            {
                "isuser": true,
                "text": "How many employees are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 15 employees.",
                "query": "SELECT COUNT(*) FROM Employees",
                "result": [
                    [
                        [
                            "COUNT(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Employees"
            },
            {
                "isuser": true,
                "text": "Which of the role codes has the most employees?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "ED is the role code with the largest number of employees.",
                "query": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Role_Code"
                        ],
                        [
                            "ED"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Role_Code FROM Employees GROUP BY Role_Code ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "How many employees does role code ED have?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Role code ED has 7 employees.",
                "query": "SELECT count(*) from employees where role_code = \"ED\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Employees WHERE Role_Code = 'ED'"
            },
            {
                "isuser": true,
                "text": "thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You're welcome! If you don't have any more questions, good bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "body_builder",
        "turns": [
            {
                "isuser": true,
                "text": "how many body builders are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 5 body builders in total.",
                "query": "",
                "result": [],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM body_builder"
            },
            {
                "isuser": true,
                "text": "what are the names and birth dates?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are the names and birth dates of all body builders.",
                "query": "",
                "result": [],
                "predict_type": "answerable",
                "predict": "SELECT name, birth_date FROM people"
            },
            {
                "isuser": true,
                "text": "How about the rest of people?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are the names and birth dates of the people who are not body builders.",
                "query": "SELECT Name ,  birth_date FROM people EXCEPT SELECT T1.Name ,  T1.birth_date FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id  =  T2.people_id",
                "result": [
                    [
                        [
                            "Name",
                            "Birth_Date"
                        ],
                        [
                            "Mark Fayne",
                            "May 5, 1987"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name, birth_date, height, weight FROM people"
            },
            {
                "isuser": true,
                "text": "oh, sorry, please show their names and birth places.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are the names and birth places of the people who are not body builders.",
                "query": "SELECT Name ,  birth_place FROM people EXCEPT SELECT T1.Name ,  T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id  =  T2.people_id",
                "result": [
                    [
                        [
                            "Name",
                            "Birth_Place"
                        ],
                        [
                            "Mark Fayne",
                            "Nashua, New Hampshire"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name, birth_place FROM people"
            },
            {
                "isuser": true,
                "text": "great! thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "No problem, goodbye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "workshop_paper",
        "turns": [
            {
                "isuser": true,
                "text": "May I have a list of authors?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The result table of the authors is listed.",
                "query": "SELECT Author FROM submission ",
                "result": [
                    [
                        [
                            "Author"
                        ],
                        [
                            "Steve Niehaus"
                        ],
                        [
                            "Sammy Green"
                        ],
                        [
                            "Sherman Smith"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT author FROM submission"
            },
            {
                "isuser": true,
                "text": "How many of them are from Miami?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the number of authors who are from Miami?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT COUNT(*) FROM submission WHERE college = 'Miami'"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Sorry, I can't answer this question from the information in the table.",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT DISTINCT college FROM submission"
            },
            {
                "isuser": true,
                "text": "Can you give me a list of all authors from Florida, or Temple?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the authors whose college is Florida or Temple?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT DISTINCT author FROM submission WHERE college = 'Florida' OR college = 'Temple'"
            },
            {
                "isuser": true,
                "text": "Yes I did.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The authors whose college is Florida or Temple are listed.",
                "query": "SELECT author from submission where college='Florida' or college ='Temple'",
                "result": [
                    [
                        [
                            "Author"
                        ],
                        [
                            "Sammy Green"
                        ],
                        [
                            "Don Bitterlich"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT author FROM submission WHERE college = 'Florida' OR college = 'Temple'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "driving_school",
        "turns": [
            {
                "isuser": true,
                "text": "What state or province has the most staff living in it?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Georgia is the state that has the most staff living in.",
                "query": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county ORDER BY count(*) DESC LIMIT 1;",
                "result": [
                    [
                        [
                            "state_province_county"
                        ],
                        [
                            "Georgia"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T2.state_province_county ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the number of staff living in Georgia?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are six staffs living in the state that has the most staff living in.",
                "query": "SELECT count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county ORDER BY count(*) DESC LIMIT 1;",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM Staff WHERE staff_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'Georgia')"
            },
            {
                "isuser": true,
                "text": "What city in Georgia has the most staff living in it?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Port Melyssa is the city in Georgia that has the most staff living in it.",
                "query": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id where T1.state_province_county = \"Georgia\" GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;",
                "result": [
                    [
                        [
                            "city"
                        ],
                        [
                            "Port Melyssa"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.state_province_county = 'Georgia' GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the number of staff living in Port Melyssa and what are their names?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "first name or last name?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT count(*) ,  T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id  =  T2.staff_address_id WHERE T1.city  =  \"Port Melyssa\" GROUP BY T2.first_name ,  T2.last_name"
            },
            {
                "isuser": true,
                "text": "both please\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the full names of staffs living in Port Melyssa.",
                "query": "SELECT T2.first_name, T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id where T1.city = \"Port Melyssa\" ",
                "result": [
                    [
                        [
                            "first_name",
                            "last_name"
                        ],
                        [
                            "Rebekah",
                            "Hermann"
                        ],
                        [
                            "Titus",
                            "Durgan"
                        ],
                        [
                            "Winnifred",
                            "Jast"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) ,  T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id  =  T2.staff_address_id WHERE T1.city  =  \"Port Melyssa\" GROUP BY T2.first_name ,  T2.last_name"
            },
            {
                "isuser": true,
                "text": "What are all their birthdays?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the birthdays of the staff living in Port Melyssa.",
                "query": "SELECT T2.date_of_birth\t FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id where T1.city = \"Port Melyssa\" ",
                "result": [
                    [
                        [
                            "date_of_birth"
                        ],
                        [
                            "2003-01-16 06:29:11"
                        ],
                        [
                            "2005-05-02 06:23:36"
                        ],
                        [
                            "2000-06-13 18:09:11"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.date_of_birth FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id  =  T2.staff_address_id WHERE T1.city  =  \"Port Melyssa\" GROUP BY T2.first_name ,  T2.last_name"
            },
            {
                "isuser": true,
                "text": "What is the average salary for all the staff living in Port Melyssa?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "We don't have that information.",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT AVG(T2.date_of_birth) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id  =  T2.staff_address_id WHERE T1.city  =  \"Port Melyssa\" GROUP BY T2.first_name ,  T2.last_name"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "dog_kennels",
        "turns": [
            {
                "isuser": true,
                "text": "Show me all the dogs",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "do you want to show all the attributes of the dogs?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT * FROM Dogs"
            },
            {
                "isuser": true,
                "text": "just show me the names of the dogs",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The table shows the names of all the dogs.",
                "query": "SELECT name FROM Dogs ",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Kacey"
                        ],
                        [
                            "Hipolito"
                        ],
                        [
                            "Mavis"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM Dogs"
            },
            {
                "isuser": true,
                "text": "Nice! Tell me which of these dogs are the rarest breed",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The table shows the names of the dogs with the rarest breed.",
                "query": "SELECT name FROM Dogs WHERE breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Kacey"
                        ],
                        [
                            "Houston"
                        ],
                        [
                            "George"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name, breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What are the genders of these dogs?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The table shows the names and genders of the dogs with the rarest breed. ",
                "query": "SELECT name, gender FROM Dogs WHERE breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
                "result": [
                    [
                        [
                            "name",
                            "gender"
                        ],
                        [
                            "Kacey",
                            "1"
                        ],
                        [
                            "Houston",
                            "0"
                        ],
                        [
                            "George",
                            "0"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT gender FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Dogs GROUP BY dog_id HAVING count(*) = 1)"
            },
            {
                "isuser": true,
                "text": "What does the ones and twos mean in the table?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry, I don't know the answer. Please ask me other questions related to the data.",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "The ones and twos in the table refer to the size of the dogs. The ones are the smallest dogs, and the twos are the largest dogs."
            },
            {
                "isuser": true,
                "text": "Ok sure. Tell me who treated these dogs",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Sorry, could you specify your question, There are all attributes of the dog treatments, which one do you want to show?",
                "query": "SELECT * FROM Treatments ",
                "result": [
                    [
                        [
                            "treatment_id",
                            "dog_id",
                            "professional_id",
                            "treatment_type_code",
                            "date_of_treatment",
                            "cost_of_treatment"
                        ],
                        [
                            1,
                            14,
                            9,
                            "WALK",
                            "2018-03-19 04:39:54",
                            567
                        ],
                        [
                            2,
                            4,
                            10,
                            "VAC",
                            "2018-03-15 20:25:34",
                            147
                        ],
                        [
                            3,
                            14,
                            4,
                            "EXAM",
                            "2018-03-08 05:26:23",
                            429
                        ]
                    ]
                ],
                "predict_type": "ambiguous",
                "predict": "SELECT professional_id FROM Treatments WHERE dog_id IN (SELECT dog_id FROM Dogs WHERE size_code = 'one')"
            },
            {
                "isuser": true,
                "text": "Alright! just show me the treatment dates of these dogs",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The table shows the names and treatment dates of the dogs with the rarest breed. ",
                "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
                "result": [
                    [
                        [
                            "name",
                            "date_of_treatment"
                        ],
                        [
                            "Lyric",
                            "2018-03-19 04:39:54"
                        ],
                        [
                            "Houston",
                            "2018-03-15 20:25:34"
                        ],
                        [
                            "Lyric",
                            "2018-03-08 05:26:23"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT date_of_treatment FROM Treatments WHERE dog_id IN (SELECT dog_id FROM Dogs WHERE size_code = 'one')"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome, bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "dorm_1",
        "turns": [
            {
                "isuser": true,
                "text": "Show me the name of the cities",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "sorry ,I  have  no  answer  to  this  question",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT city_code FROM Student WHERE city_code != 'Toronto'"
            },
            {
                "isuser": true,
                "text": "Show me the number of students of all cities",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you  mean  the  total  count of  students",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT count(*) FROM Student WHERE city_code != 'Toronto'"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The  count  of   students  is 34",
                "query": "SELECT count(*) FROM student",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            34
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Student WHERE city_code != 'Toronto'"
            },
            {
                "isuser": true,
                "text": "Show me the count of students for each city",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The count of students for each city are  shown   in the table",
                "query": "SELECT city_code, count(*) FROM student group  by  \tcity_code",
                "result": [
                    [
                        [
                            "city_code",
                            "count(*)"
                        ],
                        [
                            "ATL",
                            1
                        ],
                        [
                            "BAL",
                            4
                        ],
                        [
                            "BOS",
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) ,  city_code FROM Student WHERE city_code != 'Toronto' GROUP BY city_code"
            },
            {
                "isuser": true,
                "text": "Show me the count of students for the cities where have more than one student",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The count of students for the cities where have more than one studentis shown in the table.",
                "query": "SELECT city_code, count(*) FROM student group  by  \tcity_code having count(*)>1",
                "result": [
                    [
                        [
                            "city_code",
                            "count(*)"
                        ],
                        [
                            "BAL",
                            4
                        ],
                        [
                            "HKG",
                            3
                        ],
                        [
                            "NYC",
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) ,  city_code FROM Student WHERE city_code != 'Toronto' GROUP BY city_code HAVING count(*)  >  1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Welcome and goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "college_2",
        "turns": [
            {
                "isuser": true,
                "text": "can you show me the name and salary of all instructors?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a table of the names and salaries of each professor. For example, McKinnon has a salary of 94333.99.",
                "query": "SELECT name, salary FROM instructor",
                "result": [
                    [
                        [
                            "name",
                            "salary"
                        ],
                        [
                            "McKinnon",
                            94333.99
                        ],
                        [
                            "Pingr",
                            59303.62
                        ],
                        [
                            "Mird",
                            119921.41
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name ,  salary FROM instructor"
            },
            {
                "isuser": true,
                "text": "How much does the biology professor make?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a table with the names and salaries of each professor in the Biology department. For example, Queiroz has a salary of 45538.32.",
                "query": "SELECT name, salary FROM instructor WHERE dept_name = \"Biology\"",
                "result": [
                    [
                        [
                            "name",
                            "salary"
                        ],
                        [
                            "Queiroz",
                            45538.32
                        ],
                        [
                            "Valtchev",
                            77036.18
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT salary FROM instructor WHERE dept_name = 'Biology'"
            },
            {
                "isuser": true,
                "text": "How many professors make more than Valtchev?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of professors that have a salary greater than the salary of instructor Valtchev is 27.",
                "query": "SELECT count(*) FROM instructor WHERE salary > (SELECT salary FROM instructor WHERE name = \"Valtchev\")",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            27
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM instructor WHERE salary > (SELECT salary FROM instructor WHERE name = 'Valtchev')"
            },
            {
                "isuser": true,
                "text": "Can you tell me the names of the professors that make more than Valtchev?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of names of instructors that have a higher salary than Valtchev.",
                "query": "SELECT name FROM instructor WHERE salary > (SELECT salary FROM instructor WHERE name = \"Valtchev\")",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "McKinnon"
                        ],
                        [
                            "Mird"
                        ],
                        [
                            "Luo"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM instructor WHERE salary > (SELECT salary FROM instructor WHERE name = 'Valtchev')"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "city_record",
        "turns": [
            {
                "isuser": true,
                "text": "Which cities have served as host cities?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you want the names of the cities who served as host cities?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT DISTINCT Host_City FROM hosting_city"
            },
            {
                "isuser": true,
                "text": "Yes.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of the cities who served as host cities",
                "query": "SELECT distinct T1.city FROM city AS T1 JOIN hosting_city as T2 on T1.city_id = T2.host_city",
                "result": [
                    [
                        [
                            "City"
                        ],
                        [
                            "Shanghai"
                        ],
                        [
                            "Nanjing ( Jiangsu )"
                        ],
                        [
                            "Wuxi ( Jiangsu )"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT Host_City FROM hosting_city"
            },
            {
                "isuser": true,
                "text": "Which of these host cities has a lower temperature in March than July.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of cities who served as host cities and has a lower temperature in March than that in July",
                "query": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
                "result": [
                    [
                        [
                            "City"
                        ],
                        [
                            "Jiaxing ( Zhejiang )"
                        ],
                        [
                            "Nanjing ( Jiangsu )"
                        ],
                        [
                            "Shanghai"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT Host_City FROM hosting_city WHERE Jan < Jul"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks. bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "network_2",
        "turns": [
            {
                "isuser": true,
                "text": "which friend of zachs has the longest year relationship? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Dan is the friend of zach with longest year relationship.",
                "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Dan"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT friend FROM PersonFriend WHERE name = \"Zach\" ORDER BY year DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "how old is dan?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The age of Dan is 26.",
                "query": "SELECT age FROM Person where name = \"Dan\"",
                "result": [
                    [
                        [
                            "age"
                        ],
                        [
                            26
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT age FROM Person WHERE name = \"Dan\""
            },
            {
                "isuser": true,
                "text": "what city does Zach live?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The city that Zach live in is austin",
                "query": "SELECT city from Person where name='Zach'",
                "result": [
                    [
                        [
                            "city"
                        ],
                        [
                            "austin"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT city FROM Person WHERE name = \"Zach\""
            },
            {
                "isuser": true,
                "text": "what age is zach?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Zach is at age 45.",
                "query": "SELECT age from Person where name='Zach'",
                "result": [
                    [
                        [
                            "age"
                        ],
                        [
                            45
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT age FROM Person WHERE name = \"Zach\""
            },
            {
                "isuser": true,
                "text": "what is zach's job?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The zach's job is doctor",
                "query": "SELECT job from Person where name='Zach'",
                "result": [
                    [
                        [
                            "job"
                        ],
                        [
                            "doctor"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT job FROM Person WHERE name = \"Zach\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure! Bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "driving_school",
        "turns": [
            {
                "isuser": true,
                "text": "How long is the total lesson time took by customer with first name Rylan and last name Goodwin?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "11 is the total lesson time took by the customer with first name Rylan and last name Goodwin",
                "query": "SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\";",
                "result": [
                    [
                        [
                            "sum(T1.lesson_time)"
                        ],
                        [
                            11
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT sum(lesson_time) FROM Lessons WHERE customer_id IN (SELECT customer_id FROM Customers WHERE first_name = \"Rylan\" AND last_name = \"Goodwin\")"
            },
            {
                "isuser": true,
                "text": "What's the status of the lesson by the customer with first name Rylan and last name Goodwin",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the status codes of lessons taken by the customer with first name Rylan and last name Goodwin",
                "query": "SELECT T1.lesson_status_code FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\";",
                "result": [
                    [
                        [
                            "lesson_status_code"
                        ],
                        [
                            "Completed"
                        ],
                        [
                            "Cancelled"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT lesson_status_code FROM Lessons WHERE customer_id IN (SELECT customer_id FROM Customers WHERE first_name = \"Rylan\" AND last_name = \"Goodwin\")"
            },
            {
                "isuser": true,
                "text": "What's the customer id of the customer with first name Rylan and last name Goodwin?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "10 is the customer id of the customer with first name Rylan and last name Goodwin",
                "query": "SELECT customer_id FROM customers WHERE first_name = \"Rylan\" AND last_name = \"Goodwin\";",
                "result": [
                    [
                        [
                            "customer_id"
                        ],
                        [
                            10
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_id FROM Customers WHERE first_name = \"Rylan\" AND last_name = \"Goodwin\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "apartment_rentals",
        "turns": [
            {
                "isuser": true,
                "text": "how many different types of apartments are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 3 different apartments type codes",
                "query": "SELECT count(DISTINCT apt_type_code) FROM Apartments ",
                "result": [
                    [
                        [
                            "count(DISTINCT apt_type_code)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(DISTINCT apt_type_code) FROM Apartments"
            },
            {
                "isuser": true,
                "text": "what are they?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are all different apartments type codes",
                "query": "SELECT distinct apt_type_code FROM Apartments",
                "result": [
                    [
                        [
                            "apt_type_code"
                        ],
                        [
                            "Flat"
                        ],
                        [
                            "Studio"
                        ],
                        [
                            "Duplex"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT apt_type_code FROM Apartments"
            },
            {
                "isuser": true,
                "text": "Great! how many apartments does each of them have?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the apartment type codes and the number of apartments each of them have.",
                "query": "SELECT count(*), apt_type_code FROM Apartments GROUP BY apt_type_code ",
                "result": [
                    [
                        [
                            "count(*)",
                            "apt_type_code"
                        ],
                        [
                            5,
                            "Duplex"
                        ],
                        [
                            6,
                            "Flat"
                        ],
                        [
                            4,
                            "Studio"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT apt_type_code, COUNT(*) AS num_apts FROM Apartments GROUP BY apt_type_code"
            },
            {
                "isuser": true,
                "text": "could you please show their names as well?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the apartment type code?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT apt_type_code, COUNT(*) AS num_apts FROM Apartments GROUP BY apt_type_code"
            },
            {
                "isuser": true,
                "text": "yes!",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are apartment type code and the number of apartments that have that apartment type code.",
                "query": "SELECT apt_type_code, count(*) FROM Apartments GROUP BY apt_type_code ",
                "result": [
                    [
                        [
                            "apt_type_code",
                            "count(*)"
                        ],
                        [
                            "Duplex",
                            5
                        ],
                        [
                            "Flat",
                            6
                        ],
                        [
                            "Studio",
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT apt_type_code, COUNT(*) AS num_apts FROM Apartments GROUP BY apt_type_code"
            },
            {
                "isuser": true,
                "text": "ok, which of them is the most common one?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Flat is the most common apartment type code.",
                "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "apt_type_code"
                        ],
                        [
                            "Flat"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT apt_type_code, COUNT(*) AS num_apts FROM Apartments GROUP BY apt_type_code ORDER BY num_apts DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "great! that is all i need.\n",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "improper"
            }
        ]
    },
    {
        "db_name": "local_govt_and_lot",
        "turns": [
            {
                "isuser": true,
                "text": "how many Services there",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 15 services.",
                "query": "SELECT count(*) from Services",
                "result": [
                    null
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Services"
            },
            {
                "isuser": true,
                "text": "what is the Check of service_id",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the service_id of all services with service_type_code \"Check\"?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT max(service_id) FROM Services"
            },
            {
                "isuser": true,
                "text": "ok",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The table shows the service_id of all services with service_type_code \"Check\".",
                "query": "SELECT service_id from Services where service_type_code = \"Check\"",
                "result": [
                    [
                        [
                            "service_id"
                        ],
                        [
                            11
                        ],
                        [
                            36
                        ],
                        [
                            41
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(service_id) FROM Services"
            },
            {
                "isuser": true,
                "text": "how many Organizations there",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 3 organizations.",
                "query": "SELECT count(*) from Organizations",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Organizations"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "soccer_2",
        "turns": [
            {
                "isuser": true,
                "text": "Can you list all the colleges and their enrollments?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are all the colleges and their enrollments",
                "query": "SELECT cName, enr  FROM college ",
                "result": [
                    [
                        [
                            "cName",
                            "enr"
                        ],
                        [
                            "LSU",
                            18000
                        ],
                        [
                            "ASU",
                            12000
                        ],
                        [
                            "OU",
                            22000
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT cName, enr FROM College"
            },
            {
                "isuser": true,
                "text": "Which college has the largest enrollment?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The college with the name OU has the largest enrollment",
                "query": "SELECT cname FROM college WHERE enr = (SELECT max(enr) FROM college)",
                "result": [
                    [
                        [
                            "cName"
                        ],
                        [
                            "OU"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT cName, enr FROM College ORDER BY enr DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Hmm, I also want to know which colleges have enrollments that are less than the largest size.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of the colleges that have enrollments that are less than the largest size.",
                "query": "SELECT cname FROM college WHERE enr < (SELECT max(enr) FROM college)",
                "result": [
                    [
                        [
                            "cName"
                        ],
                        [
                            "LSU"
                        ],
                        [
                            "ASU"
                        ],
                        [
                            "FSU"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT cName, enr FROM College WHERE enr < (SELECT enr FROM College ORDER BY enr DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "Can you list the states of those colleges?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list of name and state of the colleges that have enrollments that are less than the largest size",
                "query": "SELECT cname, state FROM college WHERE enr < (SELECT max(enr) FROM college)",
                "result": [
                    [
                        [
                            "cName",
                            "state"
                        ],
                        [
                            "LSU",
                            "LA"
                        ],
                        [
                            "ASU",
                            "AZ"
                        ],
                        [
                            "FSU",
                            "FL"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT state FROM College WHERE enr < (SELECT enr FROM College ORDER BY enr DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks! Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "store_1",
        "turns": [
            {
                "isuser": true,
                "text": "May I know the album names and ids, and the number of tracks they have?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the album names and ids, and the number of tracks they have",
                "query": "SELECT T1.title,T1.id,count(T1.id) FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id ",
                "result": [
                    [
                        [
                            "title",
                            "id",
                            "count(T1.id)"
                        ],
                        [
                            "For Those About To Rock We Salute You",
                            1,
                            10
                        ],
                        [
                            "Balls to the Wall",
                            2,
                            1
                        ],
                        [
                            "Restless and Wild",
                            3,
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.title ,  T1.id ,  COUNT(*) FROM tracks AS T1 JOIN albums AS T2 ON T1.album_id  =  T2.id GROUP BY T1.album_id"
            },
            {
                "isuser": true,
                "text": "Hmm, can you list the album names and the artist ids?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the album names and the artist ids",
                "query": "select title,artist_id from albums",
                "result": [
                    [
                        [
                            "title",
                            "artist_id"
                        ],
                        [
                            "For Those About To Rock We Salute You",
                            1
                        ],
                        [
                            "Balls to the Wall",
                            2
                        ],
                        [
                            "Restless and Wild",
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.title ,  T1.artist_id FROM tracks AS T1 JOIN albums AS T2 ON T1.album_id  =  T2.id"
            },
            {
                "isuser": true,
                "text": "Can you also list the title of albums that have the number of tracks greater than 10?  ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the title of albums that have greater than 10 tracks",
                "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;",
                "result": [
                    [
                        [
                            "title"
                        ],
                        [
                            "Big Ones"
                        ],
                        [
                            "Jagged Little Pill"
                        ],
                        [
                            "Facelift"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.title ,  T1.artist_id FROM tracks AS T1 JOIN albums AS T2 ON T1.album_id  =  T2.id GROUP BY T1.album_id HAVING count(*)  >  10"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "flight_4",
        "turns": [
            {
                "isuser": true,
                "text": "what are the busiest airport in china?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "busiest source airport or destination airport?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "I apologize, but the SQLite database does not contain information about the busiest airports in China."
            },
            {
                "isuser": true,
                "text": "busiest source airport",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Beijing Capital International Airport is the busiest source airport that runs the most number of routes in China",
                "query": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Beijing Capital International Airport"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT src_ap FROM routes GROUP BY src_ap ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "what is the source airport id?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The source airport id of the busiest source airport that runs the most number of routes in China is 3364",
                "query": "SELECT T1.apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "apid"
                        ],
                        [
                            3364
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT src_apid FROM routes GROUP BY src_apid ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "what is the airline for source airport?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the distinct airlines that depart from the busiest source airport that runs the most number of routes in China",
                "query": "select distinct airline from routes where src_apid = (SELECT T1.apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1)",
                "result": [
                    [
                        [
                            "airline"
                        ],
                        [
                            "3"
                        ],
                        [
                            "5J"
                        ],
                        [
                            "8"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.airline FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T2.src_apid  =  (SELECT src_apid FROM routes GROUP BY src_apid ORDER BY count(*) DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "pets_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many students have a cat pet? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 34 students who have a cat pet.",
                "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'",
                "result": [
                    [
                        [
                            "count(stuid)"
                        ],
                        [
                            34
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID  =  T2.PetID WHERE T2.PetType  =  \"cat\""
            },
            {
                "isuser": true,
                "text": "And what about students that don't have a cat pet?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are  33 students who don't have a cat pet",
                "query": "select count(*) from (SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            33
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID  =  T2.PetID WHERE T2.PetType  <>  \"cat\""
            },
            {
                "isuser": true,
                "text": "And what are their ids? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the table of  the ids of the students who don't have a cat pet . For example, they are 1002 and 1003",
                "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
                "result": [
                    [
                        [
                            "StuID"
                        ],
                        [
                            1002
                        ],
                        [
                            1003
                        ],
                        [
                            1004
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT StuID FROM Has_Pet WHERE PetID NOT IN (SELECT PetID FROM Pets WHERE PetType = \"cat\")"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "music_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many songs are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 6 songs.",
                "query": "SELECT count(*) FROM files ",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM song"
            },
            {
                "isuser": true,
                "text": "Are they equal in length?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "The following table shows duration of all songs. They are not equal in length.",
                "query": "SELECT duration FROM files ",
                "result": [
                    [
                        [
                            "duration"
                        ],
                        [
                            "3:45"
                        ],
                        [
                            "2:56"
                        ],
                        [
                            "4:12"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM song WHERE duration = (SELECT min(duration) FROM song)"
            },
            {
                "isuser": true,
                "text": "Who sings the song with a length of 5minutes and 23 seconds?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Enrique is the artist name who sings the song with a length of 5minutes and 23 seconds",
                "query": "SELECT artist_name FROM files where duration = \"5:23\"",
                "result": [
                    [
                        [
                            "artist_name"
                        ],
                        [
                            "Enrique"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT artist_name FROM song WHERE duration = '5:23'"
            },
            {
                "isuser": true,
                "text": "what's the id of that song?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The id of the song with a length of 5minutes and 23 seconds is 4",
                "query": "SELECT f_id FROM files where duration = \"5:23\"",
                "result": [
                    [
                        [
                            "f_id"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT f_id FROM song WHERE duration = '5:23'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "document_management",
        "turns": [
            {
                "isuser": true,
                "text": "Show the Document code for document type code Book?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table shows the document code for document type code \"Book\".",
                "query": "SELECT document_code FROM documents WHERE document_type_code='Book'",
                "result": [
                    [
                        [
                            "document_code"
                        ],
                        [
                            "217"
                        ],
                        [
                            "958"
                        ],
                        [
                            "989"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_code FROM Documents WHERE document_type_code = 'Book'"
            },
            {
                "isuser": true,
                "text": "Show the name of the document that has been accessed the greatest number of times?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the document that has been accessed the greatest number of times is \"Relationships between History and Arts\".",
                "query": "SELECT document_name FROM documents ORDER BY access_count DESC LIMIT 1",
                "result": [
                    [
                        [
                            "document_name"
                        ],
                        [
                            "Relationships between History and Arts"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_name FROM Documents WHERE document_code IN (SELECT document_code FROM Documents GROUP BY document_code ORDER BY count(*) DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "Show the name of the documents and the count of how many times each has been accessed?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table shows the name of the documents and the count of how many times each has been accessed.",
                "query": "SELECT document_name , access_count FROM documents ORDER BY access_count DESC LIMIT 1",
                "result": [
                    [
                        [
                            "document_name",
                            "access_count"
                        ],
                        [
                            "Relationships between History and Arts",
                            9948
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_name, count(*) AS access_count FROM Documents GROUP BY document_name ORDER BY access_count DESC"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "shop_membership",
        "turns": [
            {
                "isuser": true,
                "text": "Show me all branch names with the number of members in each branch registered after 2015",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are all branch names with the number of members in each branch registered after 2015",
                "query": "SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id",
                "result": [
                    [
                        [
                            "Name",
                            "count(*)"
                        ],
                        [
                            "Alexandre",
                            3
                        ],
                        [
                            "Popert",
                            1
                        ],
                        [
                            "Zytogorski",
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.name ,  count(*) FROM branch AS T1 JOIN membership_register_branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.register_year  >  2015 GROUP BY T1.branch_id"
            },
            {
                "isuser": true,
                "text": "When were those branches opened?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names and open years of all branches registered after 2015.",
                "query": "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id",
                "result": [
                    [
                        [
                            "Name",
                            "Open_year"
                        ],
                        [
                            "Alexandre",
                            "2001"
                        ],
                        [
                            "Popert",
                            "2009"
                        ],
                        [
                            "Zytogorski",
                            "2009"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.open_year FROM branch AS T1 JOIN membership_register_branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.register_year  >  2015 GROUP BY T1.branch_id"
            },
            {
                "isuser": true,
                "text": "How many branches have the number of members in each branch registered after 2015?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean the number of branches which have some members registered after 2015?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT count(*) ,  T1.name FROM branch AS T1 JOIN membership_register_branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.register_year  >  2015 GROUP BY T1.branch_id"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 6 branches which have some members registered after 2015",
                "query": "select count(*) from (SELECT T2.name  FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id)",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "soccer_2",
        "turns": [
            {
                "isuser": true,
                "text": "What are the names of the states that have some college students playing in the mid position but not the goalie position?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The state that have some college students playing in the mid position but not the goalie position is listed here. The only one is OK.",
                "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'",
                "result": [
                    [
                        [
                            "state"
                        ],
                        [
                            "OK"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.state FROM College AS T1 JOIN Tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  \"mid\" AND T2.decision  =  \"yes\" AND T2.pPos  !=  \"goalie\""
            },
            {
                "isuser": true,
                "text": "What about states that have some college students playing in the goalie position?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the states with some college students playing in the goalie position.",
                "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'",
                "result": [
                    [
                        [
                            "state"
                        ],
                        [
                            "LA"
                        ],
                        [
                            "AZ"
                        ],
                        [
                            "AZ"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.state FROM College AS T1 JOIN Tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  \"goalie\" AND T2.decision  =  \"yes\""
            },
            {
                "isuser": true,
                "text": "What about in the striker position?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the state list with some college students playing in the striker position. FL is the only one.",
                "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'",
                "result": [
                    [
                        [
                            "state"
                        ],
                        [
                            "FL"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.state FROM College AS T1 JOIN Tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  \"striker\" AND T2.decision  =  \"yes\""
            },
            {
                "isuser": true,
                "text": "What is the college name for that one?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The college name where some college students playing in the striker position is FSU.",
                "query": "SELECT T1.cName FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'",
                "result": [
                    [
                        [
                            "cName"
                        ],
                        [
                            "FSU"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  \"goalie\" AND T2.decision  =  \"yes\""
            },
            {
                "isuser": true,
                "text": "Was there a decision on that position?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Yes, the decision on the striker position is listed.",
                "query": "SELECT decision from Tryout WHERE pPos  =  'striker'",
                "result": [
                    [
                        [
                            "decision"
                        ],
                        [
                            "yes"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  \"goalie\" AND T2.decision  =  \"yes\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure! Bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "small_bank_1",
        "turns": [
            {
                "isuser": true,
                "text": "What is the average savings account balance?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average savings account balance is 166751716.5.",
                "query": "SELECT avg(balance) FROM savings",
                "result": [
                    [
                        [
                            "avg(balance)"
                        ],
                        [
                            166751716.5
                        ]
                    ]
                ],
                "predict_type": "UNKNOWN",
                "predict": "SELECT avg(balance) FROM SAVINGS"
            },
            {
                "isuser": true,
                "text": "Which accounts with checking accounts have savings account balances higher than the average savings balance? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Wang's account has a checking account and has a savings account balance higher than the average savings balance.",
                "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T2.balance > (SELECT avg(balance) FROM savings))",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Wang"
                        ]
                    ]
                ],
                "predict_type": "UNKNOWN",
                "predict": "SELECT T1.name, T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > (SELECT avg(balance) FROM SAVINGS)"
            },
            {
                "isuser": true,
                "text": "What is its checking account balance? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The checking balance of the account with a checking account whose savings balance is higher than the average savings balance is 2000.0.",
                "query": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T2.balance > (SELECT avg(balance) FROM savings))",
                "result": [
                    [
                        [
                            "balance"
                        ],
                        [
                            2000.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T1.name = 'Jane Doe'"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "store_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many countries are our customers located in?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 24 distinct countries that the customers are located in.",
                "query": "SELECT count(distinct country) FROM customers\n",
                "result": [
                    [
                        [
                            "count(distinct country)"
                        ],
                        [
                            24
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(DISTINCT country) FROM customers"
            },
            {
                "isuser": true,
                "text": "How many customers do we have with the last name Almeida?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is one customer with the last name Almeida.",
                "query": "select count(*) from customers where last_name = \"Almeida\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM customers WHERE last_name = \"Almeida\""
            },
            {
                "isuser": true,
                "text": "Show me the country where Roberto Almeida is located",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The country where Roberto Almeida is located is Brazil.",
                "query": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";",
                "result": [
                    [
                        [
                            "country"
                        ],
                        [
                            "Brazil"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks. bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "allergy_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many students are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 30 different students",
                "query": "SELECT count(distinct StuID) FROM Has_allergy",
                "result": [
                    [
                        [
                            "count(distinct StuID)"
                        ],
                        [
                            30
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Student;"
            },
            {
                "isuser": true,
                "text": "How many allergies are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 12 different kind of allergies.",
                "query": "SELECT count(distinct allergy) FROM Has_allergy",
                "result": [
                    [
                        [
                            "count(distinct allergy)"
                        ],
                        [
                            12
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Allergy_Type;"
            },
            {
                "isuser": true,
                "text": "Can you display all student IDs with at least two allergies?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the ids of the  students with at least two allergies",
                "query": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*) >= 2",
                "result": [
                    [
                        [
                            "StuID"
                        ],
                        [
                            1002
                        ],
                        [
                            1005
                        ],
                        [
                            1007
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT StuID FROM Has_Allergy GROUP BY StuID HAVING count(*)  >=  2"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "coffee_shop",
        "turns": [
            {
                "isuser": true,
                "text": "What is the membership card of Breton,Robert?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The membership card of Breton, Robert is white.",
                "query": "SELECT Membership_card FROM member where Name='Breton, Robert'",
                "result": [
                    [
                        [
                            "Membership_card"
                        ],
                        [
                            "White"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT membership_card FROM member WHERE name = 'Breton, Robert'"
            },
            {
                "isuser": true,
                "text": "What is the time of purchase of Ashby,Lazale?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "The time of purchase of Ashby, Lazale is 18.",
                "query": "SELECT Time_of_purchase FROM member where Name='Ashby, Lazale'",
                "result": [
                    [
                        [
                            "Time_of_purchase"
                        ],
                        [
                            18
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT time_of_purchase FROM member WHERE name = 'Ashby, Lazale'"
            },
            {
                "isuser": true,
                "text": "What is the level of membership of Campbell,Jessie?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "The level of membership of Campbell, Jessie is 6.",
                "query": "SELECT Level_of_membership FROM member where Name='Campbell, Jessie'",
                "result": [
                    [
                        [
                            "Level_of_membership"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT level_of_membership FROM member WHERE name = 'Campbell, Jessie'"
            },
            {
                "isuser": true,
                "text": "What is the address of Id number 2?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "The address of ID number 2 is Waterbury.",
                "query": "SELECT Address FROM member where Member_ID= 2",
                "result": [
                    [
                        [
                            "Address"
                        ],
                        [
                            "Waterbury"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT address FROM member WHERE Member_ID = 2"
            },
            {
                "isuser": true,
                "text": "What is the age of Breton,Robert?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "You should ask some questions related to our tasks. The age of Breton, Robert is 67.",
                "query": "SELECT age FROM member where Name='Breton, Robert'",
                "result": [
                    [
                        [
                            "Age"
                        ],
                        [
                            67
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT age FROM member WHERE name = 'Breton, Robert'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "flight_1",
        "turns": [
            {
                "isuser": true,
                "text": "Can you display the salary and name of the employees?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the  salaries and names of the employees",
                "query": "SELECT salary, name from employee",
                "result": [
                    [
                        [
                            "salary",
                            "name"
                        ],
                        [
                            120433,
                            "James Smith"
                        ],
                        [
                            178345,
                            "Mary Johnson"
                        ],
                        [
                            153972,
                            "John Williams"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT salary ,  name FROM employee"
            },
            {
                "isuser": true,
                "text": "What is the name of the employee who has the most number of aircraft certificates?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "George Wright is the name of the employee who has the most number of aircraft certificates",
                "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "George Wright"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM employee WHERE eid IN (SELECT eid FROM certificate GROUP BY eid ORDER BY count(*) DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "Hmm, can you just list his salary?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Yes sure. the salary of the employee who has the most number of aircraft certificates is 289950",
                "query": "SELECT T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "salary"
                        ],
                        [
                            289950
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT salary FROM employee WHERE eid IN (SELECT eid FROM certificate GROUP BY eid ORDER BY count(*) DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks. bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "college_2",
        "turns": [
            {
                "isuser": true,
                "text": "Whsts the name of the student thst took prerequisite course  title internatoinal finance?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the students that took the prerequisite course of the course with title International Finance are shown in the result table. (There are none). ",
                "query": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')",
                "result": [
                    [
                        [
                            "name"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.name FROM takes AS T1 JOIN student AS T2 ON T1.ID = T2.ID JOIN course AS T3 ON T1.course_id = T3.course_id WHERE T3.title = \"International Finance\" AND T3.course_id IN (SELECT T4.course_id FROM prereq AS T4 WHERE T4.prereq_id = \"802\")"
            },
            {
                "isuser": true,
                "text": "What is the  title of course id 787?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The title of the course id 787 is C Programming. ",
                "query": "SELECT title from  course where course_id = 787",
                "result": [
                    [
                        [
                            "title"
                        ],
                        [
                            "C  Programming"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT title FROM course WHERE course_id = \"787\""
            },
            {
                "isuser": true,
                "text": "What is the department name of course id 787?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The department name for course id 787 is Mech. Eng.",
                "query": "SELECT dept_name from  course where course_id = 787",
                "result": [
                    [
                        [
                            "dept_name"
                        ],
                        [
                            "Mech. Eng."
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT dept_name FROM course WHERE course_id = \"787\""
            },
            {
                "isuser": true,
                "text": "Thsnks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, would you like to know anything else? ",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "No thats all thsnks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, good bye. ",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "college_3",
        "turns": [
            {
                "isuser": true,
                "text": "What is the grade of CID 550.681?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean the grades of students who enrolled in the course with CID 550.681?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT GRADE FROM ENROLLED_IN WHERE CID = '550.681'"
            },
            {
                "isuser": true,
                "text": "YES",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the grades of students who enrolled in the course with CID 550.681",
                "query": "SELECT grade from enrolled_in where cid = \"550.681\"",
                "result": [
                    [
                        [
                            "Grade"
                        ],
                        [
                            "A-"
                        ],
                        [
                            "A"
                        ],
                        [
                            "B"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT GRADE FROM ENROLLED_IN WHERE CID = '550.681'"
            },
            {
                "isuser": true,
                "text": "How many hours computer literacy course in a week?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The course with name COMPUTER LITERACY has 3 hours. ",
                "query": "SELECT hours from course where cname = \"COMPUTER LITERACY\"",
                "result": [
                    [
                        [
                            "Hours"
                        ],
                        [
                            "3"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT HOURS FROM COURSE WHERE CID = '550.681'"
            },
            {
                "isuser": true,
                "text": "In which day of a week the course introduction to computer science is taught?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The course with name INTRODUCTION TO COMPUTER SCIENCE is taught on Thursday.",
                "query": "SELECT days from course where cname = \"INTRODUCTION TO COMPUTER SCIENCE\"",
                "result": [
                    [
                        [
                            "Days"
                        ],
                        [
                            "Th"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Days FROM COURSE WHERE CID = '550.681'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "soccer_2",
        "turns": [
            {
                "isuser": true,
                "text": "How many female players are there?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "I cannot answer that question as no such information is in the table.",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT count(*) FROM Player WHERE gender = 'F'"
            },
            {
                "isuser": true,
                "text": "How many male players are there?\n",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "That information is also not in the table.",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT count(*) FROM Player WHERE gender = 'M'"
            },
            {
                "isuser": true,
                "text": "How many players have a yCard?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 3 players with a yCard.",
                "query": "SELECT count(*) FROM Player WHERE yCard=\"yes\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Player WHERE yCard = 'yes'"
            },
            {
                "isuser": true,
                "text": "What is the average HS score of all players?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the average HS score among all players.",
                "query": "SELECT avg(HS) FROM Player ",
                "result": [
                    [
                        [
                            "avg(HS)"
                        ],
                        [
                            1150.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(HS) FROM Player"
            },
            {
                "isuser": true,
                "text": "Which player has the lowest HS score?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the player who has the lowest HS score is Charles.",
                "query": "SELECT pName FROM Player ORDER BY HS ASC LIMIT 1",
                "result": [
                    [
                        [
                            "pName"
                        ],
                        [
                            "Charles"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT pName, min(HS) FROM Player GROUP BY pName"
            },
            {
                "isuser": true,
                "text": "What is the pID for Andrew?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the pID for Andrew.",
                "query": "SELECT pID FROM Player WHERE pName=\"Andrew\"",
                "result": [
                    [
                        [
                            "pID"
                        ],
                        [
                            10001
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT pID FROM Player WHERE pName = 'Andrew'"
            },
            {
                "isuser": true,
                "text": "And for Blake?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the pID for Blake.",
                "query": "SELECT pID FROM Player WHERE pName=\"Blake\"",
                "result": [
                    [
                        [
                            "pID"
                        ],
                        [
                            20002
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT pID FROM Player WHERE pName = 'Blake'"
            },
            {
                "isuser": true,
                "text": "How many players are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 6 players.",
                "query": "SELECT count(*) FROM Player",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Player"
            },
            {
                "isuser": true,
                "text": "What are there names?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the names of all players.",
                "query": "SELECT pName FROM Player",
                "result": [
                    [
                        [
                            "pName"
                        ],
                        [
                            "Andrew"
                        ],
                        [
                            "Blake"
                        ],
                        [
                            "Charles"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT pName FROM Player"
            }
        ]
    },
    {
        "db_name": "college_2",
        "turns": [
            {
                "isuser": true,
                "text": "Can you tell me which room number has a capacity higher than the average capacity?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the room numbers of the classrooms with a capacity higher than the average.",
                "query": "SELECT room_number FROM classroom WHERE capacity > (SELECT avg(capacity) FROM classroom)",
                "result": [
                    [
                        [
                            "room_number"
                        ],
                        [
                            "45"
                        ],
                        [
                            "134"
                        ],
                        [
                            "812"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT room_number FROM classroom WHERE capacity > (SELECT avg(capacity) FROM classroom)"
            },
            {
                "isuser": true,
                "text": "What is the range of capacity among rooms in each building?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the maximum and minimum capacities in each building.",
                "query": "SELECT max(capacity) ,  min(capacity) ,  building FROM classroom GROUP BY building",
                "result": [
                    [
                        [
                            "max(capacity)",
                            "min(capacity)",
                            "building"
                        ],
                        [
                            47,
                            26,
                            "Alumni"
                        ],
                        [
                            12,
                            12,
                            "Bronfman"
                        ],
                        [
                            11,
                            10,
                            "Chandler"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT building, min(capacity) AS min_capacity, max(capacity) AS max_capacity FROM classroom GROUP BY building"
            },
            {
                "isuser": true,
                "text": "Which building houses the room that has the maximum capacity?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Whitman has the room with the maximum capacity.",
                "query": "SELECT building FROM classroom order by capacity desc limit 1",
                "result": [
                    [
                        [
                            "building"
                        ],
                        [
                            "Whitman"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT building FROM classroom WHERE capacity = (SELECT max(capacity) FROM classroom)"
            },
            {
                "isuser": true,
                "text": "Which building houses the room that has the minimum capacity?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Lamberton is the building that has the room with the minimum capacity.",
                "query": "SELECT building FROM classroom order by capacity limit 1",
                "result": [
                    [
                        [
                            "building"
                        ],
                        [
                            "Lamberton"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT building FROM classroom WHERE capacity = (SELECT min(capacity) FROM classroom)"
            },
            {
                "isuser": true,
                "text": "What is the difference between the maximum and average capacity among rooms in each building?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the differences between the maximum and average capacity among rooms in each building",
                "query": "SELECT max(capacity) - avg(capacity), building FROM classroom GROUP BY building",
                "result": [
                    [
                        [
                            "max(capacity)-avg(capacity)",
                            "building"
                        ],
                        [
                            10.5,
                            "Alumni"
                        ],
                        [
                            0.0,
                            "Bronfman"
                        ],
                        [
                            0.5,
                            "Chandler"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT building, max(capacity) - avg(capacity) AS capacity_diff FROM classroom GROUP BY building"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are very welcome. Goodbye.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "shop_membership",
        "turns": [
            {
                "isuser": true,
                "text": "Show me the cities",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean you want the cities where there are branches there?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT DISTINCT city FROM branch"
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The distinct cities of all branches are London and Oxford.",
                "query": "SELECT distinct city FROM branch ",
                "result": [
                    [
                        [
                            "City"
                        ],
                        [
                            "London"
                        ],
                        [
                            "Oxford"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT city FROM branch"
            },
            {
                "isuser": true,
                "text": "show me the number of branches of cities",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Lodon has 5 branches and Oxford has 3 branches.",
                "query": "SELECT city , count(*) FROM branch  GROUP BY city",
                "result": [
                    [
                        [
                            "City",
                            "count(*)"
                        ],
                        [
                            "London",
                            5
                        ],
                        [
                            "Oxford",
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT city,COUNT(*) AS num_branches FROM branch GROUP BY city"
            },
            {
                "isuser": true,
                "text": "Count the branches opened before 2010?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 4 branches opened before 2010.",
                "query": "SELECT count(*) FROM branch WHERE open_year < 2010",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM branch WHERE open_year < 2010"
            },
            {
                "isuser": true,
                "text": "Count  branches opened before 2010 for each city",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "London has 2 branches and Oxford has 2 branches which opened before 2010.",
                "query": "SELECT city , count(*) FROM branch WHERE open_year < 2010 GROUP BY city",
                "result": [
                    [
                        [
                            "City",
                            "count(*)"
                        ],
                        [
                            "London",
                            2
                        ],
                        [
                            "Oxford",
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT city, count(*) FROM branch WHERE open_year < 2010 GROUP BY city"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Good bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "hr_1",
        "turns": [
            {
                "isuser": true,
                "text": "How much is the salary for employee id 163?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Employee with id 163 has salary 9500.",
                "query": "SELECT salary FROM employees WHERE employee_id = 163",
                "result": [
                    [
                        [
                            "SALARY"
                        ],
                        [
                            9500
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT salary FROM employees WHERE employee_id = 163"
            },
            {
                "isuser": true,
                "text": "What is employee id 163 full name?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The employee with id 163 has first name Danielle and last name Greene.",
                "query": "SELECT first_name, last_name FROM employees WHERE employee_id = 163",
                "result": [
                    [
                        [
                            "FIRST_NAME",
                            "LAST_NAME"
                        ],
                        [
                            "Danielle",
                            "Greene"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name, last_name FROM employees WHERE employee_id = 163"
            },
            {
                "isuser": true,
                "text": "Show me the full name for the employees that get more salary then employee 163?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of full names ( first names and last names ) for those employees who get more salary than the employee whose id is 163",
                "query": "SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = 163 )",
                "result": [
                    [
                        [
                            "FIRST_NAME",
                            "LAST_NAME"
                        ],
                        [
                            "Steven",
                            "King"
                        ],
                        [
                            "Neena",
                            "Kochhar"
                        ],
                        [
                            "Lex",
                            "De Haan"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name, last_name FROM employees WHERE salary > (SELECT salary FROM employees WHERE employee_id = 163)"
            },
            {
                "isuser": true,
                "text": "What department does employee 163 work under?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The employee with id 163 works under department with id 80.",
                "query": "SELECT department_id FROM employees WHERE employee_id = 163",
                "result": [
                    [
                        [
                            "DEPARTMENT_ID"
                        ],
                        [
                            80
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT department_id FROM employees WHERE employee_id = 163"
            },
            {
                "isuser": true,
                "text": "How many employee's work for employee's 163 department?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 34 employees who work for the same department as the employee with id 163.",
                "query": "SELECT count(*) from employees where department_id = (select department_id from employees where employee_id = 163)",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            34
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM employees WHERE department_id = (SELECT department_id FROM employees WHERE employee_id = 163)"
            },
            {
                "isuser": true,
                "text": "Who is the head of this department?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of ids for managers who work for the same department as the employee with id 163. ",
                "query": "SELECT distinct manager_id from employees where department_id = (select department_id from employees where employee_id = 163)",
                "result": [
                    [
                        [
                            "MANAGER_ID"
                        ],
                        [
                            100
                        ],
                        [
                            145
                        ],
                        [
                            146
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name, last_name FROM employees WHERE employee_id = (SELECT manager_id FROM employees WHERE employee_id = 163)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks. bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "wedding",
        "turns": [
            {
                "isuser": true,
                "text": "what is the Open Date of Pure Church of Christ?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean the open date of the church named Pure Church of Christ?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT open_date FROM church WHERE name = \"Pure Church of Christ\""
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "1831 is the open date of the church named Pure Church of Christ",
                "query": "SELECT open_date FROM church where name = \"Pure Church of Christ\"",
                "result": [
                    [
                        [
                            "Open_Date"
                        ],
                        [
                            1831
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT open_date FROM church WHERE name = \"Pure Church of Christ\""
            },
            {
                "isuser": true,
                "text": "who organized the Pure Church of Christ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Wycam Clark organized the church named Pure Church of Christ",
                "query": "SELECT organized_by FROM church where name = \"Pure Church of Christ\"",
                "result": [
                    [
                        [
                            "Organized_by"
                        ],
                        [
                            "Wycam Clark"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT organized_by FROM church WHERE name = \"Pure Church of Christ\""
            },
            {
                "isuser": true,
                "text": "what is the ID of the Church of Christ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "1 is the id of the church named Pure Church of Christ",
                "query": "SELECT church_id FROM church where name = \"Pure Church of Christ\"",
                "result": [
                    [
                        [
                            "Church_ID"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT church_id FROM church WHERE name = \"Church of Christ\""
            },
            {
                "isuser": true,
                "text": "I asked you that the ID of the Church of Christ, but you replied for  Pure Church of Christ.",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sorry. Here are the ids of churches with the name Church of Christ.",
                "query": "SELECT church_id FROM church where name = \"Church of Christ\"",
                "result": [
                    [
                        [
                            "Church_ID"
                        ],
                        [
                            3
                        ],
                        [
                            6
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "I apologize for the mistake. SELECT church_id FROM church WHERE name = \"Church of Christ\""
            },
            {
                "isuser": true,
                "text": "which church was organized by Ezra Booth?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you want the name of the church organized by Ezra Booth.",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT name FROM church WHERE organized_by = \"Ezra Booth\""
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Church of Christ is the name of the church organized by Ezra Booth",
                "query": "SELECT name FROM church where organized_by = \"Ezra Booth\"",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Church of Christ"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT open_date FROM church WHERE name = \"Pure Church of Christ\""
            },
            {
                "isuser": true,
                "text": "Show the opening year in which at least two churches opened",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There isn't any opening year in which at least two churches opened",
                "query": "SELECT open_date FROM church GROUP BY open_date HAVING count(*)  >=  2",
                "result": [
                    [
                        [
                            "Open_Date"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT open_date FROM church GROUP BY open_date HAVING COUNT(*) >= 2"
            },
            {
                "isuser": true,
                "text": "OK Thanks!...",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "cre_Docs_and_Epenses",
        "turns": [
            {
                "isuser": true,
                "text": "What is the ID of the project with the least number of documents?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The Project ID of the project with the least number of documents  is\n195",
                "query": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1",
                "result": [
                    [
                        [
                            "Project_ID"
                        ],
                        [
                            195
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the ID of the project with the most number of documents?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The Project ID  of the project with the most number of documents is 105 ",
                "query": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Project_ID"
                        ],
                        [
                            105
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the document date of project ID 105?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do  you mean Document ID 105",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT document_date FROM Documents WHERE project_id = 105"
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " The document date of project ID 105 is  null",
                "query": "SELECT \tDocument_Date  FROM Documents where Document_ID=105",
                "result": [
                    [
                        [
                            "Document_Date"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_date FROM Documents WHERE project_id = 105"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Welcome and goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "products_gen_characteristics",
        "turns": [
            {
                "isuser": true,
                "text": "Can you show me all the product names, codes and ids?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the product names, color codes and ids?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT product_name, product_id FROM Products"
            },
            {
                "isuser": true,
                "text": "Yes please.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The result table of product names, color codes and ids is shown.",
                "query": "SELECT product_name,color_code,product_id from Products",
                "result": [
                    [
                        [
                            "product_name",
                            "color_code",
                            "product_id"
                        ],
                        [
                            "cumin",
                            "4",
                            1
                        ],
                        [
                            "peper",
                            "2",
                            2
                        ],
                        [
                            "basil",
                            "9",
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product_name, product_id FROM Products"
            },
            {
                "isuser": true,
                "text": "I want to know the the product names and their color descriptions.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The result table of the product names and their color descriptions is shown.",
                "query": "SELECT t1.product_name , t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code ",
                "result": [
                    [
                        [
                            "product_name",
                            "color_description"
                        ],
                        [
                            "cumin",
                            "blue"
                        ],
                        [
                            "peper",
                            "white"
                        ],
                        [
                            "basil",
                            "red"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product_name, color_description FROM Products AS T1 JOIN Ref_Colors AS T2 ON T1.color_code = T2.color_code"
            },
            {
                "isuser": true,
                "text": "Hmm, can you tell me the color description of the product with the name “catnip”?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The color description of the product with the name “catnip” is white.",
                "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"",
                "result": [
                    [
                        [
                            "color_description"
                        ],
                        [
                            "white"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT color_description FROM Products AS T1 JOIN Ref_Colors AS T2 ON T1.color_code = T2.color_code WHERE product_name = \"catnip\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "school_bus",
        "turns": [
            {
                "isuser": true,
                "text": "What are the school names of the schools without school buses?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of schools without a school bus.",
                "query": "SELECT school FROM school WHERE school_id NOT IN (SELECT school_id FROM school_bus)",
                "result": [
                    [
                        [
                            "School"
                        ],
                        [
                            "St. Francis Assisi"
                        ],
                        [
                            "Columbia University"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT School FROM school WHERE School_ID NOT IN (SELECT School_ID FROM school_bus)"
            },
            {
                "isuser": true,
                "text": "Can you please get me the types of those schools?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the types for schools without a school bus.",
                "query": "SELECT TYPE FROM school WHERE school_id NOT IN (SELECT school_id FROM school_bus)",
                "result": [
                    [
                        [
                            "Type"
                        ],
                        [
                            "Private Catholic"
                        ],
                        [
                            "Private"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Type FROM school WHERE School_ID NOT IN (SELECT School_ID FROM school_bus)"
            },
            {
                "isuser": true,
                "text": "what are schools in Hawaii have school buses?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of schools in Hawaii that have school buses.",
                "query": "SELECT school  FROM school WHERE location like \"%Hawaii%\" and school_id IN (SELECT school_id FROM school_bus)",
                "result": [
                    [
                        [
                            "School"
                        ],
                        [
                            "Noelani Elementary School"
                        ],
                        [
                            "Punahou School"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT School FROM school WHERE School_ID IN (SELECT School_ID FROM school_bus) AND Location = \"Hawaii\""
            },
            {
                "isuser": true,
                "text": "What about in Indonesia?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "State Elementary School Menteng 01 is the name of the school in Indonesia that has school buses.",
                "query": "SELECT school  FROM school WHERE location like \"%Indonesia\" and school_id IN (SELECT school_id FROM school_bus)",
                "result": [
                    [
                        [
                            "School"
                        ],
                        [
                            "State Elementary School Menteng 01"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT School FROM school WHERE School_ID IN (SELECT School_ID FROM school_bus) AND Location = \"Indonesia\""
            },
            {
                "isuser": true,
                "text": "How many private schools are in Hawaii?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is 1 school in Hawaii that has type Private.",
                "query": "SELECT count(*)  FROM school WHERE location like \"%Hawaii\" and type = \"Private\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM school WHERE Location = \"Hawaii\" AND Type = \"Private\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "thanks.bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "products_for_hire",
        "turns": [
            {
                "isuser": true,
                "text": "What is the customer id that spends the most",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The customer ID of the customer that paid the most amount is 12.",
                "query": "SELECT customer_id FROM Payments GROUP BY customer_id ORDER BY sum(amount_paid) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "customer_id"
                        ],
                        [
                            12
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_id FROM Bookings GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "For that Customer with ID 12, what was the amount they spend?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The total amount paid by the customer with ID 12 is 1000.6500000000001.",
                "query": "SELECT sum(amount_paid) FROM Payments WHERE customer_id = 12",
                "result": [
                    [
                        [
                            "sum(amount_paid)"
                        ],
                        [
                            1000.6500000000001
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT sum(amount_payable) FROM Bookings WHERE customer_id = 12"
            },
            {
                "isuser": true,
                "text": "What was the payment type of customer with ID 12?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of the payment types of customer ID 12.",
                "query": "SELECT payment_type_code FROM Payments WHERE customer_id = 12",
                "result": [
                    [
                        [
                            "payment_type_code"
                        ],
                        [
                            "Cash"
                        ],
                        [
                            "Credit Card"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT payment_type_code FROM Payments WHERE customer_id = 12"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "local_govt_and_lot",
        "turns": [
            {
                "isuser": true,
                "text": "I'm looking for the things with Close status before 2017-06-19 02:59:21\n",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you want things that satisfy both criteria or at least at of them? And do you want the ids or other?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT * FROM Timed_Status_of_Things WHERE Date_and_Date  <  '2017-06-19 02:59:21'"
            },
            {
                "isuser": true,
                "text": "I want the number of things in a close status",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are six distinct things in a close status.",
                "query": "SELECT count(distinct thing_id) from Timed_Status_of_Things WHERE Status_of_Thing_Code  = \"Close\"",
                "result": [
                    [
                        [
                            "count(distinct thing_id)"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Timed_Status_of_Things WHERE Date_and_Date  <  '2017-06-19 02:59:21'"
            },
            {
                "isuser": true,
                "text": "of those things which are closed before 2017-06-19 02:59:21",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you still want the number of them?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT count(*) FROM Timed_Status_of_Things WHERE Date_and_Date  <  '2017-06-19 02:59:21' AND Status_of_Thing_Code = 'Close'"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are five distinct things with closed status and before 2017-06-19 02:59:21.",
                "query": "SELECT count(distinct thing_id) from Timed_Status_of_Things WHERE Status_of_Thing_Code  = \"Close\" AND Date_and_Date < '2017-06-19 02:59:21'",
                "result": [
                    [
                        [
                            "count(distinct thing_id)"
                        ],
                        [
                            5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Timed_Status_of_Things WHERE Date_and_Date  <  '2017-06-19 02:59:21' AND Status_of_Thing_Code = 'Close'"
            },
            {
                "isuser": true,
                "text": "What type of thing are all five of those?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The type of things with closed status and before 2017-06-19 02:59:21 are electronics or commen.",
                "query": "SELECT DISTINCT  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' and T1.Date_and_Date  <  '2017-06-19 02:59:21'",
                "result": [
                    [
                        [
                            "Type_of_Thing_Code"
                        ],
                        [
                            "Electronics"
                        ],
                        [
                            "Commen"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Type_of_Thing_Code FROM Things WHERE thing_id IN (SELECT thing_id FROM Timed_Status_of_Things WHERE Date_and_Date  <  '2017-06-19 02:59:21' AND Status_of_Thing_Code = 'Close') GROUP BY Type_of_Thing_Code HAVING count(*) = 5"
            },
            {
                "isuser": true,
                "text": "What is the distinct ID of elctronics or Commen?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The distinct ID of thing with type code elctronics or Commen is shown in the table.",
                "query": "SELECT DISTINCT  thing_id from things WHERE  Type_of_Thing_Code = \"Electronics\" or Type_of_Thing_Code = \"Commen\"",
                "result": [
                    [
                        [
                            "thing_id"
                        ],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            10
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT thing_id FROM Timed_Status_of_Things WHERE Date_and_Date  <  '2017-06-19 02:59:21' AND Status_of_Thing_Code = 'Close' AND Type_of_Thing_Code IN ('Electronics','Commen')"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "university_basketball",
        "turns": [
            {
                "isuser": true,
                "text": "Hi there! Can you tell me how many school have an affiliation type that is not public?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is 1 school has an affiliation type that is not public",
                "query": "SELECT COUNT(*) FROM university WHERE affiliation != 'Public'",
                "result": [
                    [
                        [
                            "COUNT(*)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM university WHERE affiliation != 'Public'"
            },
            {
                "isuser": true,
                "text": "Can you please tell me the name of that school and the enrollment?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The school and enrollment of the university has an affiliation type that is not public are Lebanon Valley College and 2100.0",
                "query": "SELECT school, enrollment FROM university WHERE affiliation != 'Public'",
                "result": [
                    [
                        [
                            "School",
                            "Enrollment"
                        ],
                        [
                            "Lebanon Valley College",
                            2100.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT school, enrollment FROM university WHERE affiliation != 'Public'"
            },
            {
                "isuser": true,
                "text": "What year was that school founded?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The university that has an affiliation type that is not public was founded in 1866.0",
                "query": "SELECT founded FROM university WHERE affiliation != 'Public'",
                "result": [
                    [
                        [
                            "Founded"
                        ],
                        [
                            1866.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT founded FROM university WHERE affiliation != 'Public'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome, bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "tracking_grants_for_research",
        "turns": [
            {
                "isuser": true,
                "text": "What is the send date of document Id 2?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The sent date of document id 2 is 2004-01-23 11:57:08.",
                "query": "SELECT sent_date FROM documents  WHERE document_id = 2",
                "result": [
                    [
                        [
                            "sent_date"
                        ],
                        [
                            "2004-01-23 11:57:08"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT sent_date FROM Documents WHERE document_id = 2"
            },
            {
                "isuser": true,
                "text": "What is the organisation details of Id 3?\n",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the organisation id of grant id 3?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT organisation_details FROM Organisations WHERE organisation_id = 3"
            },
            {
                "isuser": true,
                "text": "yes\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The organisation id of grant id 3 is 14.",
                "query": "SELECT organisation_id FROM grants WHERE grant_id =3",
                "result": [
                    [
                        [
                            "organisation_id"
                        ],
                        [
                            14
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT organisation_details FROM Organisations WHERE organisation_id = 3"
            },
            {
                "isuser": true,
                "text": "What is the grant end date of grant id 3?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The grant end date of grant id 3 is 1989-03-16 18:27:16.",
                "query": "SELECT grant_end_date FROM grants WHERE grant_id =3",
                "result": [
                    [
                        [
                            "grant_end_date"
                        ],
                        [
                            "1989-03-16 18:27:16"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT grant_end_date FROM Grants WHERE grant_id = 3"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "train_station",
        "turns": [
            {
                "isuser": false,
                "text": "Did you mean the ids of stations that server the train Ananthapuri Express?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable",
                "predict": "SELECT station_id FROM train_station WHERE train_id = 1"
            },
            {
                "isuser": true,
                "text": "Find the station id of Ananthapuri Express?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "the station ids that serve the train Ananthapuri Express are 1 and 2",
                "query": "SELECT T1.station_id FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  \"Ananthapuri Express\"",
                "result": [
                    [
                        [
                            "Station_ID"
                        ],
                        [
                            1
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT station_id FROM train_station WHERE train_id = 1"
            },
            {
                "isuser": true,
                "text": "What are the annual entry exit of station id 1?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the annual entry exit of station id 1 is 94.046",
                "query": "SELECT Annual_entry_exit FROM station where station_id = \"1\"",
                "result": [
                    [
                        [
                            "Annual_entry_exit"
                        ],
                        [
                            94.046
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT annual_entry_exit FROM station WHERE station_id = 1"
            },
            {
                "isuser": true,
                "text": "Find the total passengers of station id 1 and 2? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the total passengers of station id 1 and 2 are 103.534 and 85.38",
                "query": "SELECT Total_Passengers FROM station where station_id = \"1\" or station_id = \"2\"",
                "result": [
                    [
                        [
                            "Total_Passengers"
                        ],
                        [
                            103.534
                        ],
                        [
                            85.38
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT total_passengers FROM station WHERE station_id = 1 UNION SELECT total_passengers FROM station WHERE station_id = 2"
            },
            {
                "isuser": true,
                "text": "What are the names of the stations which serve both \"Ananthapuri Express\" and \"Guruvayur Express\" train?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the name of the stations which serve both \"Ananthapuri Express\" and \"Guruvayur Express\" train is London Waterloo.",
                "query": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  \"Ananthapuri Express\" INTERSECT SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  \"Guruvayur Express\"",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "London Waterloo"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT name FROM station WHERE station_id IN (SELECT station_id FROM train_station WHERE train_id IN (SELECT train_id FROM train WHERE name IN (\"Ananthapuri Express\", \"Guruvayur Express\")))"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "match_season",
        "turns": [
            {
                "isuser": true,
                "text": "Hello \nYes, I'm interested to know which college has two players",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Hi! This shows the colleges with two players.",
                "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  =  2",
                "result": [
                    [
                        [
                            "College"
                        ],
                        [
                            "Maryland"
                        ],
                        [
                            "UCLA"
                        ],
                        [
                            "Virginia"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT College FROM match_season GROUP BY College HAVING COUNT(*)  >  1"
            },
            {
                "isuser": true,
                "text": "Oh, I see, and what are the names of the players from UCLA?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Sure. These are players from college UCLA.",
                "query": "SELECT Player FROM match_season where College='UCLA'",
                "result": [
                    [
                        [
                            "Player"
                        ],
                        [
                            "Carlos Bocanegra Category:Articles with hCards"
                        ],
                        [
                            "Jonathan Bornstein Category:Articles with hCards"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Player FROM match_season WHERE College  =  \"UCLA\""
            },
            {
                "isuser": true,
                "text": "Can you also tell me which position they play?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Sure. This shows the players from college UCLA and their positions.",
                "query": "SELECT Player,Position FROM match_season where College='UCLA'",
                "result": [
                    [
                        [
                            "Player",
                            "Position"
                        ],
                        [
                            "Carlos Bocanegra Category:Articles with hCards",
                            "Defender"
                        ],
                        [
                            "Jonathan Bornstein Category:Articles with hCards",
                            "Defender"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Position FROM match_season WHERE College  =  \"UCLA\""
            },
            {
                "isuser": true,
                "text": "Great, I'm a bit curious as to how many players does UNLV have",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "College UNLV has one player.",
                "query": "SELECT count(*) FROM match_season where College='UNLV'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM match_season WHERE College  =  \"UNLV\""
            },
            {
                "isuser": true,
                "text": "One player, okay was the season 1997?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Yes, the season is 1997 for the player from College UNLV",
                "query": "SELECT season FROM match_season where College='UNLV'",
                "result": [
                    [
                        [
                            "Season"
                        ],
                        [
                            1997.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Season FROM match_season WHERE Player  =  \"Jeff Flake\" AND Season  =  1997"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure! What else can I help?",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "That will be all, and Thanks a lot!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are so welcome. Bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "Goodbye!"
            }
        ]
    },
    {
        "db_name": "cre_Drama_Workshop_Groups",
        "turns": [
            {
                "isuser": true,
                "text": "What is the address for FJA Filming?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the information about the address of the store with name FJA Filming.",
                "query": "SELECT T1.* FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  \"FJA Filming\"",
                "result": [
                    [
                        [
                            "Address_ID",
                            "Line_1",
                            "Line_2",
                            "City_Town",
                            "State_County",
                            "Other_Details"
                        ],
                        [
                            "286",
                            "51237 Maiya Center",
                            "Suite 714",
                            "New Lonzoville",
                            "Nebraska",
                            null
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.line_1 ,  T1.line_2 ,  T1.city_town ,  T1.state_county FROM Addresses AS T1 JOIN Stores AS T2 ON T1.address_id  =  T2.address_id WHERE T2.store_name  =  \"FJA Filming\""
            },
            {
                "isuser": true,
                "text": "What state is that in?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The state where the store with name FJA Filming is in is Nebraska.",
                "query": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  \"FJA Filming\"",
                "result": [
                    [
                        [
                            "State_County"
                        ],
                        [
                            "Nebraska"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.state_county FROM Addresses AS T1 JOIN Stores AS T2 ON T1.address_id  =  T2.address_id WHERE T2.store_name  =  \"FJA Filming\""
            },
            {
                "isuser": true,
                "text": "Are there any other businesses in Nebraska?\n",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "No. There is just a store named \"FJA Filming\".",
                "query": "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  \"Nebraska\" ",
                "result": [
                    [
                        [
                            "Store_Name"
                        ],
                        [
                            "FJA Filming"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.state_county FROM Addresses AS T1 JOIN Stores AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_county  =  \"Nebraska\""
            },
            {
                "isuser": true,
                "text": "What is the city?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The store named FJA Filming is in the city New Lonzoville.",
                "query": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  \"FJA Filming\"",
                "result": [
                    [
                        [
                            "City_Town"
                        ],
                        [
                            "New Lonzoville"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.city_town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_county  =  \"Nebraska\""
            },
            {
                "isuser": true,
                "text": "Last what is the phone number?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The phone number of the store named FJA Filming is +65(1)3590790358.",
                "query": "SELECT Store_Phone FROM Stores WHERE Store_Name  =  \"FJA Filming\"",
                "result": [
                    [
                        [
                            "Store_Phone"
                        ],
                        [
                            "+65(1)3590790358"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.store_phone FROM Addresses AS T1 JOIN Stores AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_county  =  \"Nebraska\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            }
        ]
    },
    {
        "db_name": "museum_visit",
        "turns": [
            {
                "isuser": true,
                "text": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the visitor who visited a museum opened before 2009 and a museum opened after 2011 is Fernando Gago.",
                "query": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Fernando Gago"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Name FROM VISIT AS T1 JOIN VISITOR AS T2 ON T1.visitor_ID = T2.ID WHERE T1.Museum_ID IN (SELECT Museum_ID FROM Museum WHERE Open_Year < 2009) INTERSECT SELECT T2.Name FROM VISIT AS T1 JOIN VISITOR AS T2 ON T1.visitor_ID = T2.ID WHERE T1.Museum_ID IN (SELECT Museum_ID FROM Museum WHERE Open_Year > 2011)"
            },
            {
                "isuser": true,
                "text": "What museum did he visit before 2009?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the museum that the visitor who visited a museum opened before 2009 and a museum opened after 2011 and also visited before 2009 is Plaza Museum.",
                "query": "SELECT t3.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 AND t1.name = (SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011)",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Plaza Museum"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Name FROM VISIT AS T1 JOIN VISITOR AS T2 ON T1.visitor_ID = T2.ID WHERE T1.Museum_ID IN (SELECT Museum_ID FROM Museum WHERE Open_Year < 2009)"
            },
            {
                "isuser": true,
                "text": "What is the ticket price at the Plaza Museum?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "The price per ticket at Plaza Museum is 16.006999999999998.",
                "query": "SELECT t2.total_spent / t2.Num_of_ticket FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.name = \"Plaza Museum\"",
                "result": [
                    [
                        [
                            "t2.total_spent / t2.Num_of_ticket"
                        ],
                        [
                            16.006999999999998
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Num_of_Ticket FROM VISIT AS T1 JOIN Museum AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T2.Name = \"Plaza Museum\""
            },
            {
                "isuser": true,
                "text": "How many people visited the plaza museum in 2009?\n",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry, we do not have information on the number of visits in each year.",
                "query": "",
                "result": [],
                "predict_type": "SORRY",
                "predict": "SELECT COUNT(*) FROM VISIT AS T1 JOIN Museum AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T2.Name = \"Plaza Museum\" AND T2.Open_Year = \"2009\""
            },
            {
                "isuser": true,
                "text": "What is the average number of tickets sold at the Plaza Museum?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry, we do not have information on the number of tickets sold at museums.",
                "query": "",
                "result": [],
                "predict_type": "SORRY",
                "predict": "SELECT AVG(T1.Num_of_Ticket) FROM VISIT AS T1 JOIN Museum AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T2.Name = \"Plaza Museum\""
            },
            {
                "isuser": true,
                "text": "What is Fernando Gago's membership level?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The level of membership of Fernando Gago is 6.",
                "query": "SELECT level_of_membership FROM visitor WHERE name = \"Fernando Gago\"",
                "result": [
                    [
                        [
                            "Level_of_membership"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Level_of_membership FROM VISIT AS T1 JOIN VISITOR AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Name = \"Fernando Gago\""
            },
            {
                "isuser": true,
                "text": "How old is Fernando Gago?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The age of the visitor Fernando Gago is 36.",
                "query": "SELECT age FROM visitor WHERE name = \"Fernando Gago\"",
                "result": [
                    [
                        [
                            "Age"
                        ],
                        [
                            36
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Age FROM VISIT AS T1 JOIN VISITOR AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Name = \"Fernando Gago\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "apartment_rentals",
        "turns": [
            {
                "isuser": true,
                "text": "What are the booking start and end dates of the apartments with more than 2 bedrooms ?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of the booking start and end dates of the apartments with more than 2 bedrooms. For example, one of them is 2016-09-26 17:13:49 and 2016-09-26 17:13:49.",
                "query": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2",
                "result": [
                    [
                        [
                            "booking_start_date",
                            "booking_start_date"
                        ],
                        [
                            "2016-09-26 17:13:49",
                            "2016-09-26 17:13:49"
                        ],
                        [
                            "2016-04-01 06:28:08",
                            "2016-04-01 06:28:08"
                        ],
                        [
                            "2017-03-13 16:20:14",
                            "2017-03-13 16:20:14"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.booking_start_date ,  T1.booking_end_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2"
            },
            {
                "isuser": true,
                "text": "What are the dates for apartment 585 ?\n",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean the booking start and end dates of the apartments with id 585?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T1.booking_start_date ,  T1.booking_end_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  '585'"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the booking start and end dates for apartment 585 are 2017-04-07 04:53:27 and 2017-04-07 04:53:27.",
                "query": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE t2.apt_number = \"Apt. 585\"",
                "result": [
                    [
                        [
                            "booking_start_date",
                            "booking_start_date"
                        ],
                        [
                            "2017-04-07 04:53:27",
                            "2017-04-07 04:53:27"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.booking_start_date ,  T1.booking_end_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  '585'"
            },
            {
                "isuser": true,
                "text": "Okay, what are the dates for the apartment in building 225 ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table for the booking start and end dates for the apartment in building with id 225. For example, one of them is 2016-09-26 17:13:49 and 2016-09-26 17:13:49.",
                "query": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE t2.building_id = \"225\"",
                "result": [
                    [
                        [
                            "booking_start_date",
                            "booking_start_date"
                        ],
                        [
                            "2016-09-26 17:13:49",
                            "2016-09-26 17:13:49"
                        ],
                        [
                            "2016-08-04 10:33:00",
                            "2016-08-04 10:33:00"
                        ],
                        [
                            "2016-07-25 02:57:04",
                            "2016-07-25 02:57:04"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.booking_start_date ,  T1.booking_end_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.building_id  =  225"
            },
            {
                "isuser": true,
                "text": "What are the apartment numbers of all apartments with more than 2 bedrooms ?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of the apartment numbers of all apartments with more than 2 bedrooms. For example, one of them is Apt. 859.",
                "query": "SELECT  T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2",
                "result": [
                    [
                        [
                            "apt_number"
                        ],
                        [
                            "Apt. 859"
                        ],
                        [
                            "Suite 634"
                        ],
                        [
                            "Suite 693"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.apt_number FROM Apartments AS T1 JOIN Apartment_Buildings AS T2 ON T1.building_id = T2.building_id WHERE T1.bedroom_count > 2"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "medicine_enzyme_interaction",
        "turns": [
            {
                "isuser": true,
                "text": "can you tell me all the enzymes that work in the cytosol?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The following table shows the names of all enzymes that work in the cytosol.",
                "query": "SELECT name from enzyme where location = \"Cytosol\"",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "ALA dehydratase"
                        ],
                        [
                            "PBG deaminase"
                        ],
                        [
                            "Uroporphyrinogen III synthase"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM enzyme WHERE location  =  \"cytosol\""
            },
            {
                "isuser": true,
                "text": "which of those enzymes is in the medicine with the name Aripiprazole?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The following table shows names of all enzymes that work in the cytosol and is in the medicine with the name Aripiprazole.",
                "query": "SELECT T3.name FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T2.name  =  'Aripiprazole' and T3.location = \"Cytosol\"",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "ALA dehydratase"
                        ],
                        [
                            "PBG deaminase"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM enzyme WHERE id IN (SELECT enzyme_id FROM medicine_enzyme_interaction WHERE medicine_id = (SELECT id FROM medicine WHERE name = \"Aripiprazole\"))"
            },
            {
                "isuser": true,
                "text": "are there any other enzymes that are not in the cytosol that have the name Aripiprazole?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The following table shows names of all enzymes that work in locations other than the cytosol and is in the medicine with the name Aripiprazole.",
                "query": "SELECT T3.name FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T2.name  =  'Aripiprazole' and T3.location != \"Cytosol\"",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "ALA synthase"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM enzyme WHERE id NOT IN (SELECT enzyme_id FROM medicine_enzyme_interaction WHERE medicine_id = (SELECT id FROM medicine WHERE name = \"Aripiprazole\")) AND name IN (SELECT name FROM enzyme WHERE location = \"cytosol\")"
            },
            {
                "isuser": true,
                "text": "and can you tell me what the interaction type is for ALA synthase?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "inhibitor is the interaction type is for ALA synthase",
                "query": "SELECT distinct(T1.interaction_type) FROM medicine_enzyme_interaction AS T1  JOIN enzyme AS T2 ON T1.enzyme_id  =  T2.id WHERE T2.name  =  'ALA synthase' ",
                "result": [
                    [
                        [
                            "interaction_type"
                        ],
                        [
                            "inhibitor"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT interaction_type FROM medicine_enzyme_interaction WHERE enzyme_id = (SELECT id FROM enzyme WHERE name = \"ALA synthase\")"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "theme_gallery",
        "turns": [
            {
                "isuser": true,
                "text": "How many exhibitions have an attendance of more than 100?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of exhibitions that have an attendance of more than 100 is 13.",
                "query": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 ",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            13
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM exhibition_record WHERE Attendance > 100"
            },
            {
                "isuser": true,
                "text": "How many exhibitions have a ticket price below 10?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of exhibitions that have a ticket price below 10 is 0.",
                "query": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE  T2.ticket_price  <  10",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM exhibition WHERE Ticket_Price < 10"
            },
            {
                "isuser": true,
                "text": "What are the dates of the exhibitions who have an attendance of more than 100?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The result table shows the dates of the exhibitions that have an attendance of more than 100 is shown.",
                "query": "SELECT T1.date FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 ",
                "result": [
                    [
                        [
                            "Date"
                        ],
                        [
                            "December 2"
                        ],
                        [
                            "December 5"
                        ],
                        [
                            "December 7"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Date FROM exhibition_record WHERE Attendance > 100"
            },
            {
                "isuser": true,
                "text": "What was the theme of the party held in the latest year?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The theme of the party held in the latest year was Summer.",
                "query": "SELECT theme FROM  exhibition order by Year desc limit 1",
                "result": [
                    [
                        [
                            "Theme"
                        ],
                        [
                            "Summer"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Theme FROM exhibition WHERE Year = (SELECT max(Year) FROM exhibition)"
            },
            {
                "isuser": true,
                "text": "What was the ticket price of that party?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The ticket price of the party held in the latest year is 9.95.",
                "query": "SELECT Ticket_Price FROM  exhibition order by Year desc limit 1",
                "result": [
                    [
                        [
                            "Ticket_Price"
                        ],
                        [
                            9.95
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Ticket_Price FROM exhibition WHERE Year = (SELECT max(Year) FROM exhibition)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "flight_2",
        "turns": [
            {
                "isuser": true,
                "text": "what is the source airport for United Airlines?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the source airports for flights with the airline United Airlines.",
                "query": "SELECT T1.SourceAirport FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
                "result": [
                    [
                        [
                            "SourceAirport"
                        ],
                        [
                            " APG"
                        ],
                        [
                            " ASY"
                        ],
                        [
                            " CVO"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT SourceAirport FROM Flights WHERE Airline = 1"
            },
            {
                "isuser": true,
                "text": "What are the flight numbers for United Airlines?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the flight numbers of all flights with the airline United Airlines.",
                "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
                "result": [
                    [
                        [
                            "FlightNo"
                        ],
                        [
                            28
                        ],
                        [
                            29
                        ],
                        [
                            44
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT FlightNo FROM Flights WHERE Airline = 1"
            },
            {
                "isuser": true,
                "text": "Where is flight 28 going to?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the destination airports of the flights with number 28.",
                "query": "SELECT DestAirport FROM flights WHERE FlightNo = 28",
                "result": [
                    [
                        [
                            "DestAirport"
                        ],
                        [
                            " ASY"
                        ],
                        [
                            " APG"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DestAirport FROM Flights WHERE FlightNo = 28"
            },
            {
                "isuser": true,
                "text": "What about flight 29?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the destination airports of the flights with number 29.",
                "query": "SELECT DestAirport FROM flights WHERE FlightNo = 29",
                "result": [
                    [
                        [
                            "DestAirport"
                        ],
                        [
                            " APG"
                        ],
                        [
                            " ABQ"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DestAirport FROM Flights WHERE FlightNo = 29"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Welcome! Bye.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "cre_Theme_park",
        "turns": [
            {
                "isuser": true,
                "text": "how many shops are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 4 shops.",
                "query": "SELECT count(*) FROM SHOPS",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Shops"
            },
            {
                "isuser": true,
                "text": "what kinds of shops are they?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list showing the details for the shops.",
                "query": "SELECT Shop_Details FROM SHOPS",
                "result": [
                    [
                        [
                            "Shop_Details"
                        ],
                        [
                            "soup"
                        ],
                        [
                            "coffee"
                        ],
                        [
                            "Flower"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT Shop_Details FROM Shops"
            },
            {
                "isuser": true,
                "text": "Can any one of them be accessed by bus?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Yes, we show the shop ids that can be accessed by bus.",
                "query": "SELECT T1.Shop_ID FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"bus\"",
                "result": [
                    [
                        [
                            "Shop_ID"
                        ],
                        [
                            8449
                        ],
                        [
                            8698
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT How_to_Get_There FROM Tourist_Attractions WHERE How_to_Get_There LIKE '%bus%'"
            },
            {
                "isuser": true,
                "text": "how about by walk?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This list shows the shop ids that can be accessed by walk.",
                "query": "SELECT T1.Shop_ID FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\"",
                "result": [
                    [
                        [
                            "Shop_ID"
                        ],
                        [
                            8429
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT How_to_Get_There FROM Tourist_Attractions WHERE How_to_Get_There LIKE '%walk%'"
            },
            {
                "isuser": true,
                "text": "What kind of shop is that?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the list of shop details for shops that can be accessed by walk. It is soup.",
                "query": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\"",
                "result": [
                    [
                        [
                            "Shop_Details"
                        ],
                        [
                            "soup"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT Shop_Details FROM Shops WHERE Shop_Details LIKE '%walk%'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome! Anything else?",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "No, that will be all.",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "See you!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "Goodbye!"
            }
        ]
    },
    {
        "db_name": "wta_1",
        "turns": [
            {
                "isuser": true,
                "text": "hi, what are the names of the players?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are the first and last names of all the players.",
                "query": "SELECT first_name,  last_name FROM players",
                "result": [
                    null
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name, last_name FROM players"
            },
            {
                "isuser": true,
                "text": "List the first names of all left hand players please",
                "type": "improper"
            },
            {
                "isuser": true,
                "text": "* I have left the chat *",
                "type": "answerable",
                "predict": "SELECT first_name FROM players WHERE hand = 'L'"
            },
            {
                "isuser": false,
                "text": "There are the first names of all left-hand players.",
                "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L'",
                "result": [
                    [
                        [
                            "first_name",
                            "last_name"
                        ],
                        [
                            "Florencia",
                            "Labat"
                        ],
                        [
                            "Magui",
                            "Serna"
                        ],
                        [
                            "Amanda",
                            "Grahame"
                        ]
                    ]
                ],
                "predict_type": "answerable"
            }
        ]
    },
    {
        "db_name": "game_1",
        "turns": [
            {
                "isuser": true,
                "text": "What are the names of all games that were played for at least 1000 hours?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the names of the games that were played for at least 1000 hours.",
                "query": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid GROUP BY T1.gameid HAVING sum(hours_played) >= 1000\n\n",
                "result": [
                    [
                        [
                            "GName"
                        ],
                        [
                            "Europe is the Universe"
                        ],
                        [
                            "Works of Widenius"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT GName FROM Video_Games WHERE GamesPlayed >= 1000"
            },
            {
                "isuser": true,
                "text": "What are the names of all games that were played for less than 1000 hours?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the names of the games that were played for less than 1000 hours.",
                "query": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid GROUP BY T1.gameid HAVING sum(hours_played) < 1000\n\n",
                "result": [
                    [
                        [
                            "GName"
                        ],
                        [
                            "RNG Stone"
                        ],
                        [
                            "The Vanishing of Eric Calder"
                        ],
                        [
                            "Grand Term Assignment"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT GName FROM Video_Games WHERE GamesPlayed < 1000"
            },
            {
                "isuser": true,
                "text": "What are the average hours played for each game type?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the average hours played for each game type.",
                "query": "SELECT T2.GType, AVG(T1.Hours_Played) FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid GROUP BY T2.GType",
                "result": [
                    [
                        [
                            "GType",
                            "AVG(T1.Hours_Played)"
                        ],
                        [
                            "Collectible card game",
                            41.0
                        ],
                        [
                            "Frist-person shooter",
                            25.5
                        ],
                        [
                            "Grand strategy",
                            1000.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(Hours_Played) ,  GType FROM Plays_Games GROUP BY GType"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Good bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "flight_2",
        "turns": [
            {
                "isuser": true,
                "text": "How many United Airlines flights go to the city called Aberdeen?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the number of United Airlines flights which go to City 'Aberdeen', which is 0.",
                "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\" AND T1.Airline  =  1"
            },
            {
                "isuser": true,
                "text": "What other cities does United Airlines go to?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the cities does United Airlines go to except for Aberdeen.",
                "query": "SELECT T2.city FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline where T2.city !=  'Aberdeen' and T3.airline = \"United Airlines\"",
                "result": [
                    [
                        [
                            "City"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T2.City FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T1.Airline  =  1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "shop_membership",
        "turns": [
            {
                "isuser": true,
                "text": "What are the names of all the branches?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names of the branches are Alexandre, Popert, Stanley, Zytogorski, Cochrane, Taverner, Saint Amant, and Brooke Greville.",
                "query": "SELECT Name FROM branch",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Alexandre"
                        ],
                        [
                            "Popert"
                        ],
                        [
                            "Stanley"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM branch"
            },
            {
                "isuser": true,
                "text": "Given  the branches are Alexandre, Popert, Stanley, Zytogorski, Cochrane, Taverner, Saint Amant, and Brooke Greville, which have members in Louisville, Kentucky?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The branches of Zytogorski and Alexandre have members with the hometown of Louisville, Kentucky.",
                "query": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Louisville, Kentucky'",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Zytogorski"
                        ],
                        [
                            "Alexandre"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM branch WHERE city = 'Louisville'"
            },
            {
                "isuser": true,
                "text": "Given the branches are Alexandre and Zytogorski,  which have members in Hiram, Georgia?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are no branches that also have members in Hiram, Georgia.",
                "query": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Hiram ,  Georgia'",
                "result": [
                    [
                        [
                            "Name"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM branch WHERE city = 'Hiram'"
            },
            {
                "isuser": true,
                "text": "Thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, goodbye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "inn_1",
        "turns": [
            {
                "isuser": true,
                "text": "Can you list the base price for all rooms?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the base price for all rooms.",
                "query": "SELECT basePrice FROM Rooms",
                "result": [
                    [
                        [
                            "basePrice"
                        ],
                        [
                            150
                        ],
                        [
                            150
                        ],
                        [
                            175
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT basePrice FROM Rooms"
            },
            {
                "isuser": true,
                "text": "Can you sort the list to show only the 3 highest base prices?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are 3 highest base prices of rooms. ",
                "query": "SELECT basePrice FROM Rooms ORDER BY basePrice DESC LIMIT 3",
                "result": [
                    [
                        [
                            "basePrice"
                        ],
                        [
                            250
                        ],
                        [
                            175
                        ],
                        [
                            175
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT basePrice FROM Rooms ORDER BY basePrice DESC LIMIT 3"
            },
            {
                "isuser": true,
                "text": "Can you please list the room name and room id associated with each of those 3 base prices?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the room name and id for the rooms with 3 highest base prices.",
                "query": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;",
                "result": [
                    [
                        [
                            "RoomId",
                            "roomName"
                        ],
                        [
                            "FNA",
                            "Frugal not apropos"
                        ],
                        [
                            "AOB",
                            "Abscond or bolster"
                        ],
                        [
                            "CAS",
                            "Convoke and sanguine"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT roomName, RoomId FROM Rooms WHERE basePrice IN (SELECT basePrice FROM Rooms ORDER BY basePrice DESC LIMIT 3)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "school_bus",
        "turns": [
            {
                "isuser": true,
                "text": "Can you list the driver ids and whether they drive full time or not? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the driver ids and whether or not they drive full time.",
                "query": "SELECT Driver_ID, If_full_time FROM school_bus",
                "result": [
                    [
                        [
                            "Driver_ID",
                            "If_full_time"
                        ],
                        [
                            10,
                            "F"
                        ],
                        [
                            7,
                            "T"
                        ],
                        [
                            4,
                            "T"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT driver_id ,  IF_full_time FROM school_bus"
            },
            {
                "isuser": true,
                "text": "Hmm, I also want to know their years working.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the driver ids, years working and whether or not they drive full time.",
                "query": "SELECT Driver_ID, Years_Working, If_full_time FROM school_bus",
                "result": [
                    [
                        [
                            "Driver_ID",
                            "Years_Working",
                            "If_full_time"
                        ],
                        [
                            10,
                            10,
                            "F"
                        ],
                        [
                            7,
                            8,
                            "T"
                        ],
                        [
                            4,
                            6,
                            "T"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT driver_id ,  IF_full_time ,  Years_Working FROM school_bus"
            },
            {
                "isuser": true,
                "text": "Can you tell me the name of the driver who is driving the school bus with the longest working history?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Henry Genga is the name of the driver who is driving the school bus with the longest working history.",
                "query": "SELECT t1.name FROM driver AS t1 JOIN school_bus AS t2 ON t1.driver_id = t2.driver_id ORDER BY years_working DESC LIMIT 1\n\n",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Henry Genga"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Name FROM driver AS T1 JOIN school_bus AS T2 ON T1.driver_id  =  T2.driver_id ORDER BY T2.Years_Working DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Good bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "film_rank",
        "turns": [
            {
                "isuser": true,
                "text": "Are there any films that do not have any market estimation?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes. There are some films that do not have any market estimation.",
                "query": "SELECT count(*) FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            9
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Title FROM FILM AS T1 EXCEPT SELECT T2.Title FROM FILM AS T2 JOIN FILM_MARKET_ESTIMATION AS T3 ON T2.Film_ID  =  T3.Film_ID"
            },
            {
                "isuser": true,
                "text": "What year did the earliest film release that does not have any market estimation information",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry I don't have information about the year of films that don't have any market estimation.Please ask something else.",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT MIN(T1.Year) FROM FILM AS T1 EXCEPT SELECT T2.Year FROM FILM AS T2 JOIN FILM_MARKET_ESTIMATION AS T3 ON T2.Film_ID  =  T3.Film_ID"
            },
            {
                "isuser": true,
                "text": "Can you list the titles of the films without any market estimations?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the titles of films that do not have any market estimation.",
                "query": "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)",
                "result": [
                    [
                        [
                            "Title"
                        ],
                        [
                            "Porky's"
                        ],
                        [
                            "Star Trek II: The Wrath of Khan"
                        ],
                        [
                            "48 Hrs"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Title FROM FILM AS T1 EXCEPT SELECT T2.Title FROM FILM AS T2 JOIN FILM_MARKET_ESTIMATION AS T3 ON T2.Film_ID  =  T3.Film_ID"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks. bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "climbing",
        "turns": [
            {
                "isuser": true,
                "text": "What are the names of mountains in the area?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list of all the names of mountains",
                "query": "SELECT Name FROM mountain",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Kibo (Uhuru Pk)"
                        ],
                        [
                            "Mount Kenya (Batian)"
                        ],
                        [
                            "Mawenzi (Hans Meyer Pk)"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM mountain WHERE Country  =  'England'"
            },
            {
                "isuser": true,
                "text": "How many of these have a height above 5000?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 4 mountains that have heights above 5000.",
                "query": "SELECT count(Name) FROM mountain WHERE Height  >  5000",
                "result": [
                    [
                        [
                            "count(Name)"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM mountain WHERE Country  =  'England' AND Height  >  5000"
            },
            {
                "isuser": true,
                "text": "What are the names of these mountains?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of mountains that have heights above 5000.",
                "query": "SELECT name FROM mountain WHERE Height  >  5000",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Kibo (Uhuru Pk)"
                        ],
                        [
                            "Mount Kenya (Batian)"
                        ],
                        [
                            "Mawenzi (Hans Meyer Pk)"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM mountain WHERE Country  =  'England' AND Height  >  5000"
            },
            {
                "isuser": true,
                "text": "Do any of these mountains above 5000 have a prominence above 1000?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes. Here are the names of mountains with heights above 5000 that have prominences above 1000.",
                "query": "SELECT Name FROM mountain WHERE Height  >  5000 and Prominence  >  1000",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Kibo (Uhuru Pk)"
                        ],
                        [
                            "Mount Kenya (Batian)"
                        ],
                        [
                            "Ngaliema / Mt Stanley (Margherita Pk)"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM mountain WHERE Country  =  'England' AND Height  >  5000 AND Prominence  >  1000"
            },
            {
                "isuser": true,
                "text": "Which of these 3 mountains is the tallest and has the most prominence?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry, can you ask two questions separately?",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT Name, Height, Prominence FROM mountain WHERE Country  =  'England' AND Height  >  5000 ORDER BY Height DESC, Prominence DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Which of these 3 mountains is the tallest?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Kibo (Uhuru Pk) is the tallest mountain with height above 5000 that has a prominence above 1000.",
                "query": "SELECT Name FROM mountain WHERE Height  >  5000 and Prominence  >  1000 order by height desc limit 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Kibo (Uhuru Pk)"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM mountain WHERE Country  =  'England' AND Height  >  5000 ORDER BY Height DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Cool! Bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "climbing",
        "turns": [
            {
                "isuser": true,
                "text": "list the countries with mountains with height less than 5200",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the  countries with mountains with height less than 5200",
                "query": "SELECT Country FROM mountain WHERE Height  <  5200",
                "result": [
                    [
                        [
                            "Country"
                        ],
                        [
                            "Kenya"
                        ],
                        [
                            "Tanzania"
                        ],
                        [
                            "DR Congo Uganda"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.Country FROM mountain AS T1 JOIN climber AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T1.Height < 5200"
            },
            {
                "isuser": true,
                "text": "what are countries with mountains with height more than 5600",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Tanzania is the country with mountains with height more than 5600 ",
                "query": "SELECT Country FROM mountain WHERE Height  >  5600",
                "result": [
                    [
                        [
                            "Country"
                        ],
                        [
                            "Tanzania"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.Country FROM mountain AS T1 JOIN climber AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T1.Height > 5600"
            },
            {
                "isuser": true,
                "text": "list both the countries with mountains height less than 5200 and height more than 5600 in the same table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Tanzania is the country with mountains with both height less than 5200 and height more than 5600.",
                "query": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200",
                "result": [
                    [
                        [
                            "Country"
                        ],
                        [
                            "Tanzania"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.Country FROM mountain AS T1 JOIN climber AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T1.Height < 5200 OR T1.Height > 5600"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome, goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "network_2",
        "turns": [
            {
                "isuser": true,
                "text": "What are the names of all the persons who are friends with Alice?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the name of all the persons who are friends with Alice is Zach",
                "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice'",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Zach"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM PersonFriend WHERE friend = 'Alice'"
            },
            {
                "isuser": true,
                "text": "Okay, could you show me Zach's job?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Zach's job is a doctor.",
                "query": "SELECT job from person where name = \"Zach\"",
                "result": [
                    [
                        [
                            "job"
                        ],
                        [
                            "doctor"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT job FROM Person WHERE name = 'Zach'"
            },
            {
                "isuser": true,
                "text": "How old is Zach?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Zach is 45 years old.",
                "query": "SELECT age from person where name = \"Zach\"",
                "result": [
                    [
                        [
                            "age"
                        ],
                        [
                            45
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT age FROM Person WHERE name = 'Zach'"
            },
            {
                "isuser": true,
                "text": "How many years has Zach been friends with Alice?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Zach has been friends with Alice for 6 years.",
                "query": "SELECT year from personfriend where friend = \"Alice\" and name = \"Zach\"",
                "result": [
                    [
                        [
                            "year"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT year FROM PersonFriend WHERE name = 'Zach' AND friend = 'Alice'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "student_1",
        "turns": [
            {
                "isuser": true,
                "text": "Hello! Can you please list all of the first and last names for all of the students in the database?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " here is  all of the first and last names for all of the students in the database",
                "query": "SELECT LastName\t,FirstName from list",
                "result": [
                    [
                        [
                            "LastName",
                            "FirstName"
                        ],
                        [
                            "AMY",
                            " PATRINA"
                        ],
                        [
                            "AREHART",
                            " VERTIE"
                        ],
                        [
                            "ATWOOD",
                            " BETHEL"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT FirstName ,  LastName FROM students"
            },
            {
                "isuser": true,
                "text": "Excellent!  Could you filter that list to show only the students who were taught by the teacher with the last name Moyer?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here is the students who were taught by the teacher with the last name Moyer",
                "query": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.lastname  =  \"MOYER\"",
                "result": [
                    [
                        [
                            "FirstName",
                            "LastName"
                        ],
                        [
                            " EVELINA",
                            "BROMLEY"
                        ],
                        [
                            " ANIKA",
                            "YUEN"
                        ],
                        [
                            " MEL",
                            "BALBOA"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT FirstName ,  LastName FROM students WHERE Classroom IN (SELECT Classroom FROM teachers WHERE LastName = \"Moyer\")"
            },
            {
                "isuser": true,
                "text": "Great!  Could you update this list to include the grade of each student?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "this shows the First Name, Last Name and Grade of the students who were taught by the teacher with the last name Moyer",
                "query": "SELECT T1.firstname ,  T1.lastname,Grade FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.lastname  =  \"MOYER\"",
                "result": [
                    [
                        [
                            "FirstName",
                            "LastName",
                            "Grade"
                        ],
                        [
                            " EVELINA",
                            "BROMLEY",
                            1
                        ],
                        [
                            " ANIKA",
                            "YUEN",
                            1
                        ],
                        [
                            " MEL",
                            "BALBOA",
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT FirstName ,  LastName ,  Grade FROM students WHERE Classroom IN (SELECT Classroom FROM teachers WHERE LastName = \"Moyer\")"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": true,
                "text": "* I have left the chat *",
                "type": "improper",
                "predict": "You're welcome!"
            },
            {
                "isuser": false,
                "text": "welcome,goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME"
            }
        ]
    },
    {
        "db_name": "customers_and_invoices",
        "turns": [
            {
                "isuser": false,
                "text": "Do you want the id of the account?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable",
                "predict": "SELECT account_id FROM Financial_transactions WHERE transaction_type = \"Credit\""
            },
            {
                "isuser": true,
                "text": "Please tell me how many accounts payed an amount over $600.\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "8 accounts paid an amount over $600.",
                "query": "SELECT count (distinct account_id) FROM Financial_transactions where transaction_amount > 600",
                "result": [
                    [
                        [
                            "count (distinct account_id)"
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Financial_transactions WHERE transaction_type = \"Credit\" AND transaction_amount > 600"
            },
            {
                "isuser": true,
                "text": "Did any of these accounts pay more for more than one time?\n",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes. The following tables shows the id of all accounts that have paid more than $600 for more than one time.",
                "query": "SELECT account_id FROM Financial_transactions where transaction_amount > 600 group by account_id having count(*) > 1",
                "result": [
                    [
                        [
                            "account_id"
                        ],
                        [
                            6
                        ],
                        [
                            9
                        ],
                        [
                            13
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT account_id ,  count(*) FROM Financial_transactions WHERE transaction_type = \"Credit\" GROUP BY account_id HAVING count(*)  >  1"
            },
            {
                "isuser": true,
                "text": "Which account had the most transactions?\n",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Account Id 9 has the most number of transactions.",
                "query": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "account_id"
                        ],
                        [
                            9
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT account_id ,  count(*) FROM Financial_transactions WHERE transaction_type = \"Credit\" GROUP BY account_id ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "driving_school",
        "turns": [
            {
                "isuser": true,
                "text": "how many customers are presented on the table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 15 customers.",
                "query": "SELECT COUNT(customer_id) FROM Customers  ",
                "result": [
                    [
                        [
                            "COUNT(customer_id)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Customers"
            },
            {
                "isuser": true,
                "text": "who is the highest amount outstanding",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "The customer ID of the customer with the highest amount outstanding is 8.",
                "query": "SELECT customer_id FROM customers ORDER BY amount_outstanding DESC LIMIT 1",
                "result": [
                    [
                        [
                            "customer_id"
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name, last_name, amount_outstanding FROM Customers ORDER BY amount_outstanding DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "what is the customer status code of Carole",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "The customer status code of Carole is Bad Customer.",
                "query": "SELECT customer_status_code FROM customers where first_name = \"Carole\"",
                "result": [
                    [
                        [
                            "customer_status_code"
                        ],
                        [
                            "Bad Customer"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_status_code FROM Customers WHERE first_name = \"Carole\""
            },
            {
                "isuser": true,
                "text": "please tell me Clara phone number",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Clara's phone number is 374-483-2758x85087.",
                "query": "SELECT phone_number FROM customers where first_name = \"Clara\"",
                "result": [
                    [
                        [
                            "phone_number"
                        ],
                        [
                            "374-483-2758x85087"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT phone_number FROM Customers WHERE first_name = \"Clara\""
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You're welcome, if you have no more questions, good bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "company_office",
        "turns": [
            {
                "isuser": true,
                "text": "How many companies have an industry of banking?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 8 companies that is in the Banking industry",
                "query": "SELECT count(*) FROM Companies WHERE Industry = \"Banking\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM Companies WHERE Industry = \"Banking\""
            },
            {
                "isuser": true,
                "text": "How many don't have a banking industry?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 11 companies that is not in the Banking industry",
                "query": "SELECT count(*) FROM Companies WHERE Industry != \"Banking\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            11
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM Companies WHERE Industry != \"Banking\""
            },
            {
                "isuser": true,
                "text": "What are the total sales of those companies?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the total sales of the companies that are not in the Banking industry is 2369.2",
                "query": "SELECT sum(sales_billion) FROM Companies WHERE Industry != \"Banking\"",
                "result": [
                    [
                        [
                            "sum(sales_billion)"
                        ],
                        [
                            2369.2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT SUM(Sales_billion) FROM Companies WHERE Industry != \"Banking\""
            },
            {
                "isuser": true,
                "text": "What is the maximum sales of those companies?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the maximum sales of the companies that are not in the Banking industry is 421.8",
                "query": "SELECT max(sales_billion) FROM Companies WHERE Industry != \"Banking\"",
                "result": [
                    [
                        [
                            "max(sales_billion)"
                        ],
                        [
                            421.8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT MAX(Sales_billion) FROM Companies WHERE Industry != \"Banking\""
            },
            {
                "isuser": true,
                "text": "What is the minimum sales?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the minimum sales of the companies that are not in the Banking industry is 98.7",
                "query": "SELECT min(sales_billion) FROM Companies WHERE Industry != \"Banking\"",
                "result": [
                    [
                        [
                            "min(sales_billion)"
                        ],
                        [
                            98.7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT MIN(Sales_billion) FROM Companies WHERE Industry != \"Banking\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "restaurant_1",
        "turns": [
            {
                "isuser": true,
                "text": "Which city code of Smith?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Is Smith first name or last name?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT city_code FROM Student WHERE Fname = \"Smith\""
            },
            {
                "isuser": true,
                "text": "first name",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is no record of the city code of the student with the first name Smith",
                "query": "SELECT city_code from  Student where fname = \"Smith\"",
                "result": [
                    [
                        [
                            "city_code"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Fname FROM Student WHERE StuID = 1"
            },
            {
                "isuser": true,
                "text": "What age of last name Kim?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The age of the student with the last name Kim is 19",
                "query": "SELECT age from  Student where lname = \"Kim\"",
                "result": [
                    [
                        [
                            "Age"
                        ],
                        [
                            19
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Age FROM Student WHERE LName = \"Kim\""
            },
            {
                "isuser": true,
                "text": "What are the student id of city code WAS?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the ids of students with the city code WAS",
                "query": "SELECT stuid from  Student where city_code = \"WAS\"",
                "result": [
                    [
                        [
                            "StuID"
                        ],
                        [
                            1003
                        ],
                        [
                            1019
                        ],
                        [
                            1035
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT StuID FROM Student WHERE city_code = \"WAS\""
            },
            {
                "isuser": true,
                "text": "Which major has least number of students? List the major and the number of students.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Major 100 has the least number of students. It has only 1 student.",
                "query": "SELECT Major ,  count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1;",
                "result": [
                    [
                        [
                            "Major",
                            "count(*)"
                        ],
                        [
                            100,
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Major, COUNT(*) AS num_students FROM Student GROUP BY Major ORDER BY num_students ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "dorm_1",
        "turns": [
            {
                "isuser": true,
                "text": "what's Smith Hall student capacity?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The student capacity of Smith Hall is 85.",
                "query": "SELECT DISTINCT(T1.student_capacity) FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name = \"Smith Hall\"",
                "result": [
                    [
                        [
                            "student_capacity"
                        ],
                        [
                            85
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT dorm_name ,  student_capacity FROM dorm WHERE dorm_name = \"Smith Hall\""
            },
            {
                "isuser": true,
                "text": "which of this have the least capacity of amenities?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "What do you mean by \"least capacity of amenities\"?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT dorm_name ,  student_capacity FROM dorm WHERE dorm_name = \"Smith Hall\""
            },
            {
                "isuser": true,
                "text": "sorry meant least number of amenities\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "I apologize for the delay. The name of the dorm with the least number of amenities is University Hovels.",
                "query": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1",
                "result": [
                    [
                        [
                            "dorm_name"
                        ],
                        [
                            "University Hovels"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT dorm_name ,  student_capacity FROM dorm WHERE dorm_name = \"Smith Hall\""
            },
            {
                "isuser": true,
                "text": "what's the name of the dorm with the highest amenities?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The dorm name with the most number of amenities is Dorm-plex 2000.",
                "query": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "dorm_name"
                        ],
                        [
                            "Dorm-plex 2000"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT dorm_name ,  student_capacity FROM dorm WHERE dorm_name = \"Smith Hall\""
            },
            {
                "isuser": true,
                "text": "which of this dorm has student capacity of 355?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the dorm with student capacity of 355 is Fawlty Towers.",
                "query": "SELECT dorm_name FROM dorm WHERE student_capacity = 355",
                "result": [
                    [
                        [
                            "dorm_name"
                        ],
                        [
                            "Fawlty Towers"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT dorm_name ,  student_capacity FROM dorm WHERE dorm_name = \"Smith Hall\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "course_teach",
        "turns": [
            {
                "isuser": false,
                "text": "Do you mean the grades of the math courses?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Yes!",
                "type": "answerable",
                "predict": "SELECT Grade FROM course_arrange WHERE Course_ID IN (SELECT Course_ID FROM course WHERE Course = \"Math\")"
            },
            {
                "isuser": true,
                "text": "Show the name of the teacher for the math course please?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names  of the teacher for the math course   are \nKearsley Brown,\nVicente Carretero",
                "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Kearsley Brown"
                        ],
                        [
                            "Vicente Carretero"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T1.Course_ID IN (SELECT Course_ID FROM course WHERE Course = \"Math\")"
            },
            {
                "isuser": true,
                "text": "What grades do they teach?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "The   grades  of courses that the teachers for the math teach are 1 and 3",
                "query": "SELECT T1.Grade FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID where T2.Course = \"Math\"",
                "result": [
                    [
                        [
                            "Grade"
                        ],
                        [
                            3
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Grade FROM course_arrange WHERE Teacher_ID IN (SELECT Teacher_ID FROM teacher WHERE Name IN (SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T1.Course_ID IN (SELECT Course_ID FROM course WHERE Course = \"Math\")))"
            },
            {
                "isuser": true,
                "text": "What dates do those courses start?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the Staring Dates  of the math courses.",
                "query": "SELECT T2.Staring_Date  FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID where T2.Course = \"Math\"",
                "result": [
                    [
                        [
                            "Staring_Date"
                        ],
                        [
                            "6 May"
                        ],
                        [
                            "6 May"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Staring_Date FROM course WHERE Course_ID IN (SELECT Course_ID FROM course_arrange WHERE Teacher_ID IN (SELECT Teacher_ID FROM teacher WHERE Name IN (SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T1.Course_ID IN (SELECT Course_ID FROM course WHERE Course = \"Math\")))))"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Welcome and goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "products_gen_characteristics",
        "turns": [
            {
                "isuser": true,
                "text": "Can you please show me name of the products?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the table of the product names. For example, they  are cumin, peper and basil.",
                "query": "SELECT distinct product_name from Products",
                "result": [
                    [
                        [
                            "product_name"
                        ],
                        [
                            "cumin"
                        ],
                        [
                            "peper"
                        ],
                        [
                            "basil"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product_name FROM Products"
            },
            {
                "isuser": true,
                "text": "Can you please show me the characteristic name used by least number of products?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "error is the characteristic name used by least number of products",
                "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) LIMIT 1",
                "result": [
                    [
                        [
                            "characteristic_name"
                        ],
                        [
                            "error"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT characteristic_name FROM Characteristics GROUP BY characteristic_name ORDER BY count(*) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Can you please show me the characteristic name used by most number of products?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "fast is  the characteristic name used by most number of products",
                "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "characteristic_name"
                        ],
                        [
                            "fast"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT characteristic_name FROM Characteristics GROUP BY characteristic_name ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "decoration_competition",
        "turns": [
            {
                "isuser": true,
                "text": "Where is the most common country across members?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The United States is the most common country across members.",
                "query": "SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Country"
                        ],
                        [
                            "United States"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Okay, which members are there?\n",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean which members are in United States?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT name FROM member"
            },
            {
                "isuser": true,
                "text": "Yes. Which members are in the United States?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the names of the members in United States.",
                "query": "SELECT name FROM member WHERE Country=\"United States\" ",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Jack Nicklaus"
                        ],
                        [
                            "Billy Casper"
                        ],
                        [
                            "Tom Watson"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM member WHERE Country = 'United States'"
            },
            {
                "isuser": true,
                "text": "Okay. What other countries are listed?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Canada is also listed in the table except for United States.",
                "query": "SELECT DISTINCT Country FROM member EXCEPT SELECT Country FROM member WHERE Country=\"United States\"",
                "result": [
                    [
                        [
                            "Country"
                        ],
                        [
                            "Canada"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC"
            },
            {
                "isuser": true,
                "text": "Who are the members in Canada?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of the members in Canada.",
                "query": "SELECT name FROM member WHERE Country=\"Canada\"",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Arnold Palmer"
                        ],
                        [
                            "Pat Fitzsimons"
                        ],
                        [
                            "Bobby Nichols"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM member WHERE Country = 'Canada'"
            },
            {
                "isuser": true,
                "text": "Thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You're welcome",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "poker_player",
        "turns": [
            {
                "isuser": true,
                "text": "What is the birth date of the poker player with the lowest earnings?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The birth date of the poker player with the lowest earnings is August 8, 1986.",
                "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
                "result": [
                    [
                        [
                            "Birth_Date"
                        ],
                        [
                            "August 8, 1986"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the name of the poker player with the lowest earnings?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the poker player with the lowest earnings is Yevgeni Sivozhelez.",
                "query": "SELECT name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Yevgeni Sivozhelez"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the nationality of the poker player with the lowest earnings?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The nationality of the poker player with the lowest earnings is Russia.",
                "query": "SELECT Nationality FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
                "result": [
                    [
                        [
                            "Nationality"
                        ],
                        [
                            "Russia"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Nationality FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "hospital_1",
        "turns": [
            {
                "isuser": true,
                "text": "Can you list the highest dose prescribed for any medication?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "What information do you want for the prescriptions? Do you want all information or just the dose amount?",
                "query": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "John Dorian"
                        ]
                    ]
                ],
                "predict_type": "ambiguous",
                "predict": "SELECT MAX(Dose) FROM Prescribes"
            },
            {
                "isuser": true,
                "text": "I wanted the name of the physician that prescribed the highest dose, but I believe you've already provided that information?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Yes the name of the physician that prescribed the highest dose is John Dorian.",
                "query": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "John Dorian"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Name FROM Physician AS T1 JOIN Prescribes AS T2 ON T1.EmployeeID  =  T2.Physician WHERE T2.Dose  =  (SELECT MAX(Dose) FROM Prescribes)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "hr_1",
        "turns": [
            {
                "isuser": false,
                "text": "Did you mean the employee with a first name Clara?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable",
                "predict": "Yes, I meant the employee with a first name Clara."
            },
            {
                "isuser": true,
                "text": "Show me all the employees in the same department as Clara.",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Here is all the information of all the employees in the same department as the employee with a first name Clara.",
                "query": "SELECT * FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"Clara\")",
                "result": [
                    [
                        [
                            "EMPLOYEE_ID",
                            "FIRST_NAME",
                            "LAST_NAME",
                            "EMAIL",
                            "PHONE_NUMBER",
                            "HIRE_DATE",
                            "JOB_ID",
                            "SALARY",
                            "COMMISSION_PCT",
                            "MANAGER_ID",
                            "DEPARTMENT_ID"
                        ],
                        [
                            145,
                            "John",
                            "Russell",
                            "JRUSSEL",
                            "011.44.1344.429268",
                            "1987-08-01",
                            "SA_MAN",
                            14000,
                            0.4,
                            100,
                            80
                        ],
                        [
                            146,
                            "Karen",
                            "Partners",
                            "KPARTNER",
                            "011.44.1344.467268",
                            "1987-08-02",
                            "SA_MAN",
                            13500,
                            0.3,
                            100,
                            80
                        ],
                        [
                            147,
                            "Alberto",
                            "Errazuriz",
                            "AERRAZUR",
                            "011.44.1344.429278",
                            "1987-08-03",
                            "SA_MAN",
                            12000,
                            0.3,
                            100,
                            80
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT * FROM employees WHERE department_id = (SELECT department_id FROM employees WHERE first_name = \"Clara\")"
            },
            {
                "isuser": true,
                "text": "Can you show me their hire dates?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of hire dates of the employees in the same department as the employee with a first name Clara. For example, one of them is 1987-08-01",
                "query": "SELECT hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"Clara\")",
                "result": [
                    [
                        [
                            "HIRE_DATE"
                        ],
                        [
                            "1987-08-01"
                        ],
                        [
                            "1987-08-02"
                        ],
                        [
                            "1987-08-03"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT hire_date FROM employees WHERE department_id = (SELECT department_id FROM employees WHERE first_name = \"Clara\")"
            },
            {
                "isuser": true,
                "text": "What is their average salary?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average salary of the employees in the same department as the employee with a first name Clara is 8955.882352941177.",
                "query": "SELECT  avg(SALARY) FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"Clara\")",
                "result": [
                    [
                        [
                            "avg(SALARY)"
                        ],
                        [
                            8955.882352941177
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(salary) FROM employees WHERE department_id = (SELECT department_id FROM employees WHERE first_name = \"Clara\")"
            },
            {
                "isuser": true,
                "text": "thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "college_2",
        "turns": [
            {
                "isuser": true,
                "text": "Find the name of instructors who are advisors of students from the Math department, and sort the results by students' total credit.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table, which is ordered by students' total credit, that shows the name of instructors who are advisors of the students from the Math department.",
                "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'Math' ORDER BY T3.tot_cred",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Gutierrez"
                        ],
                        [
                            "Pingr"
                        ],
                        [
                            "Morris"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.name ,  T1.tot_cred FROM student AS T1 JOIN advisor AS T2 ON T1.ID  =  T2.s_ID WHERE T1.dept_name  =  'Math' ORDER BY T1.tot_cred DESC"
            },
            {
                "isuser": true,
                "text": "Find name of students in the Math department",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table that shows the name of students in the Math department.",
                "query": "select name from student where dept_name='Math'",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Coppens"
                        ],
                        [
                            "Cirsto"
                        ],
                        [
                            "Leuen"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM student WHERE dept_name = 'Math'"
            },
            {
                "isuser": true,
                "text": "Give me IDs of instructors in the Marketing department",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table that shows ids of instructors in the Marketing department.",
                "query": "select ID from instructor where dept_name='Marketing'",
                "result": [
                    [
                        [
                            "ID"
                        ],
                        [
                            "96895"
                        ],
                        [
                            "74426"
                        ],
                        [
                            "58558"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT ID FROM instructor WHERE dept_name = 'Marketing'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "music_1",
        "turns": [
            {
                "isuser": true,
                "text": "What are the names of the top 3 artists with the largest number of songs?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of the top 3 artists with the largest number of songs",
                "query": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name  GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
                "result": [
                    [
                        [
                            "artist_name"
                        ],
                        [
                            "Enrique"
                        ],
                        [
                            "Farida"
                        ],
                        [
                            "Michel"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT artist_name FROM song GROUP BY artist_name ORDER BY count(*) DESC LIMIT 3"
            },
            {
                "isuser": true,
                "text": "What about the top 3 artists with the largest number of songs whose language is Bangla?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the top 3 artists with the largest number of songs whose language is Bangla",
                "query": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3\n\n",
                "result": [
                    [
                        [
                            "artist_name"
                        ],
                        [
                            "Farida"
                        ],
                        [
                            "Prity"
                        ],
                        [
                            "Shrikanta"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT artist_name FROM song WHERE languages = \"Bangla\" GROUP BY artist_name ORDER BY count(*) DESC LIMIT 3"
            },
            {
                "isuser": true,
                "text": "What are their preferred genres?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the preferred genre of the top 3 artists with the largest number of songs whose language is Bangla ",
                "query": "SELECT T1.preferred_genre FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3\n\n",
                "result": [
                    [
                        [
                            "preferred_genre"
                        ],
                        [
                            "folk"
                        ],
                        [
                            "nazrul"
                        ],
                        [
                            "tagore"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT preferred_genre FROM artist WHERE artist_name IN (SELECT artist_name FROM song WHERE languages = \"Bangla\" GROUP BY artist_name ORDER BY count(*) DESC LIMIT 3)"
            },
            {
                "isuser": true,
                "text": "Could you list the names of all artists that prefer the genre folk and speak the language Bangla?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Farida is the only artist that prefer the genre folk and speak the language Bangla",
                "query": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = \"bangla\" AND T1.preferred_genre = \"folk\"\n\n",
                "result": [
                    [
                        [
                            "artist_name"
                        ],
                        [
                            "Farida"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT artist_name FROM artist WHERE preferred_genre = \"folk\" AND country = \"Bangladesh\""
            },
            {
                "isuser": true,
                "text": "How about the names of all artists that prefer the genre folk?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Farida is the only artist that prefer the genre folk",
                "query": "SELECT artist_name FROM artist  WHERE preferred_genre = \"folk\"\n\n",
                "result": [
                    [
                        [
                            "artist_name"
                        ],
                        [
                            "Farida"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT artist_name FROM artist WHERE preferred_genre = \"folk\""
            },
            {
                "isuser": true,
                "text": "How about the names of all artists that prefer the genre tagore?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Shrikanta is the only artist that prefer the genre tagore",
                "query": "SELECT artist_name FROM artist  WHERE preferred_genre = \"tagore\"\n\n",
                "result": [
                    [
                        [
                            "artist_name"
                        ],
                        [
                            "Shrikanta"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT artist_name FROM artist WHERE preferred_genre = \"tagore\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "department_store",
        "turns": [
            {
                "isuser": true,
                "text": "What are the staff names with job title code Sales Person?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The results table shows the staff names of the sales persons. ",
                "query": "SELECT T1.staff_name  FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" ",
                "result": [
                    [
                        [
                            "staff_name"
                        ],
                        [
                            "Sabrina"
                        ],
                        [
                            "Zakary"
                        ],
                        [
                            "Melody"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\""
            },
            {
                "isuser": true,
                "text": "What are their genders?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Would you like their names and their genders? ",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\""
            },
            {
                "isuser": true,
                "text": "Yes.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names and genders of the Sales Persons.",
                "query": "SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\"",
                "result": [
                    [
                        [
                            "staff_name",
                            "staff_gender"
                        ],
                        [
                            "Melody",
                            "1"
                        ],
                        [
                            "Sabrina",
                            "1"
                        ],
                        [
                            "Zakary",
                            "1"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\""
            },
            {
                "isuser": true,
                "text": "What are the staff names and genders for people with job title code Sales Person?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the staff names and genders of the people with job title code Sales Person. ",
                "query": "SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" ",
                "result": [
                    [
                        [
                            "staff_name",
                            "staff_gender"
                        ],
                        [
                            "Sabrina",
                            "1"
                        ],
                        [
                            "Zakary",
                            "1"
                        ],
                        [
                            "Melody",
                            "1"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\""
            },
            {
                "isuser": true,
                "text": "How about with job title code Clerical Staff?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The result table shows the staff names and genders of the people with job title code Clerical Staff. ",
                "query": "SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = \"Clerical Staff\"",
                "result": [
                    [
                        [
                            "staff_name",
                            "staff_gender"
                        ],
                        [
                            "Tom",
                            "1"
                        ],
                        [
                            "Vito",
                            "1"
                        ],
                        [
                            "Katelynn",
                            "1"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\""
            },
            {
                "isuser": true,
                "text": "Which of the people with job title code Sales Person are not Clerical Staff?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This result table shows the staff_name, and staff_gender entries of those with the job title code Sales Person but not Clerical Staff. ",
                "query": "SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = \"Sales Person\" EXCEPT SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = \"Clerical Staff\"",
                "result": [
                    [
                        [
                            "staff_name",
                            "staff_gender"
                        ],
                        [
                            "Melody",
                            "1"
                        ],
                        [
                            "Sabrina",
                            "1"
                        ],
                        [
                            "Zakary",
                            "1"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.staff_name , T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" AND NOT T2.job_title_code = \"Clerical Staff\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, goodbye. ",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "department_store",
        "turns": [
            {
                "isuser": true,
                "text": "Hello there!  Can you provide me with a list of all customer names and addresses?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the all customer name and address ",
                "query": "select customer_name,customer_address from Customers;",
                "result": [
                    [
                        [
                            "customer_name",
                            "customer_address"
                        ],
                        [
                            "Ahmed",
                            "75099 Tremblay Port Apt. 163\nSouth Norrisland, SC 80546"
                        ],
                        [
                            "Chauncey",
                            "8408 Lindsay Court\nEast Dasiabury, IL 72656-3552"
                        ],
                        [
                            "Lukas",
                            "7162 Rodolfo Knoll Apt. 502\nLake Annalise, TN 35791-8871"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_name ,  customer_address FROM customers"
            },
            {
                "isuser": true,
                "text": "Great!  Can you filter this list to show me the rows that correspond to the customers who have both new and pending orders?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "here are the customer name and address which correspond to the customers who have both new and pending orders",
                "query": "SELECT T1.customer_name , T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = \"New\" INTERSECT SELECT T1.customer_name , T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = \"Pending\"",
                "result": [
                    [
                        [
                            "customer_name",
                            "customer_address"
                        ],
                        [
                            "Lexus",
                            "9581 Will Flat Suite 272\nEast Cathryn, WY 30751-4404"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_name ,  customer_address FROM customers WHERE customer_id IN (SELECT customer_id FROM customer_orders WHERE order_status_code = 'new' INTERSECT SELECT customer_id FROM customer_orders WHERE order_status_code = 'pending')"
            },
            {
                "isuser": true,
                "text": "Thank you for that!  Can you tell me how many customer customers have an order status code of \"Completed\" or \"PartFilled\"?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "here are 5 customers who have an order status code of \"Completed\" or \"PartFilled\"",
                "query": "select count(order_id) from Customer_Orders where order_status_code = 'Completed' or order_status_code ='PartFilled'",
                "result": [
                    [
                        [
                            "count(order_id)"
                        ],
                        [
                            5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM customer_orders WHERE order_status_code = 'Completed' OR order_status_code = 'PartFilled'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            }
        ]
    },
    {
        "db_name": "medicine_enzyme_interaction",
        "turns": [
            {
                "isuser": true,
                "text": "What're the names of the enzymes in the medicine \"Amisulpride\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the name of the enzymes in the medicine \"Amisulpride\"",
                "query": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride'",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "ALA synthase"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.name FROM medicine_enzyme_interaction AS T1 JOIN enzyme AS T2 ON T1.enzyme_id = T2.id WHERE T1.medicine_id = 1"
            },
            {
                "isuser": true,
                "text": "What're the names of the enzymes in the medicine \"Amisulpride\" that can serve as an inhibitor?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the name of the enzymes in the medicine \"Amisulpride\" that can serve as an inhibitor",
                "query": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "ALA synthase"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.name FROM medicine_enzyme_interaction AS T1 JOIN enzyme AS T2 ON T1.enzyme_id = T2.id WHERE T1.interaction_type = \"inhibitor\" AND T1.medicine_id = 1"
            },
            {
                "isuser": true,
                "text": "What are the names of all enzymes that can serve as inhibitors?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of all enzymes that can serve as inhibitors",
                "query": "SELECT distinct(T1.name) FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T2.interaction_type  =  'inhibitor'",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "ALA synthase"
                        ],
                        [
                            "ALA dehydratase"
                        ],
                        [
                            "PBG deaminase"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.name FROM medicine_enzyme_interaction AS T1 JOIN enzyme AS T2 ON T1.enzyme_id = T2.id WHERE T1.interaction_type = \"inhibitor\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "tracking_grants_for_research",
        "turns": [
            {
                "isuser": true,
                "text": "What is the organisation ID of the organisation with grant amount of 4094.542??",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The organisation ID of the organisation with grant amount of 4094.542 is 10.",
                "query": "SELECT organisation_id from grants where grant_amount = 4094.542",
                "result": [
                    [
                        [
                            "organisation_id"
                        ],
                        [
                            10
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT organisation_id FROM Grants WHERE grant_amount = 4094.542"
            },
            {
                "isuser": true,
                "text": "What is its grant start date?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The grant start date of the grant with an amount of 4094.542 is 2016-11-20 00:18:51",
                "query": "SELECT grant_start_date from grants where grant_amount = 4094.542",
                "result": [
                    [
                        [
                            "grant_start_date"
                        ],
                        [
                            "2016-11-20 00:18:51"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT grant_start_date FROM Grants WHERE grant_amount = 4094.542"
            },
            {
                "isuser": true,
                "text": "What about its end date?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The grant end date of the grant with an amount of 4094.542 is 2004-10-24 09:09:39",
                "query": "SELECT grant_end_date from grants where grant_amount = 4094.542",
                "result": [
                    [
                        [
                            "grant_end_date"
                        ],
                        [
                            "2004-10-24 09:09:39"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT grant_end_date FROM Grants WHERE grant_amount = 4094.542"
            },
            {
                "isuser": true,
                "text": "What is the grant amount of the organisation with the id 14?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The grant amounts of the grant with an organisation id of 14 are shown in the table.",
                "query": "SELECT grant_amount from grants where organisation_id = 14",
                "result": [
                    [
                        [
                            "grant_amount"
                        ],
                        [
                            4515947.7015
                        ],
                        [
                            66.4203
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT grant_amount FROM Grants WHERE organisation_id = 14"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "twitter_1",
        "turns": [
            {
                "isuser": true,
                "text": "Can you list the uids and names of all users?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the uids and names of all users.",
                "query": "SELECT uid, name FROM user_profiles",
                "result": [
                    [
                        [
                            "uid",
                            "name"
                        ],
                        [
                            1,
                            "Iron Man"
                        ],
                        [
                            2,
                            "Mary"
                        ],
                        [
                            3,
                            "Black Widow\n"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT uid ,  name FROM user_profiles"
            },
            {
                "isuser": true,
                "text": "Hmm, I want to know the number of followers of each user.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name and number of followers of each user is listed in the table.",
                "query": "SELECT name, followers FROM user_profiles",
                "result": [
                    [
                        [
                            "name",
                            "followers"
                        ],
                        [
                            "Iron Man",
                            6662425
                        ],
                        [
                            "Mary",
                            890
                        ],
                        [
                            "Black Widow\n",
                            35425845
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT uid ,  followers FROM user_profiles"
            },
            {
                "isuser": true,
                "text": "What is the maximum number of followers of all users?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The maximum number of followers of all users is 99999998",
                "query": "SELECT max(followers) FROM user_profiles",
                "result": [
                    [
                        [
                            "max(followers)"
                        ],
                        [
                            99999998
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT MAX(followers) FROM user_profiles"
            },
            {
                "isuser": true,
                "text": "What is the total number of followers of all users?\n\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The total number of followers of all users is 260392178",
                "query": "SELECT sum(followers) FROM user_profiles",
                "result": [
                    [
                        [
                            "sum(followers)"
                        ],
                        [
                            260392178
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT SUM(followers) FROM user_profiles"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "wrestler",
        "turns": [
            {
                "isuser": true,
                "text": "hi. can you tell me how many wrestlers were eliminated?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 6 wrestlers eliminated.",
                "query": "SELECT COUNT(*) FROM Elimination",
                "result": [
                    [
                        [
                            "COUNT(*)"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Elimination"
            },
            {
                "isuser": true,
                "text": "and how many have the largest days held?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "There can only be one with largest days held, what do you mean by \"how many\"?",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT count(*) FROM wrestler WHERE Days_held = (SELECT max(Days_held) FROM wrestler)"
            },
            {
                "isuser": true,
                "text": "can you list the elimination times of those with the largest days held?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Again, there can only be one with the largest days held, would you like that one? There are  not multiple that can be \"largest\"",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT Time FROM Elimination WHERE Wrestler_ID IN (SELECT Wrestler_ID FROM wrestler WHERE Days_held = (SELECT max(Days_held) FROM wrestler))"
            },
            {
                "isuser": true,
                "text": "yes, please",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The time of the elimination of the wrestler with the largest days held is 10:45.",
                "query": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Time"
                        ],
                        [
                            "10:45"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Time FROM Elimination WHERE Wrestler_ID IN (SELECT Wrestler_ID FROM wrestler WHERE Days_held = (SELECT max(Days_held) FROM wrestler))"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Good bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            }
        ]
    },
    {
        "db_name": "student_assessment",
        "turns": [
            {
                "isuser": true,
                "text": "What is the Course Id for English\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The course id for English is 302.",
                "query": "SELECT course_id FROM courses WHERE course_name = \"English\"",
                "result": [
                    [
                        [
                            "course_id"
                        ],
                        [
                            "302"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT course_id FROM Courses WHERE course_name = \"English\""
            },
            {
                "isuser": true,
                "text": "how many different student ids are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 6 unique student ids. ",
                "query": "SELECT count(distinct student_id) from student_course_attendance",
                "result": [
                    [
                        [
                            "count(distinct student_id)"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(DISTINCT student_id) FROM Student_Course_Registrations"
            },
            {
                "isuser": true,
                "text": "How many students enrolled in Course ID 302?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 2 students who enrolled in the course with id 302. ",
                "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.course_id = 302",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM Student_Course_Registrations WHERE course_id = 302"
            },
            {
                "isuser": true,
                "text": "thanks\n",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you're welcome. ",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "poker_player",
        "turns": [
            {
                "isuser": true,
                "text": "how many poker players are on the table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 5 poker players.",
                "query": "SELECT count(*) FROM poker_player",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM poker_player"
            },
            {
                "isuser": true,
                "text": "how many have height higher than 200",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Two poker players are taller than 200.",
                "query": "SELECT count(*) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM people WHERE height > 200"
            },
            {
                "isuser": true,
                "text": "what is the average earnings of poker players with height higher than 200\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the average earnings of the players whose height is higher than 200.",
                "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
                "result": [
                    [
                        [
                            "avg(T2.Earnings)"
                        ],
                        [
                            309445.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(Earnings) FROM poker_player WHERE Height > 200"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Good Bye.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "college_3",
        "turns": [
            {
                "isuser": true,
                "text": "which dno has no stuid associated with it?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The following table shows all DNO with no stuid associated with it.",
                "query": "SELECT DNO from Department where DNO not in (select DNO from Minor_in)",
                "result": [
                    [
                        [
                            "DNO"
                        ],
                        [
                            10
                        ],
                        [
                            20
                        ],
                        [
                            30
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DNO FROM Minor_in EXCEPT SELECT DNO FROM Minor_in WHERE StuID IN (SELECT StuID FROM Student)"
            },
            {
                "isuser": true,
                "text": "what are the dname's of those DNO's?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The departments' name of departments with no stuid associated with it are shown in the table.",
                "query": "SELECT DName from Department where DNO not in (select DNO from Minor_in)",
                "result": [
                    [
                        [
                            "DName"
                        ],
                        [
                            "History of Art"
                        ],
                        [
                            "Biology"
                        ],
                        [
                            "Chemistry"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DName FROM Department WHERE DNO IN (SELECT DNO FROM Minor_in EXCEPT SELECT DNO FROM Minor_in WHERE StuID IN (SELECT StuID FROM Student))"
            },
            {
                "isuser": true,
                "text": "sort the department names alphabetically",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The departments' name of departments with no stuid associated with it ordered alphabetically are shown in the table. ",
                "query": "SELECT DName from Department where DNO not in (select DNO from Minor_in) order by DName ",
                "result": [
                    [
                        [
                            "DName"
                        ],
                        [
                            "Anthropology"
                        ],
                        [
                            "Biology"
                        ],
                        [
                            "Biomedical Engineering"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DName FROM Department WHERE DNO IN (SELECT DNO FROM Minor_in EXCEPT SELECT DNO FROM Minor_in WHERE StuID IN (SELECT StuID FROM Student)) ORDER BY DName ASC"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "movie_1",
        "turns": [
            {
                "isuser": true,
                "text": "list the names of all movies",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list that contains the names of all movies.",
                "query": "SELECT title FROM Movie ",
                "result": [
                    [
                        [
                            "title"
                        ],
                        [
                            "Gone with the Wind"
                        ],
                        [
                            "Star Wars"
                        ],
                        [
                            "The Sound of Music"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT title FROM Movie"
            },
            {
                "isuser": true,
                "text": "list the year each movie was released ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list that contains the names and the year released of all movies.",
                "query": "SELECT title, year FROM Movie ",
                "result": [
                    [
                        [
                            "title",
                            "year"
                        ],
                        [
                            "Gone with the Wind",
                            1939
                        ],
                        [
                            "Star Wars",
                            1977
                        ],
                        [
                            "The Sound of Music",
                            1965
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT year FROM Movie"
            },
            {
                "isuser": true,
                "text": "list the titles of all movies ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the title of all movies.",
                "query": "SELECT title FROM Movie ",
                "result": [
                    [
                        [
                            "title"
                        ],
                        [
                            "Gone with the Wind"
                        ],
                        [
                            "Star Wars"
                        ],
                        [
                            "The Sound of Music"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT title FROM Movie"
            },
            {
                "isuser": true,
                "text": "Thanks!  ",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "document_management",
        "turns": [
            {
                "isuser": true,
                "text": "Hello! How many documents are there total?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 15 documents in total.",
                "query": "SELECT count(document_name) FROM documents",
                "result": [
                    [
                        [
                            "count(document_name)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Documents"
            },
            {
                "isuser": true,
                "text": "Perfect, thanks for that. Now, how many documents don't have images?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are five documents that don't have any images.",
                "query": "select count(*) from (SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id)",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Documents WHERE document_code NOT IN (SELECT document_code FROM Document_Sections_Images)"
            },
            {
                "isuser": true,
                "text": "Can you give me the names of those documents?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of the documents that don't have any images.",
                "query": "SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id",
                "result": [
                    [
                        [
                            "document_name"
                        ],
                        [
                            "How to cook pasta"
                        ],
                        [
                            "Humanity: a fact"
                        ],
                        [
                            "Learning Database"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_name FROM Documents WHERE document_code NOT IN (SELECT document_code FROM Document_Sections_Images)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "manufacturer",
        "turns": [
            {
                "isuser": true,
                "text": "What is the market share of Chabudai?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The market share of furniture Chabudai is 40.",
                "query": "SELECT Market_Rate  FROM furniture WHERE name = \"Chabudai\"",
                "result": [
                    [
                        [
                            "Market_Rate"
                        ],
                        [
                            40.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Market_Rate FROM furniture WHERE Name = \"Chabudai\""
            },
            {
                "isuser": true,
                "text": "What is its price?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The price in dollar of Chabudai is 450.0.",
                "query": "SELECT T2.Price_in_Dollar  FROM furniture as T1 JOIN furniture_manufacte as T2 ON T1.Furniture_ID = T2.Furniture_ID  WHERE T1.name = \"Chabudai\"",
                "result": [
                    [
                        [
                            "Price_in_Dollar"
                        ],
                        [
                            450.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Price_in_Dollar FROM furniture_manufacte WHERE Furniture_ID = 2"
            },
            {
                "isuser": true,
                "text": "what is the name of Chadubai's manufacturer?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry, I don't have information about the name of Chadubai's manufacturer. I only have the id.",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT Name FROM manufacturer WHERE Manufacturer_ID IN (SELECT Manufacturer_ID FROM furniture_manufacte WHERE Furniture_ID = 2)"
            },
            {
                "isuser": true,
                "text": "What is its ID?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The manufacture id of furniture Chabudai is 4.",
                "query": "SELECT T2.Manufacturer_ID  FROM furniture as T1 JOIN furniture_manufacte as T2 ON T1.Furniture_ID = T2.Furniture_ID  WHERE T1.name = \"Chabudai\" ",
                "result": [
                    [
                        [
                            "Manufacturer_ID"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Furniture_ID FROM furniture_manufacte WHERE Furniture_ID = 2"
            },
            {
                "isuser": true,
                "text": "Thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "local_govt_in_alabama",
        "turns": [
            {
                "isuser": false,
                "text": "Did you mean the event details of the events?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "No, I meant all the information for the events",
                "type": "answerable",
                "predict": "SELECT Event_Details FROM Events WHERE Event_ID IN (SELECT Event_ID FROM Participants_in_Events WHERE Participant_ID IN (SELECT Participant_ID FROM Participants WHERE Participant_Type_Code = 'C'))"
            },
            {
                "isuser": true,
                "text": "Show me the details of all participants.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the details of all participants. ",
                "query": "select * from Participants_in_Events",
                "result": [
                    [
                        [
                            "Event_ID",
                            "Participant_ID"
                        ],
                        [
                            3,
                            26
                        ],
                        [
                            3,
                            66
                        ],
                        [
                            8,
                            86
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Participant_Details FROM Participants"
            },
            {
                "isuser": true,
                "text": "show me the details of the events.",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "here are the details of all events",
                "query": "select * from events",
                "result": [
                    [
                        [
                            "Event_ID",
                            "Service_ID",
                            "Event_Details"
                        ],
                        [
                            3,
                            5,
                            "Success"
                        ],
                        [
                            8,
                            8,
                            "Success"
                        ],
                        [
                            13,
                            8,
                            "Fail"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Event_Details FROM Events"
            },
            {
                "isuser": true,
                "text": "How many events did not have any participants?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are 3 events that did not have any participants",
                "query": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM Events WHERE Event_ID NOT IN (SELECT Event_ID FROM Participants_in_Events)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "tracking_grants_for_research",
        "turns": [
            {
                "isuser": true,
                "text": "Which grants are described as 'regular'?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here's all the information about grants described as 'regular",
                "query": "SELECT T1.* FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' ",
                "result": [
                    [
                        [
                            "grant_id",
                            "organisation_id",
                            "grant_amount",
                            "grant_start_date",
                            "grant_end_date",
                            "other_details"
                        ],
                        [
                            10,
                            14,
                            66.4203,
                            "1986-08-26 20:49:27",
                            "2007-09-26 19:19:26",
                            "veniam"
                        ],
                        [
                            5,
                            2,
                            608413.3291,
                            "1979-10-29 07:44:22",
                            "1996-08-16 20:45:05",
                            "corrupti"
                        ],
                        [
                            7,
                            7,
                            76977808.306,
                            "2015-12-14 13:02:11",
                            "1981-03-09 17:12:27",
                            "explicabo"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.grant_id ,  T2.grant_amount ,  T2.grant_start_date ,  T2.grant_end_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id WHERE T2.document_type_code  =  'regular'"
            },
            {
                "isuser": true,
                "text": "Which grants are described both 'regular' and 'initial application'?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here're all the information of grants  described both as 'regular' and 'initial application'",
                "query": "SELECT T1.* FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.* FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application'",
                "result": [
                    [
                        [
                            "grant_id",
                            "organisation_id",
                            "grant_amount",
                            "grant_start_date",
                            "grant_end_date",
                            "other_details"
                        ],
                        [
                            5,
                            2,
                            608413.3291,
                            "1979-10-29 07:44:22",
                            "1996-08-16 20:45:05",
                            "corrupti"
                        ],
                        [
                            13,
                            7,
                            1.9848,
                            "2004-11-10 02:26:01",
                            "2011-05-29 11:21:59",
                            "qui"
                        ],
                        [
                            15,
                            9,
                            25313.51,
                            "1982-04-07 00:07:43",
                            "1991-06-06 07:26:25",
                            "ea"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.grant_id ,  T2.grant_amount ,  T2.grant_start_date ,  T2.grant_end_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id WHERE T2.document_type_code  =  'regular' OR T2.document_type_code  =  'initial application'"
            },
            {
                "isuser": true,
                "text": "Can you show me the start date for all these grants?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here're the start dates of grants with both documents described as 'Regular' and documents described as 'Initial Application'",
                "query": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application'",
                "result": [
                    [
                        [
                            "grant_start_date"
                        ],
                        [
                            "1979-10-29 07:44:22"
                        ],
                        [
                            "1982-04-07 00:07:43"
                        ],
                        [
                            "2004-11-10 02:26:01"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.grant_id ,  T2.grant_amount ,  T2.grant_start_date ,  T2.grant_end_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id WHERE T2.document_type_code  =  'regular' OR T2.document_type_code  =  'initial application'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "department_management",
        "turns": [
            {
                "isuser": true,
                "text": "Hello!  How are you?  Can you please provide me with a list of all department IDs, department names, and their respective years of creation?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Hello! Here are all the department IDs, department names, and their respective years of creation",
                "query": "SELECT department_id, name, creation FROM department ",
                "result": [
                    [
                        [
                            "Department_ID",
                            "Name",
                            "Creation"
                        ],
                        [
                            1,
                            "State",
                            "1789"
                        ],
                        [
                            2,
                            "Treasury",
                            "1789"
                        ],
                        [
                            3,
                            "Defense",
                            "1947"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT department_id ,  name ,  creation FROM department"
            },
            {
                "isuser": true,
                "text": "Excellent!  Can you filter this list to include only the rows that contain the most common (most frequently occurring) year of creation?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the department IDs, department names, and their respective years of creation of the departments with the most common year of creation",
                "query": "select Department_ID, Name, Creation from department where creation = (SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1)",
                "result": [
                    [
                        [
                            "Department_ID",
                            "Name",
                            "Creation"
                        ],
                        [
                            1,
                            "State",
                            "1789"
                        ],
                        [
                            2,
                            "Treasury",
                            "1789"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT department_id ,  name ,  creation FROM department GROUP BY department_id ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Perfect! Can you tell me what is the total combined budget of these two departments?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the total combined budget of these two departments, which have most the most common creation year, is 21.06",
                "query": "select sum(Budget_in_Billions) from department where creation = (SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1)",
                "result": [
                    [
                        [
                            "sum(Budget_in_Billions)"
                        ],
                        [
                            21.060000000000002
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT sum(budget_in_billions) FROM department WHERE department_id IN (1,2)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you! Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "cinema",
        "turns": [
            {
                "isuser": true,
                "text": "what is the highest price?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The highest price is 15.99.",
                "query": "SELECT MAX(Price) FROM schedule",
                "result": [
                    [
                        [
                            "MAX(Price)"
                        ],
                        [
                            15.99
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT MAX(Price) FROM schedule"
            },
            {
                "isuser": true,
                "text": "what is the average of prices*",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average price is 11.989999999999998.",
                "query": "SELECT AVG(Price) FROM schedule",
                "result": [
                    [
                        [
                            "AVG(Price)"
                        ],
                        [
                            11.989999999999998
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(Price) FROM schedule"
            },
            {
                "isuser": true,
                "text": "what is the average of rank in series?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average rank in series is 28.0.",
                "query": "SELECT AVG(Rank_in_series) FROM film ",
                "result": [
                    [
                        [
                            "AVG(Rank_in_series)"
                        ],
                        [
                            28.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(Rank_in_series) FROM film"
            },
            {
                "isuser": true,
                "text": "thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Good bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "network_2",
        "turns": [
            {
                "isuser": true,
                "text": "how many person there",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 4 people.",
                "query": "SELECT count(*) FROM Person",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Person"
            },
            {
                "isuser": true,
                "text": "what is the age of Bob",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The age of Bob is 35.",
                "query": "SELECT age FROM Person where name='Bob'",
                "result": [
                    [
                        [
                            "age"
                        ],
                        [
                            35
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT age FROM Person WHERE name = \"Bob\""
            },
            {
                "isuser": true,
                "text": "what is the city of Alice",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The city of Alice is new york city",
                "query": "SELECT city FROM Person where name='Alice'",
                "result": [
                    [
                        [
                            "city"
                        ],
                        [
                            "new york city"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT city FROM Person WHERE name = \"Alice\""
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure. Do you want to know something else?",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "theme_gallery",
        "turns": [
            {
                "isuser": true,
                "text": "what country is Vijay Singh from?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The country where Vijay Singh is from is Fiji.",
                "query": "SELECT Country FROM artist where Name = 'Vijay Singh'",
                "result": [
                    [
                        [
                            "Country"
                        ],
                        [
                            "Fiji"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Country FROM artist WHERE Name = \"Vijay Singh\""
            },
            {
                "isuser": true,
                "text": "who is the latest artist?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " The latest joined artist is Vijay Singh.",
                "query": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Vijay Singh"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM artist ORDER BY Year_Join DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "what year did Vijay Singh joined?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The year that Vijay Singh joined is 1998.",
                "query": "SELECT Year_Join FROM artist where Name = 'Vijay Singh'",
                "result": [
                    [
                        [
                            "Year_Join"
                        ],
                        [
                            1998
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Year_Join FROM artist WHERE Name = \"Vijay Singh\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goosbye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "student_assessment",
        "turns": [
            {
                "isuser": true,
                "text": "how many courses did the student with id 121 register for?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Student with id 121 just registered for 2 courses.",
                "query": "SELECT count(course_id) FROM Student_Course_Registrations WHERE student_id = 121",
                "result": [
                    [
                        [
                            "count(course_id)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Student_Course_Registrations WHERE student_id = 121"
            },
            {
                "isuser": true,
                "text": "And how many courses did the student attend?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The student with id 121 attended 2 courses.\n",
                "query": "SELECT count(*) FROM Student_Course_Attendance WHERE  student_id = 121",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Student_Course_Attendance WHERE student_id = 121"
            },
            {
                "isuser": true,
                "text": "show me the id of courses registered or attended by student whose id is 121",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The ids of courses registered or attended by the students with id 121 are 301 and 303",
                "query": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121",
                "result": [
                    [
                        [
                            "course_id"
                        ],
                        [
                            301
                        ],
                        [
                            303
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT course_id FROM Student_Course_Registrations WHERE student_id = 121 UNION SELECT course_id FROM Student_Course_Attendance WHERE student_id = 121"
            },
            {
                "isuser": true,
                "text": "thanks|",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Goodbye.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "wine_1",
        "turns": [
            {
                "isuser": true,
                "text": "Find the distinct names of all wines that have prices higher than some wines from John Anthony winery.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " The distinct names of all wines that have prices higher than some wines from John Anthony winery  are shown   in  the  table ",
                "query": "SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"John Anthony\")",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Old Kraft Vineyard"
                        ],
                        [
                            "Giana"
                        ],
                        [
                            "Black Chicken"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT name FROM WINE WHERE price  >  (SELECT min(price) FROM WINE WHERE winery  =  'John Anthony')"
            },
            {
                "isuser": true,
                "text": "Find the price of all wines that have prices higher than some wines from John Anthony winery.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The prices of all wines that have prices higher than some wines from John Anthony winery  is shown in the table.",
                "query": "SELECT Price FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"John Anthony\")",
                "result": [
                    [
                        [
                            "Price"
                        ],
                        [
                            44
                        ],
                        [
                            35
                        ],
                        [
                            40
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT price FROM WINE WHERE price  >  (SELECT min(price) FROM WINE WHERE winery  =  'John Anthony')"
            },
            {
                "isuser": true,
                "text": "Find the score of all wines that have prices higher than some wines from John Anthony winery.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The score of all wines that have prices higher than some wines from John Anthony winery  are    in the table",
                "query": "SELECT Score  FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"John Anthony\")",
                "result": [
                    [
                        [
                            "Score"
                        ],
                        [
                            93
                        ],
                        [
                            93
                        ],
                        [
                            91
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT score FROM WINE WHERE price  >  (SELECT min(price) FROM WINE WHERE winery  =  'John Anthony')"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Welcome and goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "flight_1",
        "turns": [
            {
                "isuser": true,
                "text": "show names of all aircrafts? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list that contains all the names of aircrafts.",
                "query": "select name from aircraft",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Boeing 747-400"
                        ],
                        [
                            "Boeing 737-800"
                        ],
                        [
                            "Airbus A340-300"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM Aircraft"
            },
            {
                "isuser": true,
                "text": "in which aircraft does John Williams have a certificate ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names of aircraft that John Williams have a certificate with are Boeing 737-800 and Boeing 757-300.",
                "query": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Boeing 737-800"
                        ],
                        [
                            "Boeing 757-300"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM Aircraft WHERE aid IN (SELECT aid FROM Certificate WHERE eid IN (SELECT eid FROM Employee WHERE name = \"John Williams\"))"
            },
            {
                "isuser": true,
                "text": "give me the airline id to that ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The airline ids of aircrafts that John Williams have a certificate with are 2 and 10.",
                "query": "SELECT t3.aid FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"",
                "result": [
                    [
                        [
                            "aid"
                        ],
                        [
                            2
                        ],
                        [
                            10
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT aid FROM Certificate WHERE eid IN (SELECT eid FROM Employee WHERE name = \"John Williams\")"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "ship_1",
        "turns": [
            {
                "isuser": true,
                "text": "what are the names and classes of the ships that do not have any captain yet?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names and classes of the ships that do not have any captain  yet  are  shown  in the  table ",
                "query": "SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)",
                "result": [
                    [
                        [
                            "Name",
                            "Class"
                        ],
                        [
                            "HMS Trojan",
                            "KR"
                        ],
                        [
                            "HM Sloop Sparrow",
                            "KR"
                        ],
                        [
                            "HMS Phalarope",
                            "KR"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)"
            },
            {
                "isuser": true,
                "text": "What are the names of the captains that have classes?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the names of the captains that have classes are  shown  in the  table ",
                "query": "select name from captain where class != 'NULL'",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Captain Sir Henry Langford"
                        ],
                        [
                            "Captain Beves Conway"
                        ],
                        [
                            "Lieutenant Hugh Bolitho"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM captain WHERE CLASS IS NOT NULL"
            },
            {
                "isuser": true,
                "text": "What is the id for HMS Gorgon?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did  you mean  ship  id?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT ship_id FROM ship WHERE name = 'HMS Gorgon'"
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The ship id  for HMS Gorgon  is 2",
                "query": "SELECT Ship_ID  FROM ship WHERE name =\"HMS Gorgon\"",
                "result": [
                    [
                        [
                            "Ship_ID"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM ship WHERE ship_id = 1"
            },
            {
                "isuser": true,
                "text": "How many classes are there?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did  you  mean  the number of distinct  type classes of ships?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT COUNT(DISTINCT CLASS) FROM ship"
            },
            {
                "isuser": true,
                "text": "yes\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The  count of distinct type classes  are there is 2",
                "query": "select count( distinct Class) from Ship",
                "result": [
                    [
                        [
                            "count( distinct Class)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)"
            },
            {
                "isuser": true,
                "text": "What is HMS Gorgon's rank?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The ranks of  HMS Gorgon are Midshipman,\nLieutenant",
                "query": "select T1.Rank from captain as T1 join  Ship as T2 on  T1.Ship_ID=T2.Ship_ID where T2.Name=\"HMS Gorgon\"",
                "result": [
                    [
                        [
                            "Rank"
                        ],
                        [
                            "Midshipman"
                        ],
                        [
                            "Lieutenant"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT rank FROM captain WHERE ship_id = 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome  and bye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "railway",
        "turns": [
            {
                "isuser": true,
                "text": "Show the countries that have managers of age above 50 or below 46?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The countries that have managers with age above 50 or below 46 are listed.",
                "query": "SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46",
                "result": [
                    [
                        [
                            "Country"
                        ],
                        [
                            "United States"
                        ],
                        [
                            "United States"
                        ],
                        [
                            "England"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Country FROM manager WHERE Age  >  50 UNION SELECT Country FROM manager WHERE Age  <  46"
            },
            {
                "isuser": true,
                "text": "What is the least aged Manager's name on the list?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the youngest manager on the list is Ben Curtis.",
                "query": "SELECT name FROM manager order by age limit 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Ben Curtis"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM manager WHERE Age = (SELECT MIN(Age) FROM manager)"
            },
            {
                "isuser": true,
                "text": "How many managers are from United States on the list?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of manager who are from United States is 4.",
                "query": "SELECT count(*) FROM manager where country = 'United States'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM manager WHERE Country = 'United States'"
            },
            {
                "isuser": true,
                "text": "What is the high aged Manager name of the list?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the name of the most aged manager on the list?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT Name FROM manager WHERE Age = (SELECT MAX(Age) FROM manager)"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the most aged manager is Todd Hamilton.",
                "query": "",
                "result": [],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM manager WHERE Age  >  50"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "protein_institute",
        "turns": [
            {
                "isuser": true,
                "text": "what are the names of the institution and building here",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of buildings and institutions",
                "query": "SELECT T1.name , T2.institution FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id GROUP BY T1.building_id",
                "result": [
                    [
                        [
                            "Name",
                            "Institution"
                        ],
                        [
                            "Citizens Bank Building",
                            "Mayville State University"
                        ],
                        [
                            "Tampa City Hall",
                            "Dakota State University"
                        ],
                        [
                            "Floridan Hotel",
                            "Jamestown College"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT institution ,  name FROM institution JOIN building ON institution.building_id = building.building_id"
            },
            {
                "isuser": true,
                "text": "In what year was Ave Maria University created and where is the  current location",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Ave Maria University was created in 1998 and is located in Florida.",
                "query": "SELECT Founded, Location FROM institution WHERE Institution=\"Ave Maria University\"",
                "result": [
                    [
                        [
                            "Founded",
                            "Location"
                        ],
                        [
                            1998.0,
                            "Ave Maria, Florida"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT founded ,  location FROM institution WHERE institution = \"Ave Maria University\""
            },
            {
                "isuser": true,
                "text": "How many enrollement  does Dakota State University have",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 3102 enrollments at Dakota State University.",
                "query": "SELECT Enrollment FROM institution WHERE Institution=\"Dakota State University\"",
                "result": [
                    [
                        [
                            "Enrollment"
                        ],
                        [
                            3102
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT enrollment FROM institution WHERE institution = \"Dakota State University\""
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "coffee_shop",
        "turns": [
            {
                "isuser": true,
                "text": "Which store has the most staff?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do  you  want  to get  the shop ID which has the  most  staff?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T2.Address FROM shop AS T1 JOIN member AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "yes, please\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The shop with ID  7  has  the most  staff",
                "query": "SELECT Shop_ID  from  shop  order by Num_of_staff desc  limit  1",
                "result": [
                    [
                        [
                            "Shop_ID"
                        ],
                        [
                            7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Address FROM shop AS T1 JOIN member AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Which shop has a happy hour in may?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do  you  want  to get  shop  ID  or  another attribute?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T2.Address FROM shop AS T1 JOIN happy_hour AS T2 ON T1.Shop_ID = T2.Shop_ID WHERE T2.Month = \"May\""
            },
            {
                "isuser": true,
                "text": "shop id\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The result table shows the ids of the shops  that have happy hours in may",
                "query": "SELECT  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id = t2.shop_id WHERE MONTH = 'May'",
                "result": [
                    [
                        [
                            "Shop_ID"
                        ],
                        [
                            1
                        ],
                        [
                            1
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Shop_ID FROM shop AS T1 JOIN happy_hour AS T2 ON T1.Shop_ID = T2.Shop_ID WHERE T2.Month = \"May\""
            },
            {
                "isuser": true,
                "text": "Can you also show me their addresses ?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Here are the addresses of shops that have happy hours in may",
                "query": "SELECT  distinct t1.address FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id = t2.shop_id WHERE MONTH = 'May'",
                "result": [
                    [
                        [
                            "Address"
                        ],
                        [
                            "1200 Main Street"
                        ],
                        [
                            "1330 Baltimore Street"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Address FROM shop AS T1 JOIN happy_hour AS T2 ON T1.Shop_ID = T2.Shop_ID WHERE T2.Month = \"May\""
            },
            {
                "isuser": true,
                "text": "Can you show me them with their corresponding shop ids?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "OK ,The result table shows ids  and  addresses for the shops that have happy hours in may",
                "query": "SELECT t1.address , t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id = t2.shop_id WHERE MONTH = 'May'",
                "result": [
                    [
                        [
                            "Address",
                            "Shop_ID"
                        ],
                        [
                            "1200 Main Street",
                            1
                        ],
                        [
                            "1200 Main Street",
                            1
                        ],
                        [
                            "1330 Baltimore Street",
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Shop_ID, T1.Address FROM shop AS T1 JOIN happy_hour AS T2 ON T1.Shop_ID = T2.Shop_ID WHERE T2.Month = \"May\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Welcome and goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "tracking_grants_for_research",
        "turns": [
            {
                "isuser": true,
                "text": "Can you list all document descriptions that contain the word \"Initial\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list of all document descriptions that contain the word \"initial\".",
                "query": "SELECT document_description FROM Document_Types WHERE document_description LIKE 'Initial%'",
                "result": [
                    [
                        [
                            "document_description"
                        ],
                        [
                            "Initial Application"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_description FROM Document_Types WHERE document_description LIKE '%Initial%'"
            },
            {
                "isuser": true,
                "text": "Can you list the document type code associated with that document description?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "APP is the code of the document type that associated with a description that contains the word \"initial\".",
                "query": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'",
                "result": [
                    [
                        [
                            "document_type_code"
                        ],
                        [
                            "APP"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE '%Initial%'"
            },
            {
                "isuser": true,
                "text": "Are there any other document type codes associated with a description that contains the word \"initial\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "APP is the only code of the document type here that associated with a description that contains the word \"initial\".",
                "query": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'",
                "result": [
                    [
                        [
                            "document_type_code"
                        ],
                        [
                            "APP"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE '%initial%'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "thanks. bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "decoration_competition",
        "turns": [
            {
                "isuser": true,
                "text": "show the total distinct leader names of the college associated with the members of all country",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table shows the the total distinct leader names of the college associated with the members of all country. ",
                "query": "SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID",
                "result": [
                    [
                        [
                            "Leader_Name"
                        ],
                        [
                            "Ousame Tounkara"
                        ],
                        [
                            "Samir Chahine"
                        ],
                        [
                            "Ryan Thelwell"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(DISTINCT T2.Leader_Name) FROM member AS T1 JOIN college AS T2 ON T1.College_ID = T2.College_ID WHERE T1.Country IN (SELECT Country FROM member GROUP BY Country HAVING COUNT(*) > 1)"
            },
            {
                "isuser": true,
                "text": "find the college id for the college location Ottawa",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The college id for the college located in Ottawa is \"1\".",
                "query": "select college_id from college where college_location='Ottawa'",
                "result": [
                    [
                        [
                            "College_ID"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT College_ID FROM college WHERE College_Location = \"Ottawa\""
            },
            {
                "isuser": true,
                "text": "find the member name and college location for the member id 1",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the member id 1 is \"Jack Nicklaus\",and the college location for him is \"Ottawa\".",
                "query": "select T2.Name, T1.College_Location from college AS T1 JOIN member AS T2 ON T2.College_ID=T1.College_ID WHERE Member_ID=1",
                "result": [
                    [
                        [
                            "Name",
                            "College_Location"
                        ],
                        [
                            "Jack Nicklaus",
                            "Ottawa"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Name, T2.College_Location FROM member AS T1 JOIN college AS T2 ON T1.College_ID = T2.College_ID WHERE T1.Member_ID = 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "solvency_ii",
        "turns": [
            {
                "isuser": true,
                "text": "Hello!  Can you show me a list of the various product type codes?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Hi! All product type codes are shown in the result table. We have books, food, clothes, etc.",
                "query": "SELECT Product_Type_Code FROM Products",
                "result": [
                    [
                        [
                            "Product_Type_Code"
                        ],
                        [
                            "Books"
                        ],
                        [
                            "Food"
                        ],
                        [
                            "Clothes"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT Product_Type_Code FROM Products"
            },
            {
                "isuser": true,
                "text": "Wonderful!  Of these product type codes, can you tell me which code is the most common one?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The most common product type code is food.",
                "query": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Product_Type_Code"
                        ],
                        [
                            "Food"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Product_Type_Code, COUNT(*) AS Count FROM Products GROUP BY Product_Type_Code ORDER BY Count DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks! Is there a corresponding \"product name\" for the product type of food?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes and the product names for the product type of food are listed in the result table.",
                "query": "SELECT Product_Name FROM Products WHERE Product_Type_Code = \"Food\"",
                "result": [
                    [
                        [
                            "Product_Name"
                        ],
                        [
                            "Special Dinning"
                        ],
                        [
                            "Dinning"
                        ],
                        [
                            "Dinning"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Product_Name FROM Products WHERE Product_Type_Code = 'Food'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "No problem. Goodbye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "Bye!",
                "type": "improper"
            }
        ]
    },
    {
        "db_name": "manufacturer",
        "turns": [
            {
                "isuser": true,
                "text": "what are the companies that produce the most expensive furniture",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the names of manufacturers that produce the most expensive furniture?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T2.Name FROM furniture_manufacte AS T1 JOIN manufacturer AS T2 ON T1.Manufacturer_ID  =  T2.Manufacturer_ID ORDER BY T1.Price_in_Dollar DESC GROUP BY T1.Manufacturer_ID"
            },
            {
                "isuser": true,
                "text": "yes, the names of the company that produces the most expensive furniture",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Tomorrow is the name of the company that produces the most expensive furniture.",
                "query": "SELECT t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Tomorrow"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Name FROM furniture_manufacte AS T1 JOIN manufacturer AS T2 ON T1.Manufacturer_ID  =  T2.Manufacturer_ID ORDER BY T1.Price_in_Dollar DESC GROUP BY T1.Manufacturer_ID"
            },
            {
                "isuser": true,
                "text": "what is the id of this name",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "7 is the id of the company that produces the most expensive furniture.",
                "query": "SELECT t1.Manufacturer_ID FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Manufacturer_ID"
                        ],
                        [
                            7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Manufacturer_ID FROM furniture_manufacte AS T1 JOIN manufacturer AS T2 ON T1.Manufacturer_ID  =  T2.Manufacturer_ID ORDER BY T1.Price_in_Dollar DESC GROUP BY T1.Manufacturer_ID"
            },
            {
                "isuser": true,
                "text": "list both the id and number of shops for the company that produces the most expensive furniture in the same table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the id and number of shops for the company that produces the most expensive furniture in the same table.",
                "query": "SELECT t1.manufacturer_id ,  t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Manufacturer_ID",
                            "Num_of_Shops"
                        ],
                        [
                            7,
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Manufacturer_ID ,  T2.Num_of_Shops FROM furniture_manufacte AS T1 JOIN manufacturer AS T2 ON T1.Manufacturer_ID  =  T2.Manufacturer_ID ORDER BY T1.Price_in_Dollar DESC GROUP BY T1.Manufacturer_ID"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "race_track",
        "turns": [
            {
                "isuser": true,
                "text": "what is the longest race?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry, there is no info about that.",
                "query": "",
                "result": [],
                "predict_type": "SORRY",
                "predict": "SELECT name FROM race WHERE length = (SELECT MAX(length) FROM race)"
            },
            {
                "isuser": true,
                "text": "can you show me names of races?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of all the races",
                "query": "SELECT name FROM race",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Rolex 24 At Daytona"
                        ],
                        [
                            "Gainsco Grand Prix of Miami"
                        ],
                        [
                            "Mexico City 250"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM race"
            },
            {
                "isuser": true,
                "text": "what is the Mexico City 250's date?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The date of the race  with name \"Mexico City 250\" is April 19",
                "query": "SELECT date FROM race where name = \"Mexico City 250\"",
                "result": [
                    [
                        [
                            "Date"
                        ],
                        [
                            "April 19"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT date FROM race WHERE name = \"Mexico City 250\""
            },
            {
                "isuser": true,
                "text": "can you show me class of race?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the classes of the races",
                "query": "SELECT class FROM race ",
                "result": [
                    [
                        [
                            "Class"
                        ],
                        [
                            "DP/GT"
                        ],
                        [
                            "DP/GT"
                        ],
                        [
                            "DP/GT"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT class FROM race"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "station_weather",
        "turns": [
            {
                "isuser": true,
                "text": "how many trains have express in their names? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 9 trains have 'Express' in their names.",
                "query": "SELECT count(*) FROM train WHERE name LIKE \"%Express%\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            9
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM train WHERE name LIKE '%express%'"
            },
            {
                "isuser": true,
                "text": "what is the destination for Ananthapuri Express?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the destinations for the train named 'Ananthapuri Express' are Chennai and Trivandrum.",
                "query": "SELECT destination FROM train WHERE name = 'Ananthapuri Express'",
                "result": [
                    [
                        [
                            "destination"
                        ],
                        [
                            "Chennai"
                        ],
                        [
                            "Trivandrum"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT destination FROM train WHERE name = 'Ananthapuri Express'"
            },
            {
                "isuser": true,
                "text": "give me the train number",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the train numbers for the train named 'Ananthapuri Express' are 16724 and 16723.",
                "query": "SELECT train_number FROM train WHERE name = 'Ananthapuri Express'",
                "result": [
                    [
                        [
                            "train_number"
                        ],
                        [
                            16724
                        ],
                        [
                            16723
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT train_number FROM train WHERE name = 'Ananthapuri Express'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "music_4",
        "turns": [
            {
                "isuser": true,
                "text": "What are the issue date of 34th England Academy Prize?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the issue date of a volume presented in the music festival of 34th England Academy Prize is '27 December 1986 - 10 January'.",
                "query": "SELECT T2.Issue_Date FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Music_Festival = \"34th England Academy Prize\"",
                "result": [
                    [
                        [
                            "Issue_Date"
                        ],
                        [
                            "27 December 1986 - 10 January"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Issue_Date FROM volume WHERE Volume_Issue = \"34th England Academy Prize\""
            },
            {
                "isuser": true,
                "text": "What are the music festivals of Everybody Have Fun Tonight song? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the music festivals of Everybody Have Fun Tonight song is 34th Japan Academy Prize.",
                "query": "SELECT T1.Music_Festival FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T2.Song = \" Everybody Have Fun Tonight \"",
                "result": [
                    [
                        [
                            "Music_Festival"
                        ],
                        [
                            "34th Japan Academy Prize"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Music_Festival FROM music_festival WHERE Song = \"Everybody Have Fun Tonight\""
            },
            {
                "isuser": true,
                "text": "Show the songs that have result \"nominated\" at music festivals.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list of songs that have a \"nominated\" result at music festivals.",
                "query": "SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Result  =  \"Nominated\"",
                "result": [
                    [
                        [
                            "Song"
                        ],
                        [
                            " The Way"
                        ],
                        [
                            " Everybody Have Fun Tonight "
                        ],
                        [
                            " With or Without You "
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Song FROM music_festival WHERE Result = \"nominated\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "medicine_enzyme_interaction",
        "turns": [
            {
                "isuser": true,
                "text": "Hello!  Can you please list the different interaction types for me?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Hello, the different interaction types are shown in the result table.",
                "query": "SELECT DISTINCT interaction_type from medicine_enzyme_interaction",
                "result": [
                    [
                        [
                            "interaction_type"
                        ],
                        [
                            "inhibitor"
                        ],
                        [
                            "activitor"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT interaction_type FROM medicine_enzyme_interaction"
            },
            {
                "isuser": true,
                "text": "Great!  Can you provide me with the name, location, and product for each enzyme that is associated with the \"inhibitor\" interaction type?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name, location, and product for each enzyme that is associated with the \"inhibitor\" interaction type is shown in the result table. ",
                "query": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'",
                "result": [
                    [
                        [
                            "name",
                            "Location",
                            "Product"
                        ],
                        [
                            "ALA synthase",
                            "Mitochondrion",
                            "δ-Aminolevulinic acid"
                        ],
                        [
                            "ALA dehydratase",
                            "Cytosol",
                            "Porphobilinogen"
                        ],
                        [
                            "PBG deaminase",
                            "Cytosol",
                            "Hydroxymethyl bilane"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name ,  Location ,  product FROM enzyme WHERE id IN (SELECT enzyme_id FROM medicine_enzyme_interaction WHERE interaction_type = \"inhibitor\")"
            },
            {
                "isuser": true,
                "text": "Great!  Can you update this list to show the chromosome associated with each enzyme on this list?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Yes, the name, location, product, and chromosome type for each enzyme that is associated with the \"inhibitor\" interaction type is shown in the result table. ",
                "query": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product, T1.chromosome FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'",
                "result": [
                    [
                        [
                            "name",
                            "Location",
                            "Product",
                            "Chromosome"
                        ],
                        [
                            "ALA synthase",
                            "Mitochondrion",
                            "δ-Aminolevulinic acid",
                            "3p21.1"
                        ],
                        [
                            "ALA dehydratase",
                            "Cytosol",
                            "Porphobilinogen",
                            "9q34"
                        ],
                        [
                            "PBG deaminase",
                            "Cytosol",
                            "Hydroxymethyl bilane",
                            "11q23.3"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name ,  Location ,  product ,  chromosome FROM enzyme WHERE id IN (SELECT enzyme_id FROM medicine_enzyme_interaction WHERE interaction_type = \"inhibitor\")"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, goodbye. ",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "products_gen_characteristics",
        "turns": [
            {
                "isuser": true,
                "text": "what are the names of the products with category \"Herbs\"",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names of the products with product category code Herbs are shown in the result table. ",
                "query": "SELECT T1.product_name FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"",
                "result": [
                    [
                        [
                            "product_name"
                        ],
                        [
                            "basil"
                        ],
                        [
                            "borage"
                        ],
                        [
                            "caraway"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product_name FROM products WHERE product_category_code = \"Herbs\""
            },
            {
                "isuser": true,
                "text": "what are the color descriptions for the products? ",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you want both the names and the color descriptions? ",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT color_description FROM ref_colors WHERE color_code IN (SELECT color_code FROM products WHERE product_category_code = \"Herbs\")"
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names, and color descriptions of the products with product category code Herbs are shown in the result table. For example, the first product is called basil and is of red color. ",
                "query": "SELECT T1.product_name ,  T2.color_description  FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"",
                "result": [
                    [
                        [
                            "product_name",
                            "color_description"
                        ],
                        [
                            "basil",
                            "red"
                        ],
                        [
                            "borage",
                            "yellow"
                        ],
                        [
                            "caraway",
                            "red"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product_name FROM products WHERE product_category_code = \"Herbs\""
            },
            {
                "isuser": true,
                "text": "list down all the product ids",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "All the product ids are listed in the result table. ",
                "query": "SELECT product_id from products",
                "result": [
                    [
                        [
                            "product_id"
                        ],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product_id FROM products WHERE product_category_code = \"Herbs\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, would you like to know more? ",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "no",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, good bye. ",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "SELECT product_name FROM products WHERE product_category_code = \"Herbs\""
            }
        ]
    },
    {
        "db_name": "insurance_and_eClaims",
        "turns": [
            {
                "isuser": true,
                "text": "how many claim headers on the table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 15 claim headers in the table",
                "query": "SELECT count(*) from claim_headers",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Claim_Headers"
            },
            {
                "isuser": true,
                "text": "what is the highest amount claimed on the claim headers",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "867.57 is the highest amount claimed in all claim headers.",
                "query": "SELECT max(amount_claimed) from claim_headers",
                "result": [
                    [
                        [
                            "max(amount_claimed)"
                        ],
                        [
                            867.57
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(amount_claimed) FROM Claim_Headers"
            },
            {
                "isuser": true,
                "text": "what is the least paid amount on the table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "113.86 is the least paid amount in all claim headers.",
                "query": "SELECT min(amount_piad) from claim_headers",
                "result": [
                    [
                        [
                            "min(amount_piad)"
                        ],
                        [
                            113.86
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT min(amount_piad) FROM Claim_Headers"
            },
            {
                "isuser": true,
                "text": "what is the date of settlement on Overtime Meal Subsidy",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you want the date of settlement of claim headers with a type code Overtime Meal Subsidy?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT date_of_settlement FROM claim_headers WHERE claim_type_code = \"Overtime Meal Subsidy\""
            },
            {
                "isuser": true,
                "text": "exactly",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the dates of settlement of claim headers with a type code Overtime Meal Subsidy",
                "query": "SELECT date_of_settlement from claim_headers where claim_type_code = \"Overtime Meal Subsidy\"",
                "result": [
                    [
                        [
                            "Date_of_Settlement"
                        ],
                        [
                            "2017-11-16 04:06:05"
                        ],
                        [
                            "2017-12-20 09:58:14"
                        ],
                        [
                            "2017-12-06 15:01:14"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT date_of_settlement FROM claim_headers WHERE claim_type_code = \"Overtime Meal Subsidy\""
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "sports_competition",
        "turns": [
            {
                "isuser": false,
                "text": "Did you mean the name of that club?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable",
                "predict": "Yes, I meant the name of the club."
            },
            {
                "isuser": true,
                "text": "How many clubs have players with the position \"Right Wing\"?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Only 1 club has players with the position \"Right Wing\"",
                "query": "SELECT count(*) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  \"Right Wing\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM club AS T1 JOIN player AS T2 ON T1.club_id  =  T2.club_id WHERE T2.position  =  \"Right Wing\""
            },
            {
                "isuser": true,
                "text": "Can you list that club? ",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "BK Slide is the name of the club that has players with position \"Right Wing\".",
                "query": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  \"Right Wing\"",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "BK Slide"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM club WHERE club_id IN (SELECT club_id FROM player WHERE position = \"Right Wing\")"
            },
            {
                "isuser": true,
                "text": "How many players are from the U.S.?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry, I can't answer this question! Can you ask something else?",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT COUNT(*) FROM player WHERE Country = \"USA\""
            },
            {
                "isuser": true,
                "text": "How many total players are there? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 15 players in total",
                "query": "SELECT count(*) FROM player ",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM player"
            },
            {
                "isuser": true,
                "text": "Can you list all the players? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here're all the information about players.",
                "query": "SELECT * FROM player ",
                "result": [
                    [
                        [
                            "Player_ID",
                            "name",
                            "Position",
                            "Club_ID",
                            "Apps",
                            "Tries",
                            "Goals",
                            "Points"
                        ],
                        [
                            1,
                            "Michael Platt",
                            "Full Back",
                            1,
                            20.0,
                            5.0,
                            "0",
                            20.0
                        ],
                        [
                            2,
                            "Dave Halley",
                            "Right Wing",
                            2,
                            23.0,
                            9.0,
                            "0",
                            36.0
                        ],
                        [
                            3,
                            "James Evans",
                            "Right Centre",
                            1,
                            30.0,
                            9.0,
                            "0",
                            36.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name, Country FROM player"
            },
            {
                "isuser": true,
                "text": "How many positions are there in total?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 10 positions in total.",
                "query": "SELECT count(DISTINCT Position) FROM player ",
                "result": [
                    [
                        [
                            "count(DISTINCT Position)"
                        ],
                        [
                            10
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM (SELECT DISTINCT position FROM player)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "culture_company",
        "turns": [
            {
                "isuser": true,
                "text": "Could you please show me the publishers with a book published in 1989?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the publishers with a book published in 1989",
                "query": "SELECT publisher FROM book_club WHERE YEAR  =  1989",
                "result": [
                    [
                        [
                            "Publisher"
                        ],
                        [
                            "Alyson"
                        ],
                        [
                            "St. Martin's Press"
                        ],
                        [
                            "William Morrow"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT publisher FROM book_club WHERE YEAR  =  1989"
            },
            {
                "isuser": true,
                "text": "Could you please show me the publishers with a book published in 1990?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the publishers with a book published in 1990",
                "query": "SELECT publisher FROM book_club WHERE YEAR  =  1990",
                "result": [
                    [
                        [
                            "Publisher"
                        ],
                        [
                            "Alyson"
                        ],
                        [
                            "Banned Books"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT publisher FROM book_club WHERE YEAR  =  1990"
            },
            {
                "isuser": true,
                "text": "Which publishers published books in 1989 and 1990?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the publishers with a book published in 1989 and a book in 1990",
                "query": "SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990",
                "result": [
                    [
                        [
                            "Publisher"
                        ],
                        [
                            "Alyson"
                        ],
                        [
                            "Banned Books"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT publisher FROM book_club WHERE YEAR  =  1989 OR YEAR  =  1990"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            }
        ]
    },
    {
        "db_name": "dorm_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many students are living in the dorms?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 34 total students living in dorms.",
                "query": "SELECT count(*) FROM Student",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            34
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Lives_in AS T1 JOIN Dorm AS T2 ON T1.dormid  =  T2.dormid"
            },
            {
                "isuser": true,
                "text": "Do they all have all amenities?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean whether all dorms have all amenities?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT count(*) FROM Has_amenity AS T1 JOIN Dorm_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T1.dormid HAVING count(*)  =  (SELECT count(*) FROM Dorm_amenity)"
            },
            {
                "isuser": true,
                "text": "Yes.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are all dorms with amenities. There are total 7 dorms, so all dorms have an amenity. However, not all dorms have all amenities.",
                "query": "SELECT DISTINCT dormid FROM Has_amenity ",
                "result": [
                    [
                        [
                            "dormid"
                        ],
                        [
                            109
                        ],
                        [
                            104
                        ],
                        [
                            160
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Lives_in AS T1 JOIN Dorm AS T2 ON T1.dormid  =  T2.dormid JOIN Has_amenity AS T3 ON T2.dormid  =  T3.dormid GROUP BY T1.dormid HAVING count(*)  =  (SELECT count(*) FROM Dorm_amenity)"
            },
            {
                "isuser": true,
                "text": "How many dorms do not have a TV lounge?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the dorms that have a TV lounge. There is total 7 dorms, so there are 4 dorms with no TV lounge.",
                "query": "SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge'",
                "result": [
                    [
                        [
                            "dormid"
                        ],
                        [
                            109
                        ],
                        [
                            140
                        ],
                        [
                            160
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Dorm WHERE dormid NOT IN (SELECT dormid FROM Has_amenity WHERE amenid = 1)"
            },
            {
                "isuser": true,
                "text": "How many students are in those four dorms?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are total 9 students in the dorms which don’t have TV lounge ",
                "query": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            9
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Lives_in AS T1 JOIN Dorm AS T2 ON T1.dormid  =  T2.dormid WHERE T2.dormid IN (SELECT dormid FROM Has_amenity WHERE amenid = 1)"
            },
            {
                "isuser": true,
                "text": "What are the first names of those nine students?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the first names of the students in the dorms which don’t have TV lounge ",
                "query": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')",
                "result": [
                    [
                        [
                            "Fname"
                        ],
                        [
                            "Tracy"
                        ],
                        [
                            "Shiela"
                        ],
                        [
                            "Charles"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT fname FROM Student WHERE StuID IN (SELECT stuid FROM Lives_in WHERE dormid IN (SELECT dormid FROM Has_amenity WHERE amenid = 1))"
            },
            {
                "isuser": true,
                "text": "What are their ages?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the ages of the students in the dorms which don’t have TV lounge ",
                "query": "SELECT T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')",
                "result": [
                    [
                        [
                            "Age"
                        ],
                        [
                            19
                        ],
                        [
                            21
                        ],
                        [
                            18
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT age FROM Student WHERE StuID IN (SELECT stuid FROM Lives_in WHERE dormid IN (SELECT dormid FROM Has_amenity WHERE amenid = 1))"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you! Good bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "ship_mission",
        "turns": [
            {
                "isuser": true,
                "text": "List the name of ships that are not involved in any mission",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Author"
                        ]
                    ]
                ],
                "predict_type": "",
                "predict": "SELECT name FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM mission)"
            },
            {
                "isuser": true,
                "text": "Which ships have been decommissioned?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The ship ID of the ships that have been decommissioned are 1,2,6,7.\n",
                "query": "SELECT Ship_ID FROM mission WHERE Fate like '%Decommissioned%'",
                "result": [
                    [
                        [
                            "Ship_ID"
                        ],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM ship WHERE Nationality = \"United Kingdom\" AND Tonnage = 0"
            },
            {
                "isuser": true,
                "text": "Give me the names of ships that have been decommissioned",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names of the ships that have been decommissioned are Corbridge, Farringford, Ariadne, Appam",
                "query": "Select Name from ship \nwhere Ship_ID in (\nSELECT Ship_ID FROM mission WHERE Fate like '%Decommissioned%')",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Corbridge"
                        ],
                        [
                            "Farringford"
                        ],
                        [
                            "Ariadne"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM ship WHERE Nationality = \"United Kingdom\" AND Tonnage = 0"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            }
        ]
    },
    {
        "db_name": "flight_4",
        "turns": [
            {
                "isuser": true,
                "text": "Needed id of routes",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Sorry can you clarify your question?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')"
            },
            {
                "isuser": true,
                "text": "whose source and destination airports are in the United States",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you want the id of the routes whose source and destination airports are in the United States?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT airlines.name FROM airlines JOIN routes ON airlines.alid = routes.alid WHERE routes.src_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND routes.dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States')"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the ids of routes whose source and destination airports are in the United States",
                "query": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                "result": [
                    [
                        [
                            "rid"
                        ],
                        [
                            209
                        ],
                        [
                            214
                        ],
                        [
                            297
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT alid FROM airlines WHERE country  =  'United States'"
            },
            {
                "isuser": true,
                "text": "Thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "thanks. bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "local_govt_and_lot",
        "turns": [
            {
                "isuser": true,
                "text": "How many distinct locations have the things with service detail 'Unsatisfied' been located in?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 8 locations have the things with service detail  'Unsatisfied' been located in.",
                "query": "SELECT count(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.service_details  =  'Unsatisfied'",
                "result": [
                    [
                        [
                            "count(DISTINCT T2.Location_Code)"
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(DISTINCT Location_Code) FROM Timed_Locations_of_Things WHERE thing_id IN (SELECT thing_id FROM Things WHERE service_details = 'Unsatisfied')"
            },
            {
                "isuser": true,
                "text": "How many type of thing code includes 'Electronics'?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean how many things include type of thing code 'Electronics'?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT count(*) FROM Things WHERE Type_of_Thing_Code LIKE '%Electronics%'"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are five things include type of thing code 'Electronics'.",
                "query": "SELECT count(DISTINCT thing_id) FROM Things where Type_of_Thing_Code = \"Electronics\"",
                "result": [
                    [
                        [
                            "count(DISTINCT thing_id)"
                        ],
                        [
                            5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Things WHERE Type_of_Thing_Code LIKE '%Electronics%'"
            },
            {
                "isuser": true,
                "text": "What are the service details of thing id 2?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The service details of thing id 2 is satisfied.",
                "query": "select service_details from things where thing_id = 2",
                "result": [
                    [
                        [
                            "service_details"
                        ],
                        [
                            "Satisfied"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT service_details FROM Things WHERE thing_id = 2"
            },
            {
                "isuser": true,
                "text": "What is the service type code of thing id 2?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The service type code of thing id 2 is cleaning. ",
                "query": "select service_type_code from things where thing_id = 2",
                "result": [
                    [
                        [
                            "service_type_code"
                        ],
                        [
                            "Cleanning"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT service_type_code FROM Things WHERE thing_id = 2"
            },
            {
                "isuser": true,
                "text": "What is the location code of thing id 10 and the date and time?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list of location code and date and time of thing id 10.",
                "query": "select location_code, date_and_time from Timed_Locations_of_Things where thing_id = 10",
                "result": [
                    [
                        [
                            "Location_Code",
                            "Date_and_Time"
                        ],
                        [
                            "288 Lang Ferry",
                            "2016-12-29 00:39:19"
                        ],
                        [
                            "854 Keeling Sho",
                            "2017-10-21 04:21:54"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT location_code, date_and_time FROM Timed_Locations_of_Things WHERE thing_id = 10"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "coffee_shop",
        "turns": [
            {
                "isuser": true,
                "text": "whats he average number of staffs in charge",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average number of staffs in charge is 9.1.",
                "query": "select avg(Num_of_shaff_in_charge) from happy_hour",
                "result": [
                    [
                        [
                            "avg(Num_of_shaff_in_charge)"
                        ],
                        [
                            9.1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(num_of_staff) FROM shop"
            },
            {
                "isuser": true,
                "text": "how many months in total",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are four months in total.",
                "query": "select count(distinct month) from happy_hour",
                "result": [
                    [
                        [
                            "count(distinct month)"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM happy_hour"
            },
            {
                "isuser": true,
                "text": "which months have more than 2 happy hours",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "April and May have more than 2 happy hours.",
                "query": "SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*)  >  2",
                "result": [
                    [
                        [
                            "Month"
                        ],
                        [
                            "April"
                        ],
                        [
                            "May"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING COUNT(*)  >  2"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "cre_Theme_park",
        "turns": [
            {
                "isuser": true,
                "text": "How many tourists were there total?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 20 tourists in total.",
                "query": "SELECT count(*) FROM Visitors",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            20
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Visitors"
            },
            {
                "isuser": true,
                "text": "How many tourist attractions?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 10 different tourist attractions.",
                "query": "SELECT count(distinct Tourist_Attraction_ID) FROM Visits",
                "result": [
                    [
                        [
                            "count(distinct(Tourist_Attraction_ID))"
                        ],
                        [
                            10
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Tourist_Attractions"
            },
            {
                "isuser": true,
                "text": "How many tourists visited all 10 attractions?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry I cannot answer this question.",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT count(*) FROM Visits WHERE Tourist_Attraction_ID IN (SELECT Tourist_Attraction_ID FROM Tourist_Attractions WHERE Location_ID IN (SELECT Location_ID FROM Locations WHERE Location_Name = \"Sultan's Palace\"))"
            },
            {
                "isuser": true,
                "text": "How many tourists visited more than one tourist attraction?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 7 tourists who visited more than one tourist attractions.",
                "query": "select count (*) from (SELECT * FROM Visits as T1 join Visitors as T2 on T1.tourist_id = T2.tourist_id group by T1.tourist_id having count(*) >1)",
                "result": [
                    [
                        [
                            "count (*)"
                        ],
                        [
                            7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Visits WHERE Tourist_Attraction_ID IN (SELECT Tourist_Attraction_ID FROM Tourist_Attractions GROUP BY Tourist_Attraction_ID HAVING count(*) > 1)"
            },
            {
                "isuser": true,
                "text": "How many tourists didn't visit any tourist attractions?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Nine tourists did not visit any tourist attractions.",
                "query": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            9
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN (SELECT Tourist_ID FROM Visits)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "bike_1",
        "turns": [
            {
                "isuser": true,
                "text": "how many stations are presented on the table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 70 stations presented on the table.",
                "query": "SELECT DISTINCT count(*) FROM station",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            70
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM station"
            },
            {
                "isuser": true,
                "text": "list out the station names",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list that contains the names of all the stations.",
                "query": "SELECT DISTINCT name FROM station",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "San Jose Diridon Caltrain Station"
                        ],
                        [
                            "San Jose Civic Center"
                        ],
                        [
                            "Santa Clara at Almaden"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM station"
            },
            {
                "isuser": true,
                "text": "what is the bikes available of San Jose Diridon Caltrain Station",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry, we do not have information on the bike availability of San Jose Diridon Caltrain Station.",
                "query": "SELECT DISTINCT t2.bikes_available FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T1.name = \"San Jose Diridon Caltrain Station\"",
                "result": [
                    [
                        [
                            "bikes_available"
                        ]
                    ]
                ],
                "predict_type": "SORRY",
                "predict": "SELECT bikes_available FROM status WHERE station_id = 1"
            },
            {
                "isuser": true,
                "text": "what is the city of San Jose Civic Center",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The city of San Jose Civic Center is San Jose.",
                "query": "select city from station where name = \"San Jose Civic Center\"",
                "result": [
                    [
                        [
                            "city"
                        ],
                        [
                            "San Jose"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT city FROM station WHERE name = \"San Jose Civic Center\""
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "college_1",
        "turns": [
            {
                "isuser": true,
                "text": "how many students enrolled for the accounting department  ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There 2 students enrolled in the department with the name Aaccounting",
                "query": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM ENROLL AS T1 JOIN CLASS AS T2 ON T1.CLASS_CODE  =  T2.CLASS_CODE JOIN COURSE AS T3 ON T2.CRS_CODE  =  T3.CRS_CODE JOIN DEPARTMENT AS T4 ON T3.DEPT_CODE  =  T4.DEPT_CODE WHERE T4.DEPT_NAME  =  \"Accounting\""
            },
            {
                "isuser": true,
                "text": "what is the school code for accounting?  ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The school code for the department with name Accounting is BUS",
                "query": "SELECT school_code from department where dept_name = \"Accounting\"",
                "result": [
                    [
                        [
                            "SCHOOL_CODE"
                        ],
                        [
                            "BUS"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT school_code FROM DEPARTMENT WHERE dept_name = \"Accounting\""
            },
            {
                "isuser": true,
                "text": "what is the emplotyee number for accounting? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the employee number for Accounting department is 114",
                "query": "SELECT EMP_num from department where dept_name = \"Accounting\"",
                "result": [
                    [
                        [
                            "EMP_NUM"
                        ],
                        [
                            114
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT emp_num FROM professor WHERE dept_code = (SELECT dept_code FROM department WHERE dept_name = \"Accounting\")"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "tracking_orders",
        "turns": [
            {
                "isuser": true,
                "text": "Can I have the dates for all the shipments?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the dates for all the shipments.",
                "query": "SELECT shipment_date FROM shipments",
                "result": [
                    [
                        [
                            "shipment_date"
                        ],
                        [
                            "1983-08-13 22:34:11"
                        ],
                        [
                            "1977-11-10 12:11:25"
                        ],
                        [
                            "2006-01-17 03:08:05"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT shipment_date FROM shipments"
            },
            {
                "isuser": true,
                "text": "Which of these dates occurred most recently? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The most recent shipment date is 2014-01-15 20:52:15",
                "query": "SELECT shipment_date FROM shipments order by shipment_date desc limit 1",
                "result": [
                    [
                        [
                            "shipment_date"
                        ],
                        [
                            "2014-01-15 20:52:15"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(shipment_date) FROM shipments"
            },
            {
                "isuser": true,
                "text": "What is the shipment id for the shipment with this shipment date?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the shipment id for the most recent shipment is 14",
                "query": "SELECT shipment_id FROM shipments WHERE shipment_date = (SELECT max(shipment_date) FROM shipments)",
                "result": [
                    [
                        [
                            "shipment_id"
                        ],
                        [
                            14
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT shipment_id FROM shipments WHERE shipment_date = (SELECT max(shipment_date) FROM shipments)"
            },
            {
                "isuser": true,
                "text": "Thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "gymnast",
        "turns": [
            {
                "isuser": true,
                "text": "Hello!  Can you show me a list of all of the hometowns?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of all the hometowns. For example, one of them is Santo Domingo. ",
                "query": "SELECT Hometown FROM people ",
                "result": [
                    [
                        [
                            "Hometown"
                        ],
                        [
                            "Santo Domingo"
                        ],
                        [
                            "Bonao"
                        ],
                        [
                            "Miami"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT Hometown FROM people"
            },
            {
                "isuser": true,
                "text": "Thank you!  Can you filter this list ot show only the hometowns that have both people older than 23 years of age and people younger than 20 years of age?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Santo Domingo is the hometown that has both people older than 23 years of age and people younger than 20 years of age.",
                "query": "SELECT Hometown FROM people WHERE Age  >  23 INTERSECT SELECT Hometown FROM people WHERE Age  <  20",
                "result": [
                    [
                        [
                            "Hometown"
                        ],
                        [
                            "Santo Domingo"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT Hometown FROM people WHERE Age > 23 INTERSECT SELECT DISTINCT Hometown FROM people WHERE Age < 20"
            },
            {
                "isuser": true,
                "text": "Excellent!  Can you tell me how many people in total have Santo Domingo as their Hometown?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of people who have Santo Domingo as their Hometown is 5.",
                "query": "SELECT count(*) FROM people WHERE Hometown = \"Santo Domingo\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM people WHERE Hometown = \"Santo Domingo\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "pets_1",
        "turns": [
            {
                "isuser": true,
                "text": "Can you show me a list of all of the students IDs for students who have dogs as their pet type?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list of student ids for students who have dogs as their pet.",
                "query": "SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog'",
                "result": [
                    [
                        [
                            "StuID"
                        ],
                        [
                            1002
                        ],
                        [
                            1002
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = \"Dog\")"
            },
            {
                "isuser": true,
                "text": "Which of those two students have a cat as their pet in addition also having a dog?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is no student have a cat and dog as a pet.",
                "query": "SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' intersect SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'",
                "result": [
                    [
                        [
                            "StuID"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = \"Dog\") INTERSECT SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = \"Cat\")"
            },
            {
                "isuser": true,
                "text": "Thanks! Can you please list the first name and ages of the two students who have dogs as pets?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Sure! Here is the list of the first name and ages of the two students who have dogs as pets.",
                "query": "SELECT T1.Fname, T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog'",
                "result": [
                    [
                        [
                            "Fname",
                            "Age"
                        ],
                        [
                            "Tracy",
                            19
                        ],
                        [
                            "Tracy",
                            19
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = \"Dog\"))"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure! Anything else?",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure! My pleasure. Bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "insurance_policies",
        "turns": [
            {
                "isuser": true,
                "text": "tell me how many settlements each claim responds to ",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean to ask for the claim id and number of settlements that each claim responds to?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT count(*) ,  T2.claim_id FROM settlements AS T1 JOIN claims AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T2.claim_id"
            },
            {
                "isuser": true,
                "text": "list the claim  ids ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the claim ids.",
                "query": "SELECT Claim_ID FROM Claims",
                "result": [
                    [
                        [
                            "Claim_ID"
                        ],
                        [
                            143
                        ],
                        [
                            423
                        ],
                        [
                            442
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT claim_id FROM settlements GROUP BY claim_id"
            },
            {
                "isuser": true,
                "text": "list all the amounts claimed ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the amounts claimed. ",
                "query": "SELECT Amount_Claimed FROM Claims",
                "result": [
                    [
                        [
                            "Amount_Claimed"
                        ],
                        [
                            43884
                        ],
                        [
                            79134
                        ],
                        [
                            70088
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT amount_claimed FROM settlements GROUP BY amount_claimed"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Good bye.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "local_govt_in_alabama",
        "turns": [
            {
                "isuser": false,
                "text": "Did you mean the number of events that have associated service type \"Marriage\"?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable",
                "predict": "SELECT count(*) FROM EVENTS WHERE Service_ID IN (SELECT Service_ID FROM Services WHERE Service_Type_Code = \"Marriage\")"
            },
            {
                "isuser": true,
                "text": "How many events with \"Marriage\" type codes are there? ",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "There are 5 events with the \"Marriage\" service type code.",
                "query": "SELECT count(*) FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T2.Service_Type_Code  = 'Marriage'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Events WHERE Service_ID IN (SELECT Service_ID FROM Services WHERE Service_Type_Code = \"Marriage\")"
            },
            {
                "isuser": true,
                "text": "What are event details associated with the event of this type code?  ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are details of the events of the \"Marriage\" service type code. ",
                "query": "SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T2.Service_Type_Code  = 'Marriage'",
                "result": [
                    [
                        [
                            "Event_Details"
                        ],
                        [
                            "Fail"
                        ],
                        [
                            "Fail"
                        ],
                        [
                            "Success"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Event_Details FROM Events WHERE Service_ID IN (SELECT Service_ID FROM Services WHERE Service_Type_Code = \"Marriage\")"
            },
            {
                "isuser": true,
                "text": "How many among them are with \"success\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 2 events with the \"Marriage\" service type code that have details of \"Success\".",
                "query": "SELECT count(*) FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T2.Service_Type_Code  = 'Marriage' and Event_Details = 'Success'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Events WHERE Service_ID IN (SELECT Service_ID FROM Services WHERE Service_Type_Code = \"Marriage\") AND Event_Details = \"success\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "hr_1",
        "turns": [
            {
                "isuser": true,
                "text": "Can you show me the first and last names of all employees who work in any department located in London please?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The first and last names of the employee who works in any department located in London are Susan and Mavris.",
                "query": "SELECT first_name ,  last_name  FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'",
                "result": [
                    [
                        [
                            "FIRST_NAME",
                            "LAST_NAME"
                        ],
                        [
                            "Susan",
                            "Mavris"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.first_name ,  T1.last_name FROM employees AS T1 JOIN locations AS T2 ON T1.department_id  =  T2.department_id WHERE T2.city  =  \"London\""
            },
            {
                "isuser": true,
                "text": "What are the first and last names of the person with the second lowest salary?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "The first and last names of the person with the second lowest salary are Steven Markle and Hazel Philtanker.",
                "query": "SELECT first_name ,  last_name,salary  FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id order by salary",
                "result": [
                    [
                        [
                            "FIRST_NAME",
                            "LAST_NAME",
                            "SALARY"
                        ],
                        [
                            "TJ",
                            "Olson",
                            2100
                        ],
                        [
                            "Steven",
                            "Markle",
                            2200
                        ],
                        [
                            "Hazel",
                            "Philtanker",
                            2200
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.first_name ,  T1.last_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.manager_id  =  (SELECT T3.manager_id FROM employees AS T3 JOIN departments AS T4 ON T3.department_id  =  T4.department_id ORDER BY T3.salary DESC LIMIT 1 OFFSET 1)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "world_1",
        "turns": [
            {
                "isuser": true,
                "text": "how many country there",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 239 countries.",
                "query": "SELECT count(*) from country",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            239
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM country"
            },
            {
                "isuser": true,
                "text": "what is the Country Code of Herat",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the country code of city Herat?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT CountryCode FROM city WHERE Name = \"Herat\""
            },
            {
                "isuser": true,
                "text": "yes sir",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "AFG is the country code for city Herat.",
                "query": "SELECT countrycode  from city where name = \"Herat\"",
                "result": [
                    [
                        [
                            "CountryCode"
                        ],
                        [
                            "AFG"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM country"
            },
            {
                "isuser": true,
                "text": "what is the Population of Qandahar",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The population of city Qandahar is 237500.",
                "query": "SELECT population  from city where name = \"Qandahar\"",
                "result": [
                    [
                        [
                            "Population"
                        ],
                        [
                            237500
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Population FROM city WHERE Name = \"Qandahar\""
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "cre_Docs_and_Epenses",
        "turns": [
            {
                "isuser": true,
                "text": "What is the project detail for the project with document \"King Book\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Human Resource project is the project detail for the project with document \"King Book\"",
                "query": "SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  \"King Book\"",
                "result": [
                    [
                        [
                            "Project_Details"
                        ],
                        [
                            "Human Resource project"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT project_details FROM Projects WHERE project_id IN (SELECT project_id FROM Documents WHERE document_name = \"King Book\")"
            },
            {
                "isuser": true,
                "text": "What is the document date for the project with document \"King Book\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The document date of \"King Book\" is 1970-01-30 10:53:35",
                "query": "SELECT T2.Document_Date FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  \"King Book\"",
                "result": [
                    [
                        [
                            "Document_Date"
                        ],
                        [
                            "1970-01-30 10:53:35"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_date FROM Documents WHERE document_name = \"King Book\""
            },
            {
                "isuser": true,
                "text": "How many documents are there with the document type code \"CV\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 3 documents with type code CV",
                "query": "SELECT count(T2.Document_Date) FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.Document_Type_Code =  \"CV\"",
                "result": [
                    [
                        [
                            "count(T2.Document_Date)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM Documents WHERE document_type_code = \"CV\""
            },
            {
                "isuser": true,
                "text": "How many documents are there with the document type code \"BK\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 6 documents with document code 'BK'.",
                "query": "SELECT count(T2.Document_Date) FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.Document_Type_Code =  \"BK\"",
                "result": [
                    [
                        [
                            "count(T2.Document_Date)"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM Documents WHERE document_type_code = \"BK\""
            },
            {
                "isuser": true,
                "text": "What are the document dates of all documents with the document type code \"BK\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the table of the dates of all documents with the document code 'BK'. For example, they are 2012-12-27 19:09:18  and 1981-11-29 10:23:01",
                "query": "SELECT T2.Document_Date FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.Document_Type_Code =  \"BK\"",
                "result": [
                    [
                        [
                            "Document_Date"
                        ],
                        [
                            "2012-12-27 19:09:18"
                        ],
                        [
                            "1981-11-29 10:23:01"
                        ],
                        [
                            "1991-07-08 08:49:59"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_date FROM Documents WHERE document_type_code = \"BK\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "bike_1",
        "turns": [
            {
                "isuser": true,
                "text": "how many trip are presented on the table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 9959 trips",
                "query": "SELECT count(*) FROM trip ",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            9959
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM trip"
            },
            {
                "isuser": true,
                "text": "show all the start station name",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of all the start stations",
                "query": "SELECT start_station_name FROM trip ",
                "result": [
                    [
                        [
                            "start_station_name"
                        ],
                        [
                            "Howard at 2nd"
                        ],
                        [
                            "South Van Ness at Market"
                        ],
                        [
                            "Market at Sansome"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT start_station_name FROM trip"
            },
            {
                "isuser": true,
                "text": "what is the start date of Howard at 2nd ",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean its start station is Howard at 2nd?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT start_date FROM trip WHERE start_station_name = \"Howard\" AND start_station_id = 2"
            },
            {
                "isuser": true,
                "text": "exactly",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the start dates of the trips that have Howard at 2nd as their start station",
                "query": "SELECT start_date FROM trip where start_station_name = \"Howard at 2nd\"",
                "result": [
                    [
                        [
                            "start_date"
                        ],
                        [
                            "8/21/2015 17:03"
                        ],
                        [
                            "8/21/2015 17:07"
                        ],
                        [
                            "8/21/2015 17:34"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT start_date FROM trip WHERE start_station_name = \"Howard\" AND start_station_id = 2"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "store_1",
        "turns": [
            {
                "isuser": true,
                "text": "What is title of album which track Balls to the Wall belong to?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The title of the album which track Balls to the Wall belongs to is For Those About To Rock We Salute You.",
                "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";",
                "result": [
                    [
                        [
                            "title"
                        ],
                        [
                            "For Those About To Rock We Salute You"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT title FROM albums WHERE id IN (SELECT album_id FROM tracks WHERE name = \"Balls to the Wall\")"
            },
            {
                "isuser": true,
                "text": "Hmmm. What is title of album which track Fast as a Shark belong to?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The title of the album which track named Fast As a Shark belongs to is For Those About To Rock We Salute You. ",
                "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Fast As a Shark\";",
                "result": [
                    [
                        [
                            "title"
                        ],
                        [
                            "For Those About To Rock We Salute You"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT title FROM albums WHERE id IN (SELECT album_id FROM tracks WHERE name = \"Fast as a Shark\")"
            },
            {
                "isuser": true,
                "text": "And who is the composer for the album?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "The composers for the album to which track named Fast As a Shark belongs are F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman.",
                "query": "SELECT T2.composer FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Fast As a Shark\";",
                "result": [
                    [
                        [
                            "composer"
                        ],
                        [
                            "F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.name FROM artists AS T1 JOIN tracks AS T2 ON T1.id = T2.artist_id WHERE T2.name = \"Balls to the Wall\""
            },
            {
                "isuser": true,
                "text": "What is title of album which track For Those About To Rock (We Salute You) belong to?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The title of album which track For Those About To Rock (We Salute You) belongs to is For Those About To Rock We Salute You. ",
                "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"For Those About To Rock (We Salute You)\";",
                "result": [
                    [
                        [
                            "title"
                        ],
                        [
                            "For Those About To Rock We Salute You"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT title FROM albums WHERE id IN (SELECT album_id FROM tracks WHERE name = \"For Those About To Rock (We Salute You)\")"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, good bye. ",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "product_catalog",
        "turns": [
            {
                "isuser": true,
                "text": "What are the names of catalog with number 8",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table shows the names of catalog entries with level number 8.",
                "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = \"8\"",
                "result": [
                    [
                        [
                            "catalog_entry_name"
                        ],
                        [
                            "Ginger Beer"
                        ],
                        [
                            "Cola"
                        ],
                        [
                            "Cola"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT catalog_name FROM Catalogs WHERE catalog_id = 8"
            },
            {
                "isuser": true,
                "text": "Could you please show me their attribute ID",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table shows the attribute ids of catalog entries with level number 8.",
                "query": "SELECT t2.attribute_id FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = \"8\"",
                "result": [
                    [
                        [
                            "attribute_id"
                        ],
                        [
                            4
                        ],
                        [
                            3
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT attribute_id FROM Catalog_Contents_Additional_Attributes WHERE catalog_entry_id = 1"
            },
            {
                "isuser": true,
                "text": "What about their attribute value",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table shows the attribute values of catalog entries with level number 8.",
                "query": "SELECT t2.attribute_value FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = \"8\"",
                "result": [
                    [
                        [
                            "attribute_value"
                        ],
                        [
                            "1"
                        ],
                        [
                            "1"
                        ],
                        [
                            "0"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT attribute_value FROM Catalog_Contents_Additional_Attributes WHERE catalog_entry_id = 1"
            },
            {
                "isuser": true,
                "text": "Thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "customers_and_addresses",
        "turns": [
            {
                "isuser": true,
                "text": "Please show me all customers and their contact channels\n",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you want the names of customers or id?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T1.customer_name ,  T2.channel_code FROM customers AS T1 JOIN customer_contact_channels AS T2 ON T1.customer_id  =  T2.customer_id"
            },
            {
                "isuser": true,
                "text": "names please",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list of all the customer's names and their channel code.",
                "query": "SELECT DISTINCT customer_name, channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id",
                "result": [
                    [
                        [
                            "customer_name",
                            "channel_code"
                        ],
                        [
                            "Devin Mills",
                            "Email"
                        ],
                        [
                            "Tillman Ernser",
                            "Email"
                        ],
                        [
                            "Prof. Alexzander Hamill",
                            "Cell"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.customer_name ,  T2.channel_code FROM customers AS T1 JOIN customer_contact_channels AS T2 ON T1.customer_id  =  T2.customer_id"
            },
            {
                "isuser": true,
                "text": "please show just those customers who's channel code was email",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Only Devin Mills and Tillman Ernser have channel code email.",
                "query": "SELECT DISTINCT customer_name FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id where channel_code = \"Email\"",
                "result": [
                    [
                        [
                            "customer_name"
                        ],
                        [
                            "Devin Mills"
                        ],
                        [
                            "Tillman Ernser"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.customer_name ,  T2.channel_code FROM customers AS T1 JOIN customer_contact_channels AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.channel_code = \"email\""
            },
            {
                "isuser": true,
                "text": "Please list just Tillman Ernsers contact channel",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the channel codes for the customer Tillman Ernsers are email, cell, and handheld.",
                "query": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id where customer_name = \"Tillman Ernser\"",
                "result": [
                    [
                        [
                            "channel_code"
                        ],
                        [
                            "Email"
                        ],
                        [
                            "Cell"
                        ],
                        [
                            "Handheld"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.channel_code FROM customers AS T1 JOIN customer_contact_channels AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.customer_name = \"Tillman Ernsers\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "tvshow",
        "turns": [
            {
                "isuser": true,
                "text": "find id of the tv channels that are from countries with more than two tv channels",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the ids of tv channels whose country has more than two tv channels.",
                "query": "select id from tv_channel where country in (SELECT country FROM tv_channel GROUP BY country HAVING count(*)  >  2)",
                "result": [
                    [
                        [
                            "id"
                        ],
                        [
                            "700"
                        ],
                        [
                            "701"
                        ],
                        [
                            "703"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(*)  >  2)"
            },
            {
                "isuser": true,
                "text": "What is the package option for that channel?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the package options of tv channels whose country has more than two tv channels.",
                "query": "select package_option from tv_channel where country in (SELECT country FROM tv_channel GROUP BY country HAVING count(*)  >  2)",
                "result": [
                    [
                        [
                            "Package_Option"
                        ],
                        [
                            "Sky Famiglia"
                        ],
                        [
                            "Sky Famiglia"
                        ],
                        [
                            "Sky Famiglia"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT package_option FROM TV_Channel WHERE id = 1"
            },
            {
                "isuser": true,
                "text": "List all series names in alphabetical order",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Series names of tv channels in alphabetical order are shown in the table.",
                "query": "SELECT series_name FROM tv_channel order by series_name asc",
                "result": [
                    [
                        [
                            "series_name"
                        ],
                        [
                            "Classica"
                        ],
                        [
                            "Hip Hop TV"
                        ],
                        [
                            "MTV Classic"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT series_name FROM TV_series ORDER BY series_name ASC"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "tracking_software_problems",
        "turns": [
            {
                "isuser": true,
                "text": "The column \"product_id \" in Table: \"problems\" refers to column \"product_id\" in Table: \" product\"",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "could  give more info about  this question?",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "SELECT T1.product_id ,  T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id  =  T2.product_id"
            },
            {
                "isuser": true,
                "text": "List the ids of the problem from the product ''voluptatem'' that are reported after 1995?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There  ids of the problem from the product ''voluptatem'' that are reported after 1995 is empty",
                "query": "SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = \"voluptatem\" AND T1.date_problem_reported > \"1995\"",
                "result": [
                    [
                        [
                            "problem_id"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT problem_id FROM problems WHERE product_id = (SELECT product_id FROM product WHERE product_name = \"voluptatem\") AND date_problem_reported > \"1995-01-01\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "are  you  want  to  leave?can you  ask more  question?",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "No Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome  and  googbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "I'm sorry to hear that. Is there anything else I can help you with?"
            }
        ]
    },
    {
        "db_name": "store_product",
        "turns": [
            {
                "isuser": true,
                "text": "Find all stores in the Attock district",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you want the id or the name of these stores?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T2.store_name FROM store_district AS T1 JOIN store AS T2 ON T1.store_id  =  T2.store_id WHERE T1.district_id  =  2"
            },
            {
                "isuser": true,
                "text": "The name",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is no store in the Attock District",
                "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id join district as t3 on t3.district_id = t2.district_id where t3.district_name = \"Attock District\"",
                "result": [
                    [
                        [
                            "Store_Name"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.store_name FROM store_district AS T1 JOIN store AS T2 ON T1.store_id  =  T2.store_id WHERE T1.district_id  =  2"
            },
            {
                "isuser": true,
                "text": "Find all the store names in the district with the lowest population. ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The store named Blackville is in the district with the lowest population.",
                "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id WHERE district_id = (SELECT district_id FROM district ORDER BY city_population ASC LIMIT 1)",
                "result": [
                    [
                        [
                            "Store_Name"
                        ],
                        [
                            "Blackville"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.store_name FROM store_district AS T1 JOIN store AS T2 ON T1.store_id  =  T2.store_id WHERE T1.district_id  =  (SELECT min(district_id) FROM district)"
            },
            {
                "isuser": true,
                "text": "Find all the store names in the district with the highest population.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is no store in the district with the highest population",
                "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id WHERE district_id = (SELECT district_id FROM district ORDER BY city_population desC LIMIT 1)",
                "result": [
                    [
                        [
                            "Store_Name"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.store_name FROM store_district AS T1 JOIN store AS T2 ON T1.store_id  =  T2.store_id WHERE T1.district_id  =  (SELECT max(district_id) FROM district)"
            },
            {
                "isuser": true,
                "text": "What is the city area of the district with the highest population. ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the city area of the district with the highest population is 147.0",
                "query": "sELECT city_area FROM district ORDER BY city_population desC LIMIT 1",
                "result": [
                    [
                        [
                            "City_Area"
                        ],
                        [
                            147.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.city_area FROM district AS T1 WHERE T1.district_id  =  (SELECT max(district_id) FROM district)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "college_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many departments do you have?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 11 departments.",
                "query": "SELECT count(*) from department",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            11
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM DEPARTMENT"
            },
            {
                "isuser": true,
                "text": "What are the first names of professors in the history department?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The first names of professors in the history department are Ronald and James.",
                "query": "SELECT T1.emp_fname from employee as T1 join professor as T2 on T1.emp_num = T2.emp_num where T2.dept_code = 'HIST'",
                "result": [
                    [
                        [
                            "EMP_FNAME"
                        ],
                        [
                            "Ronald"
                        ],
                        [
                            "James"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.dept_code  =  'HIST'"
            },
            {
                "isuser": true,
                "text": "What are the offices of these professors?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the offices of professors in the history department.",
                "query": "SELECT T2.prof_office from employee as T1 join professor as T2 on T1.emp_num = T2.emp_num where T2.dept_code = 'HIST'",
                "result": [
                    [
                        [
                            "PROF_OFFICE"
                        ],
                        [
                            "DRE 156"
                        ],
                        [
                            "DRE 156"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.dept_code  =  'HIST'"
            },
            {
                "isuser": true,
                "text": "Can you tell me the first name and office of the professor in the history department who has a Ph.D. degree?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The first name and office of the professor in the history department who has a Ph.D. degree is shown in the table.",
                "query": "SELECT T1.emp_fname, T2.prof_office from employee as T1 join professor as T2 on T1.emp_num = T2.emp_num where T2.dept_code = 'HIST' and T2.PROF_HIGH_DEGREE = 'Ph.D.'",
                "result": [
                    [
                        [
                            "EMP_FNAME",
                            "PROF_OFFICE"
                        ],
                        [
                            "Ronald",
                            "DRE 156"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.emp_fname, T1.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.dept_code  =  'HIST' AND T2.prof_high_degree  =  'Ph.D.'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "theme_gallery",
        "turns": [
            {
                "isuser": true,
                "text": "Can you please tell me the names of the artists who don't have any exhibitions?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of the artists who don't have any exhibitions.",
                "query": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Mark Brooks"
                        ],
                        [
                            "Larry Nelson"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)"
            },
            {
                "isuser": true,
                "text": "What are their countries?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the countries of the artists who don't have any exhibitions",
                "query": "SELECT country FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)",
                "result": [
                    [
                        [
                            "Country"
                        ],
                        [
                            "United States"
                        ],
                        [
                            "United States"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT country FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)"
            },
            {
                "isuser": true,
                "text": "What are their ages?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "As requested, here are ages of the artists who don't have any exhibitions",
                "query": "SELECT age FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)",
                "result": [
                    [
                        [
                            "Age"
                        ],
                        [
                            48
                        ],
                        [
                            50
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT age FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)"
            },
            {
                "isuser": true,
                "text": "What is the name of the oldest artist?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the name of the oldest artist is Jeff Sluman",
                "query": "SELECT name FROM artist ORDER BY AGE DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Jeff Sluman"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition) ORDER BY age DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Did he have any exhibitions?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Yes he does",
                "query": "SELECT name FROM artist WHERE artist_id IN (SELECT artist_id FROM exhibition) AND name = \"Jeff Sluman\"",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Jeff Sluman"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "tracking_share_transactions",
        "turns": [
            {
                "isuser": true,
                "text": "when did the transactions that were less that 3000 occur?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table that shows the date of the transactions that were less than 3000.",
                "query": "SELECT T2.date_of_transaction FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction < 3000",
                "result": [
                    [
                        [
                            "date_of_transaction"
                        ],
                        [
                            "1982-06-06 17:19:00"
                        ],
                        [
                            "2001-11-28 15:06:25"
                        ],
                        [
                            "1977-08-17 13:13:30"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT date_of_transaction FROM TRANSACTIONS WHERE amount_of_transaction  <  3000"
            },
            {
                "isuser": true,
                "text": "which transactions were sales?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table shows the the transaction ids of those with the transaction type code \"SALE\".",
                "query": "select transaction_id from Transactions where transaction_type_code='SALE'",
                "result": [
                    [
                        [
                            "transaction_id"
                        ],
                        [
                            1
                        ],
                        [
                            3
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.transaction_id ,  T1.transaction_type_code FROM TRANSACTIONS AS T1 JOIN SALES AS T2 ON T1.transaction_id  =  T2.sales_transaction_id"
            },
            {
                "isuser": true,
                "text": "ok i see the transactions of the sales. and then what are the ones that were purchases?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table shows the the transaction ids of those with the transaction type code \"PUR\".",
                "query": "select transaction_id from Transactions where transaction_type_code='PUR'",
                "result": [
                    [
                        [
                            "transaction_id"
                        ],
                        [
                            2
                        ],
                        [
                            4
                        ],
                        [
                            5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.transaction_id ,  T1.transaction_type_code FROM TRANSACTIONS AS T1 JOIN PURCHASES AS T2 ON T1.transaction_id  =  T2.purchase_transaction_id"
            },
            {
                "isuser": true,
                "text": "what investors were involved with those transactions that were under 3000?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table that shows the investors that were involved with the transactions that were under 3000.",
                "query": "SELECT T2.investor_id FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction < 3000",
                "result": [
                    [
                        [
                            "investor_id"
                        ],
                        [
                            18
                        ],
                        [
                            14
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.investor_id ,  T1.investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.amount_of_transaction  <  3000"
            },
            {
                "isuser": true,
                "text": "Thanks!\n",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "college_3",
        "turns": [
            {
                "isuser": true,
                "text": "How many faculty members are in building Barton?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of faculty members in building Barton is 20",
                "query": "SELECT count(*) FROM FACULTY WHERE Building  =  \"Barton\" ",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            20
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM FACULTY WHERE building = 'Barton'"
            },
            {
                "isuser": true,
                "text": "Please list the faculty members in building Barton.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of all the information about faculty members in building Barton.",
                "query": "SELECT * FROM FACULTY WHERE Building  =  \"Barton\" ",
                "result": [
                    [
                        [
                            "FacID",
                            "Lname",
                            "Fname",
                            "Rank",
                            "Sex",
                            "Phone",
                            "Room",
                            "Building"
                        ],
                        [
                            1172,
                            "Runolfsson",
                            "Thordur",
                            "AssocProf",
                            "M",
                            3121,
                            "119",
                            "Barton"
                        ],
                        [
                            1823,
                            "Davidson",
                            "Frederic",
                            "Professor",
                            "M",
                            5629,
                            "119",
                            "Barton"
                        ],
                        [
                            2028,
                            "Brody",
                            "William",
                            "Professor",
                            "M",
                            6073,
                            "119",
                            "Barton"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Fname, Lname FROM FACULTY WHERE building = 'Barton'"
            },
            {
                "isuser": true,
                "text": "Can you please get just their last names?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of the last names of the faculty members in building Barton. For example, one of them is Runolfsson.",
                "query": "SELECT lname FROM FACULTY WHERE Building  =  \"Barton\" ",
                "result": [
                    [
                        [
                            "Lname"
                        ],
                        [
                            "Runolfsson"
                        ],
                        [
                            "Davidson"
                        ],
                        [
                            "Brody"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Lname FROM FACULTY WHERE building = 'Barton'"
            },
            {
                "isuser": true,
                "text": "Of the faculty members in building Barton, how many are in each rank?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of rank and the number of faculty members in each rank of building Barton. For example, there are 4 Associate Professors.",
                "query": "SELECT rank, count(*) FROM FACULTY WHERE Building  =  \"Barton\" group by rank",
                "result": [
                    [
                        [
                            "Rank",
                            "count(*)"
                        ],
                        [
                            "AssocProf",
                            4
                        ],
                        [
                            "AsstProf",
                            2
                        ],
                        [
                            "Instructor",
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT rank, count(*) FROM FACULTY WHERE building = 'Barton' GROUP BY rank"
            },
            {
                "isuser": true,
                "text": "Can you please list the last names of the faculty in Barton one more time, in alphabetical order?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of the last names of the faculty in Barton order by their last names alphabetically. For example, the first one is Andreou.",
                "query": "SELECT Lname FROM FACULTY WHERE Building  =  \"Barton\" ORDER BY Lname",
                "result": [
                    [
                        [
                            "Lname"
                        ],
                        [
                            "Andreou"
                        ],
                        [
                            "Brody"
                        ],
                        [
                            "Byrne"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Lname FROM FACULTY WHERE building = 'Barton' ORDER BY Lname ASC"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "store_1",
        "turns": [
            {
                "isuser": false,
                "text": "Do you mean the contact number of the customer of 'Woodstock Discos'?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Yes.",
                "type": "answerable",
                "predict": "SELECT phone FROM customers WHERE company = 'Woodstock Discos'"
            },
            {
                "isuser": true,
                "text": "Check whether Mr. Eduardo Martin is a customer or not?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Great. Which is the first name?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT first_name, last_name, company FROM customers WHERE first_name = 'Eduardo' AND last_name = 'Martin'"
            },
            {
                "isuser": true,
                "text": "Eduardo.",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes, he is.",
                "query": "SELECT * FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";",
                "result": [
                    [
                        [
                            "id",
                            "first_name",
                            "last_name",
                            "company",
                            "address",
                            "city",
                            "state",
                            "country",
                            "postal_code",
                            "phone",
                            "fax",
                            "email",
                            "support_rep_id"
                        ],
                        [
                            10,
                            "Eduardo",
                            "Martins",
                            "Woodstock Discos",
                            "Rua Dr. Falcão Filho, 155",
                            "São Paulo",
                            "SP",
                            "Brazil",
                            "01007-010",
                            "+55 (11) 3033-5446",
                            "+55 (11) 3033-4564",
                            "eduardo@woodstock.com.br",
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name, last_name, company FROM customers WHERE first_name = 'Eduardo' AND last_name = 'Martin'"
            },
            {
                "isuser": true,
                "text": "Of which company is Mr. Eduardo Martins a customer?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The company of which Eduardo Martins is a customer is 'Woodstock Discos'",
                "query": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";",
                "result": [
                    [
                        [
                            "company"
                        ],
                        [
                            "Woodstock Discos"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT company FROM customers WHERE first_name = 'Eduardo' AND last_name = 'Martin'"
            },
            {
                "isuser": true,
                "text": "In which city is the company 'Woodstock Discos' located?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the company 'Woodstock Discos' is located in the city São Paulo.",
                "query": "SELECT city FROM customers WHERE company = \"Woodstock Discos\"",
                "result": [
                    [
                        [
                            "city"
                        ],
                        [
                            "São Paulo"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT city FROM customers WHERE company = 'Woodstock Discos'"
            },
            {
                "isuser": true,
                "text": "what is the contact number of 'Woodstock discos' company?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "The phone of the customer of the company 'Woodstock Discos' is +55 (11) 3033-5446.",
                "query": "SELECT phone FROM customers WHERE company = \"Woodstock Discos\"",
                "result": [
                    [
                        [
                            "phone"
                        ],
                        [
                            "+55 (11) 3033-5446"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT phone FROM customers WHERE company = 'Woodstock Discos'"
            },
            {
                "isuser": true,
                "text": "What is the contact number of Mr. Eduardo Martins?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The phone of the customer Eduardo Martins is +55 (11) 3033-5446.",
                "query": "SELECT phone FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";",
                "result": [
                    [
                        [
                            "phone"
                        ],
                        [
                            "+55 (11) 3033-5446"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT phone FROM customers WHERE first_name = 'Eduardo' AND last_name = 'Martin'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome, goodbye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "game_1",
        "turns": [
            {
                "isuser": true,
                "text": "Can you show me the student names with ids?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here we list the student ids with their last names and first names.",
                "query": "SELECT StuID, LName, Fname FROM Student",
                "result": [
                    [
                        [
                            "StuID",
                            "LName",
                            "Fname"
                        ],
                        [
                            1001,
                            "Smith",
                            "Linda"
                        ],
                        [
                            1002,
                            "Kim",
                            "Tracy"
                        ],
                        [
                            1003,
                            "Jones",
                            "Shiela"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT StuID, Fname, Lname FROM Student"
            },
            {
                "isuser": true,
                "text": "Hmm, can you list the student ids with sports played?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Sure. Here is the list of student ids with sport names they played",
                "query": "SELECT stuID ,sportname FROM SportsInfo",
                "result": [
                    [
                        [
                            "StuID",
                            "SportName"
                        ],
                        [
                            1001,
                            "Athletics"
                        ],
                        [
                            1002,
                            "Football"
                        ],
                        [
                            1003,
                            "Football"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT StuID FROM SportsInfo"
            },
            {
                "isuser": true,
                "text": "I want to know the student names and ids who don’t play any sports.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the list of student ids, first and last names for students who don’t play any sports.",
                "query": "SELECT StuID,LName,Fname FROM Student where stuID not in (SELECT StuID FROM Sportsinfo)",
                "result": [
                    [
                        [
                            "StuID",
                            "LName",
                            "Fname"
                        ],
                        [
                            1004,
                            "Kumar",
                            "Dinesh"
                        ],
                        [
                            1006,
                            "Schultz",
                            "Andy"
                        ],
                        [
                            1007,
                            "Apap",
                            "Lisa"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT StuID, Fname, Lname FROM Student WHERE StuID NOT IN (SELECT StuID FROM SportsInfo)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure! Do you want more help?",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "No, thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Good bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "dog_kennels",
        "turns": [
            {
                "isuser": true,
                "text": "Hello, how many dogs have gone through treatments?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 9 dogs who have gone through treatments.",
                "query": "SELECT count(*) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            9
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"
            },
            {
                "isuser": true,
                "text": "What is the age of the youngest dog to go through treatment?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The youngest dog who has gone through any treatment has an age of 1.",
                "query": "SELECT min(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
                "result": [
                    [
                        [
                            "min(age)"
                        ],
                        [
                            "1"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT min(age) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"
            },
            {
                "isuser": true,
                "text": "What about the oldest?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The oldest dog who has gone through any treatment has an age of 9.",
                "query": "SELECT max(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
                "result": [
                    [
                        [
                            "max(age)"
                        ],
                        [
                            "9"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(age) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"
            },
            {
                "isuser": true,
                "text": "How about the average age?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The dogs who have gone through any treatment have an average age of 5.111111111111111.",
                "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
                "result": [
                    [
                        [
                            "avg(age)"
                        ],
                        [
                            5.111111111111111
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(age) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "thanks. bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "tracking_orders",
        "turns": [
            {
                "isuser": true,
                "text": "How many customers have two orders or less\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 8 customers who have two orders or less.",
                "query": "SELECT COUNT(*) FROM (SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2)",
                "result": [
                    [
                        [
                            "COUNT(*)"
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM (SELECT customer_id ,  count(*) FROM orders GROUP BY customer_id HAVING count(*)  <=  2)"
            },
            {
                "isuser": true,
                "text": "How many total customer are there?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are a total of 15 customers.",
                "query": "SELECT COUNT(*) FROM Customers",
                "result": [
                    [
                        [
                            "COUNT(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM customers"
            },
            {
                "isuser": true,
                "text": "Of the customers with two orders or less, what are their names?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table that shows the customers' names who have two orders or less. For example, the name of one customer is Alberto.",
                "query": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*) <= 2",
                "result": [
                    [
                        [
                            "customer_name"
                        ],
                        [
                            "Alberto"
                        ],
                        [
                            "Leilani"
                        ],
                        [
                            "Hadley"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_name FROM customers WHERE customer_id IN (SELECT customer_id FROM orders GROUP BY customer_id HAVING count(*)  <=  2)"
            },
            {
                "isuser": true,
                "text": "Do any customer have zero orders?\n",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "No customer has zero order.",
                "query": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*) = 0",
                "result": [
                    [
                        [
                            "customer_name"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders)"
            },
            {
                "isuser": true,
                "text": "How many of the customers with two orders or less have placed orders in the past year?\n ",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "There are 0 customer that has two orders or less placed orders in the past year.",
                "query": "SELECT COUNT(*) FROM orders where customer_id in (SELECT T2.customer_id FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2)  and date_order_placed > \"2018-5-1 00:00:00\"",
                "result": [
                    [
                        [
                            "COUNT(*)"
                        ],
                        [
                            0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM (SELECT customer_id ,  count(*) FROM orders GROUP BY customer_id HAVING count(*)  <=  2) WHERE date_order_placed > datetime('now', '-1 year')"
            },
            {
                "isuser": true,
                "text": "Thanks!\n",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "railway",
        "turns": [
            {
                "isuser": true,
                "text": "Which railways do not have trains?\n",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean the object number of railways that do not have any train?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT Railway FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)"
            },
            {
                "isuser": true,
                "text": "Yes\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the object numbers of railways that do not have any trains.",
                "query": "SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)",
                "result": [
                    [
                        [
                            "ObjectNumber"
                        ],
                        [
                            "1978-7025"
                        ],
                        [
                            "1978-7026"
                        ],
                        [
                            "1978-7027"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Railway FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)"
            },
            {
                "isuser": true,
                "text": "and ones that do?\n\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the object numbers of railways that have some trains",
                "query": "SELECT ObjectNumber FROM railway WHERE Railway_ID IN (SELECT Railway_ID FROM train)",
                "result": [
                    [
                        [
                            "ObjectNumber"
                        ],
                        [
                            "1975-7006"
                        ],
                        [
                            "1975-7018"
                        ],
                        [
                            "1975-7005"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Railway FROM railway WHERE Railway_ID IN (SELECT Railway_ID FROM train)"
            },
            {
                "isuser": true,
                "text": "What are their names?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of railways that have some trains",
                "query": "SELECT railway FROM railway WHERE Railway_ID IN (SELECT Railway_ID FROM train)",
                "result": [
                    [
                        [
                            "Railway"
                        ],
                        [
                            "SECR"
                        ],
                        [
                            "MR"
                        ],
                        [
                            "GNRD"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Railway FROM railway WHERE Railway_ID IN (SELECT Railway_ID FROM train)"
            },
            {
                "isuser": true,
                "text": "and the names of the railways with no trains?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of railways that do not have any train.",
                "query": "SELECT railway FROM railway WHERE Railway_ID not IN (SELECT Railway_ID FROM train)",
                "result": [
                    [
                        [
                            "Railway"
                        ],
                        [
                            "GWRS"
                        ],
                        [
                            "GERHt"
                        ],
                        [
                            "GWRWk"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Railway FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)"
            },
            {
                "isuser": true,
                "text": "when were they built?\n\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the built years of railways that do not have any train.",
                "query": "SELECT built FROM railway WHERE Railway_ID not IN (SELECT Railway_ID FROM train)",
                "result": [
                    [
                        [
                            "Built"
                        ],
                        [
                            "1903"
                        ],
                        [
                            "1905"
                        ],
                        [
                            "1907"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Built FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks. bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "gas_company",
        "turns": [
            {
                "isuser": true,
                "text": "Hi can you show me all the headquarters of a company in backing industry?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean banking, not backing?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "I apologize, but the database does not contain information about the company's industry."
            },
            {
                "isuser": true,
                "text": "Sorry, yes banking!",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table that shows all the headquarters of the companies in the banking industry.",
                "query": "SELECT headquarters FROM company WHERE main_industry = 'Banking'",
                "result": [
                    [
                        [
                            "Headquarters"
                        ],
                        [
                            "China"
                        ],
                        [
                            "UK"
                        ],
                        [
                            "USA"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT headquarters FROM company WHERE main_industry = \"Banking\""
            },
            {
                "isuser": true,
                "text": "Thank you! Can you now tell me the all the headquarters of a company in Oil and gas?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Of course, here is the result table that shows all the headquarters of the companies in the oil and gas industry.",
                "query": "SELECT headquarters FROM company WHERE main_industry = 'Oil and gas'",
                "result": [
                    [
                        [
                            "Headquarters"
                        ],
                        [
                            "USA"
                        ],
                        [
                            "Netherlands"
                        ],
                        [
                            "China"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT headquarters FROM company WHERE main_industry = \"Oil and Gas\""
            },
            {
                "isuser": true,
                "text": "Great, what about all the headquarters with both a company in oil and gas and a company in banking?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table that show all headquarters with both companies in banking industry and companies in oil and gas.",
                "query": "SELECT headquarters FROM company WHERE main_industry = 'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry = 'Oil and gas'",
                "result": [
                    [
                        [
                            "Headquarters"
                        ],
                        [
                            "China"
                        ],
                        [
                            "UK"
                        ],
                        [
                            "USA"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT headquarters FROM company WHERE main_industry = \"Banking\" INTERSECT SELECT headquarters FROM company WHERE main_industry = \"Oil and Gas\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "hr_1",
        "turns": [
            {
                "isuser": true,
                "text": "What is the department id for the Finance department?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the department id for the Finance department is 100",
                "query": "SELECT DEPARTMENT_ID FROM  departments where department_name  =  'Finance'",
                "result": [
                    [
                        [
                            "DEPARTMENT_ID"
                        ],
                        [
                            100
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT department_id FROM departments WHERE department_name = 'Finance'"
            },
            {
                "isuser": true,
                "text": "How many employees work in that department?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "6 employees work in the Finance department",
                "query": "SELECT count(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM employees WHERE department_id = 2"
            },
            {
                "isuser": true,
                "text": "What are their first names?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the first names of employees working in the Finance department ",
                "query": "SELECT T1.first_name  FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'",
                "result": [
                    [
                        [
                            "FIRST_NAME"
                        ],
                        [
                            "Nancy"
                        ],
                        [
                            "Daniel"
                        ],
                        [
                            "John"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name FROM employees WHERE department_id = 2"
            },
            {
                "isuser": true,
                "text": "What is the job id for each employee in the Finance department?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This shows the job ids of the employees working in the Finance department",
                "query": "SELECT  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'",
                "result": [
                    [
                        [
                            "JOB_ID"
                        ],
                        [
                            "FI_MGR"
                        ],
                        [
                            "FI_ACCOUNT"
                        ],
                        [
                            "FI_ACCOUNT"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT job_id FROM employees WHERE department_id = 2"
            },
            {
                "isuser": true,
                "text": "What are their employee IDs?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This shows the employee IDs of employees working in the Finance department.",
                "query": "SELECT T1.EMPLOYEE_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'",
                "result": [
                    [
                        [
                            "EMPLOYEE_ID"
                        ],
                        [
                            108
                        ],
                        [
                            109
                        ],
                        [
                            110
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT employee_id FROM employees WHERE department_id = 2"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure! Bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "insurance_policies",
        "turns": [
            {
                "isuser": true,
                "text": "What date was the claim made?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The result table of the dates when the claims were made is shown.",
                "query": "SELECT Date_Claim_Made FROM Claims ",
                "result": [
                    [
                        [
                            "Date_Claim_Made"
                        ],
                        [
                            "2017-03-11"
                        ],
                        [
                            "2016-08-12"
                        ],
                        [
                            "2017-02-24"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Date_Claim_Made FROM Claims WHERE Claim_ID = 1"
            },
            {
                "isuser": true,
                "text": "Looking at the claim for 2018-06-14 what date was it settled?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The date when the claim for 2018-06-14 was settled was 2017-12-20.",
                "query": "SELECT Date_Claim_Settled FROM Claims  where Date_Claim_Made='2018-06-14'",
                "result": [
                    [
                        [
                            "Date_Claim_Settled"
                        ],
                        [
                            "2017-12-20"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Date_Claim_Settled FROM Claims WHERE Date_Claim_Made = '2018-06-14'"
            },
            {
                "isuser": true,
                "text": "Which of the claims had only one settlement?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "There is no claim which had only one settlement.",
                "query": "SELECT Claim_ID from claims where Amount_Settled = 1",
                "result": [
                    [
                        [
                            "Claim_ID"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Claim_ID FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_ID  =  T2.Claim_ID GROUP BY T1.Claim_ID HAVING COUNT(*)  =  1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Do you mean the ids of the claims that had only one settlement?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "Yes.",
                "type": "answerable"
            }
        ]
    },
    {
        "db_name": "hospital_1",
        "turns": [
            {
                "isuser": true,
                "text": "What is is the number of patients who are not using Procrastin-X?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 3 patients who are not using the medication of Procrastin-X",
                "query": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM patient WHERE SSN NOT IN (SELECT T1.patient FROM prescribes AS T1 JOIN medication AS T2 ON T1.medication  =  T2.code WHERE T2.name  =  'Procrastin-X')"
            },
            {
                "isuser": true,
                "text": "What are their names?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of patients who are not using the medication of Procrastin-X",
                "query": "SELECT name FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Grace Ritchie"
                        ],
                        [
                            "Random J. Patient"
                        ],
                        [
                            "Dennis Doe"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM patient WHERE SSN NOT IN (SELECT T1.patient FROM prescribes AS T1 JOIN medication AS T2 ON T1.medication  =  T2.code WHERE T2.name  =  'Procrastin-X')"
            },
            {
                "isuser": true,
                "text": "And what is their address? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the addresses of patients who are not using the medication of Procrastin-X ",
                "query": "SELECT address FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )",
                "result": [
                    [
                        [
                            "Address"
                        ],
                        [
                            "37 Snafu Drive"
                        ],
                        [
                            "101 Omgbbq Street"
                        ],
                        [
                            "1100 Foobaz Avenue"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT address FROM patient WHERE SSN NOT IN (SELECT T1.patient FROM prescribes AS T1 JOIN medication AS T2 ON T1.medication  =  T2.code WHERE T2.name  =  'Procrastin-X')"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            }
        ]
    },
    {
        "db_name": "game_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many hours of role-playing games were played?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Role-playing games were played for 2645 hours",
                "query": "SELECT sum(hours_played) FROM Plays_games AS T1 JOIN Video_games where GType = \"Role-playing game\"",
                "result": [
                    [
                        [
                            "sum(hours_played)"
                        ],
                        [
                            2645
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT sum(Hours_Played) FROM Plays_Games WHERE GameID IN (SELECT GameID FROM Video_Games WHERE GType = \"Role-Playing\")"
            },
            {
                "isuser": true,
                "text": "What game had the most hours played?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the game name that has the most number of hours played is Works of Widenius",
                "query": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "GName"
                        ],
                        [
                            "Works of Widenius"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT GName, sum(Hours_Played) FROM Plays_Games JOIN Video_Games ON Plays_Games.GameID = Video_Games.GameID GROUP BY Plays_Games.GameID ORDER BY sum(Hours_Played) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Who played the most hours of Works of Widenius?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The student with id 1010 played the most hours of Works of Widenius.",
                "query": "SELECT stuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid where t2.GName = \"Works of Widenius\" order by hours_played desc limit 1",
                "result": [
                    [
                        [
                            "StuID"
                        ],
                        [
                            1010
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT StuID, sum(Hours_Played) FROM Plays_Games WHERE GameID = 1 GROUP BY StuID ORDER BY sum(Hours_Played) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Did any other student play Works of Widenius?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "No. There is no any other student played Works of Widenius",
                "query": "SELECT t1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid where t2.GName = \"Works of Widenius\" and t1.StudID != '1010'",
                "result": [
                    null
                ],
                "predict_type": "answerable",
                "predict": "SELECT StuID, sum(Hours_Played) FROM Plays_Games WHERE GameID = 1 GROUP BY StuID HAVING sum(Hours_Played) > 20"
            },
            {
                "isuser": true,
                "text": "How many students play Works of Widenius?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Only 1 student played the game with name Works of Widenius.",
                "query": "SELECT count(distinct t1.StuID) FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid where t2.GName = \"Works of Widenius\"",
                "result": [
                    [
                        [
                            "count(distinct t1.StuID)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Plays_Games WHERE GameID = 1"
            },
            {
                "isuser": true,
                "text": "What game type is Works of Widenius?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The type of the game with the name \"Works of Widenius\" is \"Massively multiplayer online game\".",
                "query": "SELECT GType FROM Video_games where GName = \"Works of Widenius\"",
                "result": [
                    [
                        [
                            "GType"
                        ],
                        [
                            "Massively multiplayer online game"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT GType FROM Video_Games WHERE GameID = 1"
            },
            {
                "isuser": true,
                "text": "Is Works of Widenius the only massively multiplayer online game played?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes, it is.",
                "query": "SELECT GName FROM Video_games where GName != \"Works of Widenius\" and GType = \"massively multiplayer online game\"",
                "result": [
                    [
                        [
                            "GName"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Plays_Games WHERE GameID = 1 AND GType = \"Massively Multiplayer Online\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome, goodbye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "loan_1",
        "turns": [
            {
                "isuser": true,
                "text": "Hello!  Can you provide me with a list of all of the customers with a credit score below 100?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the information about customers with a credit score below 100.",
                "query": "select * from customer where credit_score < 100",
                "result": [
                    [
                        [
                            "cust_ID",
                            "cust_name",
                            "acc_type",
                            "acc_bal",
                            "no_of_loans",
                            "credit_score",
                            "branch_ID",
                            "state"
                        ],
                        [
                            "1",
                            "Mary",
                            "saving",
                            2000,
                            2,
                            30,
                            2,
                            "Utah"
                        ],
                        [
                            "2",
                            "Jack",
                            "checking",
                            1000,
                            1,
                            20,
                            1,
                            "Texas"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT cust_name FROM customer WHERE credit_score < 100"
            },
            {
                "isuser": true,
                "text": "Can you provide me with a list of all of the loans that both Mary and Jack received?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of all loans that both Mary and Jack received.",
                "query": "select t2.loan_type from customer as t1 join loan as t2 on t1.cust_id = t2.cust_id where t1.cust_name = \"Mary\" intersect select t4.loan_type from customer as t3 join loan as t4 on t3.cust_id = t4.cust_id where t3.cust_name = \"Jack\" ",
                "result": [
                    [
                        [
                            "loan_type"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT loan_type FROM loan WHERE cust_ID IN (SELECT cust_ID FROM customer WHERE cust_name = \"Mary\") INTERSECT SELECT loan_type FROM loan WHERE cust_ID IN (SELECT cust_ID FROM customer WHERE cust_name = \"Jack\")"
            },
            {
                "isuser": true,
                "text": "Can you show me which bank branch provided the highest number of loans to customers with credit scores below 100?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "downtown is the name of the bank that provided the greatest total amount of loans to customers with credit score is less than 100.",
                "query": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "bname"
                        ],
                        [
                            "downtown"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT bname, count(*) AS loan_count FROM loan AS L JOIN customer AS C ON L.cust_ID = C.cust_ID JOIN bank AS B ON L.branch_ID = B.branch_ID WHERE C.credit_score < 100 GROUP BY L.branch_ID ORDER BY loan_count DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "thank. bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "customers_and_addresses",
        "turns": [
            {
                "isuser": true,
                "text": "What is the customer name of customer id 9?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The customer with id 9 has a name Devin Mills.",
                "query": "SELECT customer_name FROM Customers WHERE customer_id = 9",
                "result": [
                    [
                        [
                            "customer_name"
                        ],
                        [
                            "Devin Mills"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_name FROM customers WHERE customer_id = 9"
            },
            {
                "isuser": true,
                "text": "Find the payment method of Tillman Ernser.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the customer Tillman Ernser used a payment method of Cheque.",
                "query": "SELECT payment_method FROM Customers WHERE customer_name = \"Tillman Ernser\"",
                "result": [
                    [
                        [
                            "payment_method"
                        ],
                        [
                            "Cheque"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT payment_method FROM customers WHERE customer_name = 'Tillman Ernser'"
            },
            {
                "isuser": true,
                "text": "What are the contact number of customer id 3?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the contact numbers of the customer with customer id 3.",
                "query": "SELECT contact_number FROM Customer_Contact_Channels WHERE customer_id = 3",
                "result": [
                    [
                        [
                            "contact_number"
                        ],
                        [
                            "06068550461"
                        ],
                        [
                            "1-453-027-1291"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT contact_number FROM customer_contact_channels WHERE customer_id = 3"
            },
            {
                "isuser": true,
                "text": "What is the \"active to date\" of the latest contact channel used by \"Tillman Ernser\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the \"active to date\" of the latest contact channel used by \"Tillman Ernser\" is 2018-03-23 01:30:52.",
                "query": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = \"Tillman Ernser\"\n\n",
                "result": [
                    [
                        [
                            "max(t2.active_to_date)"
                        ],
                        [
                            "2018-03-23 01:30:52"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT active_to_date FROM customer_contact_channels WHERE customer_id = 3 ORDER BY active_from_date DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Good bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "twitter_1",
        "turns": [
            {
                "isuser": true,
                "text": "how many  tweets there",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 8 tweets in total.",
                "query": "SELECT count(*) FROM tweets",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM tweets"
            },
            {
                "isuser": true,
                "text": "what is email id of Mary",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean what is the email of Mary or uid or her?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT email FROM user_profiles WHERE name = \"Mary\""
            },
            {
                "isuser": true,
                "text": "yes  user profiles email id of mary\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Mary's email is Mary@yale.edu",
                "query": "SELECT email FROM user_profiles WHERE name = \"Mary\"",
                "result": [
                    [
                        [
                            "email"
                        ],
                        [
                            "Mary@yale.edu"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT email FROM user_profiles WHERE name = \"Mary\""
            },
            {
                "isuser": true,
                "text": "how many followers in Iron Man",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 6662425 followers of Iron Man.",
                "query": "SELECT followers FROM user_profiles WHERE name = \"Iron Man\"",
                "result": [
                    [
                        [
                            "followers"
                        ],
                        [
                            6662425
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT followers FROM user_profiles WHERE name = \"Tony Stark\""
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Welcome! Goodbye.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "soccer_2",
        "turns": [
            {
                "isuser": true,
                "text": "What are the top 3 enrollment numbers among the schools?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the top 3 enrollment numbers among the schools are 22000, 19000, and 18000",
                "query": "SELECT enr FROM college ORDER BY enr DESC LIMIT 3",
                "result": [
                    [
                        [
                            "enr"
                        ],
                        [
                            22000
                        ],
                        [
                            19000
                        ],
                        [
                            18000
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT cName, enr FROM College ORDER BY enr DESC LIMIT 3"
            },
            {
                "isuser": true,
                "text": "Hmm, I want to know the states of the schools with the top 3 largest size.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the states of the schools with the top 3 largest size.",
                "query": "SELECT state FROM college ORDER BY enr DESC LIMIT 3",
                "result": [
                    [
                        [
                            "state"
                        ],
                        [
                            "OK"
                        ],
                        [
                            "FL"
                        ],
                        [
                            "LA"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT state FROM College WHERE enr IN (SELECT enr FROM College ORDER BY enr DESC LIMIT 3)"
            },
            {
                "isuser": true,
                "text": "Can you tell me the names of the schools with the top 3 largest size?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of the schools with the top 3 largest size.",
                "query": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3",
                "result": [
                    [
                        [
                            "cName"
                        ],
                        [
                            "OU"
                        ],
                        [
                            "FSU"
                        ],
                        [
                            "LSU"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT cName FROM College WHERE enr IN (SELECT enr FROM College ORDER BY enr DESC LIMIT 3)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "student_assessment",
        "turns": [
            {
                "isuser": false,
                "text": "Did you mean the id of student with details Martin?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable",
                "predict": "SELECT student_id FROM Students WHERE student_details = \"Martin\""
            },
            {
                "isuser": true,
                "text": "how many course id in the table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 4 distinct course ids. ",
                "query": "Select count(distinct course_id) from student_course_registrations",
                "result": [
                    [
                        [
                            "count(distinct course_id)"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM Courses"
            },
            {
                "isuser": true,
                "text": "what is martin's student id in the table?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "The id of the student with the details \"Martin\" is 121. ",
                "query": "Select student_id from students where student_details = \"Martin\"",
                "result": [
                    [
                        [
                            "student_id"
                        ],
                        [
                            121
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT student_id FROM Students WHERE student_details = \"Martin\""
            },
            {
                "isuser": true,
                "text": "Ok. thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, would you like to know any other information? ",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "no ",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, good bye. ",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "SELECT count(*) FROM Courses"
            }
        ]
    },
    {
        "db_name": "station_weather",
        "turns": [
            {
                "isuser": true,
                "text": "I need to know which train route passes through the most stations, please.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The train \"Ananthapuri Express\" passes through the most stations.",
                "query": "SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id  =  t2.train_id GROUP BY t2.train_id ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Ananthapuri Express"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "I apologize, but the database does not contain information about train routes."
            },
            {
                "isuser": true,
                "text": "How many stations does this train run through?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The train that passes through the most stations passes through 3 train stations.",
                "query": "SELECT count(*) FROM train AS t1 JOIN route AS t2 ON t1.id  =  t2.train_id GROUP BY t2.train_id ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM route WHERE train_id = 1"
            },
            {
                "isuser": true,
                "text": "What are the names of those stations?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table shows the ids of the train station that the train that passes through the most stations passes through. They are 3,7 and 8.",
                "query": "SELECT t2.station_id FROM train AS t1 JOIN route AS t2 ON t1.id  =  t2.train_id GROUP BY t2.train_id ORDER BY count(*) DESC LIMIT 3",
                "result": [
                    [
                        [
                            "station_id"
                        ],
                        [
                            3
                        ],
                        [
                            7
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT network_name FROM station WHERE id IN (SELECT station_id FROM route WHERE train_id = 1)"
            },
            {
                "isuser": true,
                "text": "That's great - finally, can you please tell me the number of the Ananthapuri Express train?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "The numbers of the train \"Ananthapuri Express\" are \"16724\" and \"16723\".",
                "query": "select train_number from train where name='Ananthapuri Express'",
                "result": [
                    [
                        [
                            "train_number"
                        ],
                        [
                            16724
                        ],
                        [
                            16723
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT train_number FROM train WHERE name = \"Ananthapuri Express\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "station_weather",
        "turns": [
            {
                "isuser": true,
                "text": "Give me the times of all trains that go to Chennai",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The times of all the trains with destination Chennai are listed.",
                "query": "SELECT TIME  FROM train WHERE destination  =  'Chennai'",
                "result": [
                    [
                        [
                            "time"
                        ],
                        [
                            "17:15"
                        ],
                        [
                            "4:49"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT time FROM train WHERE destination = \"Chennai\""
            },
            {
                "isuser": true,
                "text": "Show me the numbers of all trains that go to Chennai",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of all the trains with destination Chennai is 2.",
                "query": "SELECT count(*) FROM train WHERE destination  =  'Chennai'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT train_number FROM train WHERE destination = \"Chennai\""
            },
            {
                "isuser": true,
                "text": "Show me the train number of all trains that go to Chennai",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The train number of all trains that go to Chennai are 16724 and 16128.",
                "query": "SELECT train_number FROM train WHERE destination  =  'Chennai'",
                "result": [
                    [
                        [
                            "train_number"
                        ],
                        [
                            16724
                        ],
                        [
                            16128
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT train_number FROM train WHERE destination = \"Chennai\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "railway",
        "turns": [
            {
                "isuser": true,
                "text": "how many railway there",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 10 railways.",
                "query": "SELECT count(*) from railway",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            10
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM railway"
            },
            {
                "isuser": true,
                "text": "what is the train number of sewagram exp",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "12139 is the train number of sewagram exp.",
                "query": "SELECT Train_Num from train where Name = \"Sewagram Exp\"",
                "result": [
                    [
                        [
                            "Train_Num"
                        ],
                        [
                            "12139"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT train_num FROM train WHERE name = \"Sewagram Express\""
            },
            {
                "isuser": true,
                "text": "what is the location of mr",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Bo'ness s the location of railway MR",
                "query": "SELECT location from railway where Railway = \"MR\"",
                "result": [
                    [
                        [
                            "Location"
                        ],
                        [
                            "Bo'ness"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT location FROM railway WHERE railway = \"MR\""
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "swimming",
        "turns": [
            {
                "isuser": true,
                "text": "Can you list the names of all the swimmers who have won more than once?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Oussama Mellouli and Craig Stevens are the swimmers who have won more than once.",
                "query": "SELECT t1.name  FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' GROUP BY t2.swimmer_id HAVING count(*)  >  1",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Oussama Mellouli"
                        ],
                        [
                            "Craig Stevens"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM swimmer WHERE id IN (SELECT swimmer_id FROM record GROUP BY swimmer_id HAVING count(*)  >  1)"
            },
            {
                "isuser": true,
                "text": "What are their nationalities?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The nationalities of the swimmers who have won more than once are Tunisia and Australia correspondingly.",
                "query": "SELECT t1.nationality  FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' GROUP BY t2.swimmer_id HAVING count(*)  >  1",
                "result": [
                    [
                        [
                            "Nationality"
                        ],
                        [
                            "Tunisia"
                        ],
                        [
                            "Australia"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT nationality FROM swimmer WHERE id IN (SELECT swimmer_id FROM record GROUP BY swimmer_id HAVING count(*)  >  1)"
            },
            {
                "isuser": true,
                "text": "Can you list the names and nationalities of the swimmers who have never won?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list of names and nationalities of the swimmers who have never won.",
                "query": "SELECT t1.name, t1.nationality  FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' except SELECT t1.name, t1.nationality  FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' GROUP BY t2.swimmer_id HAVING count(*)  >  1",
                "result": [
                    [
                        [
                            "name",
                            "Nationality"
                        ],
                        [
                            "Federico Colbertaldo",
                            "Italy"
                        ],
                        [
                            "Grant Hackett",
                            "Australia"
                        ],
                        [
                            "Ryan Cochrane",
                            "Canada"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name, nationality FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "dorm_1",
        "turns": [
            {
                "isuser": false,
                "text": "Did you mean the first name of students living in PHL city?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable",
                "predict": "I apologize for the confusion. I understand now. The first name of students living in PHL city is not available in the database."
            },
            {
                "isuser": true,
                "text": "What are the students name living in PHL city?\n",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Here are the first names of students who live in PHL city",
                "query": "SELECT fname FROM student WHERE city_code  =  'PHL' ",
                "result": [
                    [
                        [
                            "Fname"
                        ],
                        [
                            "David"
                        ],
                        [
                            "Michael"
                        ],
                        [
                            "Sarah"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT fname FROM Student WHERE city_code = 'PHL'"
            },
            {
                "isuser": true,
                "text": "Who are the students that are between 20 and 25 years of age?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the last name or the first name of the students between 20 and 25 years of age?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT fname, lname FROM Student WHERE age BETWEEN 20 AND 25"
            },
            {
                "isuser": true,
                "text": "What are the first names of the students who are between 20 and 25 years of age?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the first names of the students who are between 20 and 25 years of age?",
                "query": "SELECT fname FROM student WHERE age BETWEEN 20 AND 25",
                "result": [
                    [
                        [
                            "Fname"
                        ],
                        [
                            "Shiela"
                        ],
                        [
                            "Dinesh"
                        ],
                        [
                            "Jandy"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT fname FROM Student WHERE age BETWEEN 20 AND 25"
            },
            {
                "isuser": true,
                "text": "what are the student names who are in PHL city and are between 20 and 25 years of age",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "First name or last name?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT fname, lname FROM Student WHERE city_code = 'PHL' AND age BETWEEN 20 AND 25"
            },
            {
                "isuser": true,
                "text": "first",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the first names of students living in city PHL whose age is between 20 and 25.\n\n",
                "query": "SELECT fname FROM student WHERE city_code = 'PHL' AND age BETWEEN 20 AND 25\n\n",
                "result": [
                    [
                        [
                            "Fname"
                        ],
                        [
                            "David"
                        ],
                        [
                            "Sarah"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT fname FROM Student WHERE age BETWEEN 20 AND 25"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "company_employee",
        "turns": [
            {
                "isuser": true,
                "text": "Names of headquarters that have at least two companies?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The headquarter that have at least two companies are shown in the result table.",
                "query": "SELECT Headquarters FROM company GROUP BY Headquarters HAVING COUNT(*)  >=  2",
                "result": [
                    [
                        [
                            "Headquarters"
                        ],
                        [
                            "China"
                        ],
                        [
                            "UK"
                        ],
                        [
                            "USA"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Headquarters FROM company GROUP BY Headquarters HAVING COUNT(*)  >=  2"
            },
            {
                "isuser": true,
                "text": "What is tbe name of the company in china?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the companies that have headquarters in China are shown in the result table. ",
                "query": "SELECT name FROM company where Headquarters = \"China\"",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Industrial and Commercial Bank of China"
                        ],
                        [
                            "PetroChina"
                        ],
                        [
                            "China Construction Bank"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM company WHERE Headquarters = 'China'"
            },
            {
                "isuser": true,
                "text": "What industry does petrochina belong to?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The company named PetroChina is in the industry is Oil and Gas. ",
                "query": "SELECT industry FROM company where name = \"PetroChina\"",
                "result": [
                    [
                        [
                            "Industry"
                        ],
                        [
                            "Oil and gas"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Industry FROM company WHERE Name = 'Petrochina'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, would you like to know anything else? ",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "No thats all thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, good bye. ",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "apartment_rentals",
        "turns": [
            {
                "isuser": true,
                "text": "What is the booking status of the apartment with number \"Suite 634\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The booking status of the apartment with number \"Suite 634\" is Provisional",
                "query": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\"",
                "result": [
                    [
                        [
                            "booking_status_code"
                        ],
                        [
                            "Provisional"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_number = \"Suite 634\""
            },
            {
                "isuser": true,
                "text": "What is the bathroom count for \"Suite 643\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the bathroom count for Suite 643 is 3",
                "query": "SELECT T2.bathroom_count FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\"",
                "result": [
                    [
                        [
                            "bathroom_count"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.bathroom_count FROM Apartments AS T1 WHERE T1.apt_number = \"Suite 643\""
            },
            {
                "isuser": true,
                "text": "What is the apartment type code for \"Suite 643\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the apartment type code for \"Suite 643\" is Duplex",
                "query": "SELECT T2.apt_type_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\"",
                "result": [
                    [
                        [
                            "apt_type_code"
                        ],
                        [
                            "Duplex"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.apt_type_code FROM Apartments AS T1 WHERE T1.apt_number = \"Suite 643\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "candidate_poll",
        "turns": [
            {
                "isuser": true,
                "text": "How many poll sources are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 6 poll sources.",
                "query": "SELECT count(Poll_Source) from candidate",
                "result": [
                    [
                        [
                            "count(Poll_Source)"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM candidate GROUP BY Poll_Source"
            },
            {
                "isuser": true,
                "text": "how many people are there?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 9 people.",
                "query": "SELECT count(people_id) from people",
                "result": [
                    [
                        [
                            "count(people_id)"
                        ],
                        [
                            9
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM people"
            },
            {
                "isuser": true,
                "text": "And how many are female?\n",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the people who are female?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT count(*) FROM people WHERE Sex = 'F'"
            },
            {
                "isuser": true,
                "text": "Yes, how many are female, have gender \"F\"",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 2 people who are female.",
                "query": "SELECT count(*) from people where sex='F'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM people WHERE Sex = 'F'"
            },
            {
                "isuser": true,
                "text": "what is their unsure rate?\n",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the unsure rate of the people who are female?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT Unsure_rate FROM candidate WHERE Poll_Source = 'ABC News'"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The unsure rate of the people who are female is 0.9.",
                "query": "SELECT t2.Unsure_rate FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id where t1.sex='F'",
                "result": [
                    [
                        [
                            "Unsure_rate"
                        ],
                        [
                            0.9
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Unsure_rate FROM candidate WHERE Poll_Source = 'ABC News'"
            },
            {
                "isuser": true,
                "text": "and the males?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the unsure rate of the people who are male?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT Unsure_rate FROM candidate WHERE Poll_Source = 'ABC News' AND People_ID IN (SELECT People_ID FROM people WHERE Sex = 'M')"
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The unsure rates of the people who are male are listed.",
                "query": "SELECT t2.Unsure_rate FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id where t1.sex='M'",
                "result": [
                    [
                        [
                            "Unsure_rate"
                        ],
                        [
                            0.2
                        ],
                        [
                            0.3
                        ],
                        [
                            0.2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Unsure_rate FROM candidate WHERE Poll_Source = 'ABC News' AND People_ID IN (SELECT People_ID FROM people WHERE Sex = 'M')"
            },
            {
                "isuser": true,
                "text": "Thank you!\n",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Goodbye.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "college_1",
        "turns": [
            {
                "isuser": true,
                "text": "what is employee number of james ?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Is James a first name or last name?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT emp_num FROM employee WHERE emp_fname = \"James\""
            },
            {
                "isuser": true,
                "text": "first name\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the employee number of employees with first name as James.",
                "query": "SELECT EMP_NUM FROM EMPLOYEE WHERE EMP_FNAME = \"James\"",
                "result": [
                    [
                        [
                            "EMP_NUM"
                        ],
                        [
                            100
                        ],
                        [
                            126
                        ],
                        [
                            401
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT emp_fname FROM employee WHERE emp_fname = \"James\""
            },
            {
                "isuser": true,
                "text": "please show me the DOB OF EMPLOYEE WHO HAS THIS AS HIS FIRST NAME\n",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the first name \"James\"?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT emp_dob FROM employee WHERE emp_fname = \"James\""
            },
            {
                "isuser": true,
                "text": "yeah \n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the DOB OF EMPLOYEE WHO HAS James AS HIS FIRST NAME.",
                "query": "SELECT EMP_DOB FROM EMPLOYEE WHERE EMP_FNAME = \"James\"",
                "result": [
                    [
                        [
                            "EMP_DOB"
                        ],
                        [
                            "1950-6-12"
                        ],
                        [
                            "1970-3-12"
                        ],
                        [
                            "1945-3-15"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT emp_dob FROM employee WHERE emp_fname = \"James\""
            },
            {
                "isuser": true,
                "text": "SHOW ME THE  hire date OF THE EMPLOYEE WHO HAS THE FIRST NAME AS JAMES",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the hire dates OF THE EMPLOYEE WHO HAS THE FIRST NAME AS JAMES.",
                "query": "SELECT EMP_HIREDATE FROM EMPLOYEE WHERE EMP_FNAME = \"James\"",
                "result": [
                    [
                        [
                            "EMP_HIREDATE"
                        ],
                        [
                            "1978-2-23"
                        ],
                        [
                            "1994-10-1"
                        ],
                        [
                            "1981-8-1"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT emp_hiredate FROM employee WHERE emp_fname = \"James\""
            },
            {
                "isuser": true,
                "text": "Thanks!\n",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "candidate_poll",
        "turns": [
            {
                "isuser": true,
                "text": "Find the average height and weight for all males (sex is M).",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average height and weight for all people with sex 'M' are 195.14285714285714 and 86.71428571428571.",
                "query": "SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'",
                "result": [
                    [
                        [
                            "avg(height)",
                            "avg(weight)"
                        ],
                        [
                            195.14285714285714,
                            86.71428571428571
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(Height) ,  avg(Weight) FROM people WHERE sex  =  'M'"
            },
            {
                "isuser": true,
                "text": "How many male people are on the table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 7 male people.",
                "query": "SELECT count(*) FROM people where sex = 'M'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM people WHERE sex = 'M'"
            },
            {
                "isuser": true,
                "text": "Which person has the highest height?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is all the info of the person with the highest height.",
                "query": "SELECT * FROM people order by height desc limit 1",
                "result": [
                    [
                        [
                            "People_ID",
                            "Sex",
                            "Name",
                            "Date_of_Birth",
                            "Height",
                            "Weight"
                        ],
                        [
                            4,
                            "M",
                            "Laurent Capet",
                            "05.05.1972",
                            202.0,
                            92.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name, Height FROM people WHERE sex = 'M' ORDER BY Height DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "How many female people are on the list?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 2 female people.",
                "query": "SELECT count(*) FROM people WHERE sex  =  'F'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM people WHERE sex = 'F'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "college_3",
        "turns": [
            {
                "isuser": true,
                "text": "What is the door number to the house of the instructor?",
                "type": "answerable"
            },
            {
                "isuser": true,
                "text": "* I have left the chat *",
                "type": "answerable",
                "predict": "SELECT T1.Building ,  T1.Room FROM FACULTY AS T1 JOIN COURSE AS T2 ON T1.FacID  =  T2.Instructor WHERE T2.DNO  =  101"
            },
            {
                "isuser": false,
                "text": " the door numbers to the house of the instructor are   shown  in  the  table ",
                "query": "SELECT Room FROM Faculty where Rank=\"Instructor\";",
                "result": [
                    [
                        [
                            "Room"
                        ],
                        [
                            "224"
                        ],
                        [
                            "224"
                        ],
                        [
                            "328"
                        ]
                    ]
                ],
                "predict_type": "answerable"
            },
            {
                "isuser": true,
                "text": "what is the first name of  the instructor who teaches the least number of courses?",
                "type": "answerable",
                "predict": "SELECT T1.Building ,  T1.Room FROM FACULTY AS T1 JOIN COURSE AS T2 ON T1.FacID  =  T2.Instructor WHERE T2.DNO  =  101"
            },
            {
                "isuser": false,
                "text": " the first name of the instructor who teaches the least number of courses is  Daniel",
                "query": "SELECT T2.Fname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor \nORDER BY count(*) LIMIT 1",
                "result": [
                    [
                        [
                            "Fname"
                        ],
                        [
                            "Daniel"
                        ]
                    ]
                ],
                "predict_type": "answerable"
            },
            {
                "isuser": true,
                "text": "Does the istructor who teaches the least no of courses live on the first or the second floor of the bulding?",
                "type": "INFER_SQL",
                "predict": "SELECT T1.Fname FROM FACULTY AS T1 JOIN COURSE AS T2 ON T1.FacID  =  T2.Instructor GROUP BY T1.FacID ORDER BY COUNT(*) ASC LIMIT 1"
            },
            {
                "isuser": false,
                "text": "Yes,The  room  for  the istructor who teaches the least no of courses live on   the  second  floor",
                "query": "\nSELECT T2.room FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Room"
                        ],
                        [
                            "288"
                        ]
                    ]
                ],
                "predict_type": "answerable"
            },
            {
                "isuser": true,
                "text": "Is the house that the instructor who teaches the least no of courses connected to WiFi?",
                "type": "unanswerable",
                "predict": "SELECT T1.Building ,  T1.Room FROM FACULTY AS T1 JOIN COURSE AS T2 ON T1.FacID  =  T2.Instructor GROUP BY T1.FacID ORDER BY COUNT(*) ASC LIMIT 1"
            },
            {
                "isuser": false,
                "text": "the question is not related",
                "query": "",
                "result": [],
                "predict_type": "REJECT"
            },
            {
                "isuser": true,
                "text": "Ok, thank you",
                "type": "improper",
                "predict": "I apologize for the confusion. Could you please rephrase your question?"
            },
            {
                "isuser": false,
                "text": "welcome goodbye\n",
                "query": "",
                "result": [],
                "predict_type": "WELCOME"
            },
            {
                "isuser": true,
                "text": "Thanks",
                "type": "improper",
                "predict": "improper"
            }
        ]
    },
    {
        "db_name": "customers_and_addresses",
        "turns": [
            {
                "isuser": true,
                "text": "What was the least quantity of items purchased?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "do you mean the id of product or the id of order?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT min(order_quantity) FROM Order_Items"
            },
            {
                "isuser": true,
                "text": "ID of the order please.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the id of the order which was the least quantity of items purchased is 11",
                "query": "select order_id from Order_items order by order_quantity limit 1",
                "result": [
                    [
                        [
                            "order_id"
                        ],
                        [
                            11
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT order_id FROM Order_Items GROUP BY order_id ORDER BY count(*) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the payment method of the order with an id of 11?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the payment method that is used by the order id 11 is Credit Card",
                "query": "select T1.payment_method from customers as T1 join customer_orders as T2 on T1.customer_id = T2.customer_id where T2.order_id = 11",
                "result": [
                    [
                        [
                            "payment_method"
                        ],
                        [
                            "Credit Card"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT payment_method FROM Customers WHERE customer_id = 11"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "customers_and_invoices",
        "turns": [
            {
                "isuser": true,
                "text": "How many products are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 15 products.",
                "query": "SELECT count(*) FROM products",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Products"
            },
            {
                "isuser": true,
                "text": "How many orders were there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 8 orders.",
                "query": "SELECT count(DISTINCT order_id) FROM order_items",
                "result": [
                    [
                        [
                            "count(DISTINCT order_id)"
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Orders"
            },
            {
                "isuser": true,
                "text": "Were there any products that are not included in any of the 8 orders?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes, here's all the information about products that are not included in any of the orders",
                "query": "SELECT * FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
                "result": [
                    [
                        [
                            "product_id",
                            "parent_product_id",
                            "production_type_code",
                            "unit_price",
                            "product_name",
                            "product_color",
                            "product_size"
                        ],
                        [
                            1,
                            4,
                            "Food",
                            617.95,
                            "Coffee Bean",
                            "Red",
                            "Medium"
                        ],
                        [
                            2,
                            4,
                            "Books",
                            558.49,
                            "Learning French",
                            "Yellow",
                            "Medium"
                        ],
                        [
                            6,
                            7,
                            "Books",
                            469.71,
                            "Art History",
                            "Yellow",
                            "Small"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items)"
            },
            {
                "isuser": true,
                "text": "What is the total number of products not included in any of the orders?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the total number of products not included in any of the orders is 5",
                "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "world_1",
        "turns": [
            {
                "isuser": true,
                "text": "LIST THE NATIONS WHICH DO NOT USE ENGLISH",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "this shows the countries names which don‘t use English",
                "query": "SELECT Name FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Afghanistan"
                        ],
                        [
                            "Angola"
                        ],
                        [
                            "Albania"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = \"English\")"
            },
            {
                "isuser": true,
                "text": "WHAT IS THE POPULATION OF THE PEOPLE LIVING IN THE NATIONS NOT USING ENGLISH",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "did you mean you want the Population of the country  DO NOT USE ENGLISH",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT sum(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = \"English\")"
            },
            {
                "isuser": true,
                "text": "YES, THE TOTAL NUMBER OF PEOPLE LIVING IN THE NATIONS THAT DO NOT USE ENGLISH",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "this shows the population of country that do not user English",
                "query": "SELECT Name,sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\") group by Name",
                "result": [
                    [
                        [
                            "Name",
                            "sum(Population)"
                        ],
                        [
                            "Afghanistan",
                            22720000
                        ],
                        [
                            "Albania",
                            3401200
                        ],
                        [
                            "Algeria",
                            31471000
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT sum(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = \"English\")"
            },
            {
                "isuser": true,
                "text": "THANKS",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome,goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "driving_school",
        "turns": [
            {
                "isuser": true,
                "text": "What is the status code of the customer with the last name Kohler or first name Marina?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the status codes of the customer with the last name Kohler or first name Marina",
                "query": "SELECT customer_status_code  FROM Customers WHERE first_name = \"Marina\" OR last_name  =  \"Kohler\"",
                "result": [
                    [
                        [
                            "customer_status_code"
                        ],
                        [
                            "Bad Customer"
                        ],
                        [
                            "Good Customer"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_status_code FROM Customers WHERE last_name = \"Kohler\" OR first_name = \"Marina\""
            },
            {
                "isuser": true,
                "text": "What are the names of each of those codes?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry I don't have that information. Can you ask anything else?",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "SELECT customer_status_code, COUNT(*) AS num_customers FROM Customers GROUP BY customer_status_code"
            },
            {
                "isuser": true,
                "text": "What is the mobile phone number of the customer with the last name Kohler or first name Marina?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the phone numbers of the customer with the last name Kohler or first name Marina ",
                "query": "SELECT phone_number  FROM Customers WHERE first_name = \"Marina\" OR last_name  =  \"Kohler\"",
                "result": [
                    [
                        [
                            "phone_number"
                        ],
                        [
                            "(662)490-3108"
                        ],
                        [
                            "(297)122-0086"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT cell_mobile_phone_number FROM Customers WHERE last_name = \"Kohler\" OR first_name = \"Marina\""
            },
            {
                "isuser": true,
                "text": "How about their email addresses?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are email addresses of the customer with the last name Kohler or first name Marina",
                "query": "SELECT email_address FROM Customers WHERE first_name = \"Marina\" OR last_name  =  \"Kohler\"",
                "result": [
                    [
                        [
                            "email_address"
                        ],
                        [
                            "mayert.judy@example.com"
                        ],
                        [
                            "karina.carroll@example.net"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT email_address FROM Customers WHERE last_name = \"Kohler\" OR first_name = \"Marina\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "thanks. bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "car_1",
        "turns": [
            {
                "isuser": true,
                "text": "What is the weight of make id 1?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean to ask for the weight of the car with make id 1?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT Weight FROM CARS_DATA WHERE MakeId = 1"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The weight of the car with make id 1 is 3504.",
                "query": "SELECT T2.Weight FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.MakeID = 1",
                "result": [
                    [
                        [
                            "Weight"
                        ],
                        [
                            3504
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Weight FROM CARS_DATA WHERE MakeId = 1"
            },
            {
                "isuser": true,
                "text": "Which year launch the car model  buick?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you want to ask for the year on which the car model buick was launched?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT Year FROM CARS_DATA WHERE Model = \"buick\""
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The car model buick was launched in the following years.",
                "query": "SELECT T2.Year FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model = \"buick\"",
                "result": [
                    [
                        [
                            "Year"
                        ],
                        [
                            1970
                        ],
                        [
                            1970
                        ],
                        [
                            1972
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Year FROM CARS_DATA WHERE Model = \"buick\""
            },
            {
                "isuser": true,
                "text": "Find the horsepower of model plymouth.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The horsepowers of the car model plymouth are the following. ",
                "query": "SELECT T2.Horsepower FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model = \"plymouth\"",
                "result": [
                    [
                        [
                            "Horsepower"
                        ],
                        [
                            "150"
                        ],
                        [
                            "215"
                        ],
                        [
                            "175"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Horsepower FROM CARS_DATA WHERE Model = \"plymouth\""
            },
            {
                "isuser": true,
                "text": "For the cars with 4 cylinders, which model has the largest horspower?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The model with the largest horsepower among cars with 4 cylinders is ford.",
                "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1;",
                "result": [
                    [
                        [
                            "Model"
                        ],
                        [
                            "ford"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Model, Horsepower FROM CARS_DATA WHERE Cylinders = 4 ORDER BY Horsepower DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Good bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "formula_1",
        "turns": [
            {
                "isuser": false,
                "text": "there are 438 drivers who  participated in more than 5 races",
                "query": "",
                "result": [],
                "predict_type": "answerable"
            },
            {
                "isuser": true,
                "text": "What are the driver's names?",
                "type": "answerable",
                "predict": "SELECT count(*) FROM (SELECT driverId FROM races GROUP BY driverId HAVING count(*)  >  5) AS T1"
            },
            {
                "isuser": false,
                "text": "here are the the driver's names",
                "query": "select forename,surname\t from drivers",
                "result": [
                    [
                        [
                            "forename",
                            "surname"
                        ],
                        [
                            "Lewis",
                            "Hamilton"
                        ],
                        [
                            "Nick",
                            "Heidfeld"
                        ],
                        [
                            "Nico",
                            "Rosberg"
                        ]
                    ]
                ],
                "predict_type": "answerable"
            },
            {
                "isuser": true,
                "text": "How many of them participated in more than 5 races?",
                "type": "answerable",
                "predict": "SELECT forename FROM drivers WHERE driverId IN (SELECT driverId FROM races GROUP BY driverId HAVING count(*)  >  5)"
            },
            {
                "isuser": false,
                "text": "",
                "query": "select count(*) from (SELECT (T1.driverid) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5)",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            438
                        ]
                    ]
                ],
                "predict_type": ""
            },
            {
                "isuser": true,
                "text": "Which drivers had 8 pit stops or more?",
                "type": "INFER_SQL",
                "predict": "SELECT forename FROM drivers WHERE driverId IN (SELECT driverId FROM races GROUP BY driverId HAVING count(*)  >  5)"
            },
            {
                "isuser": false,
                "text": "there are no drivers who had 8 pit stops or more",
                "query": "select count(*) from (SELECT T1.forename , T1.surname , T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING count(*) > 8)",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            0
                        ]
                    ]
                ],
                "predict_type": "answerable"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper",
                "predict": "SELECT count(*) FROM (SELECT driverId FROM pitStops GROUP BY driverId HAVING count(*)  >  8) AS T1"
            },
            {
                "isuser": false,
                "text": "you are welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME"
            }
        ]
    },
    {
        "db_name": "customer_complaints",
        "turns": [
            {
                "isuser": true,
                "text": "Which state has the most customers?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Colorado has the most customers",
                "query": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1",
                "result": [
                    [
                        [
                            "state"
                        ],
                        [
                            "Colorado"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT state FROM Customers GROUP BY state ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Which state has the fourth least customers?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Iowa has the fourth least customers",
                "query": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 4",
                "result": [
                    [
                        [
                            "state"
                        ],
                        [
                            "Colorado"
                        ],
                        [
                            "Florida"
                        ],
                        [
                            "Hawaii"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT state FROM Customers GROUP BY state ORDER BY count(*) ASC LIMIT 3,1"
            },
            {
                "isuser": true,
                "text": "How many customers have the customer type code \"Good Credit Rating\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 6 customers with Good Credit Rating as customer type code.",
                "query": "SELECT count(customer_id) FROM customers where customer_type_code =\"Good Credit Rating\" ",
                "result": [
                    [
                        [
                            "count(customer_id)"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Customers WHERE customer_type_code = \"Good Credit Rating\""
            },
            {
                "isuser": true,
                "text": "What are the states of all customers who who have the customer type code Good Credit Rating?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the table of the state of customers with a type code \"good credit rating\".",
                "query": "SELECT state FROM customers where customer_type_code =\"Good Credit Rating\" ",
                "result": [
                    [
                        [
                            "state"
                        ],
                        [
                            "Kansas"
                        ],
                        [
                            "Hawaii"
                        ],
                        [
                            "Tennessee"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT state FROM Customers WHERE customer_type_code = \"Good Credit Rating\""
            },
            {
                "isuser": true,
                "text": "What are the customer ids of all customers who who have the customer type code Good Credit Rating?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the table of the customer id of all customers who have the customer type code good credit rating. For example, they are 113.",
                "query": "SELECT customer_id FROM customers where customer_type_code =\"Good Credit Rating\" ",
                "result": [
                    [
                        [
                            "customer_id"
                        ],
                        [
                            113
                        ],
                        [
                            114
                        ],
                        [
                            115
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT customer_id FROM Customers WHERE customer_type_code = \"Good Credit Rating\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "car_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many different cars on this list were produced in 1974?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 27 different cars on this list were produced in 1974.",
                "query": "select count(*) from cars_data where year='1974'",
                "result": [
                    [
                        [
                            "number"
                        ],
                        [
                            27
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(DISTINCT Model) FROM CAR_NAMES WHERE YEAR = 1974"
            },
            {
                "isuser": true,
                "text": "Can you list just the car IDs produced in 1974 with 8 cylinders?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are the results of the car IDs produced in 1974 with 8 cylinders.",
                "query": "select id  from cars_data where year='1974' and Cylinders = '8'",
                "result": [
                    [
                        [
                            "Id"
                        ],
                        [
                            144
                        ],
                        [
                            145
                        ],
                        [
                            146
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Id FROM CARS_DATA WHERE Cylinders = 8 AND YEAR = 1974"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "protein_institute",
        "turns": [
            {
                "isuser": true,
                "text": "show the maximum number of floors for all buildings?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The maximum number of floors for all buildings is 42.",
                "query": "SELECT  max(floors)FROM building",
                "result": [
                    [
                        [
                            "max(floors)"
                        ],
                        [
                            42
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(Floors) FROM building"
            },
            {
                "isuser": true,
                "text": "Show me the name of the building with building id 1?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the building with building id 1 is Tampa City Hall.",
                "query": "SELECT  name FROM building where building_id = '1'",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Tampa City Hall"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM building WHERE building_id = 1"
            },
            {
                "isuser": true,
                "text": "Show me the name of the building with 12 floors?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the building with 12 floors is Citizens Bank Building.",
                "query": "SELECT  name FROM building where floors = 12",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Citizens Bank Building"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM building WHERE Floors = 12"
            },
            {
                "isuser": true,
                "text": "Show me the average and minimum number of floors for all buildings?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average and minimum numbers of floors for all buildings are 27.5 and 10.",
                "query": "SELECT avg(floors) ,  min(floors) FROM building",
                "result": [
                    [
                        [
                            "avg(floors)",
                            "min(floors)"
                        ],
                        [
                            27.5,
                            10
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(Floors), min(Floors) FROM building"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "body_builder",
        "turns": [
            {
                "isuser": true,
                "text": "What is the most common birth place of people?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "“Anchorage, Alaska” is the most common birth place of people",
                "query": "SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Birth_Place"
                        ],
                        [
                            "Anchorage, Alaska"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What are the names of the people born there?",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Ty Conklin is the name of the person born at Anchorage\n",
                "query": "SELECT Name FROM people where Birth_Place = 'Anchorage, Alaska'",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Ty Conklin"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM people WHERE Birth_Place = (SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "What is the least common birthplace of people?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "\"Anchorage, Alaska\" is the least common birth place of people",
                "query": "SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) LIMIT 1",
                "result": [
                    [
                        [
                            "Birth_Place"
                        ],
                        [
                            "Anchorage, Alaska"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What about the most common?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "\"Anchorage, Alaska\" is the most common birth place of people",
                "query": "SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Birth_Place"
                        ],
                        [
                            "Anchorage, Alaska"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the birth date of Ty Conklin?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "\"Anchorage, Alaska\" is the birth place of Ty Conklin.",
                "query": "SELECT Birth_Place FROM people where Name = 'Ty Conklin'",
                "result": [
                    [
                        [
                            "Birth_Place"
                        ],
                        [
                            "Anchorage, Alaska"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Birth_Date FROM people WHERE Name = 'Ty Conklin'"
            },
            {
                "isuser": true,
                "text": "When was he born?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "March 30, 1976 is the date when Ty Conklin was born.",
                "query": "SELECT Birth_Date FROM people where Name = 'Ty Conklin'",
                "result": [
                    [
                        [
                            "Birth_Date"
                        ],
                        [
                            "March 30, 1976"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Birth_Date FROM people WHERE Name = 'Ty Conklin'"
            },
            {
                "isuser": true,
                "text": "What is his height?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "192.0 is the height of Ty Conklin",
                "query": "SELECT \tHeight FROM people where Name = 'Ty Conklin'",
                "result": [
                    [
                        [
                            "Height"
                        ],
                        [
                            192.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Height FROM people WHERE Name = 'Ty Conklin'"
            },
            {
                "isuser": true,
                "text": "Tell me his weight please.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "90.0 is the weight of Ty Conklin",
                "query": "SELECT Weight FROM people where Name = 'Ty Conklin'",
                "result": [
                    [
                        [
                            "Weight"
                        ],
                        [
                            90.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Weight FROM people WHERE Name = 'Ty Conklin'"
            },
            {
                "isuser": true,
                "text": "What are the names of the other people with that weight?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is no one whose weight is 90.0 and name is not Ty Conklin",
                "query": "SELECT Name  FROM people where Weight = 90.0 and Name!='Ty Conklin'",
                "result": [
                    [
                        [
                            "Name"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM people WHERE Weight = (SELECT Weight FROM people WHERE Name = 'Ty Conklin')"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "employee_hire_evaluation",
        "turns": [
            {
                "isuser": true,
                "text": "I'd like to see Shop names.\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the names of shop",
                "query": "select name from shop",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "FC Haka"
                        ],
                        [
                            "HJK"
                        ],
                        [
                            "FC Honka"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM shop"
            },
            {
                "isuser": true,
                "text": "Which of these are hiring?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the names of shop which are hiring",
                "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "FC Haka"
                        ],
                        [
                            "HJK"
                        ],
                        [
                            "FC Inter"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM shop WHERE shop_id IN (SELECT shop_id FROM hiring)"
            },
            {
                "isuser": true,
                "text": "Which shop is hiring the highest number of employees?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "do you want the name of the shop ?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT name FROM shop WHERE shop_id IN (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the name of shop which is hiring the highest number of employees is FC Haka",
                "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "FC Haka"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM shop WHERE shop_id IN (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "ship_mission",
        "turns": [
            {
                "isuser": true,
                "text": "Show the types of ships that have both ships with tonnage larger than 6000 and ships with tonnage smaller than 4000.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The types of ships that have both ships with tonnage larger than 6000 and ships with tonnage smaller than 4000 is \"Battle ship\".",
                "query": "SELECT TYPE FROM ship WHERE Tonnage > 6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage < 4000",
                "result": [
                    [
                        [
                            "Type"
                        ],
                        [
                            "Battle ship"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.Type FROM ship AS T1 JOIN mission AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T1.Tonnage > 6000 INTERSECT SELECT DISTINCT T1.Type FROM ship AS T1 JOIN mission AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T1.Tonnage < 4000"
            },
            {
                "isuser": true,
                "text": "Show the types of ships with tonnage between 3000 and 5000.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The types of ships with tonnage between 3000 and 5000 are \"Cargo ship\" and \"Battle ship\".",
                "query": "SELECT distinct TYPE FROM ship WHERE Tonnage > 3000 and Tonnage<5000",
                "result": [
                    [
                        [
                            "Type"
                        ],
                        [
                            "Cargo ship"
                        ],
                        [
                            "Battle ship"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.Type FROM ship AS T1 JOIN mission AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T1.Tonnage BETWEEN 3000 AND 5000"
            },
            {
                "isuser": true,
                "text": "What is the nationality of the ship with maximum tonnage?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The nationality of the ship with maximum tonnage is \"United Kingdom\".",
                "query": "SELECT Nationality FROM ship order by Tonnage desc limit 1",
                "result": [
                    [
                        [
                            "Nationality"
                        ],
                        [
                            "United Kingdom"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Nationality FROM ship WHERE Tonnage = (SELECT MAX(Tonnage) FROM ship)"
            },
            {
                "isuser": true,
                "text": "Can you give me the nationality of the ship with minimum tonnage.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The nationality of the ship with minimum tonnage is \"United States\".",
                "query": "SELECT Nationality FROM ship order by Tonnage limit 1",
                "result": [
                    [
                        [
                            "Nationality"
                        ],
                        [
                            "United States"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Nationality FROM ship WHERE Tonnage = (SELECT MIN(Tonnage) FROM ship)"
            },
            {
                "isuser": true,
                "text": "What is the maximum and the minimum tonnage for a cargo ship?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table shows the maximum and the minimum tonnage for a cargo ship. The maximum is 5816 and the minimum is 3035.",
                "query": "SELECT \tmax(Tonnage),min(Tonnage) FROM ship WHERE \tType='Cargo ship'",
                "result": [
                    [
                        [
                            "max(Tonnage)",
                            "min(Tonnage)"
                        ],
                        [
                            5816,
                            3035
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT MAX(Tonnage) ,  MIN(Tonnage) FROM ship WHERE Type = \"Cargo ship\""
            },
            {
                "isuser": true,
                "text": "Hmmm. Can you also give me the maximum and the minimum tonnage for a battle ship?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table shows the maximum and the minimum tonnage for a battle ship. The maximum is 7781 and the minimum is 3146.",
                "query": "SELECT \tmax(Tonnage),min(Tonnage) FROM ship WHERE \tType='Battle ship'",
                "result": [
                    [
                        [
                            "max(Tonnage)",
                            "min(Tonnage)"
                        ],
                        [
                            7781,
                            3146
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT MAX(Tonnage) ,  MIN(Tonnage) FROM ship WHERE Type = \"Battle ship\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "roller_coaster",
        "turns": [
            {
                "isuser": true,
                "text": "how many  country there",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 3 countries.",
                "query": "SELECT count(*) from country",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM country"
            },
            {
                "isuser": true,
                "text": "what is the languages of Finland",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Finnish Swedish is the languages of Finland",
                "query": "SELECT languages from country where name = \"Finland\"",
                "result": [
                    [
                        [
                            "Languages"
                        ],
                        [
                            "Finnish Swedish"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Languages FROM country WHERE Name = \"Finland\""
            },
            {
                "isuser": true,
                "text": "what is the speed of Dauling Dragon",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The speed of roller coaster Dauling Dragon is 55.",
                "query": "SELECT speed from roller_coaster where name = \"Dauling Dragon\"",
                "result": [
                    [
                        [
                            "Speed"
                        ],
                        [
                            "55"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Speed FROM roller_coaster WHERE Name = \"Dauling Dragon\""
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "shop_membership",
        "turns": [
            {
                "isuser": true,
                "text": "What is the name of the branch with the greatest amount of memberships that were registered in the year 2016?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the name of the branch with the greatest amount of memberships that were registered in the year 2016 is Alexandre",
                "query": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Alexandre"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.Branch_ID  =  T2.Branch_ID WHERE T1.Register_Year  =  '2016' GROUP BY T1.Branch_ID ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the year that branch opened?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the branch with the greatest amount of memberships that were registered in the year 2016 is opened in the year of 2001",
                "query": "SELECT T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Open_year"
                        ],
                        [
                            "2001"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT open_year FROM branch WHERE name = 'Branch 1'"
            },
            {
                "isuser": true,
                "text": "Can you list the name and membership amount of the branch that had the least amount of memberships that were opened in the year 2017?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the name and membership amount of the branch that had the least amount of memberships that were opened in the year 2017",
                "query": "SELECT name, membership_amount FROM branch where membership_amount = (select min(membership_amount) from branch where open_year like \"%2017%\")",
                "result": [
                    [
                        [
                            "Name",
                            "membership_amount"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name, membership_amount FROM branch WHERE membership_amount = (SELECT MIN(membership_amount) FROM branch WHERE open_year = '2017')"
            },
            {
                "isuser": true,
                "text": "Can you list the name and opening year of the branch that opened the earliest?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the name and opening year of the branch that opened the earliest",
                "query": "SELECT name, open_year FROM branch where open_year = (select min(open_year) from branch)",
                "result": [
                    [
                        [
                            "Name",
                            "Open_year"
                        ],
                        [
                            "Alexandre",
                            "2001"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name, open_year FROM branch ORDER BY open_year LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks. Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "cinema",
        "turns": [
            {
                "isuser": true,
                "text": "How many film titles are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are five distinct film titles.",
                "query": "SELECT count(distinct title) from film",
                "result": [
                    [
                        [
                            "count(distinct(title))"
                        ],
                        [
                            5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM film"
            },
            {
                "isuser": true,
                "text": "Please list all the film titles.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "All the film titles are listed in the table.",
                "query": "SELECT title from film",
                "result": [
                    [
                        [
                            "Title"
                        ],
                        [
                            "The Case of the Mystery Weekend"
                        ],
                        [
                            "The Case of the Smart Dummy"
                        ],
                        [
                            "The Case: Off the Record"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT title FROM film"
            },
            {
                "isuser": true,
                "text": "Please list each title with its maximum price.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The film titles and their maximum prices are listed in the table.",
                "query": "SELECT T1.title, max(price) from film as T1 join schedule as T2 on T1.film_id = T2.film_id group by T1.film_id",
                "result": [
                    [
                        [
                            "Title",
                            "max(price)"
                        ],
                        [
                            "The Case of the Mystery Weekend",
                            15.99
                        ],
                        [
                            "The Case of the Smart Dummy",
                            12.99
                        ],
                        [
                            "The Case: Off the Record",
                            8.99
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT title ,  max(price) FROM film AS T1 JOIN schedule AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.title"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "inn_1",
        "turns": [
            {
                "isuser": true,
                "text": "Could you please tell me which room has the cheapest base price?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the information about the room that has the cheapest base price",
                "query": "SELECT * FROM Rooms ORDER BY basePrice ASC LIMIT 1;",
                "result": [
                    [
                        [
                            "RoomId",
                            "roomName",
                            "beds",
                            "bedType",
                            "maxOccupancy",
                            "basePrice",
                            "decor"
                        ],
                        [
                            "TAA",
                            "Thrift and accolade",
                            1,
                            "Double",
                            2,
                            75,
                            "modern"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT RoomId, roomName, basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Could you please tell me which room has the most expensive base price?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the information about the room that has the most expensive base price",
                "query": "SELECT * FROM Rooms ORDER BY basePrice desc LIMIT 1;",
                "result": [
                    [
                        [
                            "RoomId",
                            "roomName",
                            "beds",
                            "bedType",
                            "maxOccupancy",
                            "basePrice",
                            "decor"
                        ],
                        [
                            "FNA",
                            "Frugal not apropos",
                            2,
                            "King",
                            4,
                            250,
                            "traditional"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT RoomId, roomName, basePrice FROM Rooms ORDER BY basePrice DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the average base price for all rooms?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "152.5 is the average base price for all rooms",
                "query": "SELECT avg(basePrice) FROM Rooms",
                "result": [
                    [
                        [
                            "avg(basePrice)"
                        ],
                        [
                            152.5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(basePrice) FROM Rooms"
            },
            {
                "isuser": true,
                "text": "What is the median base price for all rooms?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "sorry I cannot answer that. please ask anything else.",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "SELECT median(basePrice) FROM Rooms"
            },
            {
                "isuser": true,
                "text": "What is the name of the room with the largest max occupancy?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Abscond or bolster is the name of the room with the largest max occupancy",
                "query": "SELECT roomName FROM Rooms order by maxOccupancy desc limit 1",
                "result": [
                    [
                        [
                            "roomName"
                        ],
                        [
                            "Abscond or bolster"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT roomName FROM Rooms WHERE maxOccupancy = (SELECT max(maxOccupancy) FROM Rooms)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks. bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "singer",
        "turns": [
            {
                "isuser": true,
                "text": "how many singers are on the table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 8 singers in total.",
                "query": "select count(distinct Singer_ID) from Singer",
                "result": [
                    [
                        [
                            "count(distinct Singer_ID)"
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM singer"
            },
            {
                "isuser": true,
                "text": "how many singers have songs with sales more than 300000?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 3 singers that have songs with sales more than 300000.",
                "query": "SELECT count(DISTINCT T1.Name) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
                "result": [
                    [
                        [
                            "count(DISTINCT T1.Name)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM singer WHERE singer.Singer_ID IN (SELECT singer.Singer_ID FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000)"
            },
            {
                "isuser": true,
                "text": "show distinct names of singers that have songs with sales more than 300000",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table shows the distinct names of singers that have songs with sales more than 300000.",
                "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Liliane Bettencourt"
                        ],
                        [
                            "Christy Walton"
                        ],
                        [
                            "Iris Fontbona"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT singer.Name FROM singer WHERE singer.Singer_ID IN (SELECT singer.Singer_ID FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "music_4",
        "turns": [
            {
                "isuser": true,
                "text": "Please show the results of music festivals and the number of music festivals that have had each, ordered by this count.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the results of music festivals and the number of music festivals that have had each, ordered by this count",
                "query": "SELECT RESULT ,  COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC",
                "result": [
                    [
                        [
                            "Result",
                            "COUNT(*)"
                        ],
                        [
                            "Nominated",
                            6
                        ],
                        [
                            "Awarded",
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Category, COUNT(*) AS num_music_festivals FROM music_festival GROUP BY Category ORDER BY num_music_festivals DESC"
            }
        ]
    },
    {
        "db_name": "epinions_1",
        "turns": [
            {
                "isuser": true,
                "text": "for which user id rating is high",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "did you mean for which user id is the rating highest?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT u_id ,  avg(rating) FROM review GROUP BY u_id HAVING avg(rating)  >  3.5"
            },
            {
                "isuser": true,
                "text": "ok, find user id who gives the rating 10",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the users with ids 1 and 2 give the rating 10",
                "query": "SELECT T1.u_id FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id WHERE T2.rating = 10",
                "result": [
                    null
                ],
                "predict_type": "answerable",
                "predict": "SELECT u_id ,  avg(rating) FROM review GROUP BY u_id HAVING avg(rating)  >  9"
            },
            {
                "isuser": true,
                "text": "find the name of the user who gives most reviews",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the name of the user who gives most reviews is Mark",
                "query": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id GROUP BY T2.u_id ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Mark"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM useracct WHERE u_id IN (SELECT u_id FROM review GROUP BY u_id ORDER BY COUNT(*) DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "find the name of the user who gives 1 rank",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the name of the user with rank 1 is Helen",
                "query": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id where T2.rank=1",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Helen"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM useracct WHERE u_id IN (SELECT u_id FROM review WHERE rank = 1)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome, goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "baseball_1",
        "turns": [
            {
                "isuser": true,
                "text": "What is the the birth country of player-ids?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the birth country of all players?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT birth_country FROM player WHERE player_id IN (SELECT player_id FROM all_star WHERE year = 1982)"
            },
            {
                "isuser": true,
                "text": "yes\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The following table shows the birth country of all players.",
                "query": "SELECT birth_country FROM player ",
                "result": [
                    [
                        [
                            "birth_country"
                        ],
                        [
                            "USA"
                        ],
                        [
                            "USA"
                        ],
                        [
                            "USA"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT birth_country FROM player WHERE player_id IN (SELECT player_id FROM all_star WHERE year = 1982)"
            },
            {
                "isuser": true,
                "text": "What is the birth state of player aardsda01?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The birth state of player with ID aardsda01 is CO.",
                "query": "SELECT birth_state FROM player where player_id = \"aardsda01\"",
                "result": [
                    [
                        [
                            "birth_state"
                        ],
                        [
                            "CO"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT birth_state FROM player WHERE player_id = 'aardsda01'"
            },
            {
                "isuser": true,
                "text": "What about birth city?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The birth city of player with ID aardsda01 is Denver.",
                "query": "SELECT birth_city FROM player where player_id = \"aardsda01\"",
                "result": [
                    [
                        [
                            "birth_city"
                        ],
                        [
                            "Denver"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT birth_city FROM player WHERE player_id = 'aardsda01'"
            },
            {
                "isuser": true,
                "text": "and for aaronto01?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "You mean the birth city for the player with ID aaronto01?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT birth_city FROM player WHERE player_id = 'aaronto01'"
            },
            {
                "isuser": true,
                "text": "yes\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The birth city of player with ID aaronto01 is Mobile.",
                "query": "SELECT birth_city FROM player where player_id = \"aaronto01\"",
                "result": [
                    [
                        [
                            "birth_city"
                        ],
                        [
                            "Mobile"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT birth_city FROM player WHERE player_id IN (SELECT player_id FROM all_star WHERE year = 1982)"
            },
            {
                "isuser": true,
                "text": "How many players in the USA have a batter value R?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "10104 players in the USA have a batter value R.",
                "query": "SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats  =  'R';",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            10104
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM player WHERE player_id IN (SELECT player_id FROM batting WHERE bats = 'R') AND birth_country = 'USA'"
            },
            {
                "isuser": true,
                "text": "How many are still alive?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "4813 players in the USA are alive and have a batter value R",
                "query": "SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats  =  'R' AND death_year > 2018;",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            4813
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM player WHERE player_id IN (SELECT player_id FROM batting WHERE bats = 'R') AND birth_country = 'USA' AND death_year = 0"
            },
            {
                "isuser": true,
                "text": "How many with a batter value of R are still playing?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry the question cannot be answered from the table.",
                "query": "",
                "result": [],
                "predict_type": "SORRY",
                "predict": "SELECT count(*) FROM player WHERE player_id IN (SELECT player_id FROM batting WHERE bats = 'R') AND death_year = 0"
            },
            {
                "isuser": true,
                "text": "How many with a value R that are dead, died in the USA?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "5255 players with a value R died in the USA.",
                "query": "SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats  =  'R' AND death_year < 2019 AND death_country = 'USA';",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            5255
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM player WHERE player_id IN (SELECT player_id FROM batting WHERE bats = 'R') AND death_year > 0 AND birth_country = 'USA'"
            },
            {
                "isuser": true,
                "text": "How many with a value R died after the year 2000?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "6935 players with a value R died after the year 2000.",
                "query": "SELECT count(*) FROM player WHERE bats  =  'R' AND death_year > 2000",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            6938
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM player WHERE player_id IN (SELECT player_id FROM batting WHERE bats = 'R') AND death_year > 2000"
            },
            {
                "isuser": true,
                "text": "What about born after the year 1980?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "1459 players with a value R born after the year 1980.",
                "query": "SELECT count(*) FROM player WHERE bats  =  'R' AND birth_year > 1980",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            1459
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM player WHERE player_id IN (SELECT player_id FROM batting WHERE bats = 'R') AND birth_year > 1980"
            },
            {
                "isuser": true,
                "text": "How many with a value r were born in the state of Alabama?\n",
                "type": "improper"
            }
        ]
    },
    {
        "db_name": "allergy_1",
        "turns": [
            {
                "isuser": true,
                "text": "Can you list the student ids and their allergies?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The list of student ids and their allergies are shown in the result table. ",
                "query": "SELECT stuid, allergy from has_allergy",
                "result": [
                    [
                        [
                            "StuID",
                            "Allergy"
                        ],
                        [
                            1001,
                            "Cat"
                        ],
                        [
                            1002,
                            "Shellfish"
                        ],
                        [
                            1002,
                            "Tree Pollen"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT StuID ,  Allergy FROM Has_Allergy"
            },
            {
                "isuser": true,
                "text": "How many students have milk or egg allergies?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 6 students that have milk or egg allergies. ",
                "query": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Has_Allergy WHERE Allergy  =  \"milk\" OR Allergy  =  \"egg\""
            },
            {
                "isuser": true,
                "text": "Hmm, I want to know just the number of female students who have milk or egg allergies.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 2 female students that have milk or egg allergies. ",
                "query": "SELECT count(*) FROM (SELECT * FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\") WHERE sex = \"F\" AND ",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Has_Allergy WHERE Allergy  =  \"milk\" OR Allergy  =  \"egg\" AND Sex  =  \"F\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, good bye. ",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "party_people",
        "turns": [
            {
                "isuser": true,
                "text": "What member is in charge of the most events?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The ID of the person who is in charge of the most events is 4.",
                "query": "select Member_in_charge_ID, count(*) from party_events group by Member_in_charge_ID order by count(*) desc limit 1",
                "result": [
                    [
                        [
                            "Member_in_charge_ID",
                            "num"
                        ],
                        [
                            4,
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Member_Name FROM member AS T1 JOIN party_events AS T2 ON T1.Member_ID  =  T2.Member_in_charge_ID GROUP BY T1.Member_Name ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the name of Member ID 4?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of member whose ID is 4 is Hon John Anderson.",
                "query": "select Member_Name from member where Member_ID = 4",
                "result": [
                    [
                        [
                            "Member_Name"
                        ],
                        [
                            "Hon John Anderson"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Member_Name FROM member WHERE Member_ID = 4"
            },
            {
                "isuser": true,
                "text": "What is Hon John Anderson's  Party ID ?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Hon John Anderson's Party ID is 1.",
                "query": "select Party_ID from member where\tMember_Name = 'Hon John Anderson'",
                "result": [
                    [
                        [
                            "Party_ID"
                        ],
                        [
                            "1"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Party_ID FROM party WHERE Party_name = \"Hon John Anderson's Party\""
            },
            {
                "isuser": true,
                "text": "What events is Hon John Anderson in charge of ?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Hon John Anderson is in charge of the events Annaual Meeting, Conference and Election Meeting.",
                "query": "select event_name from member AS T1 JOIN party_events AS T2 ON T1.Party_ID = t2.Party_ID WHERE Member_Name = 'Hon John Anderson'",
                "result": [
                    [
                        [
                            "Event_Name"
                        ],
                        [
                            "Annaual Meeting"
                        ],
                        [
                            "Conference"
                        ],
                        [
                            "Election Meeting"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Event_Name FROM party_events AS T1 JOIN party_events AS T2 ON T1.Event_ID  =  T2.Event_ID WHERE T1.Member_in_charge_ID  =  1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "film_rank",
        "turns": [
            {
                "isuser": true,
                "text": "Find the number of cities in USA country?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the number of cities in USA country is 700",
                "query": "SELECT Number_cities FROM market where country = \"USA\"",
                "result": [
                    [
                        [
                            "Number_cities"
                        ],
                        [
                            700
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Number_cities FROM market WHERE Country = \"USA\""
            },
            {
                "isuser": true,
                "text": "How many country's located in the world?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of countries is 6.",
                "query": "SELECT count(country) FROM market",
                "result": [
                    [
                        [
                            "count(country)"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM market"
            },
            {
                "isuser": true,
                "text": "What are the market id of china?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the market id of china is 2",
                "query": "SELECT market_id FROM market where country = \"China\"",
                "result": [
                    [
                        [
                            "Market_ID"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Market_ID FROM market WHERE Country = \"China\""
            },
            {
                "isuser": true,
                "text": "What are the maximum and minimum number of cities in all markets.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the maximum and minimum number of cities in all markets are 700 and 209",
                "query": "SELECT max(Number_cities) ,  min(Number_cities) FROM market",
                "result": [
                    [
                        [
                            "max(Number_cities)",
                            "min(Number_cities)"
                        ],
                        [
                            700,
                            209
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(Number_cities) ,  min(Number_cities) FROM market"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "driving_school",
        "turns": [
            {
                "isuser": true,
                "text": "Hi there!  Can you provide me with the country and state province county information for the staff member named Janessa Sawayn?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Are you referring to the staff member having first name Janessa and last name Sawayn?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT country, state_province_county FROM Addresses WHERE address_id IN (SELECT staff_address_id FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\")"
            },
            {
                "isuser": true,
                "text": "Yes, that is correct!",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The staff member with first name Janessa and last name Sawayn corresponds to country USA and state province county Connecticut.",
                "query": "SELECT T1.country ,  T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
                "result": [
                    [
                        [
                            "country",
                            "state_province_county"
                        ],
                        [
                            "USA",
                            "Connecticut"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT country, state_province_county FROM Addresses WHERE address_id IN (SELECT staff_address_id FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\")"
            },
            {
                "isuser": true,
                "text": "Great!  Can you tell me how many other staff also have \"Connecticut\" as their state province county?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "There are 2 other staff besides the previous subject having \"Connecticut\" as their state province county.",
                "query": "SELECT count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE state_province_county = 'Connecticut'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Addresses WHERE address_id IN (SELECT staff_address_id FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\") AND country = \"United States\" AND state_province_county = \"Connecticut\""
            },
            {
                "isuser": true,
                "text": "Can you please list the fist name and last name of these two other staff?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "The two other staff that have \"Connecticut\" as their state province county have names Jedidiah Herzog and Ludie Kuphal.",
                "query": "SELECT first_name, last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE state_province_county = 'Connecticut'",
                "result": [
                    [
                        [
                            "first_name",
                            "last_name"
                        ],
                        [
                            "Janessa",
                            "Sawayn"
                        ],
                        [
                            "Jedidiah",
                            "Herzog"
                        ],
                        [
                            "Ludie",
                            "Kuphal"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name, last_name FROM Staff WHERE staff_address_id IN (SELECT staff_address_id FROM Addresses WHERE address_id IN (SELECT staff_address_id FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\") AND country = \"United States\" AND state_province_county = \"Connecticut\")"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you! Goodbye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "student_1",
        "turns": [
            {
                "isuser": true,
                "text": "what is the lname of grade 2",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean what are the last names of the students in grade 2?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT DISTINCT T1.LastName FROM teachers AS T1 JOIN students AS T2 ON T1.Classroom  =  T2.Classroom WHERE T2.Grade  =  2"
            },
            {
                "isuser": true,
                "text": "what is the lname of classroom 101",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of classroom 101.",
                "query": "SELECT lastname from list where classroom = 101",
                "result": [
                    [
                        [
                            "LastName"
                        ],
                        [
                            "CAR"
                        ],
                        [
                            "LAPLANT"
                        ],
                        [
                            "CHIARAMONTE"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.LastName FROM teachers AS T1 JOIN students AS T2 ON T1.Classroom  =  T2.Classroom WHERE T2.Classroom  =  101"
            },
            {
                "isuser": true,
                "text": "what is the fname of class room 102",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the fname of classroom 102",
                "query": "SELECT firstname from list where classroom = 102",
                "result": [
                    [
                        [
                            "FirstName"
                        ],
                        [
                            " PATRINA"
                        ],
                        [
                            " REYNALDO"
                        ],
                        [
                            " CHANTAL"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.FirstName FROM teachers AS T1 JOIN students AS T2 ON T1.Classroom  =  T2.Classroom WHERE T2.Classroom  =  102"
            }
        ]
    },
    {
        "db_name": "products_gen_characteristics",
        "turns": [
            {
                "isuser": true,
                "text": "how many products are there",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 15 products.",
                "query": "select count(*) from Products;",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Products"
            },
            {
                "isuser": true,
                "text": "what is the product name of color code 2",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of products with color code 2.",
                "query": "select product_name from Products where color_code = 2;",
                "result": [
                    [
                        [
                            "product_name"
                        ],
                        [
                            "peper"
                        ],
                        [
                            "catnip"
                        ],
                        [
                            "laurel"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product_name FROM Products WHERE color_code = 2"
            },
            {
                "isuser": true,
                "text": "what is the characteristic data type of characteristic id 1",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the data type of the characteristic with id 1 is numquam",
                "query": "select characteristic_data_type from Characteristics where characteristic_id = 1;",
                "result": [
                    [
                        [
                            "characteristic_data_type"
                        ],
                        [
                            "numquam"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT characteristic_data_type FROM Characteristics WHERE characteristic_id = 1"
            },
            {
                "isuser": true,
                "text": "thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcomde,goodbye",
                "query": "",
                "result": [],
                "predict_type": "SORRY",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "insurance_fnol",
        "turns": [
            {
                "isuser": true,
                "text": "How many policies does America Jaskolski have listed?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The count  of    policies  which   America Jaskolski has  is 0",
                "query": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id where \tCustomer_name=\"America Jaskolski\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Customers AS T1 JOIN Customers_Policies AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.customer_name  =  \"America Jaskolski\""
            },
            {
                "isuser": true,
                "text": "What about Mrs. Hanna Willms ?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did  you  mean the number of policies Mrs. Hanna Willms has listed?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT count(*) FROM Customers AS T1 JOIN Customers_Policies AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.customer_name  =  \"Mrs. Hanna Willms\""
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The  count of policies which Mrs. Hanna Willms has is 1",
                "query": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id where \tCustomer_name=\"Mrs. Hanna Willms\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Customers AS T1 JOIN Customers_Policies AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.customer_name  =  \"Mrs. Hanna Willms\""
            },
            {
                "isuser": true,
                "text": "How many policies are listed total?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The count of  policies is 14",
                "query": "SELECT count(Policy_ID) FROM Customers_Policies ",
                "result": [
                    [
                        [
                            "count(Policy_ID)"
                        ],
                        [
                            14
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Customers AS T1 JOIN Customers_Policies AS T2 ON T1.customer_id  =  T2.customer_id"
            },
            {
                "isuser": true,
                "text": "What is the Customer Name who has the most policies listed ?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The Customer Name who has the most policies listed is Jay  chou",
                "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Customer_name"
                        ],
                        [
                            "Jay Chou"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_name ,  count(*) FROM Customers AS T1 JOIN Customers_Policies AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_name ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome  and   bye ",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "club_1",
        "turns": [
            {
                "isuser": true,
                "text": "Hi. How many different clubs are there in total?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 4 clubs.",
                "query": "select count(*) from club",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(DISTINCT ClubName) FROM Club"
            },
            {
                "isuser": true,
                "text": "What are the names of the 4 clubs?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of all clubs.",
                "query": "select clubName from club",
                "result": [
                    [
                        [
                            "ClubName"
                        ],
                        [
                            "Bootup Baltimore"
                        ],
                        [
                            "Hopkins Student Enterprises"
                        ],
                        [
                            "Pen and Paper Gaming"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT ClubName FROM Club WHERE ClubID IN (SELECT ClubID FROM Member_of_club GROUP BY ClubID HAVING COUNT(*) > 1) LIMIT 4"
            },
            {
                "isuser": true,
                "text": "Among the 4 clubs, how many members are there in total?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 4 members total in those clubs.",
                "query": "select count(*) from member_of_club",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM Member_of_club WHERE ClubID IN (SELECT ClubID FROM Club WHERE ClubName IN (SELECT ClubName FROM Club GROUP BY ClubName HAVING COUNT(*) > 1))"
            },
            {
                "isuser": true,
                "text": "Of the 4 members, how many of them are members of the club \"Pen and Paper Gaming\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is 0 member of the club \"Pen and Paper Gaming\"",
                "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM Member_of_club WHERE ClubID = 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "election_representative",
        "turns": [
            {
                "isuser": true,
                "text": "what is the average lifespan of the representatives",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the average lifespan of the representatives.",
                "query": "SELECT avg(lifespan) FROM representative",
                "result": [
                    [
                        [
                            "avg(lifespan)"
                        ],
                        [
                            1914.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(Lifespan) FROM representative"
            },
            {
                "isuser": true,
                "text": "what parties have at least two representatives",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the parties with at least two representatives.",
                "query": "SELECT Party FROM representative GROUP BY Party HAVING COUNT(*)  >=  2",
                "result": [
                    [
                        [
                            "Party"
                        ],
                        [
                            "Democratic"
                        ],
                        [
                            "Republican"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Party FROM representative GROUP BY Party HAVING COUNT(*) >= 2"
            },
            {
                "isuser": true,
                "text": "what parties have at least three representatives",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These parties have at least three representatives.",
                "query": "SELECT Party FROM representative GROUP BY Party HAVING COUNT(*)  >=  3",
                "result": [
                    [
                        [
                            "Party"
                        ],
                        [
                            "Democratic"
                        ],
                        [
                            "Republican"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Party FROM representative GROUP BY Party HAVING COUNT(*) >= 3"
            }
        ]
    },
    {
        "db_name": "department_store",
        "turns": [
            {
                "isuser": false,
                "text": "Did you mean the id of the products that were ordered four or more times?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Yes.",
                "type": "answerable",
                "predict": "SELECT product_id FROM Customer_Orders GROUP BY product_id HAVING count(*)  >=  4"
            },
            {
                "isuser": true,
                "text": "Which items were ordered four or more times?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "There is no item that was ordered four or more times",
                "query": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >=  4",
                "result": [
                    [
                        [
                            "product_id"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product_id FROM Customer_Orders GROUP BY product_id HAVING count(*)  >=  4"
            },
            {
                "isuser": true,
                "text": "What is the id of products supplied more than 80000?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are ids of products supplied more than 80000",
                "query": "SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000",
                "result": [
                    [
                        [
                            "product_id"
                        ],
                        [
                            4
                        ],
                        [
                            5
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product_id FROM Product_Suppliers WHERE total_amount_purchased > 80000"
            },
            {
                "isuser": true,
                "text": "What is the product id of the product?\n",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "We already showed that info.",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT product_id FROM Product_Suppliers WHERE total_amount_purchased > 80000"
            },
            {
                "isuser": true,
                "text": "What is the latest date that orders were sent by supplier id 4?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean date of supplied from or to?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT max(date_from) FROM Supplier_Addresses WHERE supplier_id = 4"
            },
            {
                "isuser": true,
                "text": "Supplied to.\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the latest date that orders were sent by supplier id 4 is 2018-03-25 12:03:33",
                "query": "SELECT date_supplied_to FROM Product_Suppliers where supplier_id = 4 order by date_supplied_to desc limit 1",
                "result": [
                    [
                        [
                            "date_supplied_to"
                        ],
                        [
                            "2018-03-25 12:03:33"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(date_to) FROM Supplier_Addresses WHERE supplier_id = 4"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "match_season",
        "turns": [
            {
                "isuser": true,
                "text": "What colleges do the players play for?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "I'm sorry, do you mean you wanna see the whole collages' names?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT College FROM match_season WHERE Team = 2"
            },
            {
                "isuser": true,
                "text": "Yes, please",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table that shows the all of the names of collages.",
                "query": "SELECT distinct College FROM match_season ",
                "result": [
                    [
                        [
                            "College"
                        ],
                        [
                            "Florida International"
                        ],
                        [
                            "UNLV"
                        ],
                        [
                            "Virginia"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT College FROM match_season WHERE Team = 2"
            },
            {
                "isuser": true,
                "text": "Thank you. And what are the names of the players who play for those schools?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table that shows the players who play for those schools.",
                "query": "SELECT Player FROM match_season ",
                "result": [
                    [
                        [
                            "Player"
                        ],
                        [
                            "Steve Ralston Category:Articles with hCards"
                        ],
                        [
                            "Mike Duhaney Category:Articles with hCards"
                        ],
                        [
                            "Ben Olsen Category:Articles with hCards"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Player FROM match_season WHERE Team = 2"
            },
            {
                "isuser": true,
                "text": "Thank you. Which players play midfielder?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table that shows the whole player names who play the midfielder. For example, the Steve Ralston Category:Articles with hCards is playing midfielder.",
                "query": "SELECT Player FROM match_season WHERE Position='Midfielder'",
                "result": [
                    [
                        [
                            "Player"
                        ],
                        [
                            "Steve Ralston Category:Articles with hCards"
                        ],
                        [
                            "Ben Olsen Category:Articles with hCards"
                        ],
                        [
                            "Kyle Martino Category:Articles with hCards"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Player FROM match_season WHERE Position = 'Midfielder'"
            },
            {
                "isuser": true,
                "text": "Which college have both players with position midfielder and players with position defender?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The collage 'Maryland' has both players with position midfielder and players with position defender.",
                "query": "SELECT College FROM match_season WHERE POSITION = \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION = \"Defender\"",
                "result": [
                    [
                        [
                            "College"
                        ],
                        [
                            "Maryland"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT College FROM match_season WHERE Position = 'Midfielder' INTERSECT SELECT College FROM match_season WHERE Position = 'Defender'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "voter_1",
        "turns": [
            {
                "isuser": true,
                "text": "who all are the contest",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean  to ask for the names of all contestants?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_number IN (SELECT contestant_number FROM VOTES GROUP BY contestant_number HAVING count(*) > 1)"
            },
            {
                "isuser": true,
                "text": "yes.\n\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the names of all contestants.",
                "query": "SELECT contestant_name FROM CONTESTANTS",
                "result": [
                    [
                        [
                            "contestant_name"
                        ],
                        [
                            "Edwina Burnam"
                        ],
                        [
                            "Tabatha Gehling"
                        ],
                        [
                            "Kelly Clauss"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_number IN (SELECT contestant_number FROM VOTES GROUP BY contestant_number HAVING count(*) > 1)"
            },
            {
                "isuser": true,
                "text": "can you send the total contestant number?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of contestants is 11.",
                "query": "SELECT COUNT(contestant_name) FROM CONTESTANTS",
                "result": [
                    [
                        [
                            "COUNT(contestant_name)"
                        ],
                        [
                            11
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM CONTESTANTS WHERE contestant_number IN (SELECT contestant_number FROM VOTES GROUP BY contestant_number HAVING count(*) > 1)"
            },
            {
                "isuser": true,
                "text": "how is about the summer?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "I am sorry, I cannot understand that question. Can you rephrase it?",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "Sorry, I don't have information about the weather."
            },
            {
                "isuser": true,
                "text": "how many female contestants are there?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry, I cannot answer that question.",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT count(*) FROM CONTESTANTS WHERE gender = 'F'"
            },
            {
                "isuser": true,
                "text": "who is the first contestant?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean to ask for the name of the contestant with contestant number 1?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT contestant_name FROM CONTESTANTS ORDER BY contestant_number LIMIT 1"
            },
            {
                "isuser": true,
                "text": "yes can tell me?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Edwina Burnam has contestant number 1.",
                "query": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_number = 1",
                "result": [
                    [
                        [
                            "contestant_name"
                        ],
                        [
                            "Edwina Burnam"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_number = 1"
            },
            {
                "isuser": true,
                "text": "who is the 2 contestant?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Tabatha Gehling has contestant number 2.",
                "query": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_number = 2",
                "result": [
                    [
                        [
                            "contestant_name"
                        ],
                        [
                            "Tabatha Gehling"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_number = 2"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Good bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "sakila_1",
        "turns": [
            {
                "isuser": true,
                "text": "What are the last name of staff id 1?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean customer, not staff?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT last_name FROM staff WHERE staff_id = 1"
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the last name of the customer with customer id 1.",
                "query": "SELECT last_name FROM customer WHERE customer_id =1",
                "result": [
                    [
                        [
                            "last_name"
                        ],
                        [
                            "SMITH"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT last_name FROM staff WHERE staff_id = 1"
            },
            {
                "isuser": true,
                "text": "what is the inventory id of the rent id 3?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the inventory id of the rent id 3.",
                "query": "SELECT inventory_id FROM rental WHERE rental_id =3",
                "result": [
                    [
                        [
                            "inventory_id"
                        ],
                        [
                            1711
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT inventory_id FROM rental WHERE rental_id = 3"
            },
            {
                "isuser": true,
                "text": "what is the first name and the last name of the customer who made the earliest rental ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the first and last names of the customer who made the earliest rental.",
                "query": "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1",
                "result": [
                    [
                        [
                            "first_name",
                            "last_name"
                        ],
                        [
                            "CHARLOTTE",
                            "HUNTER"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name ,  last_name FROM customer WHERE customer_id IN (SELECT customer_id FROM rental ORDER BY rental_date LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "Thanks !",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Good bye.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "flight_2",
        "turns": [
            {
                "isuser": true,
                "text": "hi, list out all airport name",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "All airport names are listed in the result table.",
                "query": "SELECT airportname FROM airports",
                "result": [
                    [
                        [
                            "AirportName"
                        ],
                        [
                            "Phillips AAF "
                        ],
                        [
                            "Municipal "
                        ],
                        [
                            "Dyess AFB "
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AirportName FROM airports"
            },
            {
                "isuser": true,
                "text": "show me the total no of flight number",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 836 different flightNo.",
                "query": "SELECT COUNT(DISTINCT Flightno) FROM flights",
                "result": [
                    [
                        [
                            "COUNT(DISTINCT Flightno)"
                        ],
                        [
                            836
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM flights"
            },
            {
                "isuser": true,
                "text": "how many country name are there",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is 1 country.",
                "query": "SELECT COUNT(DISTINCT country) FROM airports",
                "result": [
                    [
                        [
                            "COUNT(DISTINCT country)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(DISTINCT Country) FROM airports"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "no problem, bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "dog_kennels",
        "turns": [
            {
                "isuser": true,
                "text": "How many dog breeds are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are three dog breeds.",
                "query": "SELECT count(*) from Breeds",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Breeds"
            },
            {
                "isuser": true,
                "text": "What is the biggest of those dog breeds?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The Bulldog has most number of dogs",
                "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "breed_name"
                        ],
                        [
                            "Bulldog"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "How big is the bulldog?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the size codes of the dogs with bulldog breed name.",
                "query": "SELECT T2.size_code FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code where T1.breed_name=\"Bulldog\"",
                "result": [
                    [
                        [
                            "size_code"
                        ],
                        [
                            "LGE"
                        ],
                        [
                            "MED"
                        ],
                        [
                            "MED"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.size_description FROM Sizes AS T1 JOIN Dogs AS T2 ON T1.size_code  =  T2.size_code WHERE T2.breed_code = 'BULL'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome! Do you want to know more?",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "What is the name of the breed with the most dogs?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the breed with most dogs is Bulldog.",
                "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "breed_name"
                        ],
                        [
                            "Bulldog"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!\n",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "station_weather",
        "turns": [
            {
                "isuser": true,
                "text": "What are the times of trains that go to chennai?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the times of trains that have a destination of Chennai.",
                "query": "SELECT TIME  FROM train WHERE destination  =  'Chennai' ",
                "result": [
                    [
                        [
                            "time"
                        ],
                        [
                            "17:15"
                        ],
                        [
                            "4:49"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "I apologize, but the database does not contain information about the times of trains that go to Chennai."
            },
            {
                "isuser": true,
                "text": "What are the trains names that go to chennai?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the train names that go to chennai are Ananthapuri Express and Guruvayur Express",
                "query": "SELECT \tname FROM train WHERE destination  =  'Chennai'",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Ananthapuri Express"
                        ],
                        [
                            "Guruvayur Express"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM train WHERE destination = \"Chennai\""
            },
            {
                "isuser": true,
                "text": "What is the origin of Ananthapuri express ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The origin of Ananthapuri express is Trivandrum\nChennai",
                "query": "SELECT \torigin FROM train WHERE name = \"Ananthapuri Express\"",
                "result": [
                    [
                        [
                            "origin"
                        ],
                        [
                            "Trivandrum"
                        ],
                        [
                            "Chennai"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT origin FROM train WHERE name = \"Ananthapuri Express\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "game_1",
        "turns": [
            {
                "isuser": true,
                "text": "What are the number of games played for students under the age of 20?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Students under the age of 20 played 257 games.",
                "query": "SELECT sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.age  <  20",
                "result": [
                    [
                        [
                            "sum(gamesplayed)"
                        ],
                        [
                            257
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM SportsInfo WHERE StuID IN (SELECT StuID FROM Student WHERE Age  <  20)"
            },
            {
                "isuser": true,
                "text": "What are the total hours per week students under the age of 20 played games?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Students under the age of 20 played total of 158 hours per week.",
                "query": "SELECT sum(hoursperweek)  FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.age  <  20",
                "result": [
                    [
                        [
                            "sum(hoursperweek)"
                        ],
                        [
                            158
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT sum(HoursPerWeek) FROM SportsInfo WHERE StuID IN (SELECT StuID FROM Student WHERE Age  <  20)"
            },
            {
                "isuser": true,
                "text": "What is the most common sport name those students played?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Athletics is the name of the most common sport played by students under the age of 20.",
                "query": "SELECT sportName,count(*) from sportsinfo where stuid in (select stuid from student where age < 20) group by sportname order by count(*) desc limit 1",
                "result": [
                    [
                        [
                            "SportName",
                            "count(*)"
                        ],
                        [
                            "Athletics",
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT SportName FROM SportsInfo WHERE StuID IN (SELECT StuID FROM Student WHERE Age  <  20) GROUP BY SportName ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            }
        ]
    },
    {
        "db_name": "orchestra",
        "turns": [
            {
                "isuser": true,
                "text": "List the name of the conductor with the most years of work.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Robert Craft works the most years",
                "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Robert Craft"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Conductor_ID ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "How many years did Robert Craft work?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Robert Craft  worked 21 years",
                "query": "SELECT Year_of_Work FROM conductor where name='Robert Craft'",
                "result": [
                    [
                        [
                            "Year_of_Work"
                        ],
                        [
                            21
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Year_of_Work FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE T2.Name = \"Robert Craft\""
            },
            {
                "isuser": true,
                "text": "List the name of the conductor with the least years of work",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Colin Davis works the  least years ",
                "query": "SELECT Name FROM conductor ORDER BY Year_of_Work asc LIMIT 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Colin Davis"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Name FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Conductor_ID ORDER BY count(*) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome,goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "activity_1",
        "turns": [
            {
                "isuser": false,
                "text": "Do you mean the last name of the faculty with a first name Mark?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Yes!",
                "type": "answerable",
                "predict": "Do you mean the last name of the faculty with a first name Mark?"
            },
            {
                "isuser": true,
                "text": "what is the lname of mark",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "The  last name of the faculty with a first name Mark is Giuliano.",
                "query": "select Lname from  Faculty where \tFname=\"Mark\"",
                "result": [
                    [
                        [
                            "Lname"
                        ],
                        [
                            "Giuliano"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Lname FROM Faculty WHERE Fname = 'Mark'"
            },
            {
                "isuser": true,
                "text": "what is the activity id of 1082",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "sorry  i  have  no  answer  to this  question",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT actid FROM Activity WHERE activity_name = '1082'"
            },
            {
                "isuser": true,
                "text": "what is the activity id of faculty id of 1082",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "\nThe activity id of faculty id of 1082 are  shown   in the table",
                "query": "select  \tactid  from Faculty_Participates_in  where FacID\t=1082",
                "result": [
                    [
                        [
                            "actid"
                        ],
                        [
                            784
                        ],
                        [
                            785
                        ],
                        [
                            790
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT actid FROM Faculty_Participates_in WHERE FacID = 1082"
            },
            {
                "isuser": true,
                "text": "what is the rank of mark",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The rank of the faculty with a first name Mark is Instructor.",
                "query": "select  \t\tRank  from Faculty  where \tFname\t=\"Mark\"",
                "result": [
                    [
                        [
                            "Rank"
                        ],
                        [
                            "Instructor"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Rank FROM Faculty WHERE Lname = 'Mark'"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Welcome and goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "wine_1",
        "turns": [
            {
                "isuser": true,
                "text": "Hi, could you please show me the list of all appellations those produce wine after 2008?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the appellations that produce wines after the year of 2008",
                "query": "SELECT Appelation FROM WINE WHERE YEAR  >  2008",
                "result": [
                    [
                        [
                            "Appelation"
                        ],
                        [
                            "Sonoma County"
                        ],
                        [
                            "Santa Ynez Valley"
                        ],
                        [
                            "California"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT Appelation FROM WINE WHERE YEAR  >  2008"
            },
            {
                "isuser": true,
                "text": "That's a big list, thank you. Then could you please exclude Central Coast area from them?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the appellations that produce wines after the year of 2008 but not in Central Coast area.",
                "query": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"",
                "result": [
                    [
                        [
                            "Appelation"
                        ],
                        [
                            "Bennett Valley"
                        ],
                        [
                            "California"
                        ],
                        [
                            "Carneros"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT Appelation FROM WINE WHERE YEAR  >  2008 AND Appelation NOT IN (SELECT Appelation FROM WINE WHERE YEAR  >  2008 AND Appelation IN (SELECT Appelation FROM APPELLATIONS WHERE Area = \"Central Coast\"))"
            },
            {
                "isuser": true,
                "text": "That's great, thank you. Could you please show me the list of states where these appellations are located at?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the states for the appellations which produce wines after the year of 2008 but not in Central Coast area.",
                "query": "select state from APPELLATIONS where appelation in (SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\")",
                "result": [
                    [
                        [
                            "State"
                        ],
                        [
                            "California"
                        ],
                        [
                            "California"
                        ],
                        [
                            "California"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT State FROM WINE WHERE YEAR  >  2008 AND Appelation IN (SELECT Appelation FROM APPELLATIONS WHERE Area = \"Central Coast\")"
            },
            {
                "isuser": true,
                "text": "Wow, other than Central Coast is all California. Thank you, are there any appellations those are not in California?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "There are not appellations which are not in California.",
                "query": "select Appelation from APPELLATIONS where state != \"California\"",
                "result": [
                    [
                        [
                            "Appelation"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT Appelation FROM WINE WHERE YEAR  >  2008 AND Appelation NOT IN (SELECT Appelation FROM WINE WHERE YEAR  >  2008 AND Appelation IN (SELECT Appelation FROM APPELLATIONS WHERE Area = \"Central Coast\"))"
            },
            {
                "isuser": true,
                "text": "Oh.. actually somewhat expected that. Thank you, then could you please let me know the average price of all wines?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the average price for all wines.",
                "query": "select avg(price) from wine",
                "result": [
                    [
                        [
                            "avg(price)"
                        ],
                        [
                            45.406
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(Price) FROM WINE"
            },
            {
                "isuser": true,
                "text": "Then could you please show me the list of wines those are more expensive than the average?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the information of wines which are more expensive than the average price of all wines",
                "query": "select * from wine where price > (select avg(price) from wine)",
                "result": [
                    [
                        [
                            "No",
                            "Grape",
                            "Winery",
                            "Appelation",
                            "State",
                            "Name",
                            "Year",
                            "Price",
                            "Score",
                            "Cases",
                            "Drink"
                        ],
                        [
                            8,
                            "Sauvignon Blanc",
                            "Altamura",
                            "Napa Valley",
                            "California",
                            "Sauvignon Blanc",
                            2007,
                            48,
                            92,
                            500,
                            "now"
                        ],
                        [
                            13,
                            "Sauvignon Blanc",
                            "Peter Michael",
                            "Knights Valley",
                            "California",
                            "LApres-Midi",
                            2008,
                            48,
                            91,
                            1260,
                            "now"
                        ],
                        [
                            22,
                            "Sauvignon Blanc",
                            "Kenzo",
                            "Napa Valley",
                            "California",
                            "Asatsuyu",
                            2008,
                            60,
                            89,
                            600,
                            "now"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM WINE WHERE Price  >  (SELECT AVG(Price) FROM WINE)"
            },
            {
                "isuser": true,
                "text": "Wow great, thank you. This will be my last question, could you please let me know which ones of them are good to drink now?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "There are 466 wines which can be drunk now.",
                "query": "select count(*) from wine where Drink = \"now\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            466
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM WINE WHERE Price  >  (SELECT AVG(Price) FROM WINE) AND Drink = 'Yes'"
            },
            {
                "isuser": true,
                "text": "Thanks! ",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "hospital_1",
        "turns": [
            {
                "isuser": true,
                "text": "Which department has the least number of employees?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the information about the department that has the least number of employees",
                "query": "SELECT * FROM department GROUP BY departmentID ORDER BY count(*) LIMIT 1;",
                "result": [
                    [
                        [
                            "DepartmentID",
                            "Name",
                            "Head"
                        ],
                        [
                            1,
                            "General Medicine",
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the head of that department?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the head of the department with the least number of employees is 4",
                "query": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;",
                "result": [
                    [
                        [
                            "Head"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM physician WHERE employeeid = (SELECT head FROM department WHERE departmentID = (SELECT departmentID FROM affiliated_with WHERE physician = (SELECT employeeid FROM physician WHERE name = 'Dr. Kim')))"
            },
            {
                "isuser": true,
                "text": "Ok and what is the employee id for the head?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry I don't have that information.",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT employeeid FROM physician WHERE name = (SELECT name FROM physician WHERE employeeid = (SELECT head FROM department WHERE departmentID = (SELECT departmentID FROM affiliated_with WHERE physician = (SELECT employeeid FROM physician WHERE name = 'Dr. Kim'))))"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "college_3",
        "turns": [
            {
                "isuser": true,
                "text": "What is the highest grade point?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the highest grade point is 4.0",
                "query": "SELECT max(gradepoint)  FROM GRADECONVERSION",
                "result": [
                    [
                        [
                            "max(gradepoint)"
                        ],
                        [
                            4.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(gradepoint) FROM GRADECONVERSION"
            },
            {
                "isuser": true,
                "text": "What is the highest grade point for each letter grade?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the table of the highest grade point for each letter grade.",
                "query": "SELECT lettergrade, max(gradepoint)  FROM GRADECONVERSION group by lettergrade",
                "result": [
                    [
                        [
                            "lettergrade",
                            "max(gradepoint)"
                        ],
                        [
                            "A",
                            4.0
                        ],
                        [
                            "A+",
                            4.0
                        ],
                        [
                            "A-",
                            3.7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT lettergrade, max(gradepoint) FROM GRADECONVERSION GROUP BY lettergrade"
            },
            {
                "isuser": true,
                "text": "Can you show both the highest and lowest grade point for each letter grade?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of the highest and lowest grade point for each letter grade. For example,  the highest and lowest grade point for A is 4.0 and 4.0.",
                "query": "SELECT lettergrade, max(gradepoint), min(gradepoint)  FROM GRADECONVERSION group by lettergrade",
                "result": [
                    [
                        [
                            "lettergrade",
                            "max(gradepoint)",
                            "min(gradepoint)"
                        ],
                        [
                            "A",
                            4.0,
                            4.0
                        ],
                        [
                            "A+",
                            4.0,
                            4.0
                        ],
                        [
                            "A-",
                            3.7,
                            3.7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT lettergrade, max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION GROUP BY lettergrade"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "election_representative",
        "turns": [
            {
                "isuser": true,
                "text": "list the life spans of all representatives",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the lifespans of all representatives.",
                "query": "SELECT Lifespan FROM representative ",
                "result": [
                    [
                        [
                            "Lifespan"
                        ],
                        [
                            "1947–"
                        ],
                        [
                            "1868–1930"
                        ],
                        [
                            "1923–"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Lifespan FROM representative"
            },
            {
                "isuser": true,
                "text": "what are the life spans of representatives from New York? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The lifespans of the representatives from New York State are shown below. ",
                "query": "SELECT Lifespan FROM representative WHERE State = \"New York\"",
                "result": [
                    [
                        [
                            "Lifespan"
                        ],
                        [
                            "1868–1930"
                        ],
                        [
                            "1951–"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Lifespan FROM representative WHERE State = \"New York\""
            },
            {
                "isuser": true,
                "text": "what are the life spans of representatives from Indiana? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The lifespans of the representatives from Indiana are shown below. ",
                "query": "SELECT Lifespan FROM representative WHERE State = \"Indiana\"",
                "result": [
                    [
                        [
                            "Lifespan"
                        ],
                        [
                            "1947–"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Lifespan FROM representative WHERE State = \"Indiana\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Would you like to ask for more information on the representatives?",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "no thanks ",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Good bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "Sorry to hear that. Is there anything else I can help you with?"
            }
        ]
    },
    {
        "db_name": "film_rank",
        "turns": [
            {
                "isuser": true,
                "text": "How many films are there in total?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of films is 13.",
                "query": "SELECT COUNT(DISTINCT Title) FROM film",
                "result": [
                    [
                        [
                            "COUNT(DISTINCT Title)"
                        ],
                        [
                            13
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM film"
            },
            {
                "isuser": true,
                "text": "How many of those films do not have any market estimation?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of films that do not have a market estimation is 9.",
                "query": "SELECT count(Title) FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)",
                "result": [
                    [
                        [
                            "count(Title)"
                        ],
                        [
                            9
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)"
            },
            {
                "isuser": true,
                "text": "What is the estimation ID of those nine films?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry, we do not market estimation information for films that do not have market estimations.",
                "query": "",
                "result": [],
                "predict_type": "SORRY",
                "predict": "SELECT Estimation_ID FROM film_market_estimation WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)"
            },
            {
                "isuser": true,
                "text": "What about film IDs?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the film IDs of the 9 films that do not have market estimations?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT Film_ID FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)"
            },
            {
                "isuser": true,
                "text": "Yes, could you tell me those films' IDs?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of the film IDs of films that do not have market estimations.",
                "query": "SELECT film_ID FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)",
                "result": [
                    [
                        [
                            "Film_ID"
                        ],
                        [
                            5
                        ],
                        [
                            6
                        ],
                        [
                            7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Film_ID FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)"
            },
            {
                "isuser": true,
                "text": "What are the titles of the films with those IDs?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of the film titles with the IDs of films that do not have market estimations.",
                "query": "SELECT Title from film WHERE film_ID IN (SELECT film_ID FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation))",
                "result": [
                    [
                        [
                            "Title"
                        ],
                        [
                            "Porky's"
                        ],
                        [
                            "Star Trek II: The Wrath of Khan"
                        ],
                        [
                            "48 Hrs"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Title FROM film WHERE Film_ID IN (SELECT Film_ID FROM film_market_estimation WHERE Estimation_ID NOT IN (SELECT Estimation_ID FROM film_market_estimation WHERE Film_ID IN (SELECT Film_ID FROM film_market_estimation WHERE Estimation_ID NOT IN (SELECT Estimation_ID FROM film_market_estimation))))"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "apartment_rentals",
        "turns": [
            {
                "isuser": true,
                "text": "What is the number of the apartment with the greatest number of bedrooms?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Apt. 908 is the number of the apartment with the largest number of bedrooms.",
                "query": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1",
                "result": [
                    [
                        [
                            "apt_number"
                        ],
                        [
                            "Apt. 908"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT apt_number FROM Apartments WHERE bedroom_count = (SELECT MAX(bedroom_count) FROM Apartments)"
            },
            {
                "isuser": true,
                "text": "What is the number of the apartment with the least number of bedrooms?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Suite 645 is the number of the apartment with the least number of bedrooms.",
                "query": "SELECT apt_number FROM Apartments ORDER BY bedroom_count  LIMIT 1",
                "result": [
                    [
                        [
                            "apt_number"
                        ],
                        [
                            "Suite 645"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT apt_number FROM Apartments WHERE bedroom_count = (SELECT MIN(bedroom_count) FROM Apartments)"
            },
            {
                "isuser": true,
                "text": "What is the apartment type code of the apartment with the greatest number of bathrooms?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Studio is the type code of the apartment with the greatest number of bathrooms.",
                "query": "SELECT apt_type_code FROM Apartments ORDER BY bathroom_count desc  LIMIT 1",
                "result": [
                    [
                        [
                            "apt_type_code"
                        ],
                        [
                            "Studio"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT apt_type_code FROM Apartments WHERE bathroom_count = (SELECT MAX(bathroom_count) FROM Apartments)"
            },
            {
                "isuser": true,
                "text": "How many rooms does that apartment have, and what is the number of that apartment?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the total number of room and apartment number of the apartment with the greatest number of bathrooms.",
                "query": "SELECT room_count, apt_number FROM Apartments ORDER BY bathroom_count desc LIMIT 1",
                "result": [
                    [
                        [
                            "room_count",
                            "apt_number"
                        ],
                        [
                            "9",
                            "Apt. 187"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT room_count, apt_number FROM Apartments WHERE bedroom_count = (SELECT MAX(bedroom_count) FROM Apartments)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "hr_1",
        "turns": [
            {
                "isuser": true,
                "text": "List all employees?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a table of the first and last names of all employees.",
                "query": "SELECT First_name, last_name FROM employees ",
                "result": [
                    [
                        [
                            "FIRST_NAME",
                            "LAST_NAME"
                        ],
                        [
                            "Steven",
                            "King"
                        ],
                        [
                            "Neena",
                            "Kochhar"
                        ],
                        [
                            "Lex",
                            "De Haan"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT * FROM employees"
            },
            {
                "isuser": true,
                "text": "Of these employees, how many did not have a job in the past?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of employees that did not have a job in the past is 100.",
                "query": "SELECT count(*) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            100
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)"
            },
            {
                "isuser": true,
                "text": "Okay. How many had jobs in the past?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of employees that had a job in the past is 7.",
                "query": "SELECT count(*) FROM employees WHERE employee_id IN (SELECT employee_id FROM job_history)",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM employees WHERE employee_id IN (SELECT employee_id FROM job_history)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "scientist_1",
        "turns": [
            {
                "isuser": true,
                "text": "Find the number of scientists involved for the projects that require more than 300 hours",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the number of scientists involved in the projects that require more than 300 hours is 7.",
                "query": "SELECT count(distinct Scientist) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300",
                "result": [
                    [
                        [
                            "count(distinct Scientist)"
                        ],
                        [
                            7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM (SELECT DISTINCT scientist FROM assignedto WHERE project IN (SELECT code FROM projects WHERE hours > 300))"
            },
            {
                "isuser": true,
                "text": "Hmm. Can you give me their names.",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "sorry, there is no info about their names in the tables.",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT name FROM scientists WHERE SSN IN (SELECT scientist FROM assignedto WHERE project IN (SELECT code FROM projects WHERE hours > 300))"
            },
            {
                "isuser": true,
                "text": "Find the number of scientists involved for the projects that require less than 300 hours",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the number of scientists involved in the projects that require less than 300 hours is 5.",
                "query": "SELECT count(distinct Scientist) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  <  300",
                "result": [
                    [
                        [
                            "count(distinct Scientist)"
                        ],
                        [
                            5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM (SELECT DISTINCT scientist FROM assignedto WHERE project IN (SELECT code FROM projects WHERE hours < 300))"
            },
            {
                "isuser": true,
                "text": "And what are the name of the departments requiring between 100 and 200 hours",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "there is no info about departments, did you mean projects?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT name FROM projects WHERE hours BETWEEN 100 AND 200"
            },
            {
                "isuser": true,
                "text": "yes projects",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are the names of the projects requiring between 100 and 200 hours",
                "query": "SELECT name FROM projects WHERE hours < 200 and hours > 100",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Winds: Studying Bernoullis Principle"
                        ],
                        [
                            "Aerodynamics and Bridge Design"
                        ],
                        [
                            "A Matter of Time"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM projects WHERE hours BETWEEN 100 AND 200"
            },
            {
                "isuser": true,
                "text": "and what are the names of the projects requiring more than 300 hours",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are the names of the projects requiring more than 300 hours.",
                "query": "SELECT name FROM projects WHERE hours > 300",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Aerodynamics and Ice Hockey"
                        ],
                        [
                            "Build Your Own Telescope"
                        ],
                        [
                            "Juicy: Extracting Apple Juice with Pectinase"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM projects WHERE hours > 300"
            },
            {
                "isuser": true,
                "text": "and what is the scientist id for project Aerodynamics and Bridge Design",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is no scientist assigned to the project named 'project Aerodynamics and Bridge Design' yet.",
                "query": "SELECT t2.Scientist FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.name = 'Aerodynamics and Bridge Design'",
                "result": [
                    [
                        [
                            "Scientist"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT scientist FROM assignedto WHERE project = 'Aerodynamics' OR project = 'Bridge Design'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "shop_membership",
        "turns": [
            {
                "isuser": true,
                "text": "How many names in this table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The  count  of  names in this table   is 8",
                "query": "SELECT count(Name)  FROM branch ",
                "result": [
                    [
                        [
                            "count(Name)"
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM member"
            },
            {
                "isuser": true,
                "text": "Find the total amount of membership?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The total amount of membership is 1732",
                "query": "SELECT sum(\tmembership_amount)  FROM branch ",
                "result": [
                    [
                        [
                            "sum(\tmembership_amount)"
                        ],
                        [
                            1732
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT SUM(membership_amount) FROM branch"
            },
            {
                "isuser": true,
                "text": "Find highest membership amount?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The highest  membership amount of all branches is 91",
                "query": "SELECT \tmembership_amount FROM branch  order by membership_amount desc limit  1",
                "result": [
                    [
                        [
                            "membership_amount"
                        ],
                        [
                            "91"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT MAX(membership_amount) FROM branch"
            },
            {
                "isuser": true,
                "text": "Find the lowest membership amount?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the lowest membership amount of all branches is 11",
                "query": "SELECT \tmin(membership_amount) FROM branch  ",
                "result": [
                    [
                        [
                            "min(membership_amount)"
                        ],
                        [
                            "11"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT MIN(membership_amount) FROM branch"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Welcome and goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "dog_kennels",
        "turns": [
            {
                "isuser": true,
                "text": "which professional has done  the most treatments?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the information about the professional who has done the most treatments.",
                "query": "SELECT T1.* FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id order by COUNT(*)  desc limit 1",
                "result": [
                    [
                        [
                            "professional_id",
                            "role_code",
                            "first_name",
                            "street",
                            "city",
                            "state",
                            "zip_code",
                            "last_name",
                            "email_address",
                            "home_phone",
                            "cell_number"
                        ],
                        [
                            9,
                            "Veterenarian",
                            "Monte",
                            "07073 Brenna Ways Suite 089\nLowehaven, KY 93275-96",
                            "South Rockyport",
                            "SouthCarolina",
                            "80775",
                            "Kshlerin",
                            "schneider.kathryne@example.org",
                            "320-508-6023",
                            "962-983-8109x3509"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "what about the least treatments?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the information about the professional who has done the least treatments.",
                "query": "SELECT T1.* FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id order by COUNT(*)  limit 1",
                "result": [
                    [
                        [
                            "professional_id",
                            "role_code",
                            "first_name",
                            "street",
                            "city",
                            "state",
                            "zip_code",
                            "last_name",
                            "email_address",
                            "home_phone",
                            "cell_number"
                        ],
                        [
                            5,
                            "Veterenarian",
                            "Danny",
                            "188 VonRueden Tunnel Suite 630\nNorth Macibury, NV ",
                            "New Laurytown",
                            "Hawaii",
                            "84515",
                            "Considine",
                            "mekhi.little@example.org",
                            "1-609-566-2752x25197",
                            "011.193.9081x3186"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id ORDER BY count(*) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "How many professionals have at most 3 treatments?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is no prefessional who has at most 3 treatments.",
                "query": "select count(*) from (SELECT T1.* FROM Professionals AS T1 JOIN Treatments AS T2 group by T2.professional_id having count(*) <= 3)",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM (SELECT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  <=  3) AS T"
            },
            {
                "isuser": true,
                "text": "What is the average number of treatments taken by all professionals?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average number of treatments taken by all professionals is 28.125.",
                "query": "select avg(ct) from (SELECT count(*) as ct FROM Professionals AS T1 JOIN Treatments AS T2 group by T2.professional_id)",
                "result": [
                    [
                        [
                            "avg(ct)"
                        ],
                        [
                            28.125
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(count) FROM (SELECT T1.first_name ,  T1.last_name ,  COUNT(*) AS count FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id) AS T"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "world_1",
        "turns": [
            {
                "isuser": true,
                "text": "The given codes of country is not speak in English please tell ",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean the codes of countries that do not speak English?",
                "query": "",
                "result": [],
                "predict_type": "answerable",
                "predict": "SELECT CountryCode FROM country WHERE CountryCode NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')"
            },
            {
                "isuser": true,
                "text": "Thanks! Which countries do not speak English please tell country names",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of countries that do not speak English.",
                "query": "select name from country where code not in (SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\")",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Afghanistan"
                        ],
                        [
                            "Angola"
                        ],
                        [
                            "Albania"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM country WHERE CountryCode NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')"
            },
            {
                "isuser": true,
                "text": "Thanks! Whose government forms Republic",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you want the names of countries that do not speak English and whose government forms are not Republic?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT Name FROM country WHERE GovernmentForm = 'Republic'"
            },
            {
                "isuser": true,
                "text": "Thanks! yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of countries that do not speak English and whose government forms are not Republic",
                "query": "select name from country where code in (SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\")",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Afghanistan"
                        ],
                        [
                            "Andorra"
                        ],
                        [
                            "United Arab Emirates"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM country WHERE GovernmentForm = 'Republic'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks. bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "SELECT Name FROM country WHERE GovernmentForm = 'Republic'"
            }
        ]
    },
    {
        "db_name": "products_gen_characteristics",
        "turns": [
            {
                "isuser": true,
                "text": "what is the color code of basil?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The color code for product with name basil is 9.",
                "query": "SELECT color_code from products where product_name='basil'",
                "result": [
                    [
                        [
                            "color_code"
                        ],
                        [
                            "9"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT color_code FROM Ref_Product_Categories WHERE product_category_code = 'Vegetable' AND product_name = 'basil'"
            },
            {
                "isuser": true,
                "text": "what is the color with least products?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The color description for color with least products is black.",
                "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1",
                "result": [
                    [
                        [
                            "color_description"
                        ],
                        [
                            "black"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT color_code FROM Ref_Product_Categories GROUP BY color_code ORDER BY COUNT(*) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "what is the name of the product with color code 4?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the product names with color code 4.",
                "query": "SELECT product_name FROM products where color_code=4",
                "result": [
                    [
                        [
                            "product_name"
                        ],
                        [
                            "cumin"
                        ],
                        [
                            "chili"
                        ],
                        [
                            "ginger"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product_name FROM Products WHERE color_code = 4"
            },
            {
                "isuser": true,
                "text": "What is the typical selling price of product paper?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The typical selling price of product peper is 1892070",
                "query": "SELECT typical_selling_price FROM products where product_name='peper'",
                "result": [
                    [
                        [
                            "typical_selling_price"
                        ],
                        [
                            "1892070.2803543"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT typical_selling_price FROM Products WHERE product_name = \"paper\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure! Bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "voter_1",
        "turns": [
            {
                "isuser": true,
                "text": "Can you tell me what the total number of votes are for the states of \"NY\" and \"CA\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of votes from state 'NY' or 'CA' is 3.",
                "query": "SELECT count(*) FROM votes WHERE state  =  'NY' or  state  =  'CA'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT sum(T2.num_votes) FROM AREA_CODE_STATE AS T1 JOIN (SELECT state, count(*) AS num_votes FROM VOTES GROUP BY state) AS T2 ON T1.state  =  T2.state WHERE T1.state  =  'NY' OR T1.state  =  'CA'"
            },
            {
                "isuser": true,
                "text": "Thank you!  Can you provide me with a list of all of the different contestant numbers?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The different contestant numbers are listed.",
                "query": "SELECT distinct contestant_number FROM votes ",
                "result": [
                    [
                        [
                            "contestant_number"
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ],
                        [
                            5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT contestant_number FROM VOTES"
            },
            {
                "isuser": true,
                "text": "Awesome!  Can you show me which of the contestants received the most votes and show me that total please?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry, I can't answer the question based on the information in the table.",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT contestant_number, count(*) AS num_votes FROM VOTES GROUP BY contestant_number ORDER BY num_votes DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Okay.  How many vote IDs correspond to contestant number 5?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of vote id of contestant number 5 is 1.",
                "query": "SELECT count(*) from votes where contestant_number = '5'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM VOTES WHERE contestant_number = 5"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Goodbye.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "baseball_1",
        "turns": [
            {
                "isuser": true,
                "text": "Which player has the highest salary on the list?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the id of  player who has the highest salary on the list is rodrial01",
                "query": "select player_id from salary order by salary desc limit 1",
                "result": [
                    [
                        [
                            "player_id"
                        ],
                        [
                            "rodrial01"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT player_id, salary FROM salary ORDER BY salary DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "How many players has the birth country in USA?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are 16504 players who  have the birth country USA",
                "query": "select count(player_id) from player where birth_country = 'USA'",
                "result": [
                    [
                        [
                            "count(player_id)"
                        ],
                        [
                            16504
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM player WHERE birth_country = 'USA'"
            },
            {
                "isuser": true,
                "text": "State the team id which has the highest rank in the list?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the team id of the team that has the highest rank is PH1",
                "query": "select team_id from team order by rank limit 1",
                "result": [
                    [
                        [
                            "team_id"
                        ],
                        [
                            "PH1"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT team_id FROM team ORDER BY rank DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "List player's first name and last name who received salary from team Washington Nationals in both 2005 and 2007?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the first names and last names of the players who received salaries from team Washington Nationals in both 2005 and 2007",
                "query": "SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'",
                "result": [
                    [
                        [
                            "name_first",
                            "name_last"
                        ],
                        [
                            "Alex",
                            "Escobar"
                        ],
                        [
                            "Brian",
                            "Schneider"
                        ],
                        [
                            "Chad",
                            "Cordero"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.name_first, T1.name_last FROM player AS T1 JOIN salary AS T2 ON T1.player_id = T2.player_id WHERE T2.team_id = 'WAS' AND T2.year IN (2005, 2007)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "network_2",
        "turns": [
            {
                "isuser": true,
                "text": "what is the name of all males? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the name of all males",
                "query": "SELECT name FROM Person WHERE gender  =  'male'",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Bob"
                        ],
                        [
                            "Zach"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM Person WHERE gender  =  'male'"
            },
            {
                "isuser": true,
                "text": "what is the age of Bob?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the age of Bob is 35",
                "query": "SELECT age FROM Person WHERE name  =  'Bob'",
                "result": [
                    [
                        [
                            "age"
                        ],
                        [
                            35
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT age FROM Person WHERE name  =  'Bob'"
            },
            {
                "isuser": true,
                "text": "who is a doctor? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Zach is a docter",
                "query": "SELECT name FROM Person WHERE job  =  'doctor'",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Zach"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM Person WHERE job  =  'doctor'"
            },
            {
                "isuser": true,
                "text": "Thanks! ",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "poker_player",
        "turns": [
            {
                "isuser": true,
                "text": "List all the nationalities in the table with no duplicate records",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Russia and Bulgaria are the two different countries in the table",
                "query": "SELECT distinct Nationality FROM people",
                "result": [
                    [
                        [
                            "Nationality"
                        ],
                        [
                            "Russia"
                        ],
                        [
                            "Bulgaria"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Nationality FROM people GROUP BY Nationality"
            },
            {
                "isuser": true,
                "text": "List all the nationalities in the table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are all the nationalities in the table",
                "query": "SELECT Nationality FROM people ",
                "result": [
                    [
                        [
                            "Nationality"
                        ],
                        [
                            "Russia"
                        ],
                        [
                            "Bulgaria"
                        ],
                        [
                            "Russia"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Nationality FROM people"
            },
            {
                "isuser": true,
                "text": "Count the number of records where nationality is Russia",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the number of records where nationality is Russia is 6",
                "query": "SELECT count(*) FROM people where Nationality = 'Russia'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM people WHERE Nationality = \"Russia\""
            },
            {
                "isuser": true,
                "text": "Count the number of records where nationality is Bulgaria",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the number of records where nationality is Bulgaria is 1",
                "query": "SELECT count(*) FROM people where \tNationality = 'Bulgaria'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM people WHERE Nationality = \"Bulgaria\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "apartment_rentals",
        "turns": [
            {
                "isuser": true,
                "text": "How many different apartment building are there?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 15 different apartment buildings.",
                "query": "SELECT count(DISTINCT building_id) FROM apartment_buildings",
                "result": [
                    [
                        [
                            "count(DISTINCT building_id)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(DISTINCT building_full_name) FROM Apartment_Buildings"
            },
            {
                "isuser": true,
                "text": "How many of those apartment building are managed by Kyle?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "4 of those apartments are managed by Kyle.",
                "query": "SELECT count(*) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_manager = \"Kyle\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM Apartment_Buildings WHERE building_manager = \"Kyle\""
            },
            {
                "isuser": true,
                "text": "How many apartment type codes are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 3 apartment type codes.",
                "query": "SELECT count(DISTINCT apt_type_code) FROM Apartments",
                "result": [
                    [
                        [
                            "count(DISTINCT apt_type_code)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(DISTINCT apt_type_code) FROM Apartments"
            },
            {
                "isuser": true,
                "text": "Show the apartment types codes in buildings managed by Kyle?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the  apartment type codes in buildings managed by Kyle.",
                "query": "SELECT T2.apt_type_code FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_manager = \"Kyle\"",
                "result": [
                    [
                        [
                            "apt_type_code"
                        ],
                        [
                            "Studio"
                        ],
                        [
                            "Duplex"
                        ],
                        [
                            "Duplex"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT apt_type_code FROM Apartments WHERE building_id IN (SELECT building_id FROM Apartment_Buildings WHERE building_manager = \"Kyle\")"
            },
            {
                "isuser": true,
                "text": "Show the apartment numbers in the buildings managed by Kyle.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the apartment numbers in the buildings managed by Kyle",
                "query": "SELECT T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_manager = \"Kyle\"",
                "result": [
                    [
                        [
                            "apt_number"
                        ],
                        [
                            "Apt. 908"
                        ],
                        [
                            "Suite 749"
                        ],
                        [
                            "Apt. 859"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT apt_number FROM Apartments WHERE building_id IN (SELECT building_id FROM Apartment_Buildings WHERE building_manager = \"Kyle\")"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "voter_2",
        "turns": [
            {
                "isuser": true,
                "text": "What is the first and last name of all students 18 years old who have vice president votes?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Lisa Apap is the student who is 18 years old who has vice president votes.",
                "query": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
                "result": [
                    [
                        [
                            "Fname",
                            "LName"
                        ],
                        [
                            "Lisa",
                            "Apap"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Fname, T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Age = 18 AND T2.Vice_President_Vote > 0"
            },
            {
                "isuser": true,
                "text": "Ok, what is the first and last name of the student who has president votes?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Charles Norris, Stacy Prater, and Dinesh Kumar are the first and last names of the students who have president votes.",
                "query": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_Vote",
                "result": [
                    [
                        [
                            "Fname",
                            "LName"
                        ],
                        [
                            "Dinesh",
                            "Kumar"
                        ],
                        [
                            "Charles",
                            "Norris"
                        ],
                        [
                            "Stacy",
                            "Prater"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Fname, T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote > 0"
            },
            {
                "isuser": true,
                "text": "What are all of the vote categories that students can have?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "President, Vice President, Secretary, Treasurer, Class President, and Class Senator are the vote categories that students can have.",
                "query": "SELECT * from voting_record",
                "result": [
                    [
                        [
                            "StuID",
                            "Registration_Date",
                            "Election_Cycle",
                            "President_Vote",
                            "Vice_President_Vote",
                            "Secretary_Vote",
                            "Treasurer_Vote",
                            "Class_President_Vote",
                            "Class_Senator_Vote"
                        ],
                        [
                            1001,
                            "08/30/2015",
                            "Spring",
                            1004,
                            1007,
                            1010,
                            1035,
                            1001,
                            1028
                        ],
                        [
                            1002,
                            "08/30/2014",
                            "Spring",
                            1014,
                            1007,
                            1020,
                            1025,
                            1021,
                            1028
                        ],
                        [
                            1003,
                            "08/30/2013",
                            "Spring",
                            1004,
                            1017,
                            1030,
                            1035,
                            1031,
                            1028
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T2.Election_Cycle FROM Voting_record AS T2"
            },
            {
                "isuser": true,
                "text": "Ok, and of the students who had President votes how many were males?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "6 students are males and have president votes.",
                "query": "SELECT DISTINCT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  = \"M\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote > 0 AND T1.Sex = 'M'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Welcome. Bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "department_store",
        "turns": [
            {
                "isuser": true,
                "text": "What is the average price of all products?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average price of all products is 747.7386666666666.",
                "query": "SELECT avg(product_price) FROM products",
                "result": [
                    [
                        [
                            "avg(product_price)"
                        ],
                        [
                            747.7386666666666
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(product_price) FROM Products"
            },
            {
                "isuser": true,
                "text": "What is the product type of the product whose average price is greater than the average price of all products?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The product type whose average price is higher than the average price of all products is Hardware.",
                "query": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products)",
                "result": [
                    [
                        [
                            "product_type_code"
                        ],
                        [
                            "Hardware"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product_type_code FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products)"
            },
            {
                "isuser": true,
                "text": "What is the average price of that product with type code Hardware?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average price of all products with type code Hardware is 796.0416666666666.",
                "query": "SELECT avg(product_price) FROM products WHERE product_type_code = \"Hardware\"",
                "result": [
                    [
                        [
                            "avg(product_price)"
                        ],
                        [
                            796.0416666666666
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware'"
            },
            {
                "isuser": true,
                "text": "What is the average price of all products with the type code \"clothes\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average price of all products with type code Clothes is 715.5366666666666.",
                "query": "SELECT avg(product_price) FROM products WHERE product_type_code = \"Clothes\"",
                "result": [
                    [
                        [
                            "avg(product_price)"
                        ],
                        [
                            715.5366666666666
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "theme_gallery",
        "turns": [
            {
                "isuser": true,
                "text": "What is the name for the artist with the most number of exhibitions?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the artist with the most number of exhibitions is Vijay Singh.",
                "query": "SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Vijay Singh"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Name FROM exhibition AS T1 JOIN artist AS T2 ON T1.Artist_ID = T2.Artist_ID GROUP BY T1.Artist_ID ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What country is he from?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The country of the artist with the most number of exhibitions is Fiji.",
                "query": "SELECT T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Country"
                        ],
                        [
                            "Fiji"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Country FROM exhibition AS T1 JOIN artist AS T2 ON T1.Artist_ID = T2.Artist_ID GROUP BY T1.Artist_ID ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What other artists are from there?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "There is no other artist from the country of the artist with the most number of exhibitions.",
                "query": "select * from artist where country = (SELECT T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1)",
                "result": [
                    [
                        [
                            "Artist_ID",
                            "Name",
                            "Country",
                            "Year_Join",
                            "Age"
                        ],
                        [
                            1,
                            "Vijay Singh",
                            "Fiji",
                            1998,
                            45
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Name FROM exhibition AS T1 JOIN artist AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Country = (SELECT T2.Country FROM exhibition AS T1 JOIN artist AS T2 ON T1.Artist_ID = T2.Artist_ID GROUP BY T1.Artist_ID ORDER BY COUNT(*) DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "What other artists are the same age as him?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "There is no other artist of the same age as the artist with the most number of exhibitions.",
                "query": "select * from artist where age = (SELECT T2.age FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1)",
                "result": [
                    [
                        [
                            "Artist_ID",
                            "Name",
                            "Country",
                            "Year_Join",
                            "Age"
                        ],
                        [
                            1,
                            "Vijay Singh",
                            "Fiji",
                            1998,
                            45
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Name FROM exhibition AS T1 JOIN artist AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Age = (SELECT T2.Age FROM exhibition AS T1 JOIN artist AS T2 ON T1.Artist_ID = T2.Artist_ID GROUP BY T1.Artist_ID ORDER BY COUNT(*) DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "Are there any other artists that joined in the same year?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "There is no other artist that joined in the same year as the artist with the most number of exhibitions.",
                "query": "select * from artist where Year_Join = (SELECT T2.Year_Join FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1)",
                "result": [
                    [
                        [
                            "Artist_ID",
                            "Name",
                            "Country",
                            "Year_Join",
                            "Age"
                        ],
                        [
                            1,
                            "Vijay Singh",
                            "Fiji",
                            1998,
                            45
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Name FROM exhibition AS T1 JOIN artist AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Year_Join = (SELECT T2.Year_Join FROM exhibition AS T1 JOIN artist AS T2 ON T1.Artist_ID = T2.Artist_ID GROUP BY T1.Artist_ID ORDER BY COUNT(*) DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "Who is the artist with the least number of exhibitions?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is all the info of the artist with the least number of exhibitions.",
                "query": "SELECT T2.* FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) LIMIT 1",
                "result": [
                    [
                        [
                            "Artist_ID",
                            "Name",
                            "Country",
                            "Year_Join",
                            "Age"
                        ],
                        [
                            2,
                            "John Daly",
                            "United States",
                            1991,
                            46
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Name FROM exhibition AS T1 JOIN artist AS T2 ON T1.Artist_ID = T2.Artist_ID GROUP BY T1.Artist_ID ORDER BY COUNT(*) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "soccer_1",
        "turns": [
            {
                "isuser": true,
                "text": "Hello!  Can you please provide me with a list of the player IDs and player names?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the list of player ids and player names.",
                "query": "SELECT player_api_id, player_name FROM Player",
                "result": [
                    [
                        [
                            "player_api_id",
                            "player_name"
                        ],
                        [
                            505942,
                            "Aaron Appindangoye"
                        ],
                        [
                            155782,
                            "Aaron Cresswell"
                        ],
                        [
                            162549,
                            "Aaron Doran"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT id ,  player_name FROM player"
            },
            {
                "isuser": true,
                "text": "Can you update this list to show both the heights for each player, as well as each of their overall scores?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the player ids, names, height and overall rating of all players. ",
                "query": "SELECT T1.player_api_id, T1.player_name, T1.height, T2.overall_rating FROM Player as T1 JOIN Player_Attributes AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id",
                "result": [
                    [
                        [
                            "player_api_id",
                            "player_name",
                            "height",
                            "overall_rating"
                        ],
                        [
                            505942,
                            "Aaron Appindangoye",
                            182.88,
                            67
                        ],
                        [
                            505942,
                            "Aaron Appindangoye",
                            182.88,
                            67
                        ],
                        [
                            505942,
                            "Aaron Appindangoye",
                            182.88,
                            62
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT player_name ,  height ,  overall_rating FROM player AS T1 JOIN player_attributes AS T2 ON T1.id  =  T2.player_api_id"
            },
            {
                "isuser": true,
                "text": "Thank you!  Can you filter this list to show only the players who have an overall rating higher than 85?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the player ids, names, height and overall rating of players with overall rating higher than 85.",
                "query": "SELECT T1.player_api_id, T1.player_name, T1.height, T2.overall_rating FROM Player as T1 JOIN Player_Attributes AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.overall_rating > 85",
                "result": [
                    [
                        [
                            "player_api_id",
                            "player_name",
                            "height",
                            "overall_rating"
                        ],
                        [
                            30690,
                            "Adriano",
                            187.96,
                            86
                        ],
                        [
                            30690,
                            "Adriano",
                            187.96,
                            86
                        ],
                        [
                            30690,
                            "Adriano",
                            187.96,
                            89
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT player_name ,  height ,  overall_rating FROM player AS T1 JOIN player_attributes AS T2 ON T1.id  =  T2.player_api_id WHERE T2.overall_rating  >  85"
            },
            {
                "isuser": true,
                "text": "Excellent!  Finally, could you filter this list to show only the players with a height that is greater than 180 cm?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the player ids, names, height and overall rating of players with overall rating higher than 85 and height greater than 180.",
                "query": "SELECT player_api_id FROM Player WHERE height > 180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating > 85\n\n",
                "result": [
                    [
                        [
                            "player_api_id"
                        ],
                        [
                            19243
                        ],
                        [
                            24503
                        ],
                        [
                            25759
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT player_name ,  height ,  overall_rating FROM player AS T1 JOIN player_attributes AS T2 ON T1.id  =  T2.player_api_id WHERE T1.height  >  180"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Good bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "phone_1",
        "turns": [
            {
                "isuser": true,
                "text": "Can you list the maximum number of used kb in screen mode?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The maximu number of used kb in screen mode is 20.0",
                "query": "SELECT max(used_kb) FROM screen_mode;",
                "result": [
                    [
                        [
                            "max(used_kb)"
                        ],
                        [
                            20.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(used_kb) FROM screen_mode"
            },
            {
                "isuser": true,
                "text": "How about the minimum too?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The minimum number of used kb in the screen mode is 8.0",
                "query": "SELECT min(used_kb) FROM screen_mode;",
                "result": [
                    [
                        [
                            "min(used_kb)"
                        ],
                        [
                            8.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT min(used_kb) FROM screen_mode"
            },
            {
                "isuser": true,
                "text": "Could you get me the average as well, please?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the average number of used kb of screen mode is 14.857142857142858",
                "query": "SELECT avg(used_kb) FROM screen_mode;",
                "result": [
                    [
                        [
                            "avg(used_kb)"
                        ],
                        [
                            14.857142857142858
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(used_kb) FROM screen_mode"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "products_gen_characteristics",
        "turns": [
            {
                "isuser": true,
                "text": "What is the product category of \"laurel\"?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean the product category of the product named \"laurel\"?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT product_category_description FROM Ref_Product_Categories WHERE product_category_code IN (SELECT product_category_code FROM products WHERE product_name = \"laurel\")"
            },
            {
                "isuser": true,
                "text": "yes\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the product category code of the product named \"laurel\" is Herbs.",
                "query": "SELECT product_category_code FROM products WHERE product_name  =  \"laurel\"",
                "result": [
                    [
                        [
                            "product_category_code"
                        ],
                        [
                            "Herbs"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product_category_description FROM Ref_Product_Categories WHERE product_category_code IN (SELECT product_category_code FROM products WHERE product_name = \"laurel\")"
            },
            {
                "isuser": true,
                "text": "And how many characteristics does this product have?  ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is no characteristic which the product named \"laurel\" have.",
                "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"laurel\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Product_Characteristics WHERE product_id = 1"
            },
            {
                "isuser": true,
                "text": "Than what is it's typical selling price? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The typical selling price of the product named \"laurel\" is 57857.",
                "query": "SELECT typical_selling_price FROM products where product_name  =  \"laurel\"",
                "result": [
                    [
                        [
                            "typical_selling_price"
                        ],
                        [
                            "57857"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT typical_selling_price FROM products WHERE product_id = 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "car_1",
        "turns": [
            {
                "isuser": true,
                "text": "list the makers who designed more than 3 car models",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the information of the makers who designed more than 3 car models.",
                "query": "SELECT T1.* FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
                "result": [
                    [
                        [
                            "Id",
                            "Maker",
                            "FullName",
                            "Country"
                        ],
                        [
                            4,
                            "gm",
                            "General Motors",
                            "1"
                        ],
                        [
                            6,
                            "chrysler",
                            "Chrysler",
                            "1"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Maker FROM Model_list GROUP BY Maker HAVING COUNT(*)  >  3"
            },
            {
                "isuser": true,
                "text": "what is the id of these makers",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "4 and 6 are the ids of the makes who designed more than 3 car models.",
                "query": "SELECT T1.id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
                "result": [
                    [
                        [
                            "Id"
                        ],
                        [
                            4
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Id FROM Car_makers WHERE Maker IN (SELECT Maker FROM Model_list GROUP BY Maker HAVING COUNT(*)  >  3)"
            },
            {
                "isuser": true,
                "text": "make a list so that the full name and id of the makers who designed more than 3 car models appear in the same table ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the full name and id of the makes who designed more than 3 car models appear in the same table.",
                "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
                "result": [
                    [
                        [
                            "FullName",
                            "Id"
                        ],
                        [
                            "General Motors",
                            4
                        ],
                        [
                            "Chrysler",
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Maker, Id, FullName FROM Car_makers WHERE Maker IN (SELECT Maker FROM Model_list GROUP BY Maker HAVING COUNT(*)  >  3)"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "chinook_1",
        "turns": [
            {
                "isuser": true,
                "text": "State the email id of custormer id 1?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The email of custormer id 1 is \"luisg@embraer.com.br\".",
                "query": "select email from customer where customerid='1'",
                "result": [
                    [
                        [
                            "Email"
                        ],
                        [
                            "luisg@embraer.com.br"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Email FROM CUSTOMER WHERE CustomerId = 1"
            },
            {
                "isuser": true,
                "text": "How many employees are from Calgary city?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 5 employees from the city \"Calgary\".",
                "query": "select count(*) from employee where city='Calgary'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM Employee WHERE City = 'Calgary'"
            },
            {
                "isuser": true,
                "text": "Please show the employee first names and ids of employees who serve at least 10 customers?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table that shows the employee first names and ids of employees who serve at least 10 customers. For example, the employee with the first name \"Puja\" served at least 10 customers and the support rep id is \"3\".",
                "query": "SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*) >= 10",
                "result": [
                    [
                        [
                            "FirstName",
                            "SupportRepId"
                        ],
                        [
                            "Puja",
                            3
                        ],
                        [
                            "Diego",
                            4
                        ],
                        [
                            "Luis",
                            5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT FirstName, EmployeeId FROM Employee WHERE EmployeeId IN (SELECT EmployeeId FROM Customer GROUP BY EmployeeId HAVING COUNT(*) >= 10)"
            },
            {
                "isuser": true,
                "text": "State the title of employee id 2?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The title of employee id 2 is \"Sales Manager\".",
                "query": "select title from employee where employeeid= 2",
                "result": [
                    [
                        [
                            "Title"
                        ],
                        [
                            "Sales Manager"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Title FROM Employee WHERE EmployeeId = 2"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "tracking_share_transactions",
        "turns": [
            {
                "isuser": true,
                "text": "Could you please show me the average share count of transactions of each investor?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the average share count of transactions of each investor",
                "query": "SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id",
                "result": [
                    [
                        [
                            "investor_id",
                            "avg(share_count)"
                        ],
                        [
                            2,
                            831668.0
                        ],
                        [
                            3,
                            225053304.33333334
                        ],
                        [
                            6,
                            8718572.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id"
            },
            {
                "isuser": true,
                "text": "Could you order those by average share count, please?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the average share count of transactions of each investor, ordered by average share count.",
                "query": "SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg(share_count)",
                "result": [
                    [
                        [
                            "investor_id",
                            "avg(share_count)"
                        ],
                        [
                            20,
                            0.0
                        ],
                        [
                            18,
                            298.0
                        ],
                        [
                            8,
                            930.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg(share_count) DESC"
            },
            {
                "isuser": true,
                "text": "What are the dates of those transactions?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the dates of all transactions.",
                "query": "Select date_of_transaction from transactions",
                "result": [
                    [
                        [
                            "date_of_transaction"
                        ],
                        [
                            "1988-09-16 19:02:51"
                        ],
                        [
                            "1982-06-06 17:19:00"
                        ],
                        [
                            "1979-04-27 06:03:59"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT date_of_transaction FROM TRANSACTIONS WHERE transaction_id IN (SELECT transaction_id FROM TRANSACTIONS_LOTS WHERE lot_id IN (SELECT lot_id FROM LOTS WHERE lot_details LIKE '%sold%'))"
            },
            {
                "isuser": true,
                "text": "What about just the ones with the transaction type code SALE?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the dates of transactions with type code SALE.",
                "query": "Select date_of_transaction from transactions where transaction_type_code = \"SALE\"",
                "result": [
                    [
                        [
                            "date_of_transaction"
                        ],
                        [
                            "1988-09-16 19:02:51"
                        ],
                        [
                            "1979-04-27 06:03:59"
                        ],
                        [
                            "2004-01-18 20:37:50"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT date_of_transaction FROM TRANSACTIONS WHERE transaction_type_code = 'SALE'"
            },
            {
                "isuser": true,
                "text": "What about transactions with type code PUR?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the dates of transactions with type code PUR.",
                "query": "Select date_of_transaction from transactions where transaction_type_code = \"PUR\"",
                "result": [
                    [
                        [
                            "date_of_transaction"
                        ],
                        [
                            "1982-06-06 17:19:00"
                        ],
                        [
                            "2001-11-28 15:06:25"
                        ],
                        [
                            "1977-08-17 13:13:30"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT date_of_transaction FROM TRANSACTIONS WHERE transaction_type_code = 'PUR'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks. bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "cre_Doc_Tracking_DB",
        "turns": [
            {
                "isuser": true,
                "text": "Hi, can you tell me the name of an HR employee?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Leo is the name of the employee who has a role code of HR.",
                "query": "SELECT employee_name FROM Employees  where Role_code = \"HR\"",
                "result": [
                    [
                        [
                            "Employee_Name"
                        ],
                        [
                            "Leo"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT employee_name FROM Employees WHERE role_code = 'HR';"
            },
            {
                "isuser": true,
                "text": "Great, can you show the role code with the last employees?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean the employee with the largest id?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT role_code FROM Employees ORDER BY employee_id DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "PR is the role code of the employee with the largest id.",
                "query": "SELECT role_code FROM Employees order by employee_id desc limit 1",
                "result": [
                    [
                        [
                            "Role_Code"
                        ],
                        [
                            "PR"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT role_code FROM Employees ORDER BY employee_id DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "and the role code with the least employees?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "HR is the role code with the least employees.",
                "query": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1",
                "result": [
                    [
                        [
                            "Role_Code"
                        ],
                        [
                            "HR"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "music_1",
        "turns": [
            {
                "isuser": true,
                "text": "What is the name of the newest song?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the song that was released in most recently is Ami opar hoye. ",
                "query": "SELECT song_name FROM song ORDER BY releasedate DESC LIMIT 1",
                "result": [
                    [
                        [
                            "song_name"
                        ],
                        [
                            "Ami opar hoye"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT song_name FROM song ORDER BY releasedate DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "And the oldest song?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the song that was released first is Just beat it. ",
                "query": "SELECT song_name FROM song ORDER BY releasedate LIMIT 1",
                "result": [
                    [
                        [
                            "song_name"
                        ],
                        [
                            "Just beat it"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT song_name FROM song ORDER BY releasedate ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What are the names of the artists that released the oldest song on the list?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the artists that released the oldest song on the list is Michel. ",
                "query": "SELECT artist_name FROM song ORDER BY releasedate LIMIT 1",
                "result": [
                    [
                        [
                            "artist_name"
                        ],
                        [
                            "Michel"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT artist_name FROM song ORDER BY releasedate ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, would you like to know anything else? ",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "No that's all thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, good bye. ",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "hr_1",
        "turns": [
            {
                "isuser": true,
                "text": "Find the first name and last name and department id for those employees who earn such amount of salary which is the smallest salary of any of the departments.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are  the first names, last names and department ids for the employees who earn such amount of salary which is the smallest salary of any of the departments.",
                "query": "SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)",
                "result": [
                    [
                        [
                            "FIRST_NAME",
                            "LAST_NAME",
                            "DEPARTMENT_ID"
                        ],
                        [
                            "Neena",
                            "Kochhar",
                            90
                        ],
                        [
                            "Lex",
                            "De Haan",
                            90
                        ],
                        [
                            "Bruce",
                            "Ernst",
                            60
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary = (SELECT MIN(salary) FROM employees)"
            },
            {
                "isuser": true,
                "text": "Which of those has the highest salary?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the first name and last name and department id for those employees who earn such amount of salary which is the highest salary of any of the departments.",
                "query": "SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MAX(salary) FROM employees GROUP BY department_id)",
                "result": [
                    [
                        [
                            "FIRST_NAME",
                            "LAST_NAME",
                            "DEPARTMENT_ID"
                        ],
                        [
                            "Steven",
                            "King",
                            90
                        ],
                        [
                            "Alexander",
                            "Hunold",
                            60
                        ],
                        [
                            "Nancy",
                            "Greenberg",
                            100
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary = (SELECT MAX(salary) FROM employees)"
            },
            {
                "isuser": true,
                "text": "Of the people who earn the smallest salary in each department, who has the highest salary?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "do you mean the first name and last name and department id for the people?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary = (SELECT MIN(salary) FROM employees GROUP BY department_id)"
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "sorry,sql cannot answer the question directly,can you  give another question? thanks",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary = (SELECT MAX(salary) FROM employees GROUP BY department_id)"
            },
            {
                "isuser": true,
                "text": "Give me the first and last name of the highest paid employee",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "here are the first and last name of the highest paid employee",
                "query": "select FIRST_NAME,LAST_NAME from employees order by salary desc limit 1",
                "result": [
                    [
                        [
                            "FIRST_NAME",
                            "LAST_NAME"
                        ],
                        [
                            "Steven",
                            "King"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name ,  last_name FROM employees WHERE salary = (SELECT MAX(salary) FROM employees)"
            },
            {
                "isuser": true,
                "text": "Give me their salary and their manager's salary",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "do you mean the salary and manager's salary of all people?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT salary ,  (SELECT salary FROM employees WHERE employee_id = (SELECT manager_id FROM employees WHERE employee_id = (SELECT employee_id FROM job_history WHERE job_id = (SELECT job_id FROM jobs WHERE job_title = \"IT Staff\")))) AS manager_salary FROM employees WHERE employee_id = (SELECT employee_id FROM job_history WHERE job_id = (SELECT job_id FROM jobs WHERE job_title = \"IT Staff\"))"
            },
            {
                "isuser": true,
                "text": "Give me the name and salary of the highest paid employee and their manager",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the name and salary of the highest paid employee and their manager",
                "query": "select first_name,last_name,salary,manager_id from employees order by salary desc limit 1",
                "result": [
                    [
                        [
                            "FIRST_NAME",
                            "LAST_NAME",
                            "SALARY",
                            "MANAGER_ID"
                        ],
                        [
                            "Steven",
                            "King",
                            24000,
                            0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name ,  last_name ,  salary ,  (SELECT salary FROM employees WHERE employee_id = (SELECT manager_id FROM employees WHERE employee_id = (SELECT employee_id FROM job_history WHERE job_id = (SELECT job_id FROM jobs WHERE job_title = \"IT Staff\")))) AS manager_salary FROM employees WHERE employee_id = (SELECT employee_id FROM job_history WHERE job_id = (SELECT job_id FROM jobs WHERE job_title = \"IT Staff\"))"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            }
        ]
    },
    {
        "db_name": "college_1",
        "turns": [
            {
                "isuser": true,
                "text": "what is the first and last name of the profesor in biology department?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of  first and last names of the profesors in the department with name biology department",
                "query": "SELECT T3.EMP_FNAME ,  T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM  =  T3.EMP_NUM WHERE DEPT_NAME  =  \"Biology\"",
                "result": [
                    [
                        [
                            "EMP_FNAME",
                            "EMP_LNAME"
                        ],
                        [
                            "Van",
                            "Thieu"
                        ],
                        [
                            "George",
                            "Smithson"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.EMP_FNAME ,  T2.EMP_LNAME FROM PROFESSOR AS T1 JOIN EMPLOYEE AS T2 ON T1.EMP_NUM  =  T2.EMP_NUM WHERE T1.DEPT_CODE  =  'BIOL'"
            },
            {
                "isuser": true,
                "text": "how many employee in table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 37 employees",
                "query": "SELECT count(*) from employee",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            37
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM EMPLOYEE"
            },
            {
                "isuser": true,
                "text": "what is the highest professor extension in the table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the highest professor extension is 8665",
                "query": "SELECT max(prof_extension) from professor",
                "result": [
                    [
                        [
                            "max(prof_extension)"
                        ],
                        [
                            "8665"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT MAX(T1.PROF_EXTENSION) FROM PROFESSOR AS T1"
            },
            {
                "isuser": true,
                "text": "what is least employee number in the table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the least employee number is 100",
                "query": "SELECT min(emp_num) from Employee",
                "result": [
                    [
                        [
                            "min(emp_num)"
                        ],
                        [
                            100
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT MIN(T1.EMP_NUM) FROM EMPLOYEE AS T1"
            },
            {
                "isuser": true,
                "text": "thanks\n",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "customers_and_addresses",
        "turns": [
            {
                "isuser": true,
                "text": "List the names of all the customers that use email as a contact channel. ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of the customer names that use email as the contact channel.",
                "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'",
                "result": [
                    [
                        [
                            "customer_name"
                        ],
                        [
                            "Devin Mills"
                        ],
                        [
                            "Tillman Ernser"
                        ],
                        [
                            "Devin Mills"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_name FROM Customers AS T1 JOIN Customer_Contact_Channels AS T2 ON T1.customer_id = T2.customer_id WHERE T2.channel_code = \"Email\""
            },
            {
                "isuser": true,
                "text": "List the names of all the customers that use email as a contact channel and the date they became a member. \n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a table of the names of all the customers that use email as a contact channel and the date they became a member.",
                "query": "SELECT t1.customer_name, t1.date_became_customer FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'",
                "result": [
                    [
                        [
                            "customer_name",
                            "date_became_customer"
                        ],
                        [
                            "Devin Mills",
                            "2018-03-05 16:52:51"
                        ],
                        [
                            "Tillman Ernser",
                            "2018-02-28 11:37:44"
                        ],
                        [
                            "Devin Mills",
                            "2018-03-05 16:52:51"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_name ,  date_became_customer FROM Customers AS T1 JOIN Customer_Contact_Channels AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.channel_code  =  \"Email\""
            },
            {
                "isuser": true,
                "text": "Find the name and active to date of the customers that use email as the contact channel. ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a table of the names and active to date of the customers that use email as the contact channel. For example, Devin Mills was active to 2018-03-23 13:37:14.",
                "query": "SELECT t1.customer_name ,  t2.active_to_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'",
                "result": [
                    [
                        [
                            "customer_name",
                            "active_to_date"
                        ],
                        [
                            "Devin Mills",
                            "2018-03-23 13:37:14"
                        ],
                        [
                            "Tillman Ernser",
                            "2018-03-23 01:30:52"
                        ],
                        [
                            "Devin Mills",
                            "2018-03-13 07:32:25"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_name ,  active_to_date FROM Customers AS T1 JOIN Customer_Contact_Channels AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.channel_code  =  \"Email\""
            },
            {
                "isuser": true,
                "text": "What is the payment method of Devin Mills.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The payment method of the customer with name Devin Mills is Cheque.",
                "query": "SELECT DISTINCT t1.payment_method FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name = \"Devin Mills\"",
                "result": [
                    [
                        [
                            "payment_method"
                        ],
                        [
                            "Cheque"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT payment_method FROM Customers WHERE customer_name = \"Devin Mills\""
            },
            {
                "isuser": true,
                "text": "What is the customer id of Devin Mills. ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The customer ID of the customer with name Devin Mills is 9.",
                "query": "SELECT DISTINCT t1.customer_id FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name = \"Devin Mills\"",
                "result": [
                    [
                        [
                            "customer_id"
                        ],
                        [
                            9
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_id FROM Customers WHERE customer_name = \"Devin Mills\""
            },
            {
                "isuser": true,
                "text": "List the names of all the customers with the same payment method as Devin Mills. ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of names of all the customers with the same payment method as the customer with name Devin Mills.",
                "query": "SELECT DISTINCT t1.customer_name FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.payment_method = (SELECT DISTINCT t1.payment_method FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name = \"Devin Mills\")",
                "result": [
                    [
                        [
                            "customer_name"
                        ],
                        [
                            "Devin Mills"
                        ],
                        [
                            "Tillman Ernser"
                        ],
                        [
                            "Alexane Kilback"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_name FROM Customers WHERE payment_method = (SELECT payment_method FROM Customers WHERE customer_name = \"Devin Mills\")"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "baseball_1",
        "turns": [
            {
                "isuser": true,
                "text": "is there any games played in atlanta",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes. There are games played in Atlanta.",
                "query": "SELECT * from park where city = 'Atlanta'",
                "result": [
                    [
                        [
                            "park_id",
                            "park_name",
                            "park_alias",
                            "city",
                            "state",
                            "country"
                        ],
                        [
                            "ATL01",
                            "Atlanta-Fulton County Stadium",
                            "",
                            "Atlanta",
                            "GA",
                            "US"
                        ],
                        [
                            "ATL02",
                            "Turner Field",
                            "",
                            "Atlanta",
                            "GA",
                            "US"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "Do you want to know the number of games played in Atlanta?"
            },
            {
                "isuser": true,
                "text": "is there any games played in the year 2000",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes. There are games played in 2000.",
                "query": "SELECT * from home_game where year = 2000",
                "result": [
                    [
                        [
                            "year",
                            "league_id",
                            "team_id",
                            "park_id",
                            "span_first",
                            "span_last",
                            "games",
                            "openings",
                            "attendance"
                        ],
                        [
                            2000,
                            "AL",
                            "ANA",
                            "ANA01",
                            "2000-04-03",
                            "2000-10-01",
                            81,
                            81,
                            2066982
                        ],
                        [
                            2000,
                            "NL",
                            "ARI",
                            "PHO01",
                            "2000-04-04",
                            "2000-10-01",
                            81,
                            81,
                            2942251
                        ],
                        [
                            2000,
                            "NL",
                            "ATL",
                            "ATL02",
                            "2000-04-03",
                            "2000-10-01",
                            81,
                            81,
                            3234304
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM home_game WHERE year = 2000"
            },
            {
                "isuser": true,
                "text": "can you count the number of of games played in atlanta in 2000",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of games played in Atlanta in 2000 is 1.",
                "query": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM home_game WHERE year = 2000 AND park_id = 'ATL'"
            },
            {
                "isuser": true,
                "text": "thanks\n",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "customers_and_addresses",
        "turns": [
            {
                "isuser": true,
                "text": "what is the country of zip postcode 416?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The country of zip post code 416 is USA",
                "query": "SELECT \tcountry from Addresses where zip_postcode=416 ",
                "result": [
                    [
                        [
                            "country"
                        ],
                        [
                            "USA"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT country FROM Addresses WHERE zip_postcode = \"416\""
            },
            {
                "isuser": true,
                "text": "what is the city of south california",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The city of address in the state south carolina is New Sabryna",
                "query": "SELECT \tcity from Addresses where state_province_county=\"SouthCarolina\" ",
                "result": [
                    [
                        [
                            "city"
                        ],
                        [
                            "New Sabryna"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT city FROM Addresses WHERE state_province_county = \"California\" AND country = \"United States\""
            },
            {
                "isuser": true,
                "text": "what is the address content of colorando?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the address contents of address in state coloando.",
                "query": "SELECT address_content from Addresses where state_province_county=\"Colorado\" ",
                "result": [
                    [
                        [
                            "address_content"
                        ],
                        [
                            "9443 Boyle Route Suite 857"
                        ],
                        [
                            "826 Murray Locks Apt. 654"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT address_content FROM Addresses WHERE city = \"Colorado\""
            },
            {
                "isuser": true,
                "text": "what is the city of new jersey",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The city of new jersey is Reingertown",
                "query": "SELECT city from Addresses where state_province_county=\"NewJersey\" ",
                "result": [
                    [
                        [
                            "city"
                        ],
                        [
                            "Reingertown"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT city FROM Addresses WHERE state_province_county = \"New Jersey\""
            },
            {
                "isuser": true,
                "text": "list the city of country USA?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the table of the cities where country is USA. For example, they are Lucasville and New Sabryna",
                "query": "SELECT city from Addresses where country=\"USA\" ",
                "result": [
                    [
                        [
                            "city"
                        ],
                        [
                            "Lucasville"
                        ],
                        [
                            "New Sabryna"
                        ],
                        [
                            "Reingertown"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT city FROM Addresses WHERE country = \"USA\""
            },
            {
                "isuser": true,
                "text": "Thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "store_1",
        "turns": [
            {
                "isuser": true,
                "text": "What is the title, phone and hire date of Nancy Edwards?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the title, phone, and hire date of Nancy Edwards.",
                "query": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
                "result": [
                    [
                        [
                            "title",
                            "phone",
                            "hire_date"
                        ],
                        [
                            "Sales Manager",
                            "+1 (403) 262-3443",
                            "2002-05-01 00:00:00"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT title, phone, hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\""
            },
            {
                "isuser": true,
                "text": " what is the total number of employees?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 8 total employees.",
                "query": "SELECT count(*) FROM employees",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM employees"
            },
            {
                "isuser": true,
                "text": "what is the first name of gentral manager?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "I cannot find \"gentral manager\" in the table. Did you mean general manager?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT first_name FROM employees WHERE title = \"General Manager\""
            },
            {
                "isuser": true,
                "text": "yes that is the general manager?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The first name of the general manager is Andrew.",
                "query": "SELECT first_name FROM employees WHERE title=\"General Manager\"",
                "result": [
                    [
                        [
                            "first_name"
                        ],
                        [
                            "Andrew"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name FROM employees WHERE title = \"General Manager\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You're welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "flight_company",
        "turns": [
            {
                "isuser": true,
                "text": "What is the most common type?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The most common company type is Subsidiary.",
                "query": "SELECT TYPE FROM operate_company GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Type"
                        ],
                        [
                            "Subsidiary"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Type FROM operate_company GROUP BY Type ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "And how many companies are there with this type?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 8 companies of type Subsidiary.",
                "query": "SELECT count(DISTINCT name) FROM operate_company WHERE Type = 'Subsidiary'",
                "result": [
                    [
                        [
                            "count(DISTINCT(name))"
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM operate_company WHERE Type = (SELECT Type FROM operate_company GROUP BY Type ORDER BY COUNT(*) DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "And how about the least common type of company?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The least common company type is Corporate.",
                "query": "SELECT TYPE FROM operate_company GROUP BY TYPE ORDER BY count(*) ASC LIMIT 1",
                "result": [
                    [
                        [
                            "Type"
                        ],
                        [
                            "Corporate"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Type FROM operate_company GROUP BY Type ORDER BY COUNT(*) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "inn_1",
        "turns": [
            {
                "isuser": true,
                "text": "Show me all the rooms.",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Here are the rooms with room names",
                "query": "SELECT * FROM rooms",
                "result": [
                    [
                        [
                            "RoomId",
                            "roomName",
                            "beds",
                            "bedType",
                            "maxOccupancy",
                            "basePrice",
                            "decor"
                        ],
                        [
                            "RND",
                            "Recluse and defiance",
                            1,
                            "King",
                            2,
                            150,
                            "modern"
                        ],
                        [
                            "IBS",
                            "Interim but salutary",
                            1,
                            "King",
                            2,
                            150,
                            "traditional"
                        ],
                        [
                            "AOB",
                            "Abscond or bolster",
                            2,
                            "Queen",
                            4,
                            175,
                            "traditional"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT roomName FROM Rooms"
            },
            {
                "isuser": true,
                "text": "which one of these rooms has reservations?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the rooms with reservations",
                "query": "SELECT * FROM rooms WHERE roomid IN (SELECT DISTINCT room FROM reservations)",
                "result": [
                    [
                        [
                            "RoomId",
                            "roomName",
                            "beds",
                            "bedType",
                            "maxOccupancy",
                            "basePrice",
                            "decor"
                        ],
                        [
                            "AOB",
                            "Abscond or bolster",
                            2,
                            "Queen",
                            4,
                            175,
                            "traditional"
                        ],
                        [
                            "CAS",
                            "Convoke and sanguine",
                            2,
                            "King",
                            4,
                            175,
                            "traditional"
                        ],
                        [
                            "FNA",
                            "Frugal not apropos",
                            2,
                            "King",
                            4,
                            250,
                            "traditional"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT roomName FROM Rooms WHERE RoomId IN (SELECT Room FROM Reservations)"
            },
            {
                "isuser": true,
                "text": "What about the rooms which do not have reservations?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the rooms which do not have reservations",
                "query": "SELECT * FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)",
                "result": [
                    [
                        [
                            "RoomId",
                            "roomName",
                            "beds",
                            "bedType",
                            "maxOccupancy",
                            "basePrice",
                            "decor"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT roomName FROM Rooms WHERE RoomId NOT IN (SELECT Room FROM Reservations)"
            },
            {
                "isuser": true,
                "text": "Can you tell me show me the total number of these rooms?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "the total number of rooms that do not have reservations is 0",
                "query": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Rooms WHERE RoomId NOT IN (SELECT Room FROM Reservations)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "car_1",
        "turns": [
            {
                "isuser": true,
                "text": "What is the average horsepower?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the average horsepower.",
                "query": "SELECT avg(Horsepower) FROM cars_data",
                "result": [
                    [
                        [
                            "avg(Horsepower)"
                        ],
                        [
                            103.5295566502463
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(Horsepower) FROM CARS_DATA"
            },
            {
                "isuser": true,
                "text": "Which car has the largest horsepower?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the id of the car with largest horsepower.",
                "query": "SELECT Id FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Id"
                        ],
                        [
                            39
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Model, Horsepower FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the accelerate of car 39?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the acceleration of car id 39",
                "query": "SELECT accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Accelerate"
                        ],
                        [
                            19.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Accelerate FROM CARS_DATA WHERE Id = 39"
            },
            {
                "isuser": true,
                "text": "Which cars have an accelerate larger than 19.0?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 39 cars that have accelerate more than 19.0",
                "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  19.0",
                "result": [
                    [
                        [
                            "COUNT(*)"
                        ],
                        [
                            39
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Model FROM CARS_DATA WHERE Accelerate > 19.0"
            }
        ]
    },
    {
        "db_name": "gas_company",
        "turns": [
            {
                "isuser": true,
                "text": "Show all locations and the number of gas stations in each location ordered by the count, please?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are all locations and the number of gas stations in each location ordered by the count",
                "query": "SELECT LOCATION ,  count(*) FROM gas_station GROUP BY LOCATION ORDER BY count(*)",
                "result": [
                    [
                        [
                            "Location",
                            "count(*)"
                        ],
                        [
                            "Channel Hill",
                            1
                        ],
                        [
                            "Hennry Hill",
                            1
                        ],
                        [
                            "Herne Ave",
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT LOCATION ,  COUNT(*) FROM gas_station GROUP BY LOCATION ORDER BY COUNT(*) DESC"
            },
            {
                "isuser": true,
                "text": "What is the name of the location that has more than one gas station?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is no such location that has more than one gas station.",
                "query": "SELECT LOCATION FROM gas_station GROUP BY LOCATION having count(*)  > 1",
                "result": [
                    [
                        [
                            "Location"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT LOCATION FROM gas_station GROUP BY LOCATION HAVING COUNT(*)  >  1"
            },
            {
                "isuser": true,
                "text": "What year was more than one gas station opened in?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There aren't any years during which more than one gas station was opened",
                "query": "SELECT open_year FROM gas_station GROUP BY open_year having count(*)  > 1",
                "result": [
                    [
                        [
                            "Open_Year"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Open_Year FROM gas_station GROUP BY Open_Year HAVING COUNT(*)  >  1"
            },
            {
                "isuser": true,
                "text": "Thanks! Have a great night!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "thanks. bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome! Goodbye!"
            }
        ]
    },
    {
        "db_name": "swimming",
        "turns": [
            {
                "isuser": true,
                "text": "Hello, are there any countries that have two or more stadiums?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The countries having two or more stadiums include Russia and Spain.",
                "query": "SELECT country FROM stadium group by country having count(*) >= 2",
                "result": [
                    [
                        [
                            "Country"
                        ],
                        [
                            "Russia"
                        ],
                        [
                            "Spain"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT country FROM stadium GROUP BY country HAVING count(*)  >=  2"
            },
            {
                "isuser": true,
                "text": "Do either have a stadium with a capacity greater than 60000?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes. Spain has a stadium with a capacity greater than 60000",
                "query": "SELECT country FROM stadium where capacity > 60000 group by country having count(*) >= 2 ",
                "result": [
                    [
                        [
                            "Country"
                        ],
                        [
                            "Spain"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT country FROM stadium WHERE capacity > 60000 GROUP BY country HAVING count(*)  >=  2"
            },
            {
                "isuser": true,
                "text": "Does Spain have a stadium with a capacity less than 50000?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "No it does not. Here is information about the stadiums in Spain.",
                "query": "SELECT * FROM stadium where country = \"Spain\"",
                "result": [
                    [
                        [
                            "ID",
                            "name",
                            "Capacity",
                            "City",
                            "Country",
                            "Opening_year"
                        ],
                        [
                            1,
                            "Nou Mestalla",
                            75000,
                            "Valencia",
                            "Spain",
                            2004
                        ],
                        [
                            4,
                            "Estadio La Peineta",
                            67500,
                            "Madrid",
                            "Spain",
                            2005
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT country FROM stadium WHERE capacity < 50000 GROUP BY country HAVING count(*)  >=  2"
            },
            {
                "isuser": true,
                "text": "What countries have a stadium with a copacity greather than 60000?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the countries having stadiums with a capacity greater than 60000.",
                "query": "SELECT distinct country FROM stadium WHERE capacity  >  60000",
                "result": [
                    [
                        [
                            "Country"
                        ],
                        [
                            "Spain"
                        ],
                        [
                            "Russia"
                        ],
                        [
                            "Azerbaijan"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT country FROM stadium WHERE capacity > 60000 GROUP BY country HAVING count(*)  >=  2"
            },
            {
                "isuser": true,
                "text": "Do any of these also have staduims with a capacity of less than 50000?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes. Russia also have stadiums with a capacity of less than 50000",
                "query": "SELECT country FROM stadium WHERE capacity  >  60000 INTERSECT SELECT country FROM stadium WHERE capacity  <  50000",
                "result": [
                    [
                        [
                            "Country"
                        ],
                        [
                            "Russia"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT country FROM stadium WHERE capacity < 50000 GROUP BY country HAVING count(*)  >=  2"
            },
            {
                "isuser": true,
                "text": "Thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "school_bus",
        "turns": [
            {
                "isuser": true,
                "text": "Can you show me the number of drivers who are from Hartford City?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of drivers from Hartford City is 6.",
                "query": "SELECT count(*) FROM driver WHERE home_city  =  'Hartford' ",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM driver WHERE home_city = \"Hartford\""
            },
            {
                "isuser": true,
                "text": "Oh, I want the names of the drivers.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names of the drivers from Hartford city are listed.",
                "query": "SELECT name FROM driver WHERE home_city  =  'Hartford' ",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Matthew Ritter"
                        ],
                        [
                            "Minnie Gonzalez"
                        ],
                        [
                            "Angel Acre"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM driver WHERE home_city = \"Hartford\""
            },
            {
                "isuser": true,
                "text": "Hmm, please show me names of the drivers who are younger than 40.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names of the drivers who are younger than 40 are listed.",
                "query": "SELECT name FROM driver WHERE age  <  40",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Dan Carter"
                        ],
                        [
                            "Douglas McCrory"
                        ],
                        [
                            "Timothy Ackert"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM driver WHERE age < 40"
            },
            {
                "isuser": true,
                "text": "Can you count the number of drivers who are from Hartford City or younger than 40?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of drivers who are from Hartford City or younger than 40 is 11.",
                "query": "SELECT count(*) FROM driver WHERE home_city  =  'Hartford' OR age  <  40",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            11
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM driver WHERE home_city = \"Hartford\" OR age < 40"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "shop_membership",
        "turns": [
            {
                "isuser": true,
                "text": "show the minimum amount of memberships for all branches opened in 2011 or located at city location",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the minimum amount of memberships for all branches opened in 2011 or located at city  is 11",
                "query": "SELECT min(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'",
                "result": [
                    [
                        [
                            "min(membership_amount)"
                        ],
                        [
                            "11"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT min(membership_amount) FROM branch WHERE open_year  =  '2011' OR city  =  'city'"
            },
            {
                "isuser": true,
                "text": "show the maximum amount of memberships for all branches opened in 2011 or located at city location",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the maximum amount of memberships is 91",
                "query": "SELECT max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'",
                "result": [
                    [
                        [
                            "max(membership_amount)"
                        ],
                        [
                            "91"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(membership_amount) FROM branch WHERE open_year  =  '2011' OR city  =  'city'"
            },
            {
                "isuser": true,
                "text": "thanks\n",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome,goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "hr_1",
        "turns": [
            {
                "isuser": true,
                "text": "display the emails of the employees who have no commission percentage and salary within the range 7000 to 12000 and works in that department which number is 50. ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The table shows the emails of the employees who have no commission percentage and salary within the range 7000 to 12000 and works in that department which number is 50.",
                "query": "SELECT email FROM employees WHERE commission_pct  =  \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50",
                "result": [
                    [
                        [
                            "EMAIL"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT email FROM employees WHERE commission_pct IS NULL AND salary BETWEEN 7000 AND 12000 AND department_id = 50"
            },
            {
                "isuser": true,
                "text": "display the emails of the employees who have no commission percentage",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The table shows the emails of the employees who have no commission percentage.",
                "query": "SELECT email FROM employees WHERE commission_pct = \"null\" ",
                "result": [
                    [
                        [
                            "EMAIL"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT email FROM employees WHERE commission_pct IS NULL"
            },
            {
                "isuser": true,
                "text": "display the emails of the employees who have a commission percentage",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean the employees who have commission percentage more than 0?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT email FROM employees WHERE commission_pct IS NOT NULL"
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The table shows the emails of the employees who have a commission percentage more than 0.",
                "query": "SELECT email FROM employees WHERE commission_pct > 0",
                "result": [
                    [
                        [
                            "EMAIL"
                        ],
                        [
                            "JRUSSEL"
                        ],
                        [
                            "KPARTNER"
                        ],
                        [
                            "AERRAZUR"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT email FROM employees WHERE commission_pct IS NOT NULL"
            },
            {
                "isuser": true,
                "text": "How many employees with salary above 12000 are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 6 employees with salary above 12000.",
                "query": "SELECT count(*) FROM employees WHERE salary >12000",
                "result": [
                    [
                        [
                            "number"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM employees WHERE salary > 12000"
            },
            {
                "isuser": true,
                "text": "List their names please",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean their FIRST NAME\tand LAST NAME?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT first_name, last_name FROM employees WHERE salary > 12000"
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The table shows the first name and last name of the employees with salary above 12000.",
                "query": "SELECT FIRST_NAME,LAST_NAME  FROM employees WHERE salary >12000",
                "result": [
                    [
                        [
                            "FIRST_NAME",
                            "LAST_NAME"
                        ],
                        [
                            "Steven",
                            "King"
                        ],
                        [
                            "Neena",
                            "Kochhar"
                        ],
                        [
                            "Lex",
                            "De Haan"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name, last_name FROM employees WHERE salary > 12000"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "wedding",
        "turns": [
            {
                "isuser": true,
                "text": "which females had a wedding in 2016?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of names of females who had a wedding in 2016.",
                "query": "SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  =  2016 AND T2.is_male  =  'F'",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Annie Mediate"
                        ],
                        [
                            "Joe O'Hair"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM people WHERE People_ID IN (SELECT Female_ID FROM wedding WHERE Year = 2016)"
            },
            {
                "isuser": true,
                "text": "which females in that list are from canada?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are no names of females who had a wedding in 2016 from Canada.",
                "query": "SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  =  2016 AND T2.is_male  =  'F' AND T2.country  =  'Canada'",
                "result": [
                    [
                        [
                            "Name"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM people WHERE People_ID IN (SELECT Female_ID FROM wedding WHERE Year = 2016) AND Country = \"Canada\""
            },
            {
                "isuser": true,
                "text": "who are the females in canada?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are no names of females from Canada.",
                "query": "SELECT name FROM people WHERE country = \"Canada\" AND is_male = \"F\"",
                "result": [
                    [
                        [
                            "Name"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM people WHERE Country = \"Canada\""
            },
            {
                "isuser": true,
                "text": "who got married in 2016?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of names of people who got married in 2016.",
                "query": "SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id OR T1.male_id = t2.people_id WHERE T1.year  =  2016",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Todd Hamilton"
                        ],
                        [
                            "Annie Mediate"
                        ],
                        [
                            "Lucas Glover"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM people WHERE People_ID IN (SELECT Female_ID FROM wedding WHERE Year = 2016)"
            },
            {
                "isuser": true,
                "text": "who in that list is from canada?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are no names of people who got married in 2016 from Canada.",
                "query": "SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id OR T1.male_id = t2.people_id WHERE T1.year  =  2016 AND t2.country = \"Canada\"",
                "result": [
                    [
                        [
                            "Name"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM people WHERE People_ID IN (SELECT Female_ID FROM wedding WHERE Year = 2016) AND Country = \"Canada\""
            },
            {
                "isuser": true,
                "text": "thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "storm_record",
        "turns": [
            {
                "isuser": true,
                "text": "What are the names of storms which don't have affected region in record?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names of storm which don't have affected region in the record are listed.",
                "query": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Two"
                        ],
                        [
                            "Six"
                        ],
                        [
                            "Seven"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)"
            },
            {
                "isuser": true,
                "text": "What is the number of city affected for storm with name two?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "None of city was affected by the storm named Two.",
                "query": "SELECT Number_city_affected from affected_region where storm_id = (select storm_id from storm where Name='Two')",
                "result": [
                    [
                        [
                            "Number_city_affected"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT number_city_affected FROM affected_region WHERE storm_id = 2"
            },
            {
                "isuser": true,
                "text": "What is storm name two storm ID?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The storm id of the storm named Two is 2.",
                "query": "SELECT Storm_id from storm where name ='Two'",
                "result": [
                    [
                        [
                            "Storm_ID"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT storm_id FROM storm WHERE name = \"two\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "network_2",
        "turns": [
            {
                "isuser": true,
                "text": "How many persons are on the list?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are  4 persons are on the list",
                "query": "SELECT count(*) FROM Person ",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM PersonFriend"
            },
            {
                "isuser": true,
                "text": "Who is the least aged person on the list?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Alice is the youngest  person on the list",
                "query": "SELECT name FROM Person order  by age limit 1",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Alice"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM PersonFriend ORDER BY age ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "How many people whose age is greater 30 and job is engineer?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are one people age is greater 30 and job is engineer",
                "query": "SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM PersonFriend WHERE age > 30 AND job = 'engineer'"
            },
            {
                "isuser": true,
                "text": "How many female people are on the list?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are 2  female people  on the list",
                "query": "SELECT count(*) FROM Person WHERE \tgender='female'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM PersonFriend WHERE gender = 'female'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome,goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "farm",
        "turns": [
            {
                "isuser": true,
                "text": "What is the population of city Id 2?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the population of the city with Id 2 is 1778",
                "query": "SELECT population FROM city WHERE City_ID = 2",
                "result": [
                    [
                        [
                            "Population"
                        ],
                        [
                            1778.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Population FROM city WHERE City_ID == 2"
            },
            {
                "isuser": true,
                "text": "What is the census ranking of Perth-Andover?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the census ranking of Perth-Andover is 1442 of 5,008",
                "query": "SELECT census_ranking FROM city WHERE official_name = \"Perth-Andover\"",
                "result": [
                    [
                        [
                            "Census_Ranking"
                        ],
                        [
                            "1442 of 5,008"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Census_Ranking FROM city WHERE Official_Name == \"Perth-Andover\""
            },
            {
                "isuser": true,
                "text": "What is the name of hosts of Carnival M is back?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the name of the hosts of the theme Carnival M is back are Miley Cyrus Jared Leto and Karen Mok",
                "query": "SELECT hosts FROM farm_competition WHERE Theme like \"%Carnival M is back%\" ",
                "result": [
                    [
                        [
                            "Hosts"
                        ],
                        [
                            "Miley Cyrus Jared Leto and Karen Mok"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Hosts FROM farm_competition WHERE Competition_ID == 2"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "insurance_fnol",
        "turns": [
            {
                "isuser": true,
                "text": "What are all the policy types of the customer that has the most policies listed?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the policy types of the customer that has the most policies listed.",
                "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)",
                "result": [
                    [
                        [
                            "policy_type_code"
                        ],
                        [
                            "Mortgage Insurance"
                        ],
                        [
                            "Property Insurance"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the name of the customer?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Jay chou is the name of the customer that has the most policies listed",
                "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Customer_name"
                        ],
                        [
                            "Jay Chou"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_name FROM customers WHERE customer_id IN (SELECT customer_id FROM customers_policies GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "what is the phone number for life insurance?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are phone numbers of policies whose policy type code is life insurance",
                "query": "SELECT customer_phone FROM  available_policies WHERE policy_type_code = \"Life Insurance\"",
                "result": [
                    [
                        [
                            "Customer_Phone"
                        ],
                        [
                            "+16(2)5838999222"
                        ],
                        [
                            "991.642.6485x822"
                        ],
                        [
                            "889-572-0609x552"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_phone FROM available_policies WHERE policy_type_code = \"Life Insurance\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "assets_maintenance",
        "turns": [
            {
                "isuser": true,
                "text": "Which gender makes up the majority of the staff?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the  gender that makes up the majority of the staff is 1",
                "query": "SELECT gender FROM staff GROUP BY gender ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "gender"
                        ],
                        [
                            "1"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT gender FROM Staff GROUP BY gender ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "how many staff are gender 1?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are 8 staff whose gender is 1",
                "query": "select count(*) from staff where gender = 1",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Staff WHERE gender = 1"
            },
            {
                "isuser": true,
                "text": "how many staff are not gender 1?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are 7 staff whose gender is not 1",
                "query": "select count(*) from staff where gender != 1",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Staff WHERE gender != 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "scientist_1",
        "turns": [
            {
                "isuser": true,
                "text": "Fine the name of the project for which a scientist whose name contains \"Smith\" is assigned to.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of the projects for which a scientist whose name contains \"Smith\" is assigned to",
                "query": "SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%'",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Build Your Own Telescope"
                        ],
                        [
                            "Build Your Own Telescope"
                        ],
                        [
                            "Aerodynamics and Gas Mileage"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.SSN WHERE T2.name LIKE '%Smith%'"
            },
            {
                "isuser": true,
                "text": "What is the first name of \"Smith\"",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the full names of the scientists whose name contains ‘Smith’",
                "query": "SELECT name from scientists WHERE name LIKE '%Smith%'",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Carol Smith"
                        ],
                        [
                            "David Smith"
                        ],
                        [
                            "Eric Goldsmith"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM scientists WHERE name LIKE '%Smith%'"
            },
            {
                "isuser": true,
                "text": "Which \"Smith\" is working on Aerodynamics and Gas Mileage project?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Here are the names of the scientists working on the project Aerodynamics and Gas Mileage. ",
                "query": "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.name = \"Aerodynamics and Gas Mileage\"",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Anand Manikutty"
                        ],
                        [
                            "Eric Goldsmith"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.SSN WHERE T1.project  =  'Aerodynamics and Gas Mileage' AND T2.name LIKE '%Smith%'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "document_management",
        "turns": [
            {
                "isuser": true,
                "text": "can you please list the document types with the count of document structure code?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The result shows the document type and the count of document structure code for each document type.",
                "query": "SELECT count(document_structure_code), document_type_code FROM documents GROUP BY document_type_code",
                "result": [
                    [
                        [
                            "count(document_structure_code)",
                            "document_type_code"
                        ],
                        [
                            4,
                            "Advertisement"
                        ],
                        [
                            5,
                            "Book"
                        ],
                        [
                            3,
                            "CV"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_type_code ,  count(*) FROM documents GROUP BY document_type_code"
            },
            {
                "isuser": true,
                "text": "can you filter out the results where count less than 4 and only show more than 4\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The result shows the document type and the count of document structure code for the document type with more than 4 documents.",
                "query": "SELECT count(document_structure_code), document_type_code FROM documents GROUP BY document_type_code HAVING count(*) > 4",
                "result": [
                    [
                        [
                            "count(document_structure_code)",
                            "document_type_code"
                        ],
                        [
                            5,
                            "Book"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_type_code ,  count(*) FROM documents GROUP BY document_type_code HAVING count(*)  >  4"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "shop_membership",
        "turns": [
            {
                "isuser": true,
                "text": "Could you please show the membership level with the greatest number of members?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the membership level with the greatest number of members is 6.",
                "query": "SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Level"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What are the member ids of the people who have that membership level?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the member ids of the people who have the membership level with the greatest number of members.",
                "query": "select Member_ID from member where level in (SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1)",
                "result": [
                    [
                        [
                            "Member_ID"
                        ],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT member_id FROM member WHERE LEVEL = 1"
            },
            {
                "isuser": true,
                "text": "What are their names, please?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the list of the names of the people who have the membership level with the greatest number of members",
                "query": "select Name from member where level in (SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1)",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Jeremy Jarmon"
                        ],
                        [
                            "Myron Pryor"
                        ],
                        [
                            "Corey Peters"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM member WHERE LEVEL = 1"
            },
            {
                "isuser": true,
                "text": "What about the membership level with the least number of members?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the membership level with the least number of members is 2.",
                "query": "SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) ASC LIMIT 1",
                "result": [
                    [
                        [
                            "Level"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY COUNT(*) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What are the member ids of the people who have that membership level?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list of the member ids of the people who have the membership level with the least number of members.",
                "query": "select member_id from member where level in (SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) ASC LIMIT 1)",
                "result": [
                    [
                        [
                            "Member_ID"
                        ],
                        [
                            10
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT member_id FROM member WHERE LEVEL = 1"
            },
            {
                "isuser": true,
                "text": "What is their name, please?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here we show the names of the people who have the membership level with the least number of members.",
                "query": "select name from member where level in (SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) ASC LIMIT 1)",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Matt Lentz"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM member WHERE LEVEL = 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure! Bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "cre_Docs_and_Epenses",
        "turns": [
            {
                "isuser": true,
                "text": "Could you please show me the ids of the projects with at least 2 documents?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Sure. Here are the ids of the projects with at least 2 documents.",
                "query": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2",
                "result": [
                    [
                        [
                            "Project_ID"
                        ],
                        [
                            30
                        ],
                        [
                            35
                        ],
                        [
                            105
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2"
            },
            {
                "isuser": true,
                "text": "What about those with at least 3 documents?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the ids of the projects with at least 3 documents. ",
                "query": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  3",
                "result": [
                    [
                        [
                            "Project_ID"
                        ],
                        [
                            30
                        ],
                        [
                            35
                        ],
                        [
                            105
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  3"
            },
            {
                "isuser": true,
                "text": "What are the dates of those, please?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the ids of the projects and document dates for projects with at least 3 documents.",
                "query": "SELECT project_id,Document_Date FROM Documents GROUP BY project_id HAVING count(*)  >=  3",
                "result": [
                    [
                        [
                            "Project_ID",
                            "Document_Date"
                        ],
                        [
                            30,
                            "1970-03-06 07:34:49"
                        ],
                        [
                            35,
                            "2005-10-28 03:17:16"
                        ],
                        [
                            105,
                            "1976-05-06 12:56:12"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_date FROM Documents WHERE project_id IN (SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  3)"
            },
            {
                "isuser": true,
                "text": "What are the dates of the projects with at least 2 documents, please?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the projects of documents, not projects, right?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT document_date FROM Documents WHERE project_id IN (SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2)"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "OK. Here are the dates for all documents for projects with at least 3 documents.",
                "query": "select document_date from documents where project_id in (SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  3)",
                "result": [
                    [
                        [
                            "Document_Date"
                        ],
                        [
                            "2004-08-28 06:59:19"
                        ],
                        [
                            "2012-12-27 19:09:18"
                        ],
                        [
                            "1981-11-29 10:23:01"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_date FROM Documents WHERE project_id IN (SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2)"
            },
            {
                "isuser": true,
                "text": "What are the project ids of those?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the project ids for projects with at least 3 documents.",
                "query": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  3",
                "result": [
                    [
                        [
                            "Project_ID"
                        ],
                        [
                            30
                        ],
                        [
                            35
                        ],
                        [
                            105
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT project_id FROM Documents WHERE project_id IN (SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure. Bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "department_store",
        "turns": [
            {
                "isuser": true,
                "text": "what is the date assigned to of the department managers?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the dates assigned to the department managers",
                "query": "select \tdate_assigned_to from  Staff_Department_Assignments where job_title_code = 'Department Manager'",
                "result": [
                    [
                        [
                            "date_assigned_to"
                        ],
                        [
                            "2018-03-23 21:59:11"
                        ],
                        [
                            "2018-03-24 09:11:14"
                        ],
                        [
                            "2018-03-25 09:53:37"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT date_assigned_to FROM staff_department_assignments WHERE job_title_code = 'Department Manager'"
            },
            {
                "isuser": true,
                "text": "list the name of staff who has been assigned multiple jobs?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the  names of staff who has been assigned multiple jobs",
                "query": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1",
                "result": [
                    [
                        [
                            "staff_name"
                        ],
                        [
                            "Malika"
                        ],
                        [
                            "Tyson"
                        ],
                        [
                            "Vito"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT staff_name FROM staff WHERE staff_id IN (SELECT staff_id FROM staff_department_assignments GROUP BY staff_id HAVING count(*)  >  1)"
            },
            {
                "isuser": true,
                "text": "what is the date assigned from sales person?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the date assigned from sales person",
                "query": "select date_assigned_from from Staff_Department_Assignments where \tjob_title_code = 'Sales Person'",
                "result": [
                    [
                        [
                            "date_assigned_from"
                        ],
                        [
                            "2017-12-18 19:12:15"
                        ],
                        [
                            "2016-09-20 02:59:15"
                        ],
                        [
                            "2016-11-12 14:10:55"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT date_assigned_from FROM staff_department_assignments WHERE job_title_code = 'Sales Person'"
            },
            {
                "isuser": true,
                "text": "thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "tracking_orders",
        "turns": [
            {
                "isuser": true,
                "text": "Can you show me the invoice numbers which are created before 1989-09-03?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The result table of the invoice numbers which are created before 1989-09-03 is shown.",
                "query": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" ",
                "result": [
                    [
                        [
                            "invoice_number"
                        ],
                        [
                            4
                        ],
                        [
                            5
                        ],
                        [
                            9
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT invoice_number FROM invoices WHERE invoice_date < '1989-09-03'"
            },
            {
                "isuser": true,
                "text": "What about the invoice numbers which are created after 2007-12-25?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The invoice numbers which are created after 2007-12-25 are listed.",
                "query": "SELECT invoice_number FROM invoices WHERE invoice_date > \"2007-12-25\"",
                "result": [
                    [
                        [
                            "invoice_number"
                        ],
                        [
                            6
                        ],
                        [
                            8
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT invoice_number FROM invoices WHERE invoice_date > '2007-12-25'"
            },
            {
                "isuser": true,
                "text": "Hmm, can you list the invoice numbers which are created before 1989-09-03 or after 2007-12-25?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The invoice numbers which are created before 1989-09-03 or after 2007-12-25 are listed.",
                "query": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
                "result": [
                    [
                        [
                            "invoice_number"
                        ],
                        [
                            4
                        ],
                        [
                            5
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT invoice_number FROM invoices WHERE invoice_date < '1989-09-03' OR invoice_date > '2007-12-25'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "flight_1",
        "turns": [
            {
                "isuser": true,
                "text": "Show names for all employees with a salary greater than average",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The following table shows names for all employees with a salary greater than average.",
                "query": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "James Smith"
                        ],
                        [
                            "Mary Johnson"
                        ],
                        [
                            "John Williams"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM employee WHERE salary  >  (SELECT avg(salary) FROM employee)"
            },
            {
                "isuser": true,
                "text": "Great, could you tell me the average salary?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average salary is 109915.3870967742.",
                "query": "SELECT avg(salary) FROM Employee",
                "result": [
                    [
                        [
                            "avg(salary)"
                        ],
                        [
                            109915.3870967742
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(salary) FROM employee"
            },
            {
                "isuser": true,
                "text": "Could you show me a list of employees with a salary less than the average?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The following table shows names for all employees with a salary less than the average.",
                "query": "SELECT name FROM Employee WHERE salary  <  (SELECT avg(salary) FROM Employee)",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Larry West"
                        ],
                        [
                            "Michael Miller"
                        ],
                        [
                            "Patricia Jones"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM employee WHERE salary  <  (SELECT avg(salary) FROM employee)"
            },
            {
                "isuser": true,
                "text": "how many employees earn above the average salary?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "13 employees earn above the average salary.",
                "query": "SELECT count(*) FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            13
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM employee WHERE salary  >  (SELECT avg(salary) FROM employee)"
            },
            {
                "isuser": true,
                "text": "how many earn below the average?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "18 employees earn below the average salary.",
                "query": "SELECT count(*) FROM Employee WHERE salary  <  (SELECT avg(salary) FROM Employee)",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            18
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM employee WHERE salary  <  (SELECT avg(salary) FROM employee)"
            },
            {
                "isuser": true,
                "text": "Thanks!\n",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "phone_market",
        "turns": [
            {
                "isuser": true,
                "text": "Show the names of phones and the districts of markets they are on, in ascending order of the ranking of the market.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of the names of phones and the districts of markets they are on, in ascending order of the ranking of the market. For example, IPhone 5s has a district of Alberta.",
                "query": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID ORDER BY T2.Ranking",
                "result": [
                    [
                        [
                            "Name",
                            "District"
                        ],
                        [
                            "IPhone 5s",
                            "Alberta"
                        ],
                        [
                            "IPhone 7",
                            "Alberta"
                        ],
                        [
                            "IPhone 5s",
                            "Ontario"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Name ,  T1.District FROM market AS T1 JOIN phone_market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T2.Phone_ID  =  T3.Phone_ID ORDER BY T1.Ranking ASC"
            },
            {
                "isuser": true,
                "text": "Which carriers are active in Alberta?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The carriers that are active in Alberta are Sprint and TMobile",
                "query": "SELECT T3.carrier FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID where T2.District = \"Alberta\"",
                "result": [
                    [
                        [
                            "Carrier"
                        ],
                        [
                            "Sprint"
                        ],
                        [
                            "TMobile"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T3.Carrier FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID WHERE T1.Market_ID = 2"
            },
            {
                "isuser": true,
                "text": "Where else is TMobile active?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The other districts in which TMobile is active are  British Columbia and Quebec.",
                "query": "SELECT T2.district FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID where T3.carrier = \"TMobile\" and T2.district != \"Alberta\"",
                "result": [
                    [
                        [
                            "District"
                        ],
                        [
                            "British Columbia"
                        ],
                        [
                            "British Columbia"
                        ],
                        [
                            "Quebec"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.District FROM market AS T1 JOIN phone_market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T2.Phone_ID = T3.Phone_ID WHERE T3.Carrier = 'TMobile' AND T1.Market_ID != 2"
            },
            {
                "isuser": true,
                "text": "And which phones do they support?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Here are the phones supported by TMobile",
                "query": "SELECT T3.name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID where T3.carrier = \"TMobile\"",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "IPhone 7"
                        ],
                        [
                            "IPhone 6s"
                        ],
                        [
                            "IPhone X"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T3.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID WHERE T1.Market_ID = 2"
            },
            {
                "isuser": true,
                "text": "Which phones does TMobile support?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " The phones that supported by  TMobile are IPhone 6s, IPhone 7, and IPhone X",
                "query": "SELECT name FROM phone where carrier = \"TMobile\"",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "IPhone 6s"
                        ],
                        [
                            "IPhone 7"
                        ],
                        [
                            "IPhone X"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T3.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID WHERE T1.Market_ID = 2 AND T3.Carrier = 'TMobile'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "university_basketball",
        "turns": [
            {
                "isuser": true,
                "text": "I want to know the number of public universities",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 4 universities whose affiliation is public.",
                "query": "SELECT count(*) FROM university WHERE affiliation = 'Public'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM university WHERE affiliation  =  'Public'"
            },
            {
                "isuser": true,
                "text": "Ok, What about the number of private universities?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "There is only one university whose affiliation is 'Private/Methodist'.",
                "query": "SELECT count(*) FROM university WHERE affiliation = 'Private/Methodist'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM university WHERE affiliation  =  'Private'"
            },
            {
                "isuser": true,
                "text": "I want to know the number of public universities with over 20000 enrollment size.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 2 universities whose affiliation is public and enrollment is higher than 20000.",
                "query": "SELECT count(*) FROM university WHERE affiliation = 'Public' and enrollment > 20000",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM university WHERE affiliation  =  'Public' AND enrollment  >  20000"
            },
            {
                "isuser": true,
                "text": "Are there private universities with over 20000 enrollment size?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "no, there is no university whose affiliation is 'Private/Methodist' and enrollment is higher than 20000.",
                "query": "SELECT count(*) FROM university WHERE affiliation = 'Private/Methodist' and enrollment > 20000",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM university WHERE affiliation  =  'Private' AND enrollment  >  20000"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "entertainment_awards",
        "turns": [
            {
                "isuser": true,
                "text": "Which festival name  was nimonated for artwork?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "you want all of festival name was nimonated for artwork?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T1.Festival_Name FROM festival_detail AS T1 JOIN nomination AS T2 ON T1.Festival_ID = T2.Festival_ID JOIN artwork AS T3 ON T2.Artwork_ID = T3.Artwork_ID WHERE T3.Type = 'Painting'"
            },
            {
                "isuser": true,
                "text": "Yes ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "this shows all of  festival name was nimonated for artwork",
                "query": "SELECT distinct T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID",
                "result": [
                    [
                        [
                            "Festival_Name"
                        ],
                        [
                            "Flower Awards"
                        ],
                        [
                            "Panasonic Awards"
                        ],
                        [
                            "LA Awards"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Festival_Name FROM festival_detail AS T1 JOIN nomination AS T2 ON T1.Festival_ID = T2.Festival_ID JOIN artwork AS T3 ON T2.Artwork_ID = T3.Artwork_ID WHERE T3.Type = 'Painting'"
            },
            {
                "isuser": true,
                "text": "What was LA awards  num of audience?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "sorry,i dont have the anwser to your question",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T1.Num_of_Audience FROM festival_detail AS T1 WHERE T1.Festival_Name = \"LA awards\""
            },
            {
                "isuser": true,
                "text": "Which festival name was associated with program talent show?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "LA Awards was associated with program talent show",
                "query": "SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T2.Type  =  \"Program Talent Show\"",
                "result": [
                    [
                        [
                            "Festival_Name"
                        ],
                        [
                            "LA Awards"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Festival_Name FROM festival_detail AS T1 JOIN nomination AS T2 ON T1.Festival_ID = T2.Festival_ID JOIN artwork AS T3 ON T2.Artwork_ID = T3.Artwork_ID WHERE T3.Type = 'Program Talent Show'"
            },
            {
                "isuser": true,
                "text": "What was the location of LA awards?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the location of LA awards is United States",
                "query": "SELECT Location from festival_detail where Festival_Name='LA Awards'",
                "result": [
                    [
                        [
                            "Location"
                        ],
                        [
                            "United States"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Location FROM festival_detail AS T1 WHERE T1.Festival_Name = \"LA awards\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome,goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "scientist_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many number if scientist belong to project AeH1",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is 1 scientist belong to project with code AeH1",
                "query": "SELECT count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project where T1.Code=\"AeH1\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM assignedto WHERE project = 'AeH1'"
            },
            {
                "isuser": true,
                "text": "How about project Ast3, how many scientists?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 3 scientists working on project Ast3.",
                "query": "SELECT count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project where T1.Code=\"Ast3\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM assignedto WHERE project = 'Ast3'"
            },
            {
                "isuser": true,
                "text": "How about project AeH3",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 2 scientists assigned to project AeH3.",
                "query": "SELECT count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project where T1.Code=\"AeH3\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM assignedto WHERE project = 'AeH3'"
            }
        ]
    },
    {
        "db_name": "news_report",
        "turns": [
            {
                "isuser": true,
                "text": "What is the average attendance of all events?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the average attendance of all events.",
                "query": "SELECT avg(Event_Attendance) FROM event",
                "result": [
                    [
                        [
                            "avg(Event_Attendance)"
                        ],
                        [
                            2255.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(Event_Attendance) FROM event"
            },
            {
                "isuser": true,
                "text": "What is the maximum attendance of all events?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the max attendance of all events.",
                "query": "SELECT max(Event_Attendance) FROM event",
                "result": [
                    [
                        [
                            "max(Event_Attendance)"
                        ],
                        [
                            6650
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT MAX(Event_Attendance) FROM event"
            },
            {
                "isuser": true,
                "text": "What is the minimum attendance of all events?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the minimum attendance of all events.",
                "query": "SELECT min(Event_Attendance) FROM event",
                "result": [
                    [
                        [
                            "min(Event_Attendance)"
                        ],
                        [
                            225
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT MIN(Event_Attendance) FROM event"
            }
        ]
    },
    {
        "db_name": "concert_singer",
        "turns": [
            {
                "isuser": true,
                "text": "When was the Auditions concert?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "2014 is the year of the concert with a name Auditions.",
                "query": "SELECT year from concert where concert_name = \"Auditions\"",
                "result": [
                    [
                        [
                            "Year"
                        ],
                        [
                            "2014"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Year FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_ID  =  T2.concert_ID WHERE T1.concert_Name  =  \"Auditions\""
            },
            {
                "isuser": true,
                "text": "When was the Super bootcamp concert?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "2014 is the year of the concert with a name Super bootcamp",
                "query": "SELECT year from concert where concert_name = \"Super bootcamp\"",
                "result": [
                    [
                        [
                            "Year"
                        ],
                        [
                            "2014"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Year FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_ID  =  T2.concert_ID WHERE T1.concert_Name  =  \"Super bootcamp\""
            },
            {
                "isuser": true,
                "text": "When was the Home Visits concert?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "2015 is the year of the concert with a name Home Visits",
                "query": "SELECT year from concert where concert_name = \"Home Visits\"",
                "result": [
                    [
                        [
                            "Year"
                        ],
                        [
                            "2015"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Year FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_ID  =  T2.concert_ID WHERE T1.concert_Name  =  \"Home Visits\""
            },
            {
                "isuser": true,
                "text": "Were there any other concerts other than Auditions, Super bootcamp, and Home Visits in 2014 or 2015?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes. There are other concerts other than those with names of Auditions, Super bootcamp, and Home Visits in year 2014 or 2015",
                "query": "SELECT concert_name FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
                "result": [
                    [
                        [
                            "concert_Name"
                        ],
                        [
                            "Auditions"
                        ],
                        [
                            "Super bootcamp"
                        ],
                        [
                            "Home Visits"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Year FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_ID  =  T2.concert_ID WHERE T1.concert_Name NOT IN (\"Auditions\", \"Super bootcamp\", \"Home Visits\")"
            },
            {
                "isuser": true,
                "text": "How many concerts were there total in 2014 or 2015?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There were 6 concerts in year 2014 or 2015",
                "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM concert WHERE Year IN (2014, 2015)"
            },
            {
                "isuser": true,
                "text": "And how many concerts were there just in 2014?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There were 3 concerts in year 2014 ",
                "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM concert WHERE Year = 2014"
            },
            {
                "isuser": true,
                "text": "And how many were there in 2015?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There were 3 concerts in year 2015",
                "query": "SELECT count(*) FROM concert WHERE YEAR  =  2015",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM concert WHERE Year = 2015"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks. bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "machine_repair",
        "turns": [
            {
                "isuser": true,
                "text": "show names of technicians by order of quality rank of machine they are assigned from worst to best",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The result table of the names of the technicians in ascending order of the quality rank of the machine they are assigned is shown.",
                "query": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "John Brown"
                        ],
                        [
                            "Charlie Hollocher"
                        ],
                        [
                            "Joe Sewell"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.name FROM technician AS T1 JOIN repair_assignment AS T2 ON T1.technician_id = T2.technician_id JOIN machine AS T3 ON T2.machine_id = T3.machine_id ORDER BY T3.quality_rank ASC"
            },
            {
                "isuser": true,
                "text": "Which technician is the oldest?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the id of the oldest technician?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T1.name FROM technician AS T1 JOIN repair_assignment AS T2 ON T1.technician_id = T2.technician_id JOIN machine AS T3 ON T2.machine_id = T3.machine_id ORDER BY T1.age DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the Name of the oldest technician?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the oldest technician is Eddie Collins.",
                "query": "SELECT name from technician order by age DESC limit 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Eddie Collins"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.name FROM technician AS T1 JOIN repair_assignment AS T2 ON T1.technician_id = T2.technician_id JOIN machine AS T3 ON T2.machine_id = T3.machine_id ORDER BY T1.age DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the name of the Team with the most number of value points?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the Team with the most number of value points is Honda.",
                "query": "SELECT team from machine order by value_points DESC limit 1",
                "result": [
                    [
                        [
                            "Team"
                        ],
                        [
                            "Honda"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Team FROM machine AS T1 JOIN repair_assignment AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T2.technician_id = T3.technician_id GROUP BY T1.Team ORDER BY sum(T1.value_points) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What was the Making Year of the Machine series With the lowest quality rank?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The making year of the machine with the lowest quality rank is 1992.",
                "query": "SELECT Making_Year from machine order by  quality_rank limit 1",
                "result": [
                    [
                        [
                            "Making_Year"
                        ],
                        [
                            1992
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Making_Year FROM machine AS T1 JOIN repair_assignment AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T2.technician_id = T3.technician_id GROUP BY T1.Machine_series ORDER BY min(T1.quality_rank) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "ship_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many ships in this table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 9 ships in the table.",
                "query": "select count(*) from ship",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            9
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM ship"
            },
            {
                "isuser": true,
                "text": "How many captains in this table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 7 captains.",
                "query": "select count(*) from captain",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM captain"
            },
            {
                "isuser": true,
                "text": "Who is the most aged captain in this table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The most aged captain is the captain with id 6.",
                "query": "select Captain_id from captain order by age desc  limit 1",
                "result": [
                    [
                        [
                            "Captain_ID"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM captain WHERE age = (SELECT max(age) FROM captain)"
            },
            {
                "isuser": true,
                "text": "How many different ranks in this table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 3 different ranks for captain.",
                "query": "select count(distinct rank) from captain",
                "result": [
                    [
                        [
                            "count(distinct rank)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(DISTINCT rank) FROM captain"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "tracking_orders",
        "turns": [
            {
                "isuser": true,
                "text": "How many total orders do we have?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The total number of orders is 15.",
                "query": "SELECT count(*) FROM orders",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM orders"
            },
            {
                "isuser": true,
                "text": "What is the total number of customers?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the total number of customers is 15.",
                "query": "SELECT count(*) FROM customers",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM customers"
            },
            {
                "isuser": true,
                "text": "What are their customer id's?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of the customers' ids. For example, one of them is 1.",
                "query": "SELECT customer_id FROM customers",
                "result": [
                    [
                        [
                            "customer_id"
                        ],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_id FROM customers"
            },
            {
                "isuser": true,
                "text": "What was the amount of orders for the customer that had that most orders?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the number of orders for the customer that had that most orders is 3",
                "query": "SELECT count(*) FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM orders WHERE customer_id = (SELECT customer_id FROM orders GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "Which customer had 3 orders?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the information about the customers who have 3 orders.",
                "query": "SELECT t1.* FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id having count(*) = 3",
                "result": [
                    [
                        [
                            "customer_id",
                            "customer_name",
                            "customer_details"
                        ],
                        [
                            2,
                            "George",
                            "est"
                        ],
                        [
                            15,
                            "Jeramie",
                            "officia"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_name FROM customers WHERE customer_id IN (SELECT customer_id FROM orders GROUP BY customer_id HAVING count(*) = 3)"
            },
            {
                "isuser": true,
                "text": "So George and Jeramie are tied for the most orders?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes. George and Jeramie both have 3 orders.",
                "query": "SELECT t1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id having count(*) = 3",
                "result": [
                    [
                        [
                            "customer_name"
                        ],
                        [
                            "George"
                        ],
                        [
                            "Jeramie"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_name FROM customers WHERE customer_id IN (SELECT customer_id FROM orders GROUP BY customer_id HAVING count(*) = 3)"
            },
            {
                "isuser": true,
                "text": "What is the customer id for George?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the customer id for George is 2",
                "query": "SELECT customer_id FROM customers where customer_name = \"George\"",
                "result": [
                    [
                        [
                            "customer_id"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_id FROM customers WHERE customer_name = 'George'"
            },
            {
                "isuser": true,
                "text": "And for Jeramie?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the customer id for Jeramie is 15",
                "query": "SELECT customer_id FROM customers where customer_name = \"Jeramie\"",
                "result": [
                    [
                        [
                            "customer_id"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_id FROM customers WHERE customer_name = 'Jeramie'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "customers_card_transactions",
        "turns": [
            {
                "isuser": true,
                "text": "how many customers cards there",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 15 customers cards from the customers  cards  table ",
                "query": "SELECT count(*) from Customers_Cards",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Customers_Cards"
            },
            {
                "isuser": true,
                "text": "how many credit cards there",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 7 credit cards.",
                "query": "SELECT count(*) from Customers_Cards where card_type_code = \"Credit\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Customers_Cards WHERE card_type_code = 'Credit'"
            },
            {
                "isuser": true,
                "text": "how many debit cards there",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 8 debit cards.",
                "query": "SELECT count(*) from Customers_Cards where card_type_code = \"Debit\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Customers_Cards WHERE card_type_code = 'Debit'"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "products_gen_characteristics",
        "turns": [
            {
                "isuser": true,
                "text": "How many products have the characteristic named \"hot\"",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of products that have the characteristic name \"hot\" is 1.",
                "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Products AS T1 JOIN Product_Characteristics AS T2 ON T1.product_id  =  T2.product_id JOIN Characteristics AS T3 ON T2.characteristic_id  =  T3.characteristic_id WHERE T3.characteristic_name  =  \"hot\""
            },
            {
                "isuser": true,
                "text": "what is the name of the product with the characteristic \"hot\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the product with the characteristic name \"hot\" is lotus.",
                "query": "SELECT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"",
                "result": [
                    [
                        [
                            "product_name"
                        ],
                        [
                            "lotus"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.product_name FROM Products AS T1 JOIN Product_Characteristics AS T2 ON T1.product_id  =  T2.product_id JOIN Characteristics AS T3 ON T2.characteristic_id  =  T3.characteristic_id WHERE T3.characteristic_name  =  \"hot\""
            },
            {
                "isuser": true,
                "text": "what is the selling price of lotus?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The typical selling price of lotus is 63589.4054376.",
                "query": "SELECT t1.typical_selling_price FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"lotus\"",
                "result": [
                    [
                        [
                            "typical_selling_price"
                        ],
                        [
                            "63589.4054376"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.typical_selling_price FROM Products AS T1 WHERE T1.product_name  =  \"lotus\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "wta_1",
        "turns": [
            {
                "isuser": true,
                "text": "what are the names of the tourneys?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names of the different tourneys are shown in the result table. ",
                "query": "SELECT distinct tourney_name FROM matches ",
                "result": [
                    [
                        [
                            "tourney_name"
                        ],
                        [
                            "WTA Championships"
                        ],
                        [
                            "Auckland"
                        ],
                        [
                            "Brisbane"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT tourney_name FROM matches GROUP BY tourney_name ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "are there any tourneys that have more than 10 matches?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes, the names of the tourneys with more than 10 matches are shown in the result table. ",
                "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
                "result": [
                    [
                        [
                            "tourney_name"
                        ],
                        [
                            "Australian Open"
                        ],
                        [
                            "Cincinnati"
                        ],
                        [
                            "French Open"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10"
            },
            {
                "isuser": true,
                "text": "are these the tourneys with more than 10 matches?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes, the names of the tourneys with more than 10 matches are shown in the result table. ",
                "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
                "result": [
                    [
                        [
                            "tourney_name"
                        ],
                        [
                            "Australian Open"
                        ],
                        [
                            "Cincinnati"
                        ],
                        [
                            "French Open"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, good bye. ",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "behavior_monitoring",
        "turns": [
            {
                "isuser": true,
                "text": "Show the detention type code for the detention with id 1?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The detention type code of the detention with id 1 is AFTER.",
                "query": "SELECT T1.detention_type_code FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code where detention_id=1",
                "result": [
                    [
                        [
                            "detention_type_code"
                        ],
                        [
                            "AFTER"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.detention_type_code FROM Detention AS T1 WHERE T1.detention_id = 1"
            },
            {
                "isuser": true,
                "text": "Show the code and description of the least frequent detention type?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The code and description of the least frequent detention type are LUNCH and lunch-time respectively.",
                "query": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1",
                "result": [
                    [
                        [
                            "detention_type_code",
                            "detention_type_description"
                        ],
                        [
                            "LUNCH",
                            "Lunch-time"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Show the code and description of the most frequent detention type?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The code and description of the most frequent detention type are AFTER and After School respectively.",
                "query": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*)DESC LIMIT 1",
                "result": [
                    [
                        [
                            "detention_type_code",
                            "detention_type_description"
                        ],
                        [
                            "AFTER",
                            "After School"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "perpetrator",
        "turns": [
            {
                "isuser": true,
                "text": "How many perpetrators are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 5 perpetrators.",
                "query": "SELECT count(*) FROM perpetrator ",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM perpetrator"
            },
            {
                "isuser": true,
                "text": "What is the location for each perpetrator?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list that contains the locations of all perpetrator.",
                "query": "SELECT location FROM perpetrator ",
                "result": [
                    [
                        [
                            "Location"
                        ],
                        [
                            "Uiryeong"
                        ],
                        [
                            "Zhaodong"
                        ],
                        [
                            "Kaio"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT LOCATION FROM perpetrator"
            },
            {
                "isuser": true,
                "text": "Can you tell me the location of the perpetrator with the largest kills?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The location of the perpetrator with the largest kills is Uiryeong.",
                "query": "SELECT location FROM perpetrator order by Killed desc limit 1",
                "result": [
                    [
                        [
                            "Location"
                        ],
                        [
                            "Uiryeong"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT LOCATION FROM perpetrator ORDER BY KILLED DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "station_weather",
        "turns": [
            {
                "isuser": true,
                "text": "hi, what is the maximum low temperature at Amersham station?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The maximum low temperature at Amersham station is 55",
                "query": "SELECT max(t1.low_temperature) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id WHERE t2.network_name  =  \"Amersham\"",
                "result": [
                    [
                        [
                            "max(t1.low_temperature)"
                        ],
                        [
                            55
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "I'm sorry, I don't have access to real-time information and can't answer questions about current weather conditions."
            },
            {
                "isuser": true,
                "text": "on what day was it?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did  you  mean  the day of week in  weekly weather table ",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "I'm sorry, I don't have access to real-time information and can't answer questions about current weather conditions."
            },
            {
                "isuser": true,
                "text": "Yes, in what say was the maximum low temperature in Amersham station.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The day of  week   of   the maximum low temperature in Amersham station is \n\nTuesday",
                "query": "SELECT t1.day_of_week FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id WHERE t2.network_name  =  \"Amersham\" order by \tlow_temperature desc  limit 1",
                "result": [
                    [
                        [
                            "day_of_week"
                        ],
                        [
                            "Tuesday"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "I'm sorry, I don't have access to real-time information and can't answer questions about current weather conditions."
            },
            {
                "isuser": true,
                "text": "Can you tell me what is the average precipitation at the Amersham station?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average precipitation at the Amersham station is 42.857142857142854",
                "query": "SELECT avg(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id WHERE t2.network_name = \"Amersham\"",
                "result": [
                    [
                        [
                            "avg(t1.precipitation)"
                        ],
                        [
                            42.857142857142854
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "I'm sorry, I don't have access to real-time information and can't answer questions about current weather conditions."
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome  and  goodbye ",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "driving_school",
        "turns": [
            {
                "isuser": true,
                "text": "can you show me a list of lesson date?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the list of all lesson dates.",
                "query": "SELECT lesson_date FROM Lessons",
                "result": [
                    [
                        [
                            "lesson_date"
                        ],
                        [
                            "2018-02-28 10:55:36"
                        ],
                        [
                            "2018-03-07 16:12:36"
                        ],
                        [
                            "2018-03-03 15:10:16"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT lesson_date FROM Lessons"
            },
            {
                "isuser": true,
                "text": "what is the average of lesson time?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the average lesson time.",
                "query": "SELECT avg(lesson_time) FROM Lessons",
                "result": [
                    [
                        [
                            "avg(lesson_time)"
                        ],
                        [
                            5.666666666666667
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(lesson_time) FROM Lessons"
            },
            {
                "isuser": true,
                "text": "what is the highest price?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the highest price among lessons.",
                "query": "SELECT price FROM Lessons ORDER BY price DESC LIMIT 1",
                "result": [
                    [
                        [
                            "price"
                        ],
                        [
                            495.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(price) FROM Lessons"
            },
            {
                "isuser": true,
                "text": "how many lessons does customer with first name ray took?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "customer with first name ray took 2 lessons.",
                "query": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Ray\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Lessons WHERE customer_id IN (SELECT customer_id FROM Customers WHERE first_name = \"Ray\")"
            }
        ]
    },
    {
        "db_name": "bike_1",
        "turns": [
            {
                "isuser": true,
                "text": "what is the total duration of trips with bike id 636?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the sum of the duration of trips with bike id 636.",
                "query": "SELECT sum(duration) FROM trip WHERE bike_id  =  636",
                "result": [
                    [
                        [
                            "sum(duration)"
                        ],
                        [
                            21897
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT sum(duration) FROM trip WHERE bike_id = 636"
            },
            {
                "isuser": true,
                "text": "ok,what is the maximum duration of trip with bike id 636?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the maximum duration of the trip with bike id 636 is 1299",
                "query": "SELECT max(duration) FROM trip WHERE bike_id  =  636",
                "result": [
                    [
                        [
                            "max(duration)"
                        ],
                        [
                            1299
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(duration) FROM trip WHERE bike_id = 636"
            },
            {
                "isuser": true,
                "text": "ok,what is the maximum duration of trip with bike id 454?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the maximum duration of the trip with bike id 454 is 1507",
                "query": "SELECT max(duration) FROM trip WHERE bike_id  =  454",
                "result": [
                    [
                        [
                            "max(duration)"
                        ],
                        [
                            1507
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(duration) FROM trip WHERE bike_id = 454"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "college_3",
        "turns": [
            {
                "isuser": true,
                "text": "Full name of faculty id 1082?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "The full name of faculty ID 1082 is Giuliano Mark.",
                "query": "SELECT Lname, Fname FROM FACULTY WHERE FacID=1082",
                "result": [
                    [
                        [
                            "Lname",
                            "Fname"
                        ],
                        [
                            "Giuliano",
                            "Mark"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Fname, Lname FROM Faculty WHERE FacID = 1082"
            },
            {
                "isuser": true,
                "text": "Room and phone no. of id 1121?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The room and phone number of the faculty with id 1121 are 219 and 3593 respectively.",
                "query": "SELECT Room, Phone FROM FACULTY WHERE FacID=1121",
                "result": [
                    [
                        [
                            "Room",
                            "Phone"
                        ],
                        [
                            "219",
                            3593
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Room, Phone FROM Faculty WHERE FacID = 1121"
            },
            {
                "isuser": true,
                "text": "Provide the rooms of faculties with rank professor who live in building NEB?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The rooms of faculties with rank professor who live in building NE are listed in the table.",
                "query": "SELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\"",
                "result": [
                    [
                        [
                            "Room"
                        ],
                        [
                            "219"
                        ],
                        [
                            "224B"
                        ],
                        [
                            "220"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Room FROM Faculty WHERE Rank = 'Professor' AND Building = 'NEB'"
            },
            {
                "isuser": true,
                "text": "thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "twitter_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many tweets in this table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 8 tweets.",
                "query": "select count(*) from tweets",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM tweets"
            },
            {
                "isuser": true,
                "text": "How many user profiles in this table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 7 user profiles ",
                "query": "select count(*) from user_profiles",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM user_profiles"
            },
            {
                "isuser": true,
                "text": "What is the email id of Iron Man?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "ts@richest.com is the email of the user with name Iron Man.",
                "query": "select email from user_profiles where name = \"Iron Man\"",
                "result": [
                    [
                        [
                            "email"
                        ],
                        [
                            "ts@richest.com"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT email FROM user_profiles WHERE name = \"Iron Man\""
            },
            {
                "isuser": true,
                "text": "What is the text tweet of Iron Man?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the tweet texts tweeted by the user named Iron Man.",
                "query": "SELECT T2.text FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid where T1.name = \"Iron Man\"",
                "result": [
                    [
                        [
                            "text"
                        ],
                        [
                            "Hello I'm Tony Stark."
                        ],
                        [
                            "My company is hiring interns."
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT text FROM tweets WHERE uid = 2"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "document_management",
        "turns": [
            {
                "isuser": true,
                "text": "What documents types have more than 2 corresponding documents? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the documents types that have more than 2 corresponding documents.",
                "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2",
                "result": [
                    [
                        [
                            "document_type_code"
                        ],
                        [
                            "Advertisement"
                        ],
                        [
                            "Book"
                        ],
                        [
                            "CV"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2"
            },
            {
                "isuser": true,
                "text": "What is the document type for document name Learning English?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the document type for document name Learning English.",
                "query": "SELECT document_type_code FROM documents WHERE document_name = \"Learning English\"",
                "result": [
                    [
                        [
                            "document_type_code"
                        ],
                        [
                            "Book"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_type_code FROM documents WHERE document_name = \"Learning English\""
            },
            {
                "isuser": true,
                "text": "What documents types have more than 2 corresponding documents?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These documents types have more than 2 corresponding documents.",
                "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2",
                "result": [
                    [
                        [
                            "document_type_code"
                        ],
                        [
                            "Advertisement"
                        ],
                        [
                            "Book"
                        ],
                        [
                            "CV"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2"
            },
            {
                "isuser": true,
                "text": "List all the document name?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are all the document names.",
                "query": "SELECT document_name FROM documents",
                "result": [
                    [
                        [
                            "document_name"
                        ],
                        [
                            "Learning English"
                        ],
                        [
                            "Research about Art history"
                        ],
                        [
                            "Learning Database"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_name FROM documents"
            }
        ]
    },
    {
        "db_name": "machine_repair",
        "turns": [
            {
                "isuser": true,
                "text": "Hello!  How many technicians are there in total?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 10 technicians.",
                "query": "SELECT count(*) from technician",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            10
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM technician"
            },
            {
                "isuser": true,
                "text": "Can you show me a list of all of the technicians names the machines they are assigned to repair?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you want the names of technicians and the ids of machines they are assigned to repair?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T1.Name, T2.Machine_series FROM technician AS T1 JOIN repair_assignment AS T2 ON T1.technician_id = T2.technician_id JOIN machine AS T3 ON T2.Machine_ID = T3.Machine_ID"
            },
            {
                "isuser": true,
                "text": "Yes!  Can you show me their names and their machine ids that they are assigned to repair?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of technicians and the ids of the machines they are assigned to repair",
                "query": "SELECT T2.Name ,  T1.machine_id FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID",
                "result": [
                    [
                        [
                            "Name",
                            "Machine_ID"
                        ],
                        [
                            "Joe Sewell",
                            1
                        ],
                        [
                            "John Brown",
                            2
                        ],
                        [
                            "Tony Sewell",
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Name, T2.Machine_ID FROM technician AS T1 JOIN repair_assignment AS T2 ON T1.technician_id = T2.technician_id"
            },
            {
                "isuser": true,
                "text": "Great!  Also add to that list the starting year and age of each technician?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names, starting years and ages of the technicians and the ids of the machines they are assigned to repair",
                "query": "SELECT T2.Name ,  T1.machine_id,T2.starting_year,T2.age FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID",
                "result": [
                    [
                        [
                            "Name",
                            "Machine_ID",
                            "Starting_Year",
                            "Age"
                        ],
                        [
                            "Joe Sewell",
                            1,
                            2012.0,
                            37
                        ],
                        [
                            "John Brown",
                            2,
                            2013.0,
                            36
                        ],
                        [
                            "Tony Sewell",
                            3,
                            2005.0,
                            43
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Name, T1.Starting_Year, T1.Age, T2.Machine_ID FROM technician AS T1 JOIN repair_assignment AS T2 ON T1.technician_id = T2.technician_id"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "epinions_1",
        "turns": [
            {
                "isuser": true,
                "text": "Can you please tell me the names of the items that did not receive any reviews?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the name of the items that did not receive any reviews are pear, apple, and blue hoodie",
                "query": "SELECT title FROM item WHERE i_id NOT IN (SELECT i_id FROM review)",
                "result": [
                    [
                        [
                            "title"
                        ],
                        [
                            "pear"
                        ],
                        [
                            "apple"
                        ],
                        [
                            "blue hoodie"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT title FROM item WHERE i_id NOT IN (SELECT i_id FROM review)"
            },
            {
                "isuser": true,
                "text": "What are their item IDs?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the item ids of the items that did not receive any reviews ",
                "query": "SELECT i_id FROM item WHERE i_id NOT IN (SELECT i_id FROM review)",
                "result": [
                    [
                        [
                            "i_id"
                        ],
                        [
                            0
                        ],
                        [
                            2
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT i_id FROM item WHERE i_id NOT IN (SELECT i_id FROM review)"
            },
            {
                "isuser": true,
                "text": "What are the user IDs associated with those?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "there are no users associated with those, because they are not in review",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT u_id FROM review WHERE i_id NOT IN (SELECT i_id FROM item)"
            },
            {
                "isuser": true,
                "text": "How many items did receive reviews?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are 5 items that received reviews",
                "query": "select count(distinct i_id) from review",
                "result": [
                    [
                        [
                            "count(distinct(i_id))"
                        ],
                        [
                            5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM review"
            },
            {
                "isuser": true,
                "text": "What are the names of those items?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "here are the names of the items that received reviews ",
                "query": "select t1.title from item as t1 join review as t2 where t1.i_id = t2.i_id;",
                "result": [
                    [
                        [
                            "title"
                        ],
                        [
                            "orange"
                        ],
                        [
                            "orange"
                        ],
                        [
                            "shampoo"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT title FROM item WHERE i_id IN (SELECT i_id FROM review)"
            },
            {
                "isuser": true,
                "text": "What did the users say about those products?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "I can't answer the question, please give another problem",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "SELECT u_id, i_id, rating FROM review WHERE i_id IN (SELECT i_id FROM item WHERE title IN (SELECT title FROM item WHERE i_id NOT IN (SELECT i_id FROM review)))"
            },
            {
                "isuser": true,
                "text": "What are their item ids?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the ids of the items that received reviews",
                "query": "select distinct(i_id) from review;",
                "result": [
                    [
                        [
                            "i_id"
                        ],
                        [
                            1
                        ],
                        [
                            3
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT i_id FROM review WHERE i_id NOT IN (SELECT i_id FROM item)"
            },
            {
                "isuser": true,
                "text": "What is the rating of item id 3?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the rating of the item with id 3 is 5",
                "query": "select rating  from review where i_id = 3;",
                "result": [
                    [
                        [
                            "rating"
                        ],
                        [
                            5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT rating FROM review WHERE i_id = 3"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "products_for_hire",
        "turns": [
            {
                "isuser": true,
                "text": "How many customers are there",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of customers is 15.",
                "query": "SELECT count(*) FROM customers",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Customers"
            },
            {
                "isuser": true,
                "text": "How many of them have a coupon amount of 500",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of customers that has a coupon amount of 500 is 1",
                "query": "SELECT count(*) FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.coupon_amount  =  500",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Customers WHERE coupon_amount = 500"
            },
            {
                "isuser": true,
                "text": "What is their name",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "First name or last name?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT first_name, last_name FROM Customers WHERE coupon_amount = 500"
            },
            {
                "isuser": true,
                "text": "What is their customer id",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The customer id of the customer that has a coupon amount of 500 is 10",
                "query": "SELECT t1.customer_id FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.coupon_amount  =  500",
                "result": [
                    [
                        [
                            "customer_id"
                        ],
                        [
                            10
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_id FROM Customers WHERE coupon_amount = 500"
            },
            {
                "isuser": true,
                "text": "Are they a good or bad customer",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the customer that has a coupon with amount 500 is bad",
                "query": "SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.coupon_amount  =  500",
                "result": [
                    [
                        [
                            "good_or_bad_customer"
                        ],
                        [
                            "bad"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT good_or_bad_customer FROM Customers WHERE coupon_amount = 500"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "aircraft",
        "turns": [
            {
                "isuser": true,
                "text": "In which country  Swan River ' Perth located ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Swan River ' Perth is located in the country of Australia.",
                "query": "SELECT country FROM MATCH where Location = 'Swan River , Perth'",
                "result": [
                    [
                        [
                            "Country"
                        ],
                        [
                            "Australia"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT LOCATION ,  Country FROM match WHERE LOCATION  =  \"Swan River\" AND Country  =  \"Perth\""
            },
            {
                "isuser": true,
                "text": "How old is Mr. Cristian Halvorson II?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The age of the pilot named 'Mr. Cristian Halvorson II' is 23.",
                "query": "SELECT age FROM pilot where name = 'Mr. Cristian Halvorson II'",
                "result": [
                    null
                ],
                "predict_type": "answerable",
                "predict": "SELECT Age FROM pilot WHERE Name = \"Cristian Halvorson II\""
            },
            {
                "isuser": true,
                "text": "In which country Mina' Zayid , Abu Dhabi located ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Mina' Zayid , Abu Dhabi is located in the country of United Arab Emirates.",
                "query": "SELECT country FROM match where Location = \"Mina Zayid , Abu Dhabi\"",
                "result": [
                    null
                ],
                "predict_type": "answerable",
                "predict": "SELECT LOCATION ,  Country FROM match WHERE LOCATION  =  \"Mina' Zayid\" AND Country  =  \"Abu Dhabi\""
            },
            {
                "isuser": true,
                "text": "what is the name and age of the oldest winning pilot ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the name of the oldest winning pilot is Elisha Hickle V, and the age is 37.",
                "query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age desc LIMIT 1",
                "result": [
                    [
                        [
                            "Name",
                            "Age"
                        ],
                        [
                            "Elisha Hickle V",
                            37
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name, Age FROM pilot WHERE Pilot_Id IN (SELECT Winning_Pilot FROM match) ORDER BY Age DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "what is the name of most winning aircraft ?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "sorry, I cannot answer this question based on the tables. there is no info about aircraft name. could you please ask other related questions?",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT Aircraft FROM match GROUP BY Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": " where is Flamengo Beach , Rio de Janeiro situated ? ",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "did you want to return its country?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT LOCATION FROM match WHERE LOCATION = \"Flamengo Beach\" AND Country = \"Rio de Janeiro\""
            },
            {
                "isuser": true,
                "text": "where its located ?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Flamengo Beach , Rio de Janeiro is already a location. The only geographical info else i can provide is its country. do you want to show it?",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT LOCATION FROM match WHERE LOCATION = \"Flamengo Beach\" AND Country = \"Rio de Janeiro\""
            },
            {
                "isuser": true,
                "text": "yes\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Flamengo Beach , Rio de Janeiro is located in the country of Brazil.",
                "query": "SELECT country FROM MATCH where location = 'Flamengo Beach , Rio de Janeiro'",
                "result": [
                    [
                        [
                            "Country"
                        ],
                        [
                            "Brazil"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT LOCATION FROM match WHERE LOCATION = \"Flamengo Beach\" AND Country = \"Rio de Janeiro\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "student_transcripts_tracking",
        "turns": [
            {
                "isuser": true,
                "text": "How many graduates of the school are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 15  graduates. ",
                "query": "SELECT count(*)  from students ",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "I apologize, but the database does not contain information about graduates."
            },
            {
                "isuser": true,
                "text": "Did the 15 graduates graduate at different times?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes, the unique date lefts are shown in the result table. ",
                "query": "SELECT distinct date_left from students ",
                "result": [
                    [
                        [
                            "date_left"
                        ],
                        [
                            "1971-05-17 19:28:49"
                        ],
                        [
                            "2013-10-05 17:41:28"
                        ],
                        [
                            "2007-03-31 09:53:19"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "I apologize, but the database does not contain information about when the graduates graduated."
            },
            {
                "isuser": true,
                "text": "Ok. Who graduated the earliest?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "What attributes of this student who graduated the earliest would you like to know? ",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T1.first_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  \"Bachelor of Science\" ORDER BY T1.date_first_registered ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Please tell me the first name, middle name, and last name.",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": " The first name, middle name and last name of the earliest graduate of the school is shown in the result table. ",
                "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
                "result": [
                    [
                        [
                            "first_name",
                            "middle_name",
                            "last_name"
                        ],
                        [
                            "Timmothy",
                            "Anna",
                            "Ward"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  \"Bachelor of Science\" ORDER BY T1.date_first_registered ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, good bye. ",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "cre_Docs_and_Epenses",
        "turns": [
            {
                "isuser": true,
                "text": "Hello, how many total documents are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 15 documents.",
                "query": "select count(*) from documents",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Documents"
            },
            {
                "isuser": true,
                "text": "Can you tell me the document type code, name, and description of the document with the name 'Noel CV'?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the document type code, name, and description of the document with the name 'Noel CV'",
                "query": "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV'",
                "result": [
                    [
                        [
                            "Document_Type_Code",
                            "Document_Name",
                            "Document_Description"
                        ],
                        [
                            "BK",
                            "Noel CV",
                            null
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_type_code , document_type_name , document_type_description FROM Ref_Document_Types WHERE document_type_code IN (SELECT document_type_code FROM Documents WHERE document_name = 'Noel CV')"
            },
            {
                "isuser": true,
                "text": "Perfect, and can you do the same with 'King Book'?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the document type code, name, and description of the document with the name 'King Book' ",
                "query": "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'King Book'",
                "result": [
                    [
                        [
                            "Document_Type_Code",
                            "Document_Name",
                            "Document_Description"
                        ],
                        [
                            "PP",
                            "King Book",
                            null
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_type_code , document_type_name , document_type_description FROM Ref_Document_Types WHERE document_type_code IN (SELECT document_type_code FROM Documents WHERE document_name = 'King Book')"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "program_share",
        "turns": [
            {
                "isuser": true,
                "text": "which program owners have programs in the morning and the night",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the program owners that have some programs in both morning and night time.",
                "query": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"",
                "result": [
                    [
                        [
                            "Owner"
                        ],
                        [
                            "Beijing Television (BTV)"
                        ],
                        [
                            "Hunan Broadcasting System (HBS)"
                        ],
                        [
                            "Southern Media Corporation (SMC)"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.Owner FROM program AS T1 JOIN broadcast AS T2 ON T1.Program_ID  =  T2.Program_ID WHERE T2.Time_of_day  =  \"Morning\" OR T2.Time_of_day  =  \"Night\""
            },
            {
                "isuser": true,
                "text": "what are the programs by Beijing television?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you want the program names by the owner Beijing television (BTV)",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT DISTINCT T1.Name FROM program AS T1 JOIN broadcast AS T2 ON T1.Program_ID  =  T2.Program_ID WHERE T2.Time_of_day  =  \"Morning\" OR T2.Time_of_day  =  \"Night\" AND T1.Owner  =  \"Beijing Television\""
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Kaku is the name of the program by the owner Beijing television (BTV) ",
                "query": "SELECT name from program where owner = \"Beijing Television (BTV)\"",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Kaku"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.Name FROM program AS T1 JOIN broadcast AS T2 ON T1.Program_ID  =  T2.Program_ID WHERE T2.Time_of_day  =  \"Morning\" OR T2.Time_of_day  =  \"Night\" AND T1.Owner  =  \"Beijing Television\""
            },
            {
                "isuser": true,
                "text": "when did kaku launch? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The program named Kaku was launched in 2004.",
                "query": "SELECT launch from program where name = \"Kaku\"",
                "result": [
                    [
                        [
                            "Launch"
                        ],
                        [
                            2004.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Launch FROM program WHERE Name = \"Kaku\""
            },
            {
                "isuser": true,
                "text": "who is Toonmax owner?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you want the owner of the program named Toonmax?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT Owner FROM program WHERE Name = \"Toonmax\""
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Shanghai Media Group (SMG) is the owner of the program named Toonmax",
                "query": "SELECT owner from program where name = \"Toonmax\"",
                "result": [
                    [
                        [
                            "Owner"
                        ],
                        [
                            "Shanghai Media Group (SMG)"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.Name FROM program AS T1 JOIN broadcast AS T2 ON T1.Program_ID  =  T2.Program_ID WHERE T2.Time_of_day  =  \"Morning\" OR T2.Time_of_day  =  \"Night\" AND T1.Owner  =  \"Beijing Television\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks. bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "store_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many employees have the job title Manager?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 3 employees that have manager in their job title.  ",
                "query": "SELECT count(*) from employees where title like \"%manager%\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM employees WHERE title = \"Manager\""
            },
            {
                "isuser": true,
                "text": "Which one manages the most employees?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "All the information about the manager who manages the most employees is shown in the result table. ",
                "query": "SELECT T2.*  FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;",
                "result": [
                    [
                        [
                            "id",
                            "last_name",
                            "first_name",
                            "title",
                            "reports_to",
                            "birth_date",
                            "hire_date",
                            "address",
                            "city",
                            "state",
                            "country",
                            "postal_code",
                            "phone",
                            "fax",
                            "email"
                        ],
                        [
                            2,
                            "Edwards",
                            "Nancy",
                            "Sales Manager",
                            1,
                            "1958-12-08 00:00:00",
                            "2002-05-01 00:00:00",
                            "825 8 Ave SW",
                            "Calgary",
                            "AB",
                            "Canada",
                            "T2P 2T3",
                            "+1 (403) 262-3443",
                            "+1 (403) 262-3322",
                            "nancy@chinookcorp.com"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT title, count(*) AS num_employees FROM employees GROUP BY title ORDER BY num_employees DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "How many employees does she manage?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "The number of employees the employee that manage the most number of employees is 3. ",
                "query": "SELECT  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;",
                "result": [
                    [
                        [
                            "count(T1.reports_to)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM employees WHERE reports_to = 1"
            },
            {
                "isuser": true,
                "text": "And their names?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "The first and last names of the employees that the employee that manages the most number of employees are shown in the result table. ",
                "query": "SELECT first_name, last_name FROM employees where reports_to = (SELECT T2.id FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1)",
                "result": [
                    [
                        [
                            "first_name",
                            "last_name"
                        ],
                        [
                            "Jane",
                            "Peacock"
                        ],
                        [
                            "Margaret",
                            "Park"
                        ],
                        [
                            "Steve",
                            "Johnson"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name, last_name FROM employees WHERE reports_to = 1"
            },
            {
                "isuser": true,
                "text": "Great! Can you list the first and last name of the employee that manages them?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "The first and last name of the employee that manages the most number of employees is shown in the result table. ",
                "query": "SELECT T2.first_name, T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "first_name",
                            "last_name"
                        ],
                        [
                            "Nancy",
                            "Edwards"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name, last_name FROM employees WHERE reports_to = 1"
            },
            {
                "isuser": true,
                "text": "Okay! I appreciate all your help. Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, good bye. ",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "insurance_policies",
        "turns": [
            {
                "isuser": true,
                "text": "what's the policy id for claim id 143?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the policy id for claim id 143 is 744",
                "query": "SELECT Policy_ID FROM Claims where Claim_ID\t = \"143\"",
                "result": [
                    [
                        [
                            "Policy_ID"
                        ],
                        [
                            744
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Policy_ID FROM Claims WHERE Claim_ID = 143"
            },
            {
                "isuser": true,
                "text": "What's the most recent claim date?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the most recent claim date is 2018-03-09",
                "query": "SELECT Date_Claim_Settled FROM Claims  ORDER BY Date_Claim_Settled DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Date_Claim_Settled"
                        ],
                        [
                            "2018-03-09"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT MAX(Date_Claim_Made) FROM Claims"
            },
            {
                "isuser": true,
                "text": "what was the amount claimed?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "On this day?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT Amount_Claimed FROM Claims WHERE Claim_ID = 143"
            },
            {
                "isuser": true,
                "text": "yes\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the amount claimed on 2018-03-09 is 35824",
                "query": "SELECT Amount_Claimed FROM Claims where Date_Claim_Settled = \"2018-03-09\"",
                "result": [
                    [
                        [
                            "Amount_Claimed"
                        ],
                        [
                            35824
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Amount_Claimed FROM Claims WHERE Claim_ID = 143"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "ship_1",
        "turns": [
            {
                "isuser": true,
                "text": "Are there any classes that have more than two captains?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes, the class of Third-rate ship of the line has more than two captains.",
                "query": "SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*)  >  2",
                "result": [
                    [
                        [
                            "Class"
                        ],
                        [
                            "Third-rate ship of the line"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT CLASS FROM captain GROUP BY CLASS HAVING COUNT(*)  >  2"
            },
            {
                "isuser": true,
                "text": "Is third-rate ship of the line the only class with more than two captains?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes. the class of third-rate ship of the line is the only class with more than two captains.",
                "query": "SELECT CLASS FROM captain where class != 'Third-rate ship of the line' GROUP BY CLASS HAVING count(*)  >  2",
                "result": [
                    [
                        [
                            "Class"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT CLASS FROM captain GROUP BY CLASS HAVING COUNT(*)  >  2"
            },
            {
                "isuser": true,
                "text": "How many captains does third-rate ship of the line have?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the class of Third-rate ship of the line has 3 captains.",
                "query": "SELECT count(*) FROM captain where class = 'Third-rate ship of the line'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM captain WHERE CLASS = \"Third-rate ship of the line\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "flight_2",
        "turns": [
            {
                "isuser": true,
                "text": "Can you show the SourceAirport FlightNo 28?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The source airports of the flight whose number is 28 are \"APG\" and \"ABQ\".",
                "query": "SELECT SourceAirport FROM Flights WHERE FlightNo='28'",
                "result": [
                    [
                        [
                            "SourceAirport"
                        ],
                        [
                            " APG"
                        ],
                        [
                            " ABQ"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.FlightNo FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T1.Airline = \"American Airlines\" AND T2.FlightNo = 28"
            },
            {
                "isuser": true,
                "text": "Can you show the City of Airportcode APG?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The city with the airport code \"APG\" is \"Aberdeen\".",
                "query": "select city from airports where airportcode='APG'",
                "result": [
                    [
                        [
                            "City"
                        ],
                        [
                            "Aberdeen "
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.City FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T1.Airline = \"American Airlines\" AND T2.SourceAirport = \"APG\""
            },
            {
                "isuser": true,
                "text": "Can Show the names of airports which do not have any flight in and out?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table shows the names of airports which do not have any flight in and out. For example, the airport \"Phillips AAF\" does not have any flight in and out.",
                "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
                "result": [
                    [
                        [
                            "AirportName"
                        ],
                        [
                            "Phillips AAF "
                        ],
                        [
                            "Municipal "
                        ],
                        [
                            "Dyess AFB "
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.AirportName FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T1.Airline = \"American Airlines\" AND T2.SourceAirport = \"APG\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "sports_competition",
        "turns": [
            {
                "isuser": true,
                "text": "Can you show me the club names and ids?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The club names and ids are shown in the result table. ",
                "query": "SELECT name, club_id FROM CLub ",
                "result": [
                    [
                        [
                            "name",
                            "Club_ID"
                        ],
                        [
                            "AIB",
                            1
                        ],
                        [
                            "BK Slide",
                            2
                        ],
                        [
                            "IFG",
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name ,  Club_ID FROM club"
            },
            {
                "isuser": true,
                "text": "Hmm, I want to know the player ids, names and their club ids.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The player id, names and their cubs of all the players are shown in the result table. ",
                "query": "SELECT player_id, name, club_id FROM player ",
                "result": [
                    [
                        [
                            "Player_ID",
                            "name",
                            "Club_ID"
                        ],
                        [
                            1,
                            "Michael Platt",
                            1
                        ],
                        [
                            2,
                            "Dave Halley",
                            2
                        ],
                        [
                            3,
                            "James Evans",
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Player_ID ,  name ,  Club_ID FROM player"
            },
            {
                "isuser": true,
                "text": "Please list the names of those clubs that do not have any players.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names of the clubs that do not have any players are shown in the result table. ",
                "query": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "HSBIF"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, good bye. ",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "student_transcripts_tracking",
        "turns": [
            {
                "isuser": true,
                "text": "when is the first transcript released?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the result table shows the info of the first transcript released.",
                "query": "SELECT * FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
                "result": [
                    [
                        [
                            "transcript_id",
                            "transcript_date",
                            "other_details"
                        ],
                        [
                            8,
                            "1975-05-06 12:04:47",
                            null
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"
            }
        ]
    },
    {
        "db_name": "city_record",
        "turns": [
            {
                "isuser": true,
                "text": "Tell me Regional Population and GDP for City ID 2 ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The regional population and GDP for city id 2 are 8004680 and 614.55.",
                "query": "SELECT regional_population, GDP FROM city WHERE city_id = 2",
                "result": [
                    [
                        [
                            "Regional_Population",
                            "GDP"
                        ],
                        [
                            8004680,
                            614.55
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Regional_Population, GDP FROM city WHERE City_ID = 2"
            },
            {
                "isuser": true,
                "text": "Tell me temperature for City ID 2 for Jan, Apr and Oct",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The temperature of Jan, Apr, and Oct for city id 2 are listed in the table.",
                "query": "SELECT Jan, Apr, Oct FROM temperature WHERE city_id = 2",
                "result": [
                    [
                        [
                            "Jan",
                            "Apr",
                            "Oct"
                        ],
                        [
                            26.1,
                            26.1,
                            28.3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Jan, Apr, Oct FROM temperature WHERE City_ID = 2"
            },
            {
                "isuser": true,
                "text": "tell me which city had high temperature in the month of May ?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Sorry, what do you mean by high?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "I apologize, but the provided data does not contain information about temperature for the month of May."
            },
            {
                "isuser": true,
                "text": "high value of temperature...\n",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "I mean how high is high? You can say temperature higher than a certain number.",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT MAX(temperature) FROM temperature"
            },
            {
                "isuser": true,
                "text": "Higher than 21",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The cities that have temperature higher than 21 in the month of Mar are Nanjing, Suzhou, Jinhua,  and Jiaxing",
                "query": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar > 21",
                "result": [
                    [
                        [
                            "City"
                        ],
                        [
                            "Nanjing ( Jiangsu )"
                        ],
                        [
                            "Suzhou ( Jiangsu )"
                        ],
                        [
                            "Jinhua ( Zhejiang )"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT city FROM city WHERE temperature > 21"
            },
            {
                "isuser": true,
                "text": "Give me a list of cities whose temperature in Mar is lower than that in July and which have also served as host cities ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The cities whose temperature in Mar is lower than that in July and which have also served as host cities are Jiaxing, Nanjing, Shanghai, and Wuxi.",
                "query": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
                "result": [
                    [
                        [
                            "City"
                        ],
                        [
                            "Jiaxing ( Zhejiang )"
                        ],
                        [
                            "Nanjing ( Jiangsu )"
                        ],
                        [
                            "Shanghai"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT city FROM city WHERE temperature < (SELECT temperature FROM city WHERE city = (SELECT host_city FROM hosting_city WHERE year = 2014)) AND city IN (SELECT host_city FROM hosting_city WHERE year = 2014)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "city_record",
        "turns": [
            {
                "isuser": true,
                "text": "Hi there! Can you tell me which three cities have the highest regional populations, and list the population totals too?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the three cities and corresponding regional populations for the cities with the highest regional populations.",
                "query": "SELECT city, regional_population FROM city ORDER BY regional_population DESC LIMIT 3",
                "result": [
                    [
                        [
                            "City",
                            "Regional_Population"
                        ],
                        [
                            "Shanghai",
                            23019148
                        ],
                        [
                            "Suzhou ( Jiangsu )",
                            10465994
                        ],
                        [
                            "Hangzhou ( Zhejiang )",
                            8700400
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT city, regional_population FROM city ORDER BY regional_population DESC LIMIT 3"
            },
            {
                "isuser": true,
                "text": "Great! Which of these have the highest GDP?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Shanghai has the highest GDP among the cities with the 3 highest regional populations.",
                "query": "SELECT city, regional_population, GDP FROM city ORDER BY regional_population DESC LIMIT 3",
                "result": [
                    [
                        [
                            "City",
                            "Regional_Population",
                            "GDP"
                        ],
                        [
                            "Shanghai",
                            23019148,
                            1919.57
                        ],
                        [
                            "Suzhou ( Jiangsu )",
                            10465994,
                            1071.7
                        ],
                        [
                            "Hangzhou ( Zhejiang )",
                            8700400,
                            701.18
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT city, gdp FROM city ORDER BY gdp DESC LIMIT 3"
            },
            {
                "isuser": true,
                "text": "Great!  And what is the average GDP among all of the cities?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average GDP among all the cities is 595.7961538461539.",
                "query": "SELECT avg(GDP) FROM city",
                "result": [
                    [
                        [
                            "avg(GDP)"
                        ],
                        [
                            595.7961538461539
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(gdp) FROM city"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you! Goodbye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "customers_and_invoices",
        "turns": [
            {
                "isuser": true,
                "text": "What is the average amount of transaction? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average transaction amount is 1329",
                "query": "SELECT avg(transaction_amount) FROM Financial_transactions",
                "result": [
                    [
                        [
                            "avg(transaction_amount)"
                        ],
                        [
                            1329.0559999999998
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(transaction_amount) FROM Financial_transactions"
            },
            {
                "isuser": true,
                "text": "What are ids of all transactions with amount greater than the average? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the ids of all transactions with amount greater than the average.",
                "query": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)",
                "result": [
                    [
                        [
                            "transaction_id"
                        ],
                        [
                            3
                        ],
                        [
                            6
                        ],
                        [
                            7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount > (SELECT avg(transaction_amount) FROM Financial_transactions)"
            },
            {
                "isuser": true,
                "text": "And what are their transaction dates? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the dates of all transactions with amount greater than the average.",
                "query": "SELECT transaction_date\t FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)",
                "result": [
                    [
                        [
                            "transaction_date"
                        ],
                        [
                            "2018-03-03 01:50:25"
                        ],
                        [
                            "2018-03-22 21:58:37"
                        ],
                        [
                            "2018-03-12 03:06:52"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT transaction_date FROM Financial_transactions WHERE transaction_amount > (SELECT avg(transaction_amount) FROM Financial_transactions)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure! Bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "wine_1",
        "turns": [
            {
                "isuser": true,
                "text": "Can you show me the most expensive wine made in the year 2006?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The information about the most expensive wine made in the year 2006 is shown now.",
                "query": "SELECT * FROM WINE WHERE year = 2006 order by price desc limit 1",
                "result": [
                    [
                        [
                            "No",
                            "Grape",
                            "Winery",
                            "Appelation",
                            "State",
                            "Name",
                            "Year",
                            "Price",
                            "Score",
                            "Cases",
                            "Drink"
                        ],
                        [
                            116,
                            "Grenache",
                            "Sine Qua Non",
                            "Sta. Rita Hills",
                            "California",
                            "In the Crosshairs Eleven Confessions Vineyard",
                            2006,
                            200,
                            97,
                            202,
                            "now"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name ,  price FROM WINE WHERE YEAR  =  2006 ORDER BY price DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Great, can you show me all wines that have a higher price than the one currently in the table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The information on wines with a price more expensive then all wines made in the year 2006 is shown.",
                "query": "SELECT * FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)",
                "result": [
                    [
                        [
                            "No",
                            "Grape",
                            "Winery",
                            "Appelation",
                            "State",
                            "Name",
                            "Year",
                            "Price",
                            "Score",
                            "Cases",
                            "Drink"
                        ],
                        [
                            106,
                            "Cabernet Sauvingnon",
                            "Darioush",
                            "Napa Valley",
                            "California",
                            "Darius II",
                            2007,
                            225,
                            96,
                            698,
                            "2012"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name ,  price FROM WINE WHERE price  >  (SELECT max(price) FROM WINE)"
            },
            {
                "isuser": true,
                "text": "Can you show only the name?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of wines with a price more expensive then all wines made in the year 2006  is Darius II",
                "query": "SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Darius II"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM WINE WHERE price  >  (SELECT max(price) FROM WINE)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "student_assessment",
        "turns": [
            {
                "isuser": true,
                "text": "which candidates got assessed?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the ids of all the candidates who got assessed?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T1.candidate_details FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id  =  T2.candidate_id"
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Here are all the candidates' ids who got assessed.",
                "query": "SELECT candidate_id FROM candidate_assessments",
                "result": [
                    [
                        [
                            "candidate_id"
                        ],
                        [
                            111
                        ],
                        [
                            121
                        ],
                        [
                            131
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.candidate_details FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id  =  T2.candidate_id"
            },
            {
                "isuser": true,
                "text": "which of those most recently had an assessment?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "121 is the candidate's id who most recently had an assessment.",
                "query": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
                "result": [
                    [
                        [
                            "candidate_id"
                        ],
                        [
                            121
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.candidate_details FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id  =  T2.candidate_id ORDER BY T2.assessment_date DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "chinook_1",
        "turns": [
            {
                "isuser": true,
                "text": "In the rock genre, how many tracks are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 1297 tracks that belong to the rock genre",
                "query": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
                "result": [
                    [
                        [
                            "COUNT(*)"
                        ],
                        [
                            1297
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM TRACK WHERE GenreId = 2"
            },
            {
                "isuser": true,
                "text": "What about jazz?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 130 tracks that belong to the Jazz genre",
                "query": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"",
                "result": [
                    [
                        [
                            "COUNT(*)"
                        ],
                        [
                            130
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM TRACK WHERE GenreId = 3"
            },
            {
                "isuser": true,
                "text": "Can you list the composer who wrote the most rock genre songs?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the composer who wrote the most rock genre songs is NULL",
                "query": "SELECT composer FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\" group by composer order by count(*) desc limit 1",
                "result": [
                    [
                        [
                            "Composer"
                        ],
                        [
                            null
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Composer FROM TRACK WHERE GenreId = 2 GROUP BY Composer ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Can you list all composers who wrote tracks with the letter B in their name?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are all composers who wrote tracks with the letter B in their name",
                "query": "SELECT composer FROM track where name like \"%B%\"",
                "result": [
                    [
                        [
                            "Composer"
                        ],
                        [
                            "Angus Young, Malcolm Young, Brian Johnson"
                        ],
                        [
                            null
                        ],
                        [
                            "Angus Young, Malcolm Young, Brian Johnson"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Composer FROM TRACK WHERE Name LIKE '%B%' GROUP BY Composer"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "wta_1",
        "turns": [
            {
                "isuser": true,
                "text": "Find the names of the 3 youngest winners across all matches",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The winner name of 3 youngest winners are  Madison Keys,  Madison Keys  and Madison Keys",
                "query": "SELECT DISTINCT winner_name  FROM matches ORDER BY winner_age LIMIT 3",
                "result": [
                    [
                        [
                            "winner_name"
                        ],
                        [
                            "Madison Keys"
                        ],
                        [
                            "Elina Svitolina"
                        ],
                        [
                            "Garbine Muguruza"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT winner_name FROM matches ORDER BY winner_age LIMIT 3"
            },
            {
                "isuser": true,
                "text": "What are points of the 3 youngest winners?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the points of the 3 youngest winners.",
                "query": "SELECT loser_rank_points FROM matches ORDER BY winner_age LIMIT 3",
                "result": [
                    [
                        [
                            "loser_rank_points"
                        ],
                        [
                            2341
                        ],
                        [
                            3540
                        ],
                        [
                            2695
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT winner_rank_points FROM matches ORDER BY winner_age LIMIT 3"
            },
            {
                "isuser": true,
                "text": "Give me the age of the 3 youngest winners across all matches",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The ages of 3 youngest winners table are here.",
                "query": "SELECT winner_age FROM matches ORDER BY winner_age LIMIT 3",
                "result": [
                    [
                        [
                            "winner_age"
                        ],
                        [
                            20.917180013699998
                        ],
                        [
                            21.0896646133
                        ],
                        [
                            21.3196440794
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT winner_age FROM matches ORDER BY winner_age LIMIT 3"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "music_1",
        "turns": [
            {
                "isuser": true,
                "text": "Find the distinct names of all songs that have a higher resolution than some songs in English.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are  the distinct names of all songs that have a higher resolution than some songs in English",
                "query": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")",
                "result": [
                    [
                        [
                            "song_name"
                        ],
                        [
                            "My love"
                        ],
                        [
                            "Tumi robe nirobe"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE languages  =  \"English\")"
            },
            {
                "isuser": true,
                "text": "what is the total number of songs?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the total number of songs is 6",
                "query": "select count(*) from song",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM song"
            },
            {
                "isuser": true,
                "text": "what is the total number of most social media songs?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "sorry,the question cannot be understood and answered, can you give more details? thanks",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT COUNT(*) FROM song WHERE genre_is = \"Social Media\""
            },
            {
                "isuser": true,
                "text": "Thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "game_1",
        "turns": [
            {
                "isuser": true,
                "text": "list all the game type",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are all game types in the table.",
                "query": "SELECT gtype FROM Video_games",
                "result": [
                    [
                        [
                            "GType"
                        ],
                        [
                            "Collectible card game"
                        ],
                        [
                            "Walking Simulator"
                        ],
                        [
                            "Role-playing game"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT GType FROM Video_Games"
            },
            {
                "isuser": true,
                "text": "list the most played game type.",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry, that information is not in the table.",
                "query": "",
                "result": [],
                "predict_type": "SORRY",
                "predict": "SELECT GType, COUNT(*) AS GameCount FROM Video_Games GROUP BY GType ORDER BY GameCount DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "list the name of a shooting game.\n",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean \"First-person shooter\" games?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT GName FROM Video_Games WHERE GType = 'Shooting'"
            },
            {
                "isuser": true,
                "text": "yes i mean \"first-person shooter\" game?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the name of \"first-person shooter\" game.",
                "query": "SELECT GName FROM Video_games WHERE GType=\"Frist-person shooter\"",
                "result": [
                    [
                        [
                            "GName"
                        ],
                        [
                            "Call of Destiny"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT GName FROM Video_Games WHERE GType = 'First-Person Shooter'"
            },
            {
                "isuser": true,
                "text": "which game type has least number of games?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This game type has the least number of games.",
                "query": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) ASC LIMIT 1",
                "result": [
                    [
                        [
                            "GType"
                        ],
                        [
                            "Collectible card game"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT GType, COUNT(*) AS GameCount FROM Video_Games GROUP BY GType ORDER BY GameCount ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Which game type has most number of games?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This game type has the most number of games as well.",
                "query": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "GType"
                        ],
                        [
                            "Collectible card game"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT GType, COUNT(*) AS GameCount FROM Video_Games GROUP BY GType ORDER BY GameCount DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "storm_record",
        "turns": [
            {
                "isuser": true,
                "text": "Can you please show me the average damage for all storms?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average damage for all storms is 11.0629 million USD.",
                "query": "SELECT avg(damage_millions_USD) FROM storm",
                "result": [
                    [
                        [
                            "avg(damage_millions_USD)"
                        ],
                        [
                            11.0629
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(Damage_millions_USD) FROM storm"
            },
            {
                "isuser": true,
                "text": "Can you please show me the maximum damage for all storms?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The maximum damage for all storms is 29.3 million USD.",
                "query": "SELECT max(damage_millions_USD) FROM storm",
                "result": [
                    [
                        [
                            "max(damage_millions_USD)"
                        ],
                        [
                            29.3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT MAX(Damage_millions_USD) FROM storm"
            },
            {
                "isuser": true,
                "text": "Can you please show me the minimum damage for all storms?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The minimum damage for all storms is 0.039 million USD.",
                "query": "SELECT min(damage_millions_USD) FROM storm",
                "result": [
                    [
                        [
                            "min(damage_millions_USD)"
                        ],
                        [
                            0.039
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT MIN(Damage_millions_USD) FROM storm"
            },
            {
                "isuser": true,
                "text": "Can you please show me the minimum damage for all storms with maximum speed higher than 1000?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The minimum damage for all storms with maximum speed higher than 1000 is 0.039.",
                "query": "SELECT min(damage_millions_USD) FROM storm WHERE max_speed  >  1000",
                "result": [
                    [
                        [
                            "min(damage_millions_USD)"
                        ],
                        [
                            0.039
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT MIN(Damage_millions_USD) FROM storm WHERE Max_speed > 1000"
            },
            {
                "isuser": true,
                "text": "Can you please show me the maximum damage for all storms with maximum speed higher than 1000?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The maximum damage for all storms with maximum speed higher than 1000 is 13.0.",
                "query": "SELECT max(damage_millions_USD) FROM storm WHERE max_speed  >  1000",
                "result": [
                    [
                        [
                            "max(damage_millions_USD)"
                        ],
                        [
                            13.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT MAX(Damage_millions_USD) FROM storm WHERE Max_speed > 1000"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "storm_record",
        "turns": [
            {
                "isuser": true,
                "text": "how many region are presented on the table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 13 regions on the table.",
                "query": "select count(*) from region",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            13
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM region"
            },
            {
                "isuser": true,
                "text": "list out the region name",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are all the region names.",
                "query": "select region_name from region",
                "result": [
                    [
                        [
                            "Region_name"
                        ],
                        [
                            "Afghanistan"
                        ],
                        [
                            "Albania"
                        ],
                        [
                            "Algeria"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Region_name FROM region"
            },
            {
                "isuser": true,
                "text": "what is the region code of Afghanistan",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the region code of Afghanistan",
                "query": "select region_code from region where region_name = \"Afghanistan\"",
                "result": [
                    [
                        [
                            "Region_code"
                        ],
                        [
                            "AF"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Region_code FROM region WHERE Region_name = \"Afghanistan\""
            },
            {
                "isuser": true,
                "text": "what is the highest number city affected",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the region name of the city which is affected most.",
                "query": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id order by count(*) desc limit 1",
                "result": [
                    [
                        [
                            "Region_name"
                        ],
                        [
                            "Afghanistan"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(Number_city_affected) FROM affected_region"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "document_management",
        "turns": [
            {
                "isuser": true,
                "text": "hi, can you list me the user name and the password of the most popular role user?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here is the user name and the password of the most popular role user",
                "query": "SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "user_name",
                            "password"
                        ],
                        [
                            "faye30",
                            "27cca8f94136f0e8971b5ca555a21ff756871b27"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "I apologize, but the database does not contain information about user names and passwords."
            },
            {
                "isuser": true,
                "text": "great, how many popular role users are?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 8 most popular role users.",
                "query": "SELECT count(*) FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM users WHERE role_code = 'popular';"
            },
            {
                "isuser": true,
                "text": "Can you list me all the username of users with the most popular role?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "faye30 is the username of users with the most popular role",
                "query": "SELECT user_name FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "user_name"
                        ],
                        [
                            "faye30"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT user_name FROM users WHERE role_code = 'popular';"
            },
            {
                "isuser": true,
                "text": "Ok,  show me the username of an unpopular user.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here is the username of an unpopular user.",
                "query": "SELECT user_name  FROM users\nwhere user_name not in (\nSELECT user_name  FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)",
                "result": [
                    [
                        [
                            "user_name"
                        ],
                        [
                            "dickens.elta"
                        ],
                        [
                            "tremblay.raheem"
                        ],
                        [
                            "lynn.haley"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT user_name FROM users WHERE role_code = 'unpopular';"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome,goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "csu_1",
        "turns": [
            {
                "isuser": true,
                "text": "please list out the campus",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "which column do you want to list?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT campus FROM campuses"
            },
            {
                "isuser": true,
                "text": "first column",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the Ids of the Campuses",
                "query": "select Id from Campuses ",
                "result": [
                    [
                        [
                            "Id"
                        ],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT campus FROM campuses"
            },
            {
                "isuser": true,
                "text": "what is the highest campus fees",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the highest campus fee is 2258",
                "query": "select \tCampusFee from csu_fees order by  CampusFee desc limit 1",
                "result": [
                    [
                        [
                            "CampusFee"
                        ],
                        [
                            2258
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(campusfee) FROM csu_fees"
            },
            {
                "isuser": true,
                "text": "what is the year of California State University-Bakersfield",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the year of California State University-Bakersfield is 1965",
                "query": "select Year from Campuses where Campus = 'California State University-Bakersfield'",
                "result": [
                    [
                        [
                            "Year"
                        ],
                        [
                            1965
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT year FROM campuses WHERE campus = \"California State University-Bakersfield\""
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "bye",
                "type": "improper"
            }
        ]
    },
    {
        "db_name": "inn_1",
        "turns": [
            {
                "isuser": true,
                "text": "Can you find the first and last names of all people who paid more than the rooms' base prices?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the first and last names of all people who paid more than the rooms' base prices",
                "query": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0",
                "result": [
                    [
                        [
                            "FirstName",
                            "LastName"
                        ],
                        [
                            "MARKITA",
                            "CARISTO"
                        ],
                        [
                            "ROY",
                            "SWEAZY"
                        ],
                        [
                            "WILLY",
                            "ZULLO"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.FirstName , T1.LastName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate  >  T2.basePrice"
            },
            {
                "isuser": true,
                "text": "Could you add in the rates they paid to the table please?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Sorry, did you mean the base price of the room?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT DISTINCT T1.FirstName , T1.LastName , T1.Rate FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate  >  T2.basePrice"
            },
            {
                "isuser": true,
                "text": "The reservation rate, please",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the first, last names and the reservation rate of all people who paid more than the rooms' base prices",
                "query": "SELECT T1.firstname ,  T1.lastname, T1.Rate FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0",
                "result": [
                    [
                        [
                            "FirstName",
                            "LastName",
                            "Rate"
                        ],
                        [
                            "MARKITA",
                            "CARISTO",
                            218.75
                        ],
                        [
                            "ROY",
                            "SWEAZY",
                            287.5
                        ],
                        [
                            "WILLY",
                            "ZULLO",
                            201.25
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.FirstName , T1.LastName , T1.Rate FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate  >  T2.basePrice"
            },
            {
                "isuser": true,
                "text": "Can you find the first and last names of all people who paid less than the rooms' base prices?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the first and last names of all people who paid less than the rooms' base prices",
                "query": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  <  0",
                "result": [
                    [
                        [
                            "FirstName",
                            "LastName"
                        ],
                        [
                            "ANNIS",
                            "YESSIOS"
                        ],
                        [
                            "DAN",
                            "SWAIT"
                        ],
                        [
                            "DAN",
                            "GLIWSKI"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.FirstName , T1.LastName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate  <  T2.basePrice"
            },
            {
                "isuser": true,
                "text": "Could you add in the reservation rates they paid to the table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Yes, these are the first, last names and the reservation rate of all people who paid more than the rooms' base prices",
                "query": "SELECT T1.firstname ,  T1.lastname, T1.Rate FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  <  0",
                "result": [
                    [
                        [
                            "FirstName",
                            "LastName",
                            "Rate"
                        ],
                        [
                            "ANNIS",
                            "YESSIOS",
                            90.0
                        ],
                        [
                            "DAN",
                            "SWAIT",
                            135.0
                        ],
                        [
                            "DAN",
                            "GLIWSKI",
                            157.5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.FirstName , T1.LastName , T1.Rate FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate  <  T2.basePrice"
            },
            {
                "isuser": true,
                "text": "What is the name of the room that was booked most often?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "That would be CAS.",
                "query": "SELECT Room FROM Reservations GROUP BY Room ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Room"
                        ],
                        [
                            "CAS"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "hr_1",
        "turns": [
            {
                "isuser": true,
                "text": "create a table with a column for department id and a column for department name",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The table shows a column for department id and a column for department name.",
                "query": "select DEPARTMENT_ID,DEPARTMENT_NAME from  departments",
                "result": [
                    [
                        [
                            "DEPARTMENT_ID",
                            "DEPARTMENT_NAME"
                        ],
                        [
                            10,
                            "Administration"
                        ],
                        [
                            20,
                            "Marketing"
                        ],
                        [
                            30,
                            "Purchasing"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT department_id ,  department_name FROM departments"
            },
            {
                "isuser": true,
                "text": "Show the total number of employee ids for each department id",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The table shows the total number of employee's id for each different department id.",
                "query": "select T1.DEPARTMENT_ID, count(*) from  departments AS T1 JOIN employees AS T2 where  T1.DEPARTMENT_ID = T2.DEPARTMENT_ID group by T1.DEPARTMENT_ID",
                "result": [
                    [
                        [
                            "DEPARTMENT_ID",
                            "number"
                        ],
                        [
                            10,
                            1
                        ],
                        [
                            20,
                            2
                        ],
                        [
                            30,
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT department_id ,  COUNT(*) AS employee_count FROM employees GROUP BY department_id"
            },
            {
                "isuser": true,
                "text": "Add a column with department name",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The table shows the department name as well as the total number of employee's id for each different department id.",
                "query": "select T1.DEPARTMENT_ID, T1.DEPARTMENT_NAME, count(*) from departments AS T1 JOIN employees AS T2 where T1.DEPARTMENT_ID = T2.DEPARTMENT_ID group by T1.DEPARTMENT_ID",
                "result": [
                    [
                        [
                            "DEPARTMENT_ID",
                            "DEPARTMENT_NAME",
                            "number"
                        ],
                        [
                            10,
                            "Administration",
                            1
                        ],
                        [
                            20,
                            "Marketing",
                            2
                        ],
                        [
                            30,
                            "Purchasing",
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT department_id ,  COUNT(*) AS employee_count ,  department_name FROM employees GROUP BY department_id"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "department_store",
        "turns": [
            {
                "isuser": true,
                "text": "Hi there!  Can you show me a list of all of the customer IDs and the corresponding customer names?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The customer IDs and their corresponding customer names are listed in the result table. For example, customer Ahmed has a customer id of 1",
                "query": "SELECT customer_name ,  customer_id FROM customers",
                "result": [
                    [
                        [
                            "customer_name",
                            "customer_id"
                        ],
                        [
                            "Ahmed",
                            1
                        ],
                        [
                            "Chauncey",
                            2
                        ],
                        [
                            "Lukas",
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_id ,  customer_name FROM customers"
            },
            {
                "isuser": true,
                "text": "Thanks!  Can you filter this list to show only the rows for customers who have an address in the state of TN?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "All names and ids of customers who have an address in the state of TN are shown in the table. They are customer Lukas with customer id 3, and customer Kenya with customer id 13",
                "query": "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"",
                "result": [
                    [
                        [
                            "customer_name",
                            "customer_id"
                        ],
                        [
                            "Lukas",
                            3
                        ],
                        [
                            "Kenya",
                            13
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE '%TN%'"
            },
            {
                "isuser": true,
                "text": "Great!  Can you provide me with the customer addresses for those two customers?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The customer addresses for those two customers who have an address in the state of TN are updated.",
                "query": "SELECT customer_address FROM customers WHERE customer_address LIKE \"%TN%\"",
                "result": [
                    [
                        [
                            "customer_address"
                        ],
                        [
                            "7162 Rodolfo Knoll Apt. 502\nLake Annalise, TN 35791-8871"
                        ],
                        [
                            "338 Floy Mountains Suite 589\nYesseniaville, TN 60847"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_address FROM customers WHERE customer_id IN (SELECT customer_id FROM customers WHERE customer_address LIKE '%TN%')"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "No problem! Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "book_2",
        "turns": [
            {
                "isuser": true,
                "text": "thank you",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "What are the publication dates in the list?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the publication dates in the list.",
                "query": "SELECT Publication_Date FROM publication",
                "result": [
                    [
                        [
                            "Publication_Date"
                        ],
                        [
                            "August 2008"
                        ],
                        [
                            "March 2008"
                        ],
                        [
                            "June 2006"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Publication_Date FROM publication WHERE Publication_Date LIKE '%2015%'"
            },
            {
                "isuser": true,
                "text": "Can you sort the list by publication date from most common to least common?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Yes, here are the publication dates in the order of the most to the least common.",
                "query": "SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC",
                "result": [
                    [
                        [
                            "Publication_Date"
                        ],
                        [
                            "August 2008"
                        ],
                        [
                            "April 2007"
                        ],
                        [
                            "June 2006"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Publication_Date FROM publication WHERE Publication_Date LIKE '%2015%' GROUP BY Publication_Date ORDER BY COUNT(*) DESC"
            },
            {
                "isuser": true,
                "text": "What is the most common publication date?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the most common publication date is 'August 2008'.",
                "query": "SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Publication_Date"
                        ],
                        [
                            "August 2008"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Publication_Date FROM publication WHERE Publication_Date LIKE '%2015%' GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1"
            }
        ]
    },
    {
        "db_name": "sakila_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many films are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of films that are there 1000. ",
                "query": "SELECT count(*) from film ",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            1000
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM film"
            },
            {
                "isuser": true,
                "text": "What is the range of dates they were made?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The range of release_years that the films were made are shown in the result table. ",
                "query": "SELECT min(release_year), max(release_year) from film",
                "result": [
                    [
                        [
                            "min(release_year)",
                            "max(release_year)"
                        ],
                        [
                            2006,
                            2006
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT MIN(release_year) ,  MAX(release_year) FROM film"
            },
            {
                "isuser": true,
                "text": "What is the range of rental cost for the films?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The minimum and maximum of the rental rate for the films is shown in the result table. ",
                "query": "SELECT min(rental_rate), max(rental_rate) from film",
                "result": [
                    [
                        [
                            "min(rental_rate)",
                            "max(rental_rate)"
                        ],
                        [
                            0.99,
                            4.99
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT MIN(replacement_cost) ,  MAX(replacement_cost) FROM film"
            },
            {
                "isuser": true,
                "text": "Which film has the most actors and actresses?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "What attributes of the film that has the most actors and actresses would you like to know? ",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT title, COUNT(*) AS num_actors FROM film_actor GROUP BY film_id ORDER BY num_actors DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "film name?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The title of the film that has the most actors and actresses is LAMBS CINCINATTI.",
                "query": "SELECT T2.title  FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "title"
                        ],
                        [
                            "LAMBS CINCINATTI"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT title FROM film WHERE film_id = (SELECT film_id FROM film_actor GROUP BY film_id ORDER BY count(*) DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "film id?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The film id of the film that has the most actors and actresses is 508.",
                "query": "SELECT T2.film_id  FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "film_id"
                        ],
                        [
                            508
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT film_id FROM film_actor GROUP BY film_id ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "film description?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The film description of the film that has the most actors and actresses is A Insightful Story of a Man And a Feminist who must Fight a Composer in Australia.",
                "query": "SELECT T2.description  FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "description"
                        ],
                        [
                            "A Insightful Story of a Man And a Feminist who must Fight a Composer in Australia"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT description FROM film WHERE film_id = (SELECT film_id FROM film_actor GROUP BY film_id ORDER BY count(*) DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, good bye. ",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "decoration_competition",
        "turns": [
            {
                "isuser": true,
                "text": "how many members are from united states or canada",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are 10  members who are from united states or canada",
                "query": "SELECT count(Name) FROM member WHERE Country  =  \"United States\" OR Country  =  \"Canada\"",
                "result": [
                    [
                        [
                            "count(Name)"
                        ],
                        [
                            10
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM member WHERE Country  =  'United States' OR Country  =  'Canada'"
            },
            {
                "isuser": true,
                "text": "can you list the name of these 10 members",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "this shows the names of the members who are from united states or canada",
                "query": "SELECT Name FROM member WHERE Country  =  \"United States\" OR Country  =  \"Canada\"",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Jack Nicklaus"
                        ],
                        [
                            "Billy Casper"
                        ],
                        [
                            "Arnold Palmer"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM member WHERE Country  =  'United States' OR Country  =  'Canada'"
            },
            {
                "isuser": true,
                "text": "arrange the names in ascending order",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "this shows the names of the members who are from united states or canada ordered by their names",
                "query": "SELECT Name FROM member WHERE Country  =  \"United States\" OR Country  =  \"Canada\"\norder by name",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Arnold Palmer"
                        ],
                        [
                            "Billy Casper"
                        ],
                        [
                            "Bobby Nichols"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM member WHERE Country  =  'United States' OR Country  =  'Canada' ORDER BY name ASC"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome, goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "apartment_rentals",
        "turns": [
            {
                "isuser": true,
                "text": "how many rooms are available in the apartment with short name columbus square",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The  total number of rooms available in the apartment with short name columbus square is 29",
                "query": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
                "result": [
                    [
                        [
                            "sum(T2.room_count)"
                        ],
                        [
                            29
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Apartments AS T1 JOIN Apartment_Bookings AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.building_short_name  =  \"columbus square\" AND T2.booking_status_code  =  \"Available\""
            },
            {
                "isuser": true,
                "text": "what is the building id for this apartment\n",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "what did you mean by this apartment? Please give more info",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT building_id FROM Apartments WHERE apt_number = \"101\""
            },
            {
                "isuser": true,
                "text": "how many bathrooms are there in these 2 rooms",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did  you mean the number of bathrooms in the  apartment with id  is  2?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT SUM(bathroom_count) FROM Apartments WHERE apt_number IN (\"101\", \"102\")"
            },
            {
                "isuser": true,
                "text": "yes, thanks",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The count of  bathrooms in apartment with id 2  is 2",
                "query": "SELECT \tbathroom_count from  Apartments  where \napt_id=2",
                "result": [
                    [
                        [
                            "bathroom_count"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT building_id FROM Apartments WHERE apt_number = \"101\""
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome  and  goodbye ",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "SELECT building_id FROM Apartments WHERE apt_number = \"101\""
            }
        ]
    },
    {
        "db_name": "customers_and_addresses",
        "turns": [
            {
                "isuser": true,
                "text": "What kind of payment methods are there?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the number of payment kinds?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT DISTINCT payment_method FROM Customers"
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 3 different kinds of payment.",
                "query": "SELECT Count(distinct payment_method) FROM customers",
                "result": [
                    [
                        [
                            "Count(distinct payment_method)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT payment_method FROM Customers"
            },
            {
                "isuser": true,
                "text": "And can you show me how many customers there are?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 15 customers.",
                "query": "SELECT Count(*) FROM customers",
                "result": [
                    [
                        [
                            "Count(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Customers"
            },
            {
                "isuser": true,
                "text": "Can you show me the name of the customer who purchased the least quantity of items?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the name of the customer who purchased the least quantity of items is Eunice Morar.",
                "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1",
                "result": [
                    [
                        [
                            "customer_name"
                        ],
                        [
                            "Eunice Morar"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_name FROM Customers WHERE customer_id IN (SELECT customer_id FROM Customer_Orders GROUP BY customer_id ORDER BY count(*) ASC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "What payment method did that customer use?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The payment method that is used by the customer who purchased the least quantity of items is Credit Card.",
                "query": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1",
                "result": [
                    [
                        [
                            "payment_method"
                        ],
                        [
                            "Credit Card"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT payment_method FROM Customers WHERE customer_id IN (SELECT customer_id FROM Customer_Orders GROUP BY customer_id ORDER BY count(*) ASC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "How many items did that customer buy?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The customer who purchased the least quantity of items bought one item.",
                "query": "SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1",
                "result": [
                    [
                        [
                            "sum(t3.order_quantity)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Order_Items WHERE order_id IN (SELECT order_id FROM Customer_Orders WHERE customer_id IN (SELECT customer_id FROM Customers WHERE customer_name = 'Jane Doe'))"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "customers_and_addresses",
        "turns": [
            {
                "isuser": true,
                "text": "Which customer bought the most items?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you want the name of the customer?",
                "query": "",
                "result": [],
                "predict_type": "answerable",
                "predict": "SELECT T2.customer_name ,  T1.customer_id FROM customer_orders AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "That would be lovely.\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the name of the customer that has purchased the most items is Clifford Pagac",
                "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "customer_name"
                        ],
                        [
                            "Clifford Pagac"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.customer_name ,  T1.customer_id FROM customer_orders AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "How many did he purchase?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the customer who has purchased the most items has purchased 40 items in total",
                "query": "SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "sum(t3.order_quantity)"
                        ],
                        [
                            40
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM customer_orders WHERE customer_id = 1"
            },
            {
                "isuser": true,
                "text": "How did he pay?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The payment method of the customer who has purchased the most items is Cheque.",
                "query": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "payment_method"
                        ],
                        [
                            "Cheque"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT payment_method FROM customers WHERE customer_id = 1"
            },
            {
                "isuser": true,
                "text": "When did he become a customer?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The date that the customer who has purchased the most items became a customer is 2018-02-24 10:24:23",
                "query": "SELECT t1.date_became_customer FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "date_became_customer"
                        ],
                        [
                            "2018-02-24 10:24:23"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT date_became_customer FROM customers WHERE customer_id = 1"
            },
            {
                "isuser": true,
                "text": "How many became customers before that?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is 1 customer who became a customer before  The date that the customer who has purchased the most items became a customer.",
                "query": "SELECT count(*)  FROM customers where date_became_customer < (SELECT t1.date_became_customer FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1)",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM customers WHERE date_became_customer < (SELECT date_became_customer FROM customers WHERE customer_id = 1)"
            }
        ]
    },
    {
        "db_name": "college_3",
        "turns": [
            {
                "isuser": true,
                "text": "What are the first names of the students that minor in the department with DNO 140?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The first names of the students that minor in the department with DNO 140 is Susan.",
                "query": "SELECT T2.Fname  FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140",
                "result": [
                    [
                        [
                            "Fname"
                        ],
                        [
                            "Susan"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Minor_in WHERE DNO = 140)"
            },
            {
                "isuser": true,
                "text": "What are the last names of the students that minor in the department with DNO 140?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The last names of the students that minor in the department with DNO 140 is Lee.",
                "query": "SELECT T2.Lname  FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140",
                "result": [
                    [
                        [
                            "LName"
                        ],
                        [
                            "Lee"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT LName FROM Student WHERE StuID IN (SELECT StuID FROM Minor_in WHERE DNO = 140)"
            },
            {
                "isuser": true,
                "text": "What are the ages of the students with the last name Lee?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The ages of the students with the last name Lee are listed.",
                "query": "SELECT age from Student where LName = 'Lee'",
                "result": [
                    [
                        [
                            "Age"
                        ],
                        [
                            17
                        ],
                        [
                            16
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Age FROM Student WHERE LName = 'Lee'"
            },
            {
                "isuser": true,
                "text": "What are the department numbers of the students with the last name Smith?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry, there is no attribute in the table as department number.",
                "query": "",
                "result": [],
                "predict_type": "SORRY",
                "predict": "SELECT DNO FROM Student WHERE LName = 'Smith'"
            },
            {
                "isuser": true,
                "text": "What are the student ids of the students with the last name Smith?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The student ids of the students with the last name Smith are listed.",
                "query": "SELECT StuID from Student where LName = 'Smith'",
                "result": [
                    [
                        [
                            "StuID"
                        ],
                        [
                            1001
                        ],
                        [
                            1031
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT StuID FROM Student WHERE LName = 'Smith'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "college_1",
        "turns": [
            {
                "isuser": true,
                "text": "Can you Please list all departments?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT DEPT_NAME FROM DEPARTMENT",
                "result": [
                    [
                        [
                            "DEPT_NAME"
                        ],
                        [
                            "Accounting"
                        ],
                        [
                            "Fine Arts"
                        ],
                        [
                            "Biology"
                        ]
                    ]
                ],
                "predict_type": "",
                "predict": "SELECT T1.dept_name FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_name HAVING count(*)  >  1"
            },
            {
                "isuser": true,
                "text": "Thank You.  Can you provide the department code for each of these?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are all distinct department codes. ",
                "query": "SELECT \tdistinct(DEPT_CODE) FROM DEPARTMENT",
                "result": [
                    [
                        [
                            "DEPT_CODE"
                        ],
                        [
                            "ACCT"
                        ],
                        [
                            "ART"
                        ],
                        [
                            "BIOL"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.dept_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code HAVING count(*)  >  1"
            },
            {
                "isuser": true,
                "text": "Thank you.  Can you provide the names of students taking classes in CIS?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T1.stu_fname, T1.STU_LNAME FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'",
                "result": [
                    [
                        [
                            "STU_FNAME",
                            "STU_LNAME"
                        ],
                        [
                            "William",
                            "Bowser"
                        ],
                        [
                            "Anne",
                            "Smithson"
                        ],
                        [
                            "William",
                            "Bowser"
                        ]
                    ]
                ],
                "predict_type": "",
                "predict": "SELECT T1.stu_fname, T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.class_code  =  'CIS 121'"
            },
            {
                "isuser": true,
                "text": "Just the First name?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the first names of students taking classes in CIS.",
                "query": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'",
                "result": [
                    [
                        [
                            "STU_FNAME"
                        ],
                        [
                            "William"
                        ],
                        [
                            "Anne"
                        ],
                        [
                            "William"
                        ]
                    ]
                ],
                "predict_type": "UNKNOWN",
                "predict": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.class_code  =  'CIS 121'"
            },
            {
                "isuser": true,
                "text": "Which one of these students also has a class in ACCT?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'",
                "result": [
                    [
                        [
                            "STU_FNAME"
                        ],
                        [
                            "Anne"
                        ],
                        [
                            "William"
                        ]
                    ]
                ],
                "predict_type": "",
                "predict": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.class_code  =  'ACCT 101'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Welcome! Bye.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "network_2",
        "turns": [
            {
                "isuser": true,
                "text": "Show me the names",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the name of all the person?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT name FROM Person"
            },
            {
                "isuser": true,
                "text": "name of all the persons",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of all the persons.",
                "query": "SELECT name FROM Person",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Alice"
                        ],
                        [
                            "Bob"
                        ],
                        [
                            "Dan"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM Person"
            },
            {
                "isuser": true,
                "text": "show me the name of persons",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "The names of persons are Alice, Bob, Dan and Zach",
                "query": "SELECT T1.name FROM Person AS T1 ",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Alice"
                        ],
                        [
                            "Bob"
                        ],
                        [
                            "Dan"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM Person"
            },
            {
                "isuser": true,
                "text": "Who has a friend from New York?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Zach has a friend from New York.",
                "query": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.city = 'new york city'",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Zach"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM PersonFriend WHERE friend IN (SELECT name FROM Person WHERE city = 'New York')"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "baseball_1",
        "turns": [
            {
                "isuser": true,
                "text": "Which team had the most players in the all star games?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the information about the team that had the most players in the all star games.",
                "query": "SELECT * FROM all_star GROUP BY team_id ORDER BY count(*) DESC LIMIT 1;",
                "result": [
                    [
                        [
                            "player_id",
                            "year",
                            "game_num",
                            "game_id",
                            "team_id",
                            "league_id",
                            "gp",
                            "starting_pos"
                        ],
                        [
                            "teixema01",
                            2015,
                            0,
                            "NLS201507140",
                            "NYA",
                            "AL",
                            1,
                            ""
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT team_id, count(*) AS player_count FROM all_star GROUP BY team_id ORDER BY player_count DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "WHich player has the most all star games played?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the information about the player that has the most all star games played.",
                "query": "SELECT T1.* FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;",
                "result": [
                    [
                        [
                            "player_id",
                            "birth_year",
                            "birth_month",
                            "birth_day",
                            "birth_country",
                            "birth_state",
                            "birth_city",
                            "death_year",
                            "death_month",
                            "death_day",
                            "death_country",
                            "death_state",
                            "death_city",
                            "name_first",
                            "name_last",
                            "name_given",
                            "weight",
                            "height",
                            "bats",
                            "throws",
                            "debut",
                            "final_game",
                            "retro_id",
                            "bbref_id"
                        ],
                        [
                            "aaronha01",
                            1934,
                            2,
                            5,
                            "USA",
                            "AL",
                            "Mobile",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "Hank",
                            "Aaron",
                            "Henry Louis",
                            180,
                            72,
                            "R",
                            "R",
                            "1954-04-13",
                            "1976-10-03",
                            "aaroh101",
                            "aaronha01"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT player_id, count(*) AS game_count FROM all_star GROUP BY player_id ORDER BY game_count DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is his id?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "aaronha01 is the id of the player that has the most all star games played.",
                "query": "SELECT T1.player_id FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1;",
                "result": [
                    [
                        [
                            "player_id"
                        ],
                        [
                            "aaronha01"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT player_id FROM all_star GROUP BY player_id ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!\n",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You're welcome! Bye.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "dorm_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many amenities are offered in all dorms?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are 12 amenities  offered",
                "query": "select count(*) from Dorm_amenity",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            12
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid"
            },
            {
                "isuser": true,
                "text": "Could you tell me the names of these amenities?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are  the names of these amenities",
                "query": "select amenity_name from Dorm_amenity",
                "result": [
                    [
                        [
                            "amenity_name"
                        ],
                        [
                            "TV Lounge"
                        ],
                        [
                            "Study Room"
                        ],
                        [
                            "Pub in Basement"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid"
            },
            {
                "isuser": true,
                "text": "What is the name of the most common amenity in all dorms?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the name of the most common amenity in all dorms is Roof",
                "query": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "amenity_name"
                        ],
                        [
                            "Roof"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "flight_1",
        "turns": [
            {
                "isuser": true,
                "text": "can you show me average of the distances?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average distance of all flights is 2853.2",
                "query": "SELECT avg(distance) FROM Flight ",
                "result": [
                    [
                        [
                            "avg(distance)"
                        ],
                        [
                            2853.2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(distance) FROM aircraft"
            },
            {
                "isuser": true,
                "text": "which one is the longest distance?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The maximum distance is 7487",
                "query": "SELECT max(distance) FROM Flight ",
                "result": [
                    [
                        [
                            "max(distance)"
                        ],
                        [
                            7487
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name, distance FROM aircraft ORDER BY distance DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "what is the highest price?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The highest price is 780.99",
                "query": "SELECT max(price) FROM Flight ",
                "result": [
                    [
                        [
                            "max(price)"
                        ],
                        [
                            780.99
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(price) FROM flight"
            },
            {
                "isuser": true,
                "text": "thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "department_store",
        "turns": [
            {
                "isuser": true,
                "text": "Details of staff id 1?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the staff gender and staff name of staff id 1?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT staff_gender ,  staff_name FROM staff WHERE staff_id = 1"
            },
            {
                "isuser": true,
                "text": "yes\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The staff gender and staff name of staff id 1 are 1 and Tom respectively.",
                "query": "SELECT staff_gender,  staff_name FROM staff where staff_id=1",
                "result": [
                    [
                        [
                            "staff_gender",
                            "staff_name"
                        ],
                        [
                            "1",
                            "Tom"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT staff_gender ,  staff_name FROM staff WHERE staff_id = 1"
            },
            {
                "isuser": true,
                "text": "Give the id and name of the staff who has been assigned for the shortest period?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The id and name of the staff who has been assigned for the shortest period are 1 and Tom respectively.",
                "query": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1",
                "result": [
                    [
                        [
                            "staff_id",
                            "staff_name"
                        ],
                        [
                            1,
                            "Tom"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT staff_id ,  staff_name FROM staff WHERE staff_id IN (SELECT staff_id FROM staff_department_assignments GROUP BY staff_id ORDER BY count(*) ASC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "job title code for staff id?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean all the job title codes for all the staff ids?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT job_title_code FROM staff_department_assignments WHERE staff_id = 1"
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "All the job title codes for all the staff ids are listed.",
                "query": "SELECT  job_title_code from Staff_Department_Assignments",
                "result": [
                    [
                        [
                            "job_title_code"
                        ],
                        [
                            "Department Manager"
                        ],
                        [
                            "Sales Person"
                        ],
                        [
                            "Clerical Staff"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT staff_gender ,  staff_name FROM staff WHERE staff_id = 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "chinook_1",
        "turns": [
            {
                "isuser": true,
                "text": "What is the title of AC/DC's albums?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The titles of AC/DC's albums are For Those About To Rock We Salute You and Let There Be Rock.",
                "query": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"",
                "result": [
                    [
                        [
                            "Title"
                        ],
                        [
                            "For Those About To Rock We Salute You"
                        ],
                        [
                            "Let There Be Rock"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Title FROM ALBUM WHERE ArtistId = 1"
            },
            {
                "isuser": true,
                "text": "How many songs are there in \"Let there Be Rock\"?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry, I don't have the answer to your question.",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT COUNT(*) FROM TRACK WHERE AlbumId = 2"
            },
            {
                "isuser": true,
                "text": "What about balls to the wall?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry, I don't have the answer to your question.",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT COUNT(*) FROM TRACK WHERE AlbumId = 1"
            },
            {
                "isuser": true,
                "text": "How many songs does AC/DC have in that album?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry, I don't have the answer to your question. We don't have the tables that store the number of songs in an album.",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT COUNT(*) FROM TRACK WHERE AlbumId = 1"
            },
            {
                "isuser": true,
                "text": "Thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Do you want anything else?",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "No. I am satisfied. Thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "network_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many friends in this table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 20 friends in the table.",
                "query": "SELECT count(*) FROM Friend",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            20
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Friend"
            },
            {
                "isuser": true,
                "text": "Find average grade of the students?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you want me to find the average grade of entries in the Highschooler table?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT avg(grade) FROM Highschooler"
            },
            {
                "isuser": true,
                "text": "Yes?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average grade of entries in the Highschooler table is 10.5.",
                "query": "SELECT avg(grade) FROM Highschooler",
                "result": [
                    [
                        [
                            "avg(grade)"
                        ],
                        [
                            10.5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(grade) FROM Highschooler"
            },
            {
                "isuser": true,
                "text": "Show names of all high school students?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are all the distinct names of entries in the Highschooler table.",
                "query": "SELECT DISTINCT name  FROM Highschooler",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Jordan"
                        ],
                        [
                            "Gabriel"
                        ],
                        [
                            "Tiffany"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM Highschooler"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you! Goodbye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "csu_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many degrees did \"San Jose State University\" confer in 2000?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "San Jose State University conferred 3951 degrees in the year 2000.",
                "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000",
                "result": [
                    [
                        [
                            "Degrees"
                        ],
                        [
                            3951
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Degrees FROM degrees WHERE Campus = 1 AND Year = 2000"
            },
            {
                "isuser": true,
                "text": "What about for campus id 5?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The total number of degrees conferred by the campus with id 5 is 33683.",
                "query": "SELECT sum(degrees) FROM degrees WHERE Campus = 5",
                "result": [
                    [
                        [
                            "sum(degrees)"
                        ],
                        [
                            33683
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Degrees FROM degrees WHERE Campus = 5 AND Year = 2000"
            },
            {
                "isuser": true,
                "text": "What is the name of that campus?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of campus with id 5 is California State University-East Bay.",
                "query": "SELECT distinct T1.Campus FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t2.Campus = 5",
                "result": [
                    [
                        [
                            "Campus"
                        ],
                        [
                            "California State University-East Bay"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT campus FROM campuses WHERE id = 5"
            },
            {
                "isuser": true,
                "text": "What is the name of campus with id 19?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of campus with id 19 is San Jose State University.",
                "query": "SELECT distinct T1.Campus FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t2.Campus = 19",
                "result": [
                    [
                        [
                            "Campus"
                        ],
                        [
                            "San Jose State University"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT campus FROM campuses WHERE id = 19"
            },
            {
                "isuser": true,
                "text": "How many degrees did \"San Jose State University\" confer in 2001?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "San Jose State University conferred 4072 degrees in 2001.",
                "query": "SELECT sum(degrees) FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2001",
                "result": [
                    [
                        [
                            "sum(degrees)"
                        ],
                        [
                            4072
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Degrees FROM degrees WHERE Campus = 1 AND Year = 2001"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "customers_and_invoices",
        "turns": [
            {
                "isuser": true,
                "text": "Show the first name and last name for the customer with account name 900.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The first name and last name for the customer with account name 900 are Meaghan and Keeling",
                "query": "SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"900\"",
                "result": [
                    [
                        [
                            "customer_first_name",
                            "customer_last_name"
                        ],
                        [
                            "Meaghan",
                            "Keeling"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.account_name  =  '900'"
            },
            {
                "isuser": true,
                "text": "What is a login name of Dee A Larkin?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The login name for the customer whose customer first name, customer middle initial, customer last name are Dee, A, and Larkin  is xhartmann",
                "query": "SELECT login_name FROM customers WHERE Customer_first_name = \"Dee\" AND Customer_middle_initial = \"A\" AND Customer_last_name = \"Larkin\"",
                "result": [
                    [
                        [
                            "login_name"
                        ],
                        [
                            "xhartmann"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.login_name FROM Customers AS T1 WHERE T1.customer_first_name = \"Dee\" AND T1.customer_last_name = \"A\" AND T1.customer_middle_initial = \"Larkin\""
            },
            {
                "isuser": true,
                "text": "Final question is How many customers in the table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 15 customers in total.",
                "query": "SELECT COUNT(customer_id) FROM customers",
                "result": [
                    [
                        [
                            "COUNT(customer_id)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM Customers"
            },
            {
                "isuser": true,
                "text": "Thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "no problem, bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "college_2",
        "turns": [
            {
                "isuser": true,
                "text": "Who are the students that have more than one advisor?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are no students that have more than one advisor.",
                "query": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1",
                "result": [
                    [
                        [
                            "name"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T1.id HAVING count(*)  >  1"
            },
            {
                "isuser": true,
                "text": "How many students have more than one credit?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of the names of the students with more than one credit.",
                "query": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING T1.tot_cred  >  1",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Manber"
                        ],
                        [
                            "Zelty"
                        ],
                        [
                            "Duan"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T1.id HAVING count(*)  >  1"
            },
            {
                "isuser": true,
                "text": "How many students have more than 115 credits?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of the names of the students with more than 115 credits.",
                "query": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING T1.tot_cred  >  115",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Ugarte"
                        ],
                        [
                            "Kieras"
                        ],
                        [
                            "More"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T1.id HAVING sum(T1.tot_cred)  >  115"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "entertainment_awards",
        "turns": [
            {
                "isuser": true,
                "text": "show the different type of artworks?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the different types of artworks",
                "query": "SELECT distinct TYPE FROM artwork ",
                "result": [
                    [
                        [
                            "Type"
                        ],
                        [
                            "Program Music/Variety Show"
                        ],
                        [
                            "Presenter Music/Variety Show"
                        ],
                        [
                            "Program Talent Show"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T1.Type FROM artwork AS T1"
            },
            {
                "isuser": true,
                "text": "Show the most common type of artworks?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The most common type is Program Music/Variety Show",
                "query": "SELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Type"
                        ],
                        [
                            "Program Music/Variety Show"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Type, COUNT(*) AS num_artworks FROM artwork AS T1 GROUP BY T1.Type ORDER BY num_artworks DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Show the type of artwork Loving you?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "\nThe type of artwork Loving you is Presenter Music/Variety Show",
                "query": "SELECT TYPE FROM artwork where name = \"Loving you\"",
                "result": [
                    [
                        [
                            "Type"
                        ],
                        [
                            "Presenter Music/Variety Show"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Type FROM artwork AS T1 WHERE T1.Name = \"Loving you\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "products_gen_characteristics",
        "turns": [
            {
                "isuser": true,
                "text": "how many distinct names of the products have characteristc name warm?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is 1 distinct name of the product that has characteristc name warm",
                "query": "SELECT count(DISTINCT t1.product_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\"",
                "result": [
                    [
                        [
                            "count(DISTINCT t1.product_name)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(DISTINCT product_name) FROM products AS T1 JOIN product_characteristics AS T2 ON T1.product_id  =  T2.product_id JOIN characteristics AS T3 ON T2.characteristic_id  =  T3.characteristic_id WHERE T3.characteristic_name  =  'warm'"
            },
            {
                "isuser": true,
                "text": "Which distinct name is that?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The distinct name of the product that has characteristc name warm is chervil",
                "query": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\"",
                "result": [
                    [
                        [
                            "product_name"
                        ],
                        [
                            "chervil"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT product_name FROM products AS T1 JOIN product_characteristics AS T2 ON T1.product_id  =  T2.product_id JOIN characteristics AS T3 ON T2.characteristic_id  =  T3.characteristic_id WHERE T3.characteristic_name  =  'warm'"
            },
            {
                "isuser": true,
                "text": "What is the name of a spice with buying price of 352447.2874677?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the product with typical buying price of 352447.2874677 is peper",
                "query": "SELECT product_name from products where typical_buying_price = 352447.2874677",
                "result": [
                    [
                        [
                            "product_name"
                        ],
                        [
                            "peper"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product_name FROM products WHERE typical_buying_price = 352447.2874677"
            },
            {
                "isuser": true,
                "text": "What is its color code?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The color code of the product with typical buying price of 352447.2874677 is 2",
                "query": "SELECT color_code from products where typical_buying_price = 352447.2874677",
                "result": [
                    [
                        [
                            "color_code"
                        ],
                        [
                            "2"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT color_code FROM products WHERE typical_buying_price = 352447.2874677"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "tracking_share_transactions",
        "turns": [
            {
                "isuser": true,
                "text": "Can you show the dates of transactions with at least 100 share count?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list of the dates of transactions with at least 100 share count.",
                "query": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >=  100",
                "result": [
                    [
                        [
                            "date_of_transaction"
                        ],
                        [
                            "1988-09-16 19:02:51"
                        ],
                        [
                            "1982-06-06 17:19:00"
                        ],
                        [
                            "1979-04-27 06:03:59"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >=  100"
            },
            {
                "isuser": true,
                "text": "Hmm, I want to know the dates of transactions with amount bigger than 100 please.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list of the dates of transactions with amount bigger than 100.",
                "query": "SELECT date_of_transaction FROM TRANSACTIONS WHERE  amount_of_transaction  >  100",
                "result": [
                    [
                        [
                            "date_of_transaction"
                        ],
                        [
                            "1988-09-16 19:02:51"
                        ],
                        [
                            "1979-04-27 06:03:59"
                        ],
                        [
                            "1985-10-08 13:13:39"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT date_of_transaction FROM TRANSACTIONS WHERE amount_of_transaction  >  100"
            },
            {
                "isuser": true,
                "text": "Can you list the dates of transactions for all of them?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list of the dates of transactions with at least 100 share count or amount bigger than 100.",
                "query": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >=  100 OR amount_of_transaction  >  100",
                "result": [
                    [
                        [
                            "date_of_transaction"
                        ],
                        [
                            "1988-09-16 19:02:51"
                        ],
                        [
                            "1982-06-06 17:19:00"
                        ],
                        [
                            "1979-04-27 06:03:59"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT date_of_transaction FROM TRANSACTIONS WHERE amount_of_transaction  >  100 OR share_count  >=  100"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "cre_Doc_Control_Systems",
        "turns": [
            {
                "isuser": true,
                "text": "how many documents are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 8 documents.",
                "query": "SELECT count(*) FROM Draft_Copies ",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Documents"
            },
            {
                "isuser": true,
                "text": "What's the least amount of draft copies that a document has?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the least amount of draft copies that a document has is 1.",
                "query": "SELECT count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) LIMIT 1;",
                "result": [
                    [
                        [
                            "count(copy_number)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT min(copy_number) FROM Draft_Copies"
            },
            {
                "isuser": true,
                "text": "What's the most amount of draft copies that a document has?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the most amount of draft copies that a document has is 2.",
                "query": "SELECT count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;",
                "result": [
                    [
                        [
                            "count(copy_number)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(copy_number) FROM Draft_Copies"
            },
            {
                "isuser": true,
                "text": "what's the id of the document that has the most draft copies?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the id of the document that has the most draft copies is 2.",
                "query": "SELECT document_id FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;",
                "result": [
                    [
                        [
                            "document_id"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_id FROM Draft_Copies GROUP BY document_id ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "how many draft copies does that document have?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The document that has the most draft copies has 2 draft copies.",
                "query": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;",
                "result": [
                    [
                        [
                            "document_id",
                            "count(copy_number)"
                        ],
                        [
                            2,
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Draft_Copies WHERE document_id = 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "driving_school",
        "turns": [
            {
                "isuser": true,
                "text": "how many address are presented on the table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 15 addresses presented",
                "query": "SELECT count(*) from addresses",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Addresses"
            },
            {
                "isuser": true,
                "text": "list out the staff first name on the table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are all the first names of the staffs",
                "query": "SELECT first_name from staff",
                "result": [
                    [
                        [
                            "first_name"
                        ],
                        [
                            "Janessa"
                        ],
                        [
                            "Camylle"
                        ],
                        [
                            "Kaitlin"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name FROM Staff"
            },
            {
                "isuser": true,
                "text": "what is the city of Janessa",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the staff with first name Janessa lives in the city of Damianfort",
                "query": "SELECT T1.city from addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" ",
                "result": [
                    [
                        [
                            "city"
                        ],
                        [
                            "Damianfort"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT city FROM Addresses WHERE first_name = \"Janessa\""
            },
            {
                "isuser": true,
                "text": "what is the address of Kaitlin",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Do you mean the staff with first name as Kaitlin?",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "SELECT line_1_number_building FROM Addresses WHERE first_name = \"Kaitlin\""
            },
            {
                "isuser": true,
                "text": "exactly",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the address of the staff with the first name Kaitlin",
                "query": "SELECT T1.* from addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Kaitlin\" ",
                "result": [
                    [
                        [
                            "address_id",
                            "line_1_number_building",
                            "city",
                            "zip_postcode",
                            "state_province_county",
                            "country"
                        ],
                        [
                            5,
                            "354 Frederik Ridge",
                            "Powlowskichester",
                            "27559",
                            "Ohio",
                            "USA"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT line_1_number_building FROM Addresses WHERE first_name = \"Kaitlin\""
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "debate",
        "turns": [
            {
                "isuser": true,
                "text": "Can you show me the names of the people who were on the affirmative side of debates with an audience bigger than 200?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The following table shows the names of the people who were on the affirmative side of debates with an audience bigger than 200.",
                "query": "SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID WHERE T2.Num_of_Audience  >  200",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Luther C. Carter"
                        ],
                        [
                            "William B. Maclay"
                        ],
                        [
                            "James Humphrey"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Name FROM people AS T1 JOIN debate_people AS T2 ON T1.People_ID  =  T2.Affirmative WHERE T2.Num_of_Audience  >  200"
            },
            {
                "isuser": true,
                "text": "Of those three, who is the oldest?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "James Humphrey is the oldest person who was on the affirmative side of debates with an audience bigger than 200. ",
                "query": "SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID WHERE T2.Num_of_Audience  >  200 order by T3.age desc limit 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "James Humphrey"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name, Age FROM people WHERE People_ID IN (SELECT Affirmative FROM debate_people WHERE Num_of_Audience > 200) ORDER BY Age DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What party affiliation does James Humphrey hold?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "James Humphrey is affiliated with the Republican party.",
                "query": "SELECT party from people where name = \"James Humphrey\"",
                "result": [
                    [
                        [
                            "Party"
                        ],
                        [
                            "Republican"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Party FROM people WHERE Name = \"James Humphrey\""
            },
            {
                "isuser": true,
                "text": "What district does James Humphrey represent?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "James Humphrey represents the district New York 2 ",
                "query": "SELECT district from people where name = \"James Humphrey\"",
                "result": [
                    [
                        [
                            "District"
                        ],
                        [
                            "New York 2"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT District FROM people WHERE Name = \"James Humphrey\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "department_store",
        "turns": [
            {
                "isuser": true,
                "text": "Find the id of customers whose address contains WY state and do not use credit card for payment.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The id of the customer whose address contains WY state and do not use credit card for payment is 4",
                "query": "SELECT customer_id FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"",
                "result": [
                    [
                        [
                            "customer_id"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_id FROM customers WHERE customer_address LIKE '%WY%' AND payment_method_code != 'Credit Card'"
            },
            {
                "isuser": true,
                "text": "Can I have the customer's name please?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the customer whose address contains WY state and do not use credit card for payment is Lexus",
                "query": "SELECT customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"",
                "result": [
                    [
                        [
                            "customer_name"
                        ],
                        [
                            "Lexus"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_name FROM customers WHERE customer_address LIKE '%WY%' AND payment_method_code != 'Credit Card'"
            },
            {
                "isuser": true,
                "text": "Please find the id and name of customers whose address contains WY state and use credit card for payment.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the id and name of customers whose address contains WY state and use credit card for payment",
                "query": "SELECT customer_id , customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"",
                "result": [
                    [
                        [
                            "customer_id",
                            "customer_name"
                        ],
                        [
                            4,
                            "Lexus"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_id, customer_name FROM customers WHERE customer_address LIKE '%WY%' AND payment_method_code = 'Credit Card'"
            },
            {
                "isuser": true,
                "text": "Hmm. Can you please give me his email address and phone?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the email address and phone of customers whose address contains WY state and use credit card for payment",
                "query": "SELECT customer_email, customer_phone FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"",
                "result": [
                    [
                        [
                            "customer_email",
                            "customer_phone"
                        ],
                        [
                            "gbrekke@example.com",
                            "+08(3)8056580281"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_email, customer_phone FROM customers WHERE customer_address LIKE '%WY%' AND payment_method_code = 'Credit Card'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "theme_gallery",
        "turns": [
            {
                "isuser": true,
                "text": "Show the theme for exhibitions with records of an attendance below 100",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of the  themes for exhibitions with records of attendance below 100",
                "query": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 ",
                "result": [
                    [
                        [
                            "Theme"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT theme FROM exhibition WHERE exhibition_id IN (SELECT exhibition_id FROM exhibition_record WHERE attendance < 100)"
            },
            {
                "isuser": true,
                "text": "Show the theme for exhibitions with records of an attendance above 500",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of the themes for exhibitions with records of attendance above 500. For example, one of the themes is Santa Claus.",
                "query": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500",
                "result": [
                    [
                        [
                            "Theme"
                        ],
                        [
                            "Santa Claus"
                        ],
                        [
                            "Santa Claus"
                        ],
                        [
                            "Santa Claus"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT theme FROM exhibition WHERE exhibition_id IN (SELECT exhibition_id FROM exhibition_record WHERE attendance > 500)"
            },
            {
                "isuser": true,
                "text": "Show me the dates of those exhibitions",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of the dates of the exhibitions with records of attendance above 500. For example, one of the dates is December 2.",
                "query": "SELECT T1.date FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500",
                "result": [
                    [
                        [
                            "Date"
                        ],
                        [
                            "December 2"
                        ],
                        [
                            "December 5"
                        ],
                        [
                            "December 7"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT date FROM exhibition_record WHERE attendance > 500"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "apartment_rentals",
        "turns": [
            {
                "isuser": true,
                "text": "What are the building short name of building id 133?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The building short name of the building with id 133 is Normandie Court.",
                "query": "SELECT building_short_name FROM Apartment_Buildings WHERE building_id = 133",
                "result": [
                    [
                        [
                            "building_short_name"
                        ],
                        [
                            "Normandie Court"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT building_short_name FROM Apartment_Buildings WHERE building_id = 133"
            },
            {
                "isuser": true,
                "text": "Who is building manager of Mercedes House?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The building manager of Mercedes House is Brenden.",
                "query": "SELECT building_manager FROM Apartment_Buildings WHERE building_full_name = \"Mercedes House\"",
                "result": [
                    [
                        [
                            "building_manager"
                        ],
                        [
                            "Brenden"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT building_manager FROM Apartment_Buildings WHERE building_short_name = 'Mercedes House'"
            },
            {
                "isuser": true,
                "text": "Find the building address of building manager Melyssa.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The building address of the building that Melyssa manages is 71537 Gorczany Inlet Wisozkburgh, AL 08256.",
                "query": "SELECT building_address FROM Apartment_Buildings WHERE building_manager = \"Melyssa\"",
                "result": [
                    [
                        [
                            "building_address"
                        ],
                        [
                            "71537 Gorczany Inlet\nWisozkburgh, AL 08256"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT building_address FROM Apartment_Buildings WHERE building_manager = 'Melyssa'"
            },
            {
                "isuser": true,
                "text": "What are the building full names that contain the word \"court\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the building full names that contain word \"court\".",
                "query": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\"\n\n",
                "result": [
                    [
                        [
                            "building_full_name"
                        ],
                        [
                            "Normandie Court"
                        ],
                        [
                            "Windsor Court"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE '%court%'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Goodbye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "poker_player",
        "turns": [
            {
                "isuser": true,
                "text": "How many poker players are there ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 5 poker players.",
                "query": "select count(*) from poker_player",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM poker_player"
            },
            {
                "isuser": true,
                "text": "How many of them earning more than 300000",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 2 poker players who have an earning more than 300000",
                "query": "SELECT count(*) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM poker_player WHERE Earnings > 300000"
            },
            {
                "isuser": true,
                "text": "May i get the name detail of both players",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of poker players who have an earning more than 300000",
                "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Aleksey Ostapenko"
                        ],
                        [
                            "Maksim Botin"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player WHERE Earnings > 300000)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "museum_visit",
        "turns": [
            {
                "isuser": true,
                "text": "How many museums do you have?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 8 museums.",
                "query": "SELECT count(*) from museum",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM museum"
            },
            {
                "isuser": true,
                "text": "What is the number of staff members in each museum?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of staff members in each museum is listed in the table.",
                "query": "SELECT Num_of_Staff from museum",
                "result": [
                    [
                        [
                            "Num_of_Staff"
                        ],
                        [
                            62
                        ],
                        [
                            25
                        ],
                        [
                            18
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name ,  num_of_staff FROM museum"
            },
            {
                "isuser": true,
                "text": "Can you tell me the id and the name of the museum, which has the most staff members?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The id and the name of the museum who has the most staff members is 1 and Plaza Museum.",
                "query": "SELECT Museum_ID, Name from museum order by Num_of_Staff desc limit 1",
                "result": [
                    [
                        [
                            "Museum_ID",
                            "Name"
                        ],
                        [
                            1,
                            "Plaza Museum"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "riding_club",
        "turns": [
            {
                "isuser": true,
                "text": "What is the most common occupation of players?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the most common occupation of the players is Parliamentarian.",
                "query": "SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Occupation"
                        ],
                        [
                            "Parliamentarian"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Occupation, COUNT(*) AS Occupation_Count FROM player GROUP BY Occupation ORDER BY Occupation_Count DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What about least common?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the least common occupation of the players is Design Coordinator.",
                "query": "SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) LIMIT 1",
                "result": [
                    [
                        [
                            "Occupation"
                        ],
                        [
                            "Design Coordinator"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Occupation, COUNT(*) AS Occupation_Count FROM player GROUP BY Occupation ORDER BY Occupation_Count ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What are their names?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "did you mean the names of the players who have the least common occupation?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT Player_name FROM player WHERE Occupation = 'Player'"
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the name of the player whose occupation is the least common is Ross C. Martin.",
                "query": "SELECT Player_name FROM player GROUP BY Occupation ORDER BY COUNT(*) LIMIT 1",
                "result": [
                    [
                        [
                            "Player_name"
                        ],
                        [
                            "Ross C. Martin"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Player_name FROM player WHERE Occupation = 'Player'"
            },
            {
                "isuser": true,
                "text": "What about most common?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the name of the player with the most common occupation is Judy Wasylycia-Leis.",
                "query": "SELECT Player_name FROM player GROUP BY Occupation ORDER BY COUNT(*) desc LIMIT 1",
                "result": [
                    [
                        [
                            "Player_name"
                        ],
                        [
                            "Judy Wasylycia-Leis"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Occupation, COUNT(*) AS Occupation_Count FROM player GROUP BY Occupation ORDER BY Occupation_Count DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is his sponsor name?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the sponsor name of the player with the most common occupation is Winnipeg North.",
                "query": "SELECT Sponsor_name FROM player GROUP BY Occupation ORDER BY COUNT(*) desc LIMIT 1",
                "result": [
                    [
                        [
                            "Sponsor_name"
                        ],
                        [
                            "Winnipeg North"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Sponsor_name FROM player WHERE Player_name = 'Lionel Messi'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "insurance_and_eClaims",
        "turns": [
            {
                "isuser": true,
                "text": "Can you show me the policy ids, customer ids and policy type codes of all policies?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "this shows the policy ids, customer ids and policy type codes of all policies",
                "query": "SELECT Policy_ID,Customer_ID,Policy_Type_Code FROM policies ",
                "result": [
                    [
                        [
                            "Policy_ID",
                            "Customer_ID",
                            "Policy_Type_Code"
                        ],
                        [
                            125,
                            808,
                            "Deputy"
                        ],
                        [
                            151,
                            380,
                            "Jurisdiction"
                        ],
                        [
                            287,
                            334,
                            "Jurisdiction"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Policy_ID, Customer_ID, Policy_Type_Code FROM Policies"
            },
            {
                "isuser": true,
                "text": "Can you list the policy type codes of all the policies used?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here is the policy type codes of all the policies used",
                "query": "SELECT Policy_Type_Code FROM policies ",
                "result": [
                    [
                        [
                            "Policy_Type_Code"
                        ],
                        [
                            "Deputy"
                        ],
                        [
                            "Jurisdiction"
                        ],
                        [
                            "Jurisdiction"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Policy_Type_Code FROM Policies"
            },
            {
                "isuser": true,
                "text": "Which type of policy is most frequently used? Can you give me the policy type code?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the  policy type code of  Uniformed is most frequently used",
                "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Policy_Type_Code"
                        ],
                        [
                            "Uniformed"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Policy_Type_Code FROM Policies GROUP BY Policy_Type_Code ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome, goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "csu_1",
        "turns": [
            {
                "isuser": true,
                "text": "Hello. What universities are in San Francisco?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Would you like to know the names of all campuses located in San Francisco?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT campus FROM campuses WHERE location = \"San Francisco\""
            },
            {
                "isuser": true,
                "text": "That would be great!",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The only campus located in San Francisco is San Francisco State University.",
                "query": "SELECT Campus FROM Campuses WHERE Location = 'San Francisco'",
                "result": [
                    [
                        [
                            "Campus"
                        ],
                        [
                            "San Francisco State University"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT campus FROM campuses WHERE location = \"San Francisco\""
            },
            {
                "isuser": true,
                "text": "Okay. What was the fee of San Francisco State University in 1996?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The campus fee for San Francisco State University in the year 1996 is 1978.",
                "query": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND T2.year  =  1996",
                "result": [
                    [
                        [
                            "CampusFee"
                        ],
                        [
                            1978
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT campusfee FROM csu_fees WHERE campus = 2 AND year = 1996"
            },
            {
                "isuser": true,
                "text": "Was that the highest of the State campuses in that year?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "No, 1976 was not the highest campus fee in that year.",
                "query": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus ORDER BY campusfee DESC LIMIT 1",
                "result": [
                    [
                        [
                            "CampusFee"
                        ],
                        [
                            2258
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT campusfee FROM csu_fees WHERE campus IN (SELECT id FROM campuses WHERE county = \"San Benito\") AND year = 1996"
            },
            {
                "isuser": true,
                "text": "And which campus had a fee of 2258 in 1996?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The campus name California Maritime Academy corresponds to the campus fee of 2258 in the year 1996.",
                "query": "SELECT T1.Campus FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t2.year  = 1996 AND T2.CampusFee = 2258",
                "result": [
                    [
                        [
                            "Campus"
                        ],
                        [
                            "California  Maritime Academy"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT campus FROM csu_fees WHERE campusfee = 2258 AND year = 1996"
            },
            {
                "isuser": true,
                "text": "Interesting! What county is that in?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The county name Solano corresponds to the campus fee of 2258 in the year 1996.",
                "query": "SELECT T1.County FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t2.year  = 1996 AND T2.CampusFee = 2258",
                "result": [
                    [
                        [
                            "County"
                        ],
                        [
                            "Solano"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT county FROM campuses WHERE id = 1"
            },
            {
                "isuser": true,
                "text": "And what county is San Francisco State University in?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "San Francisco State University has county San Francisco.",
                "query": "SELECT county FROM campuses WHERE Campus = 'San Francisco State University'",
                "result": [
                    [
                        [
                            "County"
                        ],
                        [
                            "San Francisco"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT county FROM campuses WHERE id = 2"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you! Goodbye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "tracking_software_problems",
        "turns": [
            {
                "isuser": true,
                "text": "What are the number of products that had problems?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 15 products that had problems.",
                "query": "SELECT count(*) FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Product WHERE product_id IN (SELECT product_id FROM Problems)"
            },
            {
                "isuser": true,
                "text": "Could you please list their product ids?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are the ids of the products that had problems.",
                "query": "SELECT t2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id",
                "result": [
                    [
                        [
                            "product_id"
                        ],
                        [
                            4
                        ],
                        [
                            8
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product_id FROM Product WHERE product_id IN (SELECT product_id FROM Problems)"
            },
            {
                "isuser": true,
                "text": "What are the number of problems each of these had?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are the ids of products and the number of problems each product had.",
                "query": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id",
                "result": [
                    [
                        [
                            "count(*)",
                            "product_id"
                        ],
                        [
                            4,
                            1
                        ],
                        [
                            2,
                            2
                        ],
                        [
                            3,
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) ,  product_id FROM Product WHERE product_id IN (SELECT product_id FROM Problems) GROUP BY product_id"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "wrestler",
        "turns": [
            {
                "isuser": true,
                "text": "list the location that was share by more than two wrestler",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The locations with more than 2 wrestler entries are Tijuana, Mexico and Tokyo, Japan.",
                "query": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2",
                "result": [
                    [
                        [
                            "Location"
                        ],
                        [
                            "Tijuana , Mexico"
                        ],
                        [
                            "Tokyo , Japan"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2"
            },
            {
                "isuser": true,
                "text": "which of them has the highest days held",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Among the locations with more than 2 wrestler entries, the location with the highest days held is Tokyo, Japan.",
                "query": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2 ORDER BY days_held DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Location"
                        ],
                        [
                            "Tokyo , Japan"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name,Days_held FROM wrestler WHERE Days_held = (SELECT MAX(Days_held) FROM wrestler)"
            },
            {
                "isuser": true,
                "text": "what are the name of the wrestler ",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Would you like to know the names of all wrestlers with location Tokyo, Japan?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT Name FROM wrestler WHERE Days_held = (SELECT MAX(Days_held) FROM wrestler)"
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list of all wrestlers with a location Tokyo, Japan.",
                "query": "SELECT name FROM wrestler WHERE LOCATION = 'Tokyo , Japan'",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Gran Hamada"
                        ],
                        [
                            "El Samurai"
                        ],
                        [
                            "The Great Sasuke §"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM wrestler WHERE Days_held = (SELECT MAX(Days_held) FROM wrestler)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you! Goodbye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "cre_Docs_and_Epenses",
        "turns": [
            {
                "isuser": true,
                "text": "What is the name of the document on project \"Graph Database project\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the name of the document on project \"Graph Database project\"",
                "query": "SELECT document_name  FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'",
                "result": [
                    [
                        [
                            "Document_Name"
                        ],
                        [
                            "Review on Canadian files"
                        ],
                        [
                            "Review on USA files"
                        ],
                        [
                            "Chapter on private files"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_name FROM Documents WHERE project_id = 2"
            },
            {
                "isuser": true,
                "text": "What are the document dates?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the document date for all documents on project with details 'Graph Database project'",
                "query": "SELECT document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'",
                "result": [
                    [
                        [
                            "Document_Date"
                        ],
                        [
                            "2012-12-27 19:09:18"
                        ],
                        [
                            "1981-11-29 10:23:01"
                        ],
                        [
                            "1970-06-17 14:03:21"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_date FROM Documents"
            },
            {
                "isuser": true,
                "text": "What is their description?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the  document description for all documents on project with details 'Graph Database project'",
                "query": "SELECT Document_Description\t FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'",
                "result": [
                    [
                        [
                            "Document_Description"
                        ],
                        [
                            null
                        ],
                        [
                            null
                        ],
                        [
                            null
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_description FROM Documents"
            },
            {
                "isuser": true,
                "text": "Thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "architecture",
        "turns": [
            {
                "isuser": true,
                "text": "Can I please have a list of architects who have built at least two bridges, or at least one mill?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "What attributes of the architects do you want?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT DISTINCT T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id UNION SELECT DISTINCT T1.name FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id GROUP BY T1.name HAVING count(*)  >=  1"
            },
            {
                "isuser": true,
                "text": "Can you please tell me the names and the ids of the architects who have built two bridges?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the names and the ids of the architects who have built two bridges are 3, Zaha Hadid and 4, Mies Van Der Rohe.",
                "query": "SELECT T1.id ,  T1.name  FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2",
                "result": [
                    [
                        [
                            "id",
                            "name"
                        ],
                        [
                            "3",
                            "Zaha Hadid"
                        ],
                        [
                            "4",
                            "Mies Van Der Rohe"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.name ,  T1.id FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.name HAVING count(*)  >=  2"
            },
            {
                "isuser": true,
                "text": "Are these architects male, or female?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Among the architects who have built two bridges, one of them is male and another one is female.",
                "query": "SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 ",
                "result": [
                    [
                        [
                            "id",
                            "name",
                            "gender"
                        ],
                        [
                            "3",
                            "Zaha Hadid",
                            "female"
                        ],
                        [
                            "4",
                            "Mies Van Der Rohe",
                            "male"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.name HAVING count(*)  >=  2"
            },
            {
                "isuser": true,
                "text": "Great. Would you please list the ids, names and genders of architects have built one mill?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of the ids, names, and genders of architects have built one mill. For example, one of them is Frank Gehry with id being 2 who is male.",
                "query": " SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1",
                "result": [
                    [
                        [
                            "id",
                            "name",
                            "gender"
                        ],
                        [
                            "2",
                            "Frank Gehry",
                            "male"
                        ],
                        [
                            "3",
                            "Zaha Hadid",
                            "female"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.name HAVING count(*)  =  1"
            },
            {
                "isuser": true,
                "text": "Has Zaha Hadid built any bridges longer than 200 meters?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "No Zaha Hadid has not built any bridges longer than 200 meters.",
                "query": "SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id WHERE T1.Name = \"Zaha Hadid\" AND length_meters > 200",
                "result": [
                    [
                        [
                            "id",
                            "name",
                            "gender"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.name ,  T1.nationality ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id WHERE T2.length_meters  >  200"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "bike_1",
        "turns": [
            {
                "isuser": true,
                "text": "Good morning, could you please let me know the IDs of the stations those are located in San Francisco?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table shows the ids of stations that are located in San Francisco.",
                "query": "SELECT id FROM station WHERE city = \"San Francisco\" ",
                "result": [
                    [
                        [
                            "id"
                        ],
                        [
                            39
                        ],
                        [
                            41
                        ],
                        [
                            42
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT id FROM station WHERE city = 'San Francisco'"
            },
            {
                "isuser": true,
                "text": "That's a big list, thank you. Then could you please let me know which of these stations has more than 10 bikes available?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "You are welcome. Here is the result table shows the ids of stations that are located in San Francisco and have bike availability above 10.",
                "query": "SELECT id FROM station WHERE city = \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING bikes_available > 10",
                "result": [
                    [
                        [
                            "id"
                        ],
                        [
                            45
                        ],
                        [
                            48
                        ],
                        [
                            51
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT station_id FROM status WHERE bikes_available > 10"
            },
            {
                "isuser": true,
                "text": "That was fast, thank you again :) Could you please let me know which station is located in the highest latitude? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "It's my pleasure to help you. The name of the station located in the highest latitude is \"Embarcadero at Sansome\".",
                "query": "select name from station order by lat desc limit 1",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Embarcadero at Sansome"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM station WHERE lat = (SELECT max(lat) FROM station)"
            },
            {
                "isuser": true,
                "text": "Awesome, then could you please let me know the installation date of the station?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Of course, the installation date of the station located in the highest latitude is \"8/6/2013\".",
                "query": "select installation_date from station order by lat desc limit 1",
                "result": [
                    [
                        [
                            "installation_date"
                        ],
                        [
                            "8/21/2013"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT installation_date FROM station WHERE name = 'San Francisco'"
            },
            {
                "isuser": true,
                "text": "Thank you, then could you please let me know if there are any stations those have earlier installation date than 8/6/2013?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes, and there is 61 stations have earlier installation date than 8/6/2013.",
                "query": "select count(*) from station where installation_date<'8/6/2013'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            61
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM station WHERE installation_date < '8/6/2013'"
            },
            {
                "isuser": true,
                "text": "Wow that's a lot. Thank you again, this will be my last question :) Could you please let me know the ID of the station which has the biggest number of docks available among these 61 stations? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Of course, the station with id \"61\" has the biggest number of docks available among these 61 stations which have earlier installation date than 8/6/2013.",
                "query": "select id from station where installation_date<'8/6/2013' order by dock_count desc limit 1",
                "result": [
                    [
                        [
                            "id"
                        ],
                        [
                            61
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT station_id FROM status WHERE docks_available = (SELECT max(docks_available) FROM status)"
            },
            {
                "isuser": true,
                "text": "You make things really clear, I believe the people who get to work with you are lucky! :) I really appreciate your time and help, hope you have a wonderful day ahead. Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome! I'm glad I could help. Have a great day!"
            }
        ]
    },
    {
        "db_name": "game_1",
        "turns": [
            {
                "isuser": true,
                "text": "show student ids who are female and play football",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Student IDs for students with sex F and sportname Football are 1002 and 1003.",
                "query": "SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"",
                "result": [
                    [
                        [
                            "StuID"
                        ],
                        [
                            1002
                        ],
                        [
                            1003
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT StuID FROM SportsInfo WHERE SportName = \"Football\" AND OnScholarship = \"No\" AND Sex = \"F\""
            },
            {
                "isuser": true,
                "text": "what is the name of the student with the id 1002",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Would you like first name and last name of the student with student id 1002?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT Fname, Lname FROM Student WHERE StuID = 1002"
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the student with student id 1002 is Tracy Kim.",
                "query": "SELECT Fname, Lname FROM Student WHERE StuID = 1002",
                "result": [
                    [
                        [
                            "Fname",
                            "LName"
                        ],
                        [
                            "Tracy",
                            "Kim"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Fname, Lname FROM Student WHERE StuID = 1002"
            },
            {
                "isuser": true,
                "text": "what is the first name and last name of the student with the student id 1003",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The entry with student ID 1003 has first name Shiela and last name Jones.",
                "query": "SELECT Fname, Lname FROM Student WHERE StuID = 1003",
                "result": [
                    [
                        [
                            "Fname",
                            "LName"
                        ],
                        [
                            "Shiela",
                            "Jones"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Fname, Lname FROM Student WHERE StuID = 1003"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you! Goodbye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "dorm_1",
        "turns": [
            {
                "isuser": true,
                "text": "Can you show me the dorms with female only students?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the information about the dorm with gender F.",
                "query": "SELECT * FROM dorm where gender = \"F\"",
                "result": [
                    [
                        [
                            "dormid",
                            "dorm_name",
                            "student_capacity",
                            "gender"
                        ],
                        [
                            109,
                            "Anonymous Donor Hall",
                            128,
                            "F"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT dorm_name FROM dorm WHERE dormid IN (SELECT dormid FROM lives_in WHERE stuid IN (SELECT stuid FROM student WHERE sex = 'F'))"
            },
            {
                "isuser": true,
                "text": "okay, can you show me all the names of dorm with male only students?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the information about the dorm with gender M.",
                "query": "SELECT * FROM dorm where gender = \"M\"",
                "result": [
                    [
                        [
                            "dormid",
                            "dorm_name",
                            "student_capacity",
                            "gender"
                        ],
                        [
                            110,
                            "Bud Jones Hall",
                            116,
                            "M"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT dorm_name FROM dorm WHERE dormid IN (SELECT dormid FROM lives_in WHERE stuid IN (SELECT stuid FROM student WHERE sex = 'M'))"
            },
            {
                "isuser": true,
                "text": "what about the name of the dorms that are both male and female?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the information about the dorms with gender M or F.",
                "query": "SELECT * FROM dorm where gender = \"M\" or gender = \"F\"",
                "result": [
                    [
                        [
                            "dormid",
                            "dorm_name",
                            "student_capacity",
                            "gender"
                        ],
                        [
                            110,
                            "Bud Jones Hall",
                            116,
                            "M"
                        ],
                        [
                            109,
                            "Anonymous Donor Hall",
                            128,
                            "F"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT dorm_name FROM dorm WHERE dormid IN (SELECT dormid FROM lives_in WHERE stuid IN (SELECT stuid FROM student WHERE sex = 'F') INTERSECT SELECT dormid FROM lives_in WHERE stuid IN (SELECT stuid FROM student WHERE sex = 'M'))"
            },
            {
                "isuser": true,
                "text": "show me the name of dorms that are no gender specific?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of names for dorms with gender X.",
                "query": "SELECT dorm_name FROM dorm where gender = \"X\"",
                "result": [
                    [
                        [
                            "dorm_name"
                        ],
                        [
                            "Smith Hall"
                        ],
                        [
                            "Fawlty Towers"
                        ],
                        [
                            "Dorm-plex 2000"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM lives_in WHERE stuid IN (SELECT stuid FROM student WHERE sex = 'F') INTERSECT SELECT dormid FROM lives_in WHERE stuid IN (SELECT stuid FROM student WHERE sex = 'M'))"
            },
            {
                "isuser": true,
                "text": "Show me all dorm names",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of all dorm names.",
                "query": "SELECT dorm_name FROM dorm",
                "result": [
                    [
                        [
                            "dorm_name"
                        ],
                        [
                            "Smith Hall"
                        ],
                        [
                            "Bud Jones Hall"
                        ],
                        [
                            "Fawlty Towers"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT dorm_name FROM dorm"
            },
            {
                "isuser": true,
                "text": "Can you tell me which one of them do not have TV Lounge?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of dorms that do not have amenity TV Lounge.",
                "query": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'",
                "result": [
                    [
                        [
                            "dorm_name"
                        ],
                        [
                            "Bud Jones Hall"
                        ],
                        [
                            "Grad Student Asylum"
                        ],
                        [
                            "Smith Hall"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity WHERE amenid = 3)"
            },
            {
                "isuser": true,
                "text": "and which one DO have TV Lounge?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of dorms that have amenity TV Lounge",
                "query": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'",
                "result": [
                    [
                        [
                            "dorm_name"
                        ],
                        [
                            "Anonymous Donor Hall"
                        ],
                        [
                            "Fawlty Towers"
                        ],
                        [
                            "Dorm-plex 2000"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT dorm_name FROM dorm WHERE dormid IN (SELECT dormid FROM has_amenity WHERE amenid = 3)"
            },
            {
                "isuser": true,
                "text": "Thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks. bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "customers_and_invoices",
        "turns": [
            {
                "isuser": true,
                "text": "how many Invoices there",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 15 invoices.",
                "query": "SELECT count(*) from invoices",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Invoices"
            },
            {
                "isuser": true,
                "text": "how many orders there",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 15 orders.",
                "query": "SELECT count(*) from orders",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Orders"
            },
            {
                "isuser": true,
                "text": "what is the customer id of order id 3",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The customer id associated with order id 3 is 8.",
                "query": "SELECT customer_id from orders where order_id = 3",
                "result": [
                    [
                        [
                            "customer_id"
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_id FROM Orders WHERE order_id = 3"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "flight_4",
        "turns": [
            {
                "isuser": true,
                "text": "Find the destination of the airport least number of routes in china?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The destination of the airport with the least number of routes in China is Alashankou Bole (Bortala) airport.",
                "query": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) ASC LIMIT 1",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Alashankou Bole (Bortala) airport"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT dst_ap FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country = 'China') GROUP BY dst_ap ORDER BY count(*) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "how many airports in the list?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 7184 airports in the list.",
                "query": "SELECT DISTINCT(COUNT(name)) FROM airports",
                "result": [
                    [
                        [
                            "(COUNT(name))"
                        ],
                        [
                            7184
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM airports WHERE country = 'China' AND apid IN (SELECT dst_apid FROM routes)"
            },
            {
                "isuser": true,
                "text": "find the country in the list?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "What do you mean?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT country FROM airports WHERE apid IN (SELECT dst_apid FROM routes) GROUP BY country"
            },
            {
                "isuser": true,
                "text": "how many country in the list?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 237 countries in the list.",
                "query": "SELECT COUNT(DISTINCT country) FROM airports",
                "result": [
                    [
                        [
                            "COUNT(DISTINCT(country))"
                        ],
                        [
                            237
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM airports WHERE apid IN (SELECT dst_apid FROM routes) GROUP BY country"
            },
            {
                "isuser": true,
                "text": "Thanks",
                "type": "improper"
            }
        ]
    },
    {
        "db_name": "cinema",
        "turns": [
            {
                "isuser": true,
                "text": "Show all the locations where some cinemas were opened in year 2010",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "this shows the locations where some cinemas were opened in the year 2010",
                "query": "SELECT LOCATION FROM cinema WHERE openning_year  =  2010",
                "result": [
                    [
                        [
                            "Location"
                        ],
                        [
                            "County Wicklow"
                        ],
                        [
                            "County Tipperary"
                        ],
                        [
                            "County Laois"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT LOCATION FROM cinema WHERE openning_year = 2010"
            },
            {
                "isuser": true,
                "text": "Show all the locations where some cinemas were opened in year 2011",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "County Tipperary and County Clare are the locations that have some cinema in the year 2011",
                "query": "SELECT LOCATION FROM cinema WHERE openning_year  =  2011",
                "result": [
                    [
                        [
                            "Location"
                        ],
                        [
                            "County Tipperary"
                        ],
                        [
                            "County Clare"
                        ],
                        [
                            "County Clare"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT LOCATION FROM cinema WHERE openning_year = 2011"
            },
            {
                "isuser": true,
                "text": "How many locations where cinemas were opened in both year 2010 and 2011?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "1 cinema was opened in both the year 2010 and the year 2011",
                "query": "select count(*) from\n(SELECT LOCATION FROM cinema WHERE openning_year  =  2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year  =  2011)",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(DISTINCT LOCATION) FROM cinema WHERE openning_year IN (2010, 2011)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome,goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "student_transcripts_tracking",
        "turns": [
            {
                "isuser": true,
                "text": "Hello!  Can you tell me how many students in total there are on this list?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "15 students in total there are on this list",
                "query": "SELECT count(*) FROM Students ",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Students"
            },
            {
                "isuser": true,
                "text": "Excellent!  Can you show me a list of all 15 students and list their first names, middle names, and last names?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "this shows the  first names, middle names of all 15 students",
                "query": "SELECT first_name,\tmiddle_name,\tlast_name  FROM Students ",
                "result": [
                    [
                        [
                            "first_name",
                            "middle_name",
                            "last_name"
                        ],
                        [
                            "Timmothy",
                            "Anna",
                            "Ward"
                        ],
                        [
                            "Hobart",
                            "Lorenz",
                            "Balistreri"
                        ],
                        [
                            "Warren",
                            "Violet",
                            "Gleichner"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name, middle_name, last_name FROM Students"
            },
            {
                "isuser": true,
                "text": "Thanks!  Can you update this list to include the \"date first registered\" information associated with each student?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "this shows the  \"date first registered\" information associated with each student",
                "query": "SELECT \tdate_first_registered\t  FROM Students ",
                "result": [
                    [
                        [
                            "date_first_registered"
                        ],
                        [
                            "1971-02-05 07:28:23"
                        ],
                        [
                            "1976-10-26 02:33:06"
                        ],
                        [
                            "2007-08-29 23:25:41"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name, middle_name, last_name, date_first_registered FROM Students"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome,goodbye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "race_track",
        "turns": [
            {
                "isuser": true,
                "text": "Which was the most recently opened track?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Chicagoland Speedway is the most recently opened track.",
                "query": "SELECT name FROM track ORDER BY year_opened DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Chicagoland Speedway"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM track ORDER BY year_opened DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the seating capacity for Chicagoland Speedway?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The seating capacity of the track Chicagoland Speedway is 75000.0",
                "query": "SELECT Seating FROM track where Name = 'Chicagoland Speedway'",
                "result": [
                    [
                        [
                            "Seating"
                        ],
                        [
                            75000.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT seating FROM track WHERE name = \"Chicagoland Speedway\""
            },
            {
                "isuser": true,
                "text": "What is the location of the Chicagoland Speedway tract?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The location of the Chicagoland Speedway track is Joliet, IL.",
                "query": "SELECT Location FROM track where Name = 'Chicagoland Speedway'",
                "result": [
                    [
                        [
                            "Location"
                        ],
                        [
                            "Joliet, IL"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT location FROM track WHERE name = \"Chicagoland Speedway\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "farm",
        "turns": [
            {
                "isuser": false,
                "text": "Do you mean the themes for competitions in those cities?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable",
                "predict": "SELECT T2.Theme FROM farm_competition AS T1 JOIN farm_competition AS T2 ON T1.Competition_ID = T2.Competition_ID WHERE T1.Host_city_ID IN (SELECT T3.City_ID FROM city AS T3 WHERE T3.Status = \"Town\")"
            },
            {
                "isuser": true,
                "text": "Which cities have populations larger than 1000? List their ids.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The city ids for cities that have  populations larger than 1000 are 1, 2, and 3.",
                "query": "SELECT city_id FROM city WHERE population > 1000",
                "result": [
                    [
                        [
                            "City_ID"
                        ],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.City_ID FROM city AS T1 WHERE T1.Population > 1000"
            },
            {
                "isuser": true,
                "text": "What is the theme for these cities?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "The themes of competitions with host cities having populations larger than 1000 are Carnival M is back!, Codehunters, and MTV Asia Aid",
                "query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000",
                "result": [
                    [
                        [
                            "Theme"
                        ],
                        [
                            "Carnival M is back!"
                        ],
                        [
                            "Codehunters"
                        ],
                        [
                            "MTV Asia Aid"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Theme FROM farm_competition AS T1 JOIN farm_competition AS T2 ON T1.Competition_ID = T2.Competition_ID WHERE T1.Host_city_ID IN (SELECT T3.City_ID FROM city AS T3 WHERE T3.Population > 1000)"
            },
            {
                "isuser": true,
                "text": "Which cities have populations less than 1000? List their ids.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The city ids of the cities that have populations less than 1000 are 4 and 5",
                "query": "SELECT DISTINCT T1.CITY_ID FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  <  1000",
                "result": [
                    [
                        [
                            "City_ID"
                        ],
                        [
                            4
                        ],
                        [
                            5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.City_ID FROM city AS T1 WHERE T1.Population < 1000"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "No problem, bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "browser_web",
        "turns": [
            {
                "isuser": true,
                "text": "how many accelerators are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 19 web client accelerators",
                "query": "SELECT count(*) FROM web_client_accelerator",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            19
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM web_client_accelerator"
            },
            {
                "isuser": true,
                "text": "what accelerators are not compatible with the browsers?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This shows the info for all accelerators that are not compatible with the browsers",
                "query": "SELECT * FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );",
                "result": [
                    [
                        [
                            "id",
                            "name",
                            "Operating_system",
                            "Client",
                            "Connection"
                        ],
                        [
                            5,
                            "Freewire",
                            "Windows, except NT and 95",
                            "ISP",
                            "Dial-up"
                        ],
                        [
                            6,
                            "Google Web Accelerator (discontinued)",
                            "Windows",
                            "user/Google server",
                            "Broadband"
                        ],
                        [
                            7,
                            "Heigh Speed",
                            "Windows",
                            "All",
                            "Any"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.name FROM web_client_accelerator AS T1 JOIN browser AS T2 ON T1.id != T2.id"
            },
            {
                "isuser": true,
                "text": "can you tell me how many accelerators are not compatible?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "14 accelerators are not compatible with the browsers",
                "query": "SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            14
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM web_client_accelerator AS T1 JOIN browser AS T2 ON T1.id != T2.id"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure! What else can I do?",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "OK Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "customers_and_products_contacts",
        "turns": [
            {
                "isuser": true,
                "text": "How many products have a price higher than the average?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of products that have a price higher than the average is 3. ",
                "query": "SELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM products WHERE product_price > (SELECT avg(product_price) FROM products)"
            },
            {
                "isuser": true,
                "text": "Can you give me the product names for these?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The product names for the products that have a price higher than the average are shown in the result table. ",
                "query": "SELECT product_name FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)",
                "result": [
                    [
                        [
                            "product_name"
                        ],
                        [
                            "Apple"
                        ],
                        [
                            "jcrew"
                        ],
                        [
                            "gucci"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product_name FROM products WHERE product_price > (SELECT avg(product_price) FROM products)"
            },
            {
                "isuser": true,
                "text": "And how many products have a price lower than the average?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of products with a price lower than the average is 12. ",
                "query": "SELECT count(*) FROM products WHERE product_price < (SELECT avg(product_price) FROM products)",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            12
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM products WHERE product_price < (SELECT avg(product_price) FROM products)"
            },
            {
                "isuser": true,
                "text": "May I have their product names please?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The distinct product names of the products with a price lower than the average are shown in the result table. ",
                "query": "SELECT distinct product_name FROM products WHERE product_price < (SELECT avg(product_price) FROM products)",
                "result": [
                    [
                        [
                            "product_name"
                        ],
                        [
                            "Apple"
                        ],
                        [
                            "jcrew"
                        ],
                        [
                            "Sony"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product_name FROM products WHERE product_price < (SELECT avg(product_price) FROM products)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, good bye. ",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "document_management",
        "turns": [
            {
                "isuser": true,
                "text": "Can you show me how many documents there are in total?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 15 documents.",
                "query": "SELECT count(*) FROM documents",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Documents"
            },
            {
                "isuser": true,
                "text": "What's the name of the document that was accessed the least amount of times?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Life about Claude Monet is the document name with the least amount of times being accessed.",
                "query": "SELECT document_name FROM documents ORDER BY access_count ASC LIMIT 1",
                "result": [
                    [
                        [
                            "document_name"
                        ],
                        [
                            "Life about Claude Monet"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_name FROM Documents ORDER BY access_count ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "How about the name of the document that was accessed the most amount of times?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the document that was accessed the most amount of times is Relationships between History and Arts",
                "query": "SELECT document_name FROM documents ORDER BY access_count DESC LIMIT 1",
                "result": [
                    [
                        [
                            "document_name"
                        ],
                        [
                            "Relationships between History and Arts"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_name FROM Documents ORDER BY access_count DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "How many times has that document been accessed?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of access times for the document that was accessed the most amount of times is 9948.",
                "query": "SELECT  access_count FROM documents ORDER BY access_count DESC LIMIT 1",
                "result": [
                    [
                        [
                            "access_count"
                        ],
                        [
                            9948
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT access_count FROM Documents WHERE document_name = (SELECT document_name FROM Documents ORDER BY access_count ASC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "What type of document is that?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The document type code for the document with most access times is Paper",
                "query": "SELECT document_type_code\t FROM documents ORDER BY access_count DESC LIMIT 1",
                "result": [
                    [
                        [
                            "document_type_code"
                        ],
                        [
                            "Paper"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_type_code FROM Documents WHERE document_name = (SELECT document_name FROM Documents ORDER BY access_count ASC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "My pleasure. Anything else?",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "No, that will be it. Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure. Bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "Goodbye!"
            }
        ]
    },
    {
        "db_name": "pets_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many students are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are 34 students in total",
                "query": "SELECT count(StuID) FROM student ",
                "result": [
                    [
                        [
                            "count(StuID)"
                        ],
                        [
                            34
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Student;"
            },
            {
                "isuser": true,
                "text": "How old is the student whose last name is 'Smith’?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are two students' last name is 'Smith'，Their age is 18 and 20",
                "query": "SELECT Age  FROM student where LName='Smith'",
                "result": [
                    [
                        [
                            "Age"
                        ],
                        [
                            18
                        ],
                        [
                            20
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT age FROM Student WHERE LName = 'Smith';"
            },
            {
                "isuser": true,
                "text": "Can you plsease include their pets' id too?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the pet id and age of students whose last name are \"Smith'",
                "query": "SELECT T2.petid ,age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
                "result": [
                    [
                        [
                            "PetID",
                            "Age"
                        ],
                        [
                            2001,
                            18
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT StuID, count(*) FROM Has_Pet GROUP BY StuID HAVING count(*) > 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome,goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "flight_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many flights have an origin of Los Angeles?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 8 flights that have an origin of Los Angeles.",
                "query": "SELECT count(*) FROM Flight WHERE origin  =  \"Los Angeles\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM flight WHERE origin = 'Los Angeles'"
            },
            {
                "isuser": true,
                "text": "How many of those are going to Honolulu?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 2 flights that have an origin of Los Angeles and a destination of Honolulu.",
                "query": "SELECT count(*) FROM Flight WHERE origin  =  \"Los Angeles\" and destination = \"Honolulu\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM flight WHERE origin = 'Los Angeles' AND destination = 'Honolulu'"
            },
            {
                "isuser": true,
                "text": "What is their departure date and arrival date?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the departure date and arrival date for all flights that have an origin of Los Angeles and a destination of Honolulu",
                "query": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
                "result": [
                    [
                        [
                            "departure_date",
                            "arrival_date"
                        ],
                        [
                            "04/12/2005 09:15",
                            "04/12/2005 11:15"
                        ],
                        [
                            "04/12/2005 12:45",
                            "04/12/2005 03:18"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT departure_date, arrival_date FROM flight WHERE origin = 'Los Angeles' AND destination = 'Honolulu'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks. bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "movie_1",
        "turns": [
            {
                "isuser": true,
                "text": "What are the movie titles and average rating of the movies with the lowest average rating?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The movie title and average rating of the movie with the lowest average rating are listed. The title is The Sound of Music and the average rating is 2.5",
                "query": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1",
                "result": [
                    [
                        [
                            "title",
                            "avg(T1.stars)"
                        ],
                        [
                            "The Sound of Music",
                            2.5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT title, AVG(stars) AS average_rating FROM Movie, Rating WHERE Movie.mID = Rating.mID GROUP BY Rating.mID ORDER BY average_rating ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What year did the sound of music come out and who was the director?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the year of the movie whose title is The Sound of Music came out and the director of it?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT year, director FROM Movie WHERE title = \"The Sound of Music\""
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The year of the movie whose title is The Sound of Music came out is 1965. And the director of that movie is Robert Wise.",
                "query": "SELECT year ,  director FROM  Movie where title='The Sound of Music'",
                "result": [
                    [
                        [
                            "year",
                            "director"
                        ],
                        [
                            1965,
                            "Robert Wise"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT title FROM Movie WHERE year = 1965"
            },
            {
                "isuser": true,
                "text": "What movie title has the highest rating?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the title of the movie with the highest stars?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT title FROM Movie WHERE mID IN (SELECT mID FROM Rating GROUP BY mID ORDER BY AVG(stars) DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The title of the movie with the highest stars is Snow White.",
                "query": "SELECT T2.title  FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY T1.stars DESC LIMIT 1",
                "result": [
                    [
                        [
                            "title"
                        ],
                        [
                            "Snow White"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT title FROM Movie WHERE mID IN (SELECT mID FROM Rating GROUP BY mID ORDER BY AVG(stars) DESC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "department_management",
        "turns": [
            {
                "isuser": true,
                "text": "tell me the name of head id  1",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name corresponding to head ID 1 is Tiger Woods.",
                "query": "SELECT name FROM head WHERE head_ID = 1",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Tiger Woods"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM head WHERE head_ID = 1"
            },
            {
                "isuser": true,
                "text": "Tell me the born state and age for head id 3 ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The born state and age corresponding to head ID 3 is Alabama and 69.",
                "query": "SELECT born_state, age FROM head WHERE head_ID = 3",
                "result": [
                    [
                        [
                            "born_state",
                            "age"
                        ],
                        [
                            "Alabama",
                            69.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT born_state, age FROM head WHERE head_ID = 3"
            },
            {
                "isuser": true,
                "text": "Which head's name has the substring 'Ha' ? List the id and name.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of the head IDs and names of heads with names containing 'Ha'.",
                "query": "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'",
                "result": [
                    [
                        [
                            "head_ID",
                            "name"
                        ],
                        [
                            4,
                            "Dudley Hart"
                        ],
                        [
                            9,
                            "Pádraig Harrington"
                        ],
                        [
                            10,
                            "Franklin Langham"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT head_ID, name FROM head WHERE name LIKE '%Ha%'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you! Goodbye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "film_rank",
        "turns": [
            {
                "isuser": true,
                "text": "Which studio has the highest gross?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Universal is the studio with the highest gross in dollars.",
                "query": "SELECT Studio FROM film order by \tGross_in_dollar DESC limit 1",
                "result": [
                    [
                        [
                            "Studio"
                        ],
                        [
                            "Universal"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Studio FROM film ORDER BY Gross_in_dollar DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "How many studios have average gross higher than 4500000",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "10 studios have average gross higher than 4500000",
                "query": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000",
                "result": [
                    [
                        [
                            "Studio"
                        ],
                        [
                            "20th Century Fox"
                        ],
                        [
                            "Columbia"
                        ],
                        [
                            "Columbia / Rastar"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM (SELECT Studio, AVG(Gross_in_dollar) AS Avg_Gross FROM film GROUP BY Studio HAVING Avg_Gross > 4500000)"
            },
            {
                "isuser": true,
                "text": "List them please",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The following table lists all studios with average gross higher than 4500000.",
                "query": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000",
                "result": [
                    [
                        [
                            "Studio"
                        ],
                        [
                            "20th Century Fox"
                        ],
                        [
                            "Columbia"
                        ],
                        [
                            "Columbia / Rastar"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Studio FROM film GROUP BY Studio HAVING AVG(Gross_in_dollar) > 4500000"
            },
            {
                "isuser": true,
                "text": "Thanks!\n",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "climbing",
        "turns": [
            {
                "isuser": true,
                "text": "How many mountains in this table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 7 mountains in total.",
                "query": "select count(*) from mountain",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM mountain"
            },
            {
                "isuser": true,
                "text": "Show the distinct names of mountains climbed by climbers from country \"West Germany\".",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table shows the distinct names of mountains climbed by climbers from country \"West Germany\".",
                "query": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T1.Country = \"West Germany\"",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Kibo (Uhuru Pk)"
                        ],
                        [
                            "Mount Kenya (Batian)"
                        ],
                        [
                            "Mawenzi (Hans Meyer Pk)"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\""
            },
            {
                "isuser": true,
                "text": "Please show me the name of the highest mountain.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The highest mountain's name is \"Kibo (Uhuru Pk)\".",
                "query": "select Name from mountain order by Height desc limit 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Kibo (Uhuru Pk)"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "store_product",
        "turns": [
            {
                "isuser": true,
                "text": "What are the names of each district?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the names for  each district",
                "query": "select district_name from district",
                "result": [
                    [
                        [
                            "District_name"
                        ],
                        [
                            "Attock District"
                        ],
                        [
                            "Bahawalnagar District"
                        ],
                        [
                            "Bahawalpur District"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT District_name FROM District"
            },
            {
                "isuser": true,
                "text": "What are the names of the districts whose area is larger than the average city area?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "here are  the names of the districts whose area is larger than the average city area",
                "query": "SELECT district_name FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)",
                "result": [
                    [
                        [
                            "District_name"
                        ],
                        [
                            "Bahawalpur District"
                        ],
                        [
                            "Faisalabad District"
                        ],
                        [
                            "Gujranwala District"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT District_name FROM District WHERE City_Area > (SELECT AVG(City_Area) FROM District)"
            },
            {
                "isuser": true,
                "text": "What are the total population of the districts whose area is larger than the average city area?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the total population of the districts whose area is larger than the average city area is 4850327.0",
                "query": "SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)",
                "result": [
                    [
                        [
                            "sum(city_population)"
                        ],
                        [
                            4850327.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT SUM(City_Population) FROM District WHERE City_Area > (SELECT AVG(City_Area) FROM District)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "school_bus",
        "turns": [
            {
                "isuser": true,
                "text": "How many drivers are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are 12 drivers  from  dirver.",
                "query": "SELECT count(*) FROM driver ",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            12
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM driver"
            },
            {
                "isuser": true,
                "text": "What is the average age of your drivers?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the average age of drivers is  40.75",
                "query": "SELECT avg(\tAge) FROM driver ",
                "result": [
                    [
                        [
                            "avg(\tAge)"
                        ],
                        [
                            40.75
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(age) FROM driver"
            },
            {
                "isuser": true,
                "text": "How many female drivers are there?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "sorry  i  can  not  answer  this question",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT count(*) FROM driver WHERE gender = 'F'"
            },
            {
                "isuser": true,
                "text": "Thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome  goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "party_host",
        "turns": [
            {
                "isuser": false,
                "text": "Do you mean the id of the host of the earliest party?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable",
                "predict": "SELECT T1.Host_ID FROM HOST AS T1 JOIN PARTY_HOST AS T2 ON T1.Host_ID  =  T2.Host_ID ORDER BY T2.Party_ID ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Can you list the themes of the parties with the names of the party hosts?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The result table of the themes of parties and the names of the party hosts is shown.",
                "query": "SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID",
                "result": [
                    [
                        [
                            "Party_Theme",
                            "Name"
                        ],
                        [
                            "Spring",
                            "Austin Daye"
                        ],
                        [
                            "Club Q-BASE",
                            "Ed Davis"
                        ],
                        [
                            "Teqnology",
                            "Lloyd Daniels"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Party_Theme, T1.Name FROM HOST AS T1 JOIN PARTY_HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN PARTY AS T3 ON T2.Party_ID = T3.Party_ID"
            },
            {
                "isuser": true,
                "text": "What are the nationalities of the party hosts?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The nationalities of the party hosts are listed.",
                "query": "SELECT  T2.Nationality FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID",
                "result": [
                    [
                        [
                            "Nationality"
                        ],
                        [
                            "United States"
                        ],
                        [
                            "United States"
                        ],
                        [
                            "United States"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Nationality FROM HOST AS T1 JOIN PARTY_HOST AS T2 ON T1.Host_ID = T2.Host_ID"
            },
            {
                "isuser": true,
                "text": "Who was the host of the earliest party listed?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "The host of the earliest party listed is the host with id 7.",
                "query": "SELECT T2.host_id  FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID order by T3.First_year limit 1",
                "result": [
                    [
                        [
                            "Host_ID"
                        ],
                        [
                            7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Name FROM HOST AS T1 JOIN PARTY_HOST AS T2 ON T1.Host_ID = T2.Host_ID ORDER BY T2.Party_ID ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What was their name?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the host of the earliest party listed is Carlos Delfino.",
                "query": "SELECT T2.name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID order by T3.First_year limit 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Carlos Delfino"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Name FROM HOST AS T1 JOIN PARTY_HOST AS T2 ON T1.Host_ID = T2.Host_ID ORDER BY T2.Party_ID ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Were they the main in charge?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes, Carlos Delfino was the main in charge of the earliest party.",
                "query": "SELECT T1.Is_Main_in_Charge FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID order by T3.First_year limit 1",
                "result": [
                    [
                        [
                            "Is_Main_in_Charge"
                        ],
                        [
                            "T"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Name, T2.Is_Main_in_Charge FROM HOST AS T1 JOIN PARTY_HOST AS T2 ON T1.Host_ID = T2.Host_ID ORDER BY T2.Party_ID ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "customers_and_invoices",
        "turns": [
            {
                "isuser": true,
                "text": "What is the product id of order item with id 1?",
                "type": "improper"
            },
            {
                "isuser": true,
                "text": "* I have left the chat *",
                "type": "answerable",
                "predict": "SELECT product_id FROM Order_Items WHERE order_item_id = 1"
            },
            {
                "isuser": false,
                "text": "the product id of the order item with id of  1 is 4",
                "query": "SELECT product_id from Order_Items where order_item_id=1",
                "result": [
                    [
                        [
                            "product_id"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable"
            },
            {
                "isuser": true,
                "text": "How many product quantity does order item 1 have ?",
                "type": "answerable",
                "predict": "SELECT product_id FROM Order_Items WHERE order_item_id = 1"
            },
            {
                "isuser": false,
                "text": "the order item with id 1 has  product quantity of 6",
                "query": "SELECT product_quantity from Order_Items where order_item_id=1",
                "result": [
                    [
                        [
                            "product_quantity"
                        ],
                        [
                            "6"
                        ]
                    ]
                ],
                "predict_type": "answerable"
            },
            {
                "isuser": true,
                "text": "What is the product type code of order item 1?",
                "type": "answerable",
                "predict": "SELECT product_quantity FROM Order_Items WHERE order_item_id = 1"
            },
            {
                "isuser": false,
                "text": "the product type code of order item 1 is Electronics",
                "query": "SELECT production_type_code from Order_Items as T1 join Products as T2 on T1.product_id=T2.product_id where T1.order_item_id=1",
                "result": [
                    [
                        [
                            "production_type_code"
                        ],
                        [
                            "Electronics"
                        ]
                    ]
                ],
                "predict_type": "answerable"
            },
            {
                "isuser": true,
                "text": "is there any product that wasnt included in any order?",
                "type": "INFER_SQL",
                "predict": "SELECT production_type_code FROM Order_Items WHERE order_item_id = 1"
            },
            {
                "isuser": false,
                "text": "yes",
                "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            5
                        ]
                    ]
                ],
                "predict_type": "answerable"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper",
                "predict": "SELECT product_id FROM Order_Items WHERE order_item_id = 1"
            },
            {
                "isuser": false,
                "text": "you are welcome, goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME"
            }
        ]
    },
    {
        "db_name": "party_people",
        "turns": [
            {
                "isuser": true,
                "text": "WHO IS THE HON TONY ABBOTT",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "did you mean the Member ID of HON TONY ABBOTT",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT Minister FROM party WHERE Party_name = \"Liberal Party\""
            },
            {
                "isuser": true,
                "text": "YES EXACTLY",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "HON TONY ABBOTT's  Member ID is 1",
                "query": "SELECT Member_ID FROM Member  where Member_Name='Hon Tony Abbott'",
                "result": [
                    [
                        [
                            "Member_ID"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Minister FROM party WHERE Party_name = \"Liberal Party\""
            },
            {
                "isuser": true,
                "text": "WHAT IS THE NAME OF PARTY WITH MOST NUMBER OF MEMBERS",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "THE NAME OF THE PARTY WITH THE GREATEST NUMBER OF MEMBERS is 3",
                "query": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Party_name"
                        ],
                        [
                            "3"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Party_name FROM party GROUP BY Party_name ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "THANKS",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome, goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "e_learning",
        "turns": [
            {
                "isuser": true,
                "text": "What is the latest test completion date?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The latest test completion date of all student tests is 2018-03-22 18:04:54. ",
                "query": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id order by T1.date_of_completion desc limit 1",
                "result": [
                    [
                        [
                            "date_of_completion"
                        ],
                        [
                            "2018-03-22 18:04:54"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(date_of_completion) FROM Student_Tests_Taken"
            },
            {
                "isuser": true,
                "text": "How many students have taken tests?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 12 different students who have taken tests. ",
                "query": "SELECT count(distinct student_id) from  student_course_enrolment",
                "result": [
                    [
                        [
                            "count(distinct student_id)"
                        ],
                        [
                            12
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Student_Tests_Taken"
            },
            {
                "isuser": true,
                "text": "How many students failed tests?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of students that failed test is 4. ",
                "query": "SELECT count(distinct T1.student_id) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"",
                "result": [
                    [
                        [
                            "count(distinct T1.student_id)"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Student_Tests_Taken WHERE test_result = 'Failed'"
            },
            {
                "isuser": true,
                "text": "When did these failures occur?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The completion dates of all the tests that have result \"Fail\" are shown in the result table. ",
                "query": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"",
                "result": [
                    [
                        [
                            "date_of_completion"
                        ],
                        [
                            "2018-03-02 14:38:49"
                        ],
                        [
                            "2018-03-22 18:04:54"
                        ],
                        [
                            "2018-03-22 18:04:54"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result = 'Failed'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, good bye. ",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "device",
        "turns": [
            {
                "isuser": true,
                "text": "what are the shops?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you want the names of all the shops?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT Shop_Name FROM shop"
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of all the shops",
                "query": "select shop_name from shop",
                "result": [
                    [
                        [
                            "Shop_Name"
                        ],
                        [
                            "Dinas Device"
                        ],
                        [
                            "Best Buy"
                        ],
                        [
                            "Ferndale"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Shop_Name FROM shop"
            },
            {
                "isuser": true,
                "text": "now show me the shop which have devices in stock",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of shops which have devices in stock.",
                "query": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID",
                "result": [
                    [
                        [
                            "Shop_Name"
                        ],
                        [
                            "Dinas Device"
                        ],
                        [
                            "Best Buy"
                        ],
                        [
                            "Ferndale"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Shop_Name FROM shop WHERE Shop_ID IN (SELECT Shop_ID FROM stock)"
            },
            {
                "isuser": true,
                "text": "now show me the shops that have more than one device in stock",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of shops which have more than one device in stock",
                "query": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1",
                "result": [
                    [
                        [
                            "Shop_Name"
                        ],
                        [
                            "Dinas Device"
                        ],
                        [
                            "Ferndale"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Shop_Name FROM shop WHERE Shop_ID IN (SELECT Shop_ID FROM stock GROUP BY Shop_ID HAVING COUNT(*) > 1)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "products_for_hire",
        "turns": [
            {
                "isuser": true,
                "text": "can you show me a list of product description?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list of product description.",
                "query": "SELECT product_description FROM Products_for_Hire",
                "result": [
                    [
                        [
                            "product_description"
                        ],
                        [
                            "Anna Karenina"
                        ],
                        [
                            "War and Peace"
                        ],
                        [
                            "The Great Gatsby"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product_description FROM products_for_hire"
            },
            {
                "isuser": true,
                "text": "what are the start date and end of date of the booking that has booked the product named 'book collection A'?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the start date and end of date of the booking that has booked the product named 'book collection A'.",
                "query": "SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  'Book collection A'",
                "result": [
                    [
                        [
                            "booking_start_date",
                            "booking_end_date"
                        ],
                        [
                            "2016-11-27 17:19:40",
                            "2018-03-04 21:42:45"
                        ],
                        [
                            "2017-04-28 08:35:56",
                            "2018-01-18 23:54:44"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT booking_start_date ,  booking_end_date FROM products_booked WHERE product_id = 1"
            },
            {
                "isuser": true,
                "text": "thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You're welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            },
            {
                "isuser": true,
                "text": "what is the average of booked amount?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the average booked amount.",
                "query": "SELECT avg(booked_amount) FROM Products_Booked",
                "result": [
                    [
                        [
                            "avg(booked_amount)"
                        ],
                        [
                            229.52166666666668
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(booked_amount) FROM products_booked"
            },
            {
                "isuser": true,
                "text": "thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "baseball_1",
        "turns": [
            {
                "isuser": true,
                "text": "What is the full name and id of the college with the largest number of baseball players?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The full name and id of the college with the largest number of baseball player sis shown in the result table. ",
                "query": "SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;",
                "result": [
                    [
                        [
                            "name_full",
                            "college_id"
                        ],
                        [
                            "University of Texas at Austin",
                            "texas"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "And how many players go there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of players that go to the college with the largest number of baseball players is 107. ",
                "query": "select count(distinct player_id) from player_college where college_id = (SELECT T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1);",
                "result": [
                    [
                        [
                            "count(distinct player_id)"
                        ],
                        [
                            107
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM player_college WHERE college_id = (SELECT college_id FROM college WHERE name_full = (SELECT name_full FROM college WHERE name_full = (SELECT name_full FROM college GROUP BY name_full ORDER BY count(*) DESC LIMIT 1)))"
            },
            {
                "isuser": true,
                "text": "And where is that college located?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The college with the largest number of baseball players is located in Austin, TX, USA. ",
                "query": "SELECT T1.city, T1.state, T1.country FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;",
                "result": [
                    [
                        [
                            "city",
                            "state",
                            "country"
                        ],
                        [
                            "Austin",
                            "TX",
                            "USA"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.city ,  T1.state FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "And what year did the largest number of baseball players attend that college?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The year in which the largest number of baseball players attended the college was 1979.",
                "query": "Select year from player_college where college_id = (SELECT T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1) group by college_id order by year desc limit 1",
                "result": [
                    [
                        [
                            "playercount"
                        ],
                        [
                            1979
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.year FROM player_college AS T1 JOIN college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "How many baseball players attended that college in 2018?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of baseball players that attended the college with id in 2018 is 0.  ",
                "query": "Select count(player_id) from player_college where year = \"2018\" and college_id = \"texas\"\n\n\n",
                "result": [
                    [
                        [
                            "count(player_id)"
                        ],
                        [
                            0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM player_college WHERE year = 2018 AND college_id = (SELECT college_id FROM college WHERE name_full = (SELECT name_full FROM college WHERE name_full = (SELECT name_full FROM college GROUP BY name_full ORDER BY count(*) DESC LIMIT 1)))"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, good bye. ",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "customers_and_invoices",
        "turns": [
            {
                "isuser": true,
                "text": "Show all product names and the number of customers having an order on each product.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are all product names and the number of customers having an order on each product",
                "query": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name",
                "result": [
                    [
                        [
                            "product_name",
                            "count(*)"
                        ],
                        [
                            "Arts",
                            2
                        ],
                        [
                            "Beer Menus",
                            1
                        ],
                        [
                            "Chocolate",
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.product_name ,  COUNT(*) FROM Order_Items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id"
            },
            {
                "isuser": true,
                "text": "Please show me unit price of books?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the unit prices for the products with production type code Books",
                "query": "select unit_price from Products where production_type_code = \"Books\"",
                "result": [
                    [
                        [
                            "unit_price"
                        ],
                        [
                            558.49
                        ],
                        [
                            469.71
                        ],
                        [
                            409.83
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT unit_price FROM Products WHERE product_name = \"Book\""
            },
            {
                "isuser": true,
                "text": "Please give me Placed order date of customer id 12?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the dates on which customer id 12 placed orders",
                "query": "select date_order_placed from Orders where customer_id = 12",
                "result": [
                    [
                        [
                            "date_order_placed"
                        ],
                        [
                            "2012-06-27 20:49:56"
                        ],
                        [
                            "2012-08-25 07:51:54"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT date_order_placed FROM Orders WHERE customer_id = 12"
            },
            {
                "isuser": true,
                "text": "Thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "college_2",
        "turns": [
            {
                "isuser": true,
                "text": "how many courses have prerequisite?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "79 courses have prerequisites.",
                "query": "SELECT count(*) FROM course WHERE course_id IN (SELECT course_id FROM prereq)",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            79
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id"
            },
            {
                "isuser": true,
                "text": "how many courses are there?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 200 courses.",
                "query": "SELECT count(*) FROM course",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            200
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM course"
            },
            {
                "isuser": true,
                "text": "How many courses that do not have prerequisite?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "121 courses don't have prerequisites.",
                "query": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            121
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You're welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "flight_company",
        "turns": [
            {
                "isuser": true,
                "text": "How many airports has pilot Thompson driven an aircraft?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of airports which the pilot Thompson drove an aircraft is 6.",
                "query": "SELECT count(*) FROM airport WHERE id IN ( SELECT airport_id FROM flight WHERE pilot  =  'Thompson' );",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM flight AS T1 JOIN airport AS T2 ON T1.airport_id = T2.id WHERE T1.pilot = \"Thompson\""
            },
            {
                "isuser": true,
                "text": "How many airports had Thompson driven by August 1963?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of airports which the pilot Thompson drove an aircraft by August 16, 1963 is 9.",
                "query": "SELECT count(*) FROM airport as T1 JOIN flight as T2 on T1.id = T2.airport_id WHERE T2.pilot  =  'Thompson' and T2.date > 'August 16, 1963';",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            9
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM flight AS T1 JOIN airport AS T2 ON T1.airport_id = T2.id WHERE T1.pilot = \"Thompson\" AND T1.Date = \"1963-08-01\""
            },
            {
                "isuser": true,
                "text": "What is the flight number of the aircraft Thompson drove in  March 1, 1963",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The flight number of the flight Thompson drove on March 1, 1963 is M2-F1 #0.",
                "query": "SELECT Vehicle_Flight_number FROM flight WHERE pilot  =  'Thompson' and date = 'March 1, 1963';",
                "result": [
                    [
                        [
                            "Vehicle_Flight_number"
                        ],
                        [
                            "M2-F1 #0"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Vehicle_Flight_number FROM flight AS T1 JOIN airport AS T2 ON T1.airport_id = T2.id WHERE T1.pilot = \"Thompson\" AND T1.Date = \"1963-03-01\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome! Goodbye.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "college_1",
        "turns": [
            {
                "isuser": false,
                "text": "Did you mean the class time for the class with code '10014'",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable",
                "predict": "SELECT CLASS_TIME FROM CLASS WHERE CLASS_CODE = '10014'"
            },
            {
                "isuser": true,
                "text": "yes for sure",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Hi, you can start by asking a simple question related to the data.",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "SELECT CLASS_TIME FROM CLASS WHERE CLASS_CODE = '10014'"
            },
            {
                "isuser": true,
                "text": "what is the class timing for the student who enrolled in 10014",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "The class time for the class with code 10014 is TTh 2:30-3:45 p.m.",
                "query": "",
                "result": [],
                "predict_type": "answerable",
                "predict": "SELECT CLASS_TIME FROM CLASS WHERE CLASS_CODE IN (SELECT CLASS_CODE FROM ENROLL WHERE STU_NUM IN (SELECT STU_NUM FROM STUDENT WHERE STU_CLASS = '10014'))"
            },
            {
                "isuser": true,
                "text": "may i know the class room for the class section 1",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "ok, so which column info do you want to return for these classes?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT CLASS_ROOM FROM CLASS WHERE CLASS_SECTION = 1"
            },
            {
                "isuser": true,
                "text": "i want to know the class room column",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "They are the class rooms where all the classes with section 1 are in.",
                "query": "SELECT CLASS_ROOM FROM CLASS WHERE CLASS_SECTION  =  1",
                "result": [
                    [
                        [
                            "CLASS_ROOM"
                        ],
                        [
                            "BUS311"
                        ],
                        [
                            "BUS311"
                        ],
                        [
                            "KLR209"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT CLASS_ROOM FROM CLASS WHERE CLASS_SECTION = 1"
            },
            {
                "isuser": true,
                "text": "thanks!!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome, bye.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "store_1",
        "turns": [
            {
                "isuser": false,
                "text": "did you mean first and last names of employees who report to Nancy Edwards?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable",
                "predict": "SELECT first_name ,  last_name FROM employees WHERE reports_to = 2"
            },
            {
                "isuser": false,
                "text": "Did you mean the full names of employees whom Nancy Edwards reports to?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Exactly.",
                "type": "answerable",
                "predict": "SELECT first_name ,  last_name FROM employees WHERE reports_to = 2"
            },
            {
                "isuser": true,
                "text": "How many employees report to Nancy Edwards?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 3 employees who report to Nancy Edwards.",
                "query": "SELECT count(*) FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\";",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM employees WHERE reports_to = 2"
            },
            {
                "isuser": true,
                "text": "What are their names?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "The table shows the first and last names of the employees who report to Nancy Edward.",
                "query": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\";",
                "result": [
                    [
                        [
                            "first_name",
                            "last_name"
                        ],
                        [
                            "Jane",
                            "Peacock"
                        ],
                        [
                            "Margaret",
                            "Park"
                        ],
                        [
                            "Steve",
                            "Johnson"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name ,  last_name FROM employees WHERE reports_to = 2"
            },
            {
                "isuser": true,
                "text": "Who does not report to Nancy Edwards?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The table shows the first and last names of the employees who do not report to Nancy Edward.",
                "query": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name != \"Nancy\" AND T1.last_name != \"Edwards\";",
                "result": [
                    [
                        [
                            "first_name",
                            "last_name"
                        ],
                        [
                            "Nancy",
                            "Edwards"
                        ],
                        [
                            "Michael",
                            "Mitchell"
                        ],
                        [
                            "Robert",
                            "King"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name ,  last_name FROM employees WHERE reports_to != 2"
            },
            {
                "isuser": true,
                "text": "Who does Nancy Edwards report to?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "The first and last names of the employee whom Nancy Edwards reports to is Andrew Adams.",
                "query": "SELECT t1.first_name , T1.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T2.first_name = \"Nancy\" AND T2.last_name = \"Edwards\";",
                "result": [
                    [
                        [
                            "first_name",
                            "last_name"
                        ],
                        [
                            "Nancy",
                            "Edwards"
                        ]
                    ],
                    [
                        [
                            "first_name",
                            "last_name"
                        ],
                        [
                            "Andrew",
                            "Adams"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name ,  last_name FROM employees WHERE id = 2"
            },
            {
                "isuser": true,
                "text": "Who does Andrew Adams report to?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "There is no one Andrew Adams reports to.",
                "query": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T2.first_name = \"Andrew\" AND T2.last_name = \"Adams\";",
                "result": [
                    [
                        [
                            "first_name",
                            "last_name"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name ,  last_name FROM employees WHERE reports_to = 2"
            },
            {
                "isuser": true,
                "text": "Who else reports to Andrew Adams?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The full name of the other employee other than Nancy Edward who reports to Andrew Adams is Michael Mitchell.",
                "query": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Andrew\" AND T1.last_name = \"Adams\" and T2.first_name != 'Nancy' and T2.last_name != 'Edwards';",
                "result": [
                    [
                        [
                            "first_name",
                            "last_name"
                        ],
                        [
                            "Michael",
                            "Mitchell"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name ,  last_name FROM employees WHERE reports_to = 3"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "solvency_ii",
        "turns": [
            {
                "isuser": true,
                "text": "Show the names of products that are in at least two events in ascending alphabetical order of product name.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names of products that are in at least two events in ascending alphabetical order of product name  are shown  in the table",
                "query": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2 ORDER BY T1.Product_Name",
                "result": [
                    [
                        [
                            "Product_Name"
                        ],
                        [
                            "Men suits"
                        ],
                        [
                            "Special Dinning"
                        ],
                        [
                            "TV Equipments"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Product_Name FROM Products WHERE Product_ID IN (SELECT Product_ID FROM Products_in_Events GROUP BY Product_ID HAVING COUNT(*) >= 2) ORDER BY Product_Name ASC"
            },
            {
                "isuser": true,
                "text": "What is the product price of men suits?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The  product price of men suits are 3298.84,\n3541.17",
                "query": "select \tProduct_Price  from  Products  where \tProduct_Name=\"Men suits\"",
                "result": [
                    [
                        [
                            "Product_Price"
                        ],
                        [
                            3298.84
                        ],
                        [
                            3541.17
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Product_Price FROM Products WHERE Product_Name = \"Men Suits\""
            },
            {
                "isuser": true,
                "text": "What is the most expensive product price?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the most expensive product price is 4895.86",
                "query": "select \tmax(Product_Price)  from  Products ",
                "result": [
                    [
                        [
                            "max(Product_Price)"
                        ],
                        [
                            4895.86
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT MAX(Product_Price) FROM Products"
            },
            {
                "isuser": true,
                "text": "How about the least expensive?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the least expensive product price is 502.15",
                "query": "select \tmin(Product_Price)  from  Products ",
                "result": [
                    [
                        [
                            "min(Product_Price)"
                        ],
                        [
                            502.15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT MIN(Product_Price) FROM Products"
            },
            {
                "isuser": true,
                "text": "What product type is the one that has the least expensive product price?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did  you  want  to get \tProduct Type  Code    that has the least expensive product price ?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT Product_Type_Code FROM Products WHERE Product_Price = (SELECT MIN(Product_Price) FROM Products)"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the Product Type Code  that has the least expensive product price is  Food ",
                "query": "select \tProduct_Type_Code  from  Products  order  by \tProduct_Price limit 1",
                "result": [
                    [
                        [
                            "Product_Type_Code"
                        ],
                        [
                            "Food"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Product_Name FROM Products WHERE Product_Price = (SELECT MIN(Product_Price) FROM Products)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome  and  bye ",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "sports_competition",
        "turns": [
            {
                "isuser": true,
                "text": "What are the names of players who get more than the average points?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The names of players who get more than the average points are Iestyn Harris and Paul Deacon (c).",
                "query": "SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player)",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Iestyn Harris"
                        ],
                        [
                            "Paul Deacon (c)"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM player WHERE points > (SELECT AVG(points) FROM player)"
            },
            {
                "isuser": true,
                "text": "Give me the name of player with the most points",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the player with most points is Paul Deacon (c).",
                "query": "SELECT name FROM player where Points = (SELECT MAX(Points) FROM player)",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Paul Deacon (c)"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM player ORDER BY points DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Which players scored highest? Give me names",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the names of player with the most points?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT name FROM player ORDER BY goals DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name with most points is Paul Deacon (c).",
                "query": "SELECT name FROM player where Points = (SELECT MAX(Points) FROM player)",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Paul Deacon (c)"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM player ORDER BY points DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Goodbye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "college_2",
        "turns": [
            {
                "isuser": true,
                "text": "How many instructors are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 50 instructors",
                "query": "SELECT count(*) FROM instructor ",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            50
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM instructor"
            },
            {
                "isuser": true,
                "text": "How many students are there?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry, I can't answer how many students there are. Could you ask something else?",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT COUNT(*) FROM student"
            },
            {
                "isuser": true,
                "text": "OK. Which instructor ids appear more than once in the advisor table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the instructor ids appear more than once in the advisor table",
                "query": "SELECT T1.id FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1",
                "result": [
                    [
                        [
                            "ID"
                        ],
                        [
                            "14365"
                        ],
                        [
                            "15347"
                        ],
                        [
                            "16807"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT i_id FROM advisor GROUP BY i_id HAVING count(*)  >  1"
            },
            {
                "isuser": true,
                "text": "What are the instructors name for each of those ids the are advising more than one student?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of instructors who are advising more than one student",
                "query": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Lembr"
                        ],
                        [
                            "Bawa"
                        ],
                        [
                            "Yazdi"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT i.name FROM instructor AS i JOIN advisor AS a ON i.id = a.i_id GROUP BY i.id HAVING count(*)  >  1"
            },
            {
                "isuser": true,
                "text": "Thanks!\n",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "activity_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many professors are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 27 faculties with a rank professor.",
                "query": "SELECT COUNT(*) FROM Faculty WHERE Rank = \"Professor\"",
                "result": [
                    [
                        [
                            "COUNT(*)"
                        ],
                        [
                            27
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Faculty WHERE Rank = \"Professor\""
            },
            {
                "isuser": true,
                "text": "how many are assistant professors?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean to ask for the number of assistant professors in total?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT count(*) FROM Faculty WHERE Rank = \"Assistant Professor\""
            },
            {
                "isuser": true,
                "text": "Well, yes.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 15 faculties with a rank of assistant professor.",
                "query": "SELECT COUNT(*) FROM Faculty WHERE Rank = \"AsstProf\"",
                "result": [
                    [
                        [
                            "COUNT(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Faculty WHERE Rank = \"Assistant Professor\""
            },
            {
                "isuser": true,
                "text": "How many or women?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean to ask for the number of female assistant professors?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT count(*) FROM Faculty WHERE Sex = \"F\""
            },
            {
                "isuser": true,
                "text": "yes, how many are women?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 3 female assistant professors.",
                "query": "SELECT count(*) FROM Faculty WHERE rank = \"AsstProf\" AND Sex = \"F\"\n",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Faculty WHERE Sex = \"F\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Good bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "tracking_software_problems",
        "turns": [
            {
                "isuser": true,
                "text": "What is the staff id of Bosco?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the staff id of staff with last name Bosco is 1.",
                "query": "SELECT staff_id FROM staff where staff_last_name = \"Bosco\"",
                "result": [
                    [
                        [
                            "staff_id"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT staff_id FROM staff WHERE staff_first_name = \"Bosco\""
            },
            {
                "isuser": true,
                "text": "Are there any problems reported by staff id 1?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Yes. This is the list of problems reported by staff id 1",
                "query": "SELECT problem_id FROM problems where reported_by_staff_id=1",
                "result": [
                    [
                        [
                            "problem_id"
                        ],
                        [
                            3
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT problem_id FROM problems WHERE reported_by_staff_id = 1"
            },
            {
                "isuser": true,
                "text": "How many total problems are there reported by staff ID 1?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 2 problems reported by staff id 1.",
                "query": "SELECT count(*) FROM problems where reported_by_staff_id=1",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM problems WHERE reported_by_staff_id = 1"
            },
            {
                "isuser": true,
                "text": "What is the full set of information associated with staff with last name Bosco?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is all the information for the staff with last name Bosco.",
                "query": "SELECT * FROM Staff where staff_last_name='Bosco'",
                "result": [
                    [
                        [
                            "staff_id",
                            "staff_first_name",
                            "staff_last_name",
                            "other_staff_details"
                        ],
                        [
                            1,
                            "Lacey",
                            "Bosco",
                            "m"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT staff_id, staff_first_name, staff_last_name, other_staff_details FROM staff WHERE staff_last_name = \"Bosco\""
            },
            {
                "isuser": true,
                "text": "What are the ids of the problems reported by staff first name Lacey?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the list of problem ids reported by staff with first name Lacey",
                "query": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Lacey\"",
                "result": [
                    [
                        [
                            "problem_id"
                        ],
                        [
                            3
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT problem_id FROM problems WHERE reported_by_staff_id = (SELECT staff_id FROM staff WHERE staff_first_name = \"Lacey\")"
            },
            {
                "isuser": true,
                "text": "Find the ids of all problems reported by staff with last name Bosco",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the list of ids of problems reported by staff with last name Bosco.",
                "query": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = \"Bosco\"",
                "result": [
                    [
                        [
                            "problem_id"
                        ],
                        [
                            3
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT problem_id FROM problems WHERE reported_by_staff_id IN (SELECT staff_id FROM staff WHERE staff_last_name = \"Bosco\")"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure! Bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "allergy_1",
        "turns": [
            {
                "isuser": true,
                "text": "What is the most common major?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "600 is the most common major",
                "query": "SELECT Major FROM Student group by Major  order by count(*) desc limit 1",
                "result": [
                    [
                        [
                            "Major"
                        ],
                        [
                            600
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Major FROM Student GROUP BY Major ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the name of the oldest student?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the last name and first name  of the oldest student",
                "query": "SELECT LName,Fname FROM Student WHERE age  =  (SELECT max(age) FROM Student)",
                "result": [
                    [
                        [
                            "LName",
                            "Fname"
                        ],
                        [
                            "Wilson",
                            "Bruce"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT StuID, LName, Fname, Age FROM Student ORDER BY Age DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is that student's Id?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the student Id of the oldest student is 1017",
                "query": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)",
                "result": [
                    [
                        [
                            "StuID"
                        ],
                        [
                            1017
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT StuID FROM Student ORDER BY Age DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome, goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "insurance_and_eClaims",
        "turns": [
            {
                "isuser": true,
                "text": "What is the customer ID who is associated with the latest policy?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "430 is the customer ID of the customer who is associated with the latest policy.",
                "query": "SELECT t2.customer_ID FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)",
                "result": [
                    [
                        [
                            "Customer_ID"
                        ],
                        [
                            430
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Customer_ID FROM Policies AS T1 JOIN Customers AS T2 ON T1.Customer_ID = T2.Customer_ID ORDER BY T1.End_Date DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "what is the name of the customer associated with customer ID 263?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Ellsworth Paucek is the name of the customer associated with customer ID 263.",
                "query": "SELECT customer_details FROM Customers WHERE Customer_ID = 263",
                "result": [
                    [
                        [
                            "Customer_Details"
                        ],
                        [
                            "Ellsworth Paucek"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Customer_Details FROM Policies AS T1 JOIN Customers AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Customer_ID = 263 ORDER BY T1.End_Date DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What is the policy type code of customer with ID 334?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Jurisdiction and Uniformed are the policy type codes of the customer with ID 334",
                "query": "SELECT Policy_Type_Code from policies Where customer_id = 334",
                "result": [
                    [
                        [
                            "Policy_Type_Code"
                        ],
                        [
                            "Jurisdiction"
                        ],
                        [
                            "Uniformed"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Policy_Type_Code FROM Policies AS T1 JOIN Customers AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Customer_ID = 334 ORDER BY T1.End_Date DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "program_share",
        "turns": [
            {
                "isuser": true,
                "text": "What are names of all programs? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of the names of all programs.",
                "query": "SELECT name FROM program",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Aniworld"
                        ],
                        [
                            "Kaku"
                        ],
                        [
                            "Toonmax"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM program"
            },
            {
                "isuser": true,
                "text": "Of them which was launched most recently? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Youman is the name of the program that was launched most recently.",
                "query": "SELECT name FROM program ORDER BY launch DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Youman"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM program ORDER BY launch DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Who is the owner? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Jiangsu Broadcasting Corporation (JSBC) is the owner of the program launched most recently.",
                "query": "SELECT owner FROM program ORDER BY launch DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Owner"
                        ],
                        [
                            "Jiangsu Broadcasting Corporation (JSBC)"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT owner FROM program ORDER BY launch DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks. bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "chinook_1",
        "turns": [
            {
                "isuser": true,
                "text": "What is the average unit price of Rock tracks?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the average unit price of Rock tracks is 0.9900000000000079",
                "query": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
                "result": [
                    [
                        [
                            "AVG(T2.UnitPrice)"
                        ],
                        [
                            0.9900000000000079
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Rock\""
            },
            {
                "isuser": true,
                "text": "What's the average milliseconds of the Rock Tracks?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the average milliseconds of Rock tracks is 283910.0431765613",
                "query": "SELECT AVG(T2.Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
                "result": [
                    [
                        [
                            "AVG(T2.Milliseconds)"
                        ],
                        [
                            283910.0431765613
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(T2.Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Rock\""
            },
            {
                "isuser": true,
                "text": "and for the Jazz tracks?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the average milliseconds of Jazz Tracks is 291755.3769230769",
                "query": "SELECT AVG(T2.Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"",
                "result": [
                    [
                        [
                            "AVG(T2.Milliseconds)"
                        ],
                        [
                            291755.3769230769
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(T2.Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = \"Jazz\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "wine_1",
        "turns": [
            {
                "isuser": true,
                "text": "Which is the most expensive wine?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the information about the most expensive wine.",
                "query": "SELECT * FROM WINE order by price desc limit 1",
                "result": [
                    [
                        [
                            "No",
                            "Grape",
                            "Winery",
                            "Appelation",
                            "State",
                            "Name",
                            "Year",
                            "Price",
                            "Score",
                            "Cases",
                            "Drink"
                        ],
                        [
                            106,
                            "Cabernet Sauvingnon",
                            "Darioush",
                            "Napa Valley",
                            "California",
                            "Darius II",
                            2007,
                            225,
                            96,
                            698,
                            "2012"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name, max(price) FROM WINE GROUP BY winery"
            },
            {
                "isuser": true,
                "text": "From which year is it?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The most expensive wine is from year 2007.",
                "query": "SELECT year FROM WINE order by price desc limit 1",
                "result": [
                    [
                        [
                            "Year"
                        ],
                        [
                            2007
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name, year FROM WINE WHERE price = (SELECT max(price) FROM WINE)"
            },
            {
                "isuser": true,
                "text": "What is the appelation of Giana",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "What is Giana?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT appelation FROM WINE WHERE name = \"Giana\""
            },
            {
                "isuser": true,
                "text": "Sorry Giana is the name of wine\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The appelation of the wine named Giana is Napa Valley",
                "query": "SELECT appelation FROM WINE where name = 'Giana'",
                "result": [
                    [
                        [
                            "Appelation"
                        ],
                        [
                            "Napa Valley"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT appelation FROM WINE WHERE name = \"Giana\""
            },
            {
                "isuser": true,
                "text": "Which wine has a score of 91?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the information of wines that have a score of 91.",
                "query": "SELECT * FROM WINE where score = 91",
                "result": [
                    [
                        [
                            "No",
                            "Grape",
                            "Winery",
                            "Appelation",
                            "State",
                            "Name",
                            "Year",
                            "Price",
                            "Score",
                            "Cases",
                            "Drink"
                        ],
                        [
                            3,
                            "Zinfandel",
                            "Robert Biale",
                            "Napa Valley",
                            "California",
                            "Black Chicken",
                            2008,
                            40,
                            91,
                            2700,
                            "2012"
                        ],
                        [
                            10,
                            "Sauvignon Blanc",
                            "Brander",
                            "Santa Ynez Valley",
                            "California",
                            "Cuvee Nicolas",
                            2009,
                            25,
                            91,
                            377,
                            "now"
                        ],
                        [
                            11,
                            "Sauvignon Blanc",
                            "Capture",
                            "California",
                            "California",
                            "Tradition",
                            2009,
                            30,
                            91,
                            875,
                            "now"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM WINE WHERE score = 91"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "store_1",
        "turns": [
            {
                "isuser": true,
                "text": "Show the billing address with the highest amount of invoice?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the billing address with the highest amount of invoice is 'Rilská 3174/6'.",
                "query": "SELECT billing_address FROM invoices ORDER BY total DESC LIMIT 1",
                "result": [
                    [
                        [
                            "billing_address"
                        ],
                        [
                            "Rilská 3174/6"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT billing_address FROM invoices GROUP BY billing_address ORDER BY sum(total) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Show the total amount of invoice from chicago, IL?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the total amount of invoice from chicago, IL is 43.62.",
                "query": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
                "result": [
                    [
                        [
                            "sum(total)"
                        ],
                        [
                            43.62
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT sum(total) FROM invoices WHERE billing_city = \"Chicago\" AND billing_state = \"IL\""
            },
            {
                "isuser": true,
                "text": "Show the billing country with the total amount of invoice 3.96?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the billing countries with total amount of invoice 3.96.",
                "query": "SELECT billing_country FROM invoices WHERE total  = 3.96",
                "result": [
                    [
                        [
                            "billing_country"
                        ],
                        [
                            "Norway"
                        ],
                        [
                            "France"
                        ],
                        [
                            "USA"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT billing_country FROM invoices WHERE total = 3.96"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "climbing",
        "turns": [
            {
                "isuser": true,
                "text": "Please list the names of all the climbers.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the names of all the climbers",
                "query": "SELECT Name FROM climber ",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Klaus Enders"
                        ],
                        [
                            "Siegfried Schauzu"
                        ],
                        [
                            "Hans Luthringhauser"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM climber"
            },
            {
                "isuser": true,
                "text": "Can you show me the climbers who climbed mountains in Country Uganda?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "The climbers with IDs of 9 and 10 climbed mountains in the country Uganda",
                "query": "SELECT Climber_ID FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\"",
                "result": [
                    [
                        [
                            "Climber_ID"
                        ],
                        [
                            9
                        ],
                        [
                            10
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM climber WHERE Country = 'Uganda'"
            },
            {
                "isuser": true,
                "text": "Hmm, I want to know the times used by the climbers to climb mountains in Country Uganda please.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "this shows  the times taken by climbers to climb mountains in the country Uganda",
                "query": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\"",
                "result": [
                    [
                        [
                            "Time"
                        ],
                        [
                            "1:25.40.6"
                        ],
                        [
                            "1:27.28.8"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Time FROM climber WHERE Country = 'Uganda'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome，goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "behavior_monitoring",
        "turns": [
            {
                "isuser": false,
                "text": "Do you want the first, middle, and last names of that teacher?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Yes!",
                "type": "answerable",
                "predict": "SELECT first_name ,  middle_name ,  last_name FROM Teachers WHERE gender  =  \"F\""
            },
            {
                "isuser": true,
                "text": "hi, how many teachers have addresses with zip code \"918\"",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is one teacher who has address with zip code \"918\"",
                "query": "SELECT count(*) FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T1.zip_postcode  =  \"918\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM Teachers WHERE address_id IN (SELECT address_id FROM Addresses WHERE zip_postcode = \"918\")"
            },
            {
                "isuser": true,
                "text": "can you tell me who that teacher is?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "The teacher is Alvis\tMacer Schultz",
                "query": "SELECT T2.first_name, T2.middle_name, T2.last_name FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T1.zip_postcode  =  \"918\"",
                "result": [
                    [
                        [
                            "first_name",
                            "middle_name",
                            "last_name"
                        ],
                        [
                            "Alvis",
                            "Macey",
                            "Schultz"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name ,  middle_name ,  last_name FROM Teachers WHERE address_id IN (SELECT address_id FROM Addresses WHERE zip_postcode = \"918\")"
            },
            {
                "isuser": true,
                "text": "and what is that teacher's email address?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The email address of the teacher who has zip code 918 is everardo.lynch@example.net",
                "query": "SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T1.zip_postcode  =  \"918\"",
                "result": [
                    [
                        [
                            "email_address"
                        ],
                        [
                            "everardo.lynch@example.net"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT email_address FROM Teachers WHERE address_id IN (SELECT address_id FROM Addresses WHERE zip_postcode = \"918\")"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "tracking_orders",
        "turns": [
            {
                "isuser": true,
                "text": "Can you list the order id and the date order placed?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "The list of order ids and date orders placed are shown in the result table. ",
                "query": "SELECT order_id, date_order_placed FROM orders ",
                "result": [
                    [
                        [
                            "order_id",
                            "date_order_placed"
                        ],
                        [
                            1,
                            "2009-02-21 15:26:19"
                        ],
                        [
                            2,
                            "1974-06-24 22:10:26"
                        ],
                        [
                            3,
                            "1982-12-29 21:10:11"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT order_id ,  date_order_placed FROM orders"
            },
            {
                "isuser": true,
                "text": "What is the order status of the most recent order?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The order status of the most recent order is Packing. ",
                "query": "SELECT order_status FROM orders ORDER BY date_order_placed DESC LIMIT 1",
                "result": [
                    [
                        [
                            "order_status"
                        ],
                        [
                            "Packing"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT order_status FROM orders ORDER BY date_order_placed DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Can you just list the id of the most recent order?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The id of the most recent order is 5.",
                "query": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1",
                "result": [
                    [
                        [
                            "order_id"
                        ],
                        [
                            5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, good bye. ",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "college_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many professors in this table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are 22 professors",
                "query": "SELECT count(*) FROM professor",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            22
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM professor"
            },
            {
                "isuser": true,
                "text": "How many department names in this table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are 11 distinct department names",
                "query": "SELECT count(distinct DEPT_NAME) FROM DEPARTMENT",
                "result": [
                    [
                        [
                            "count(distinct DEPT_NAME)"
                        ],
                        [
                            11
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM department"
            },
            {
                "isuser": true,
                "text": "How many professors are in accounting department?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "There are 3 professors in the department with name Accounting",
                "query": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T2.dept_name = 'Accounting'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM professor WHERE dept_code = 'ACCT'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome good bye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "pets_1",
        "turns": [
            {
                "isuser": true,
                "text": "Hello!  Can you show me a list of all of the student IDs for students who have pets?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The list of all distinct student ids for students who have pets is shown in the result table. ",
                "query": "SELECT distinct T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
                "result": [
                    [
                        [
                            "StuID"
                        ],
                        [
                            1001
                        ],
                        [
                            1002
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT StuID FROM Has_Pet"
            },
            {
                "isuser": true,
                "text": "Great!  Can you show me the name (first and last), major and age of those two students?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The first name, last name, major and age of the two students with pets is shown in the result table. ",
                "query": "SELECT distinct T1.Fname, T1.Lname, T1.major, T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
                "result": [
                    [
                        [
                            "Fname",
                            "LName",
                            "Major",
                            "Age"
                        ],
                        [
                            "Linda",
                            "Smith",
                            600,
                            18
                        ],
                        [
                            "Tracy",
                            "Kim",
                            600,
                            19
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Fname, LName, Major, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)"
            },
            {
                "isuser": true,
                "text": "Great!  Now can you filter this list to show me which student(s) have a pet other than a cat?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The first name, last name, major and age of the student(s) who do not have a cat are shown in the result table. ",
                "query": "SELECT Fname, Lname, major, age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
                "result": [
                    [
                        [
                            "Fname",
                            "LName",
                            "Major",
                            "Age"
                        ],
                        [
                            "Tracy",
                            "Kim",
                            600,
                            19
                        ],
                        [
                            "Shiela",
                            "Jones",
                            600,
                            21
                        ],
                        [
                            "Dinesh",
                            "Kumar",
                            600,
                            20
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Fname, LName, Major, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet) AND PetID NOT IN (SELECT PetID FROM Pets WHERE PetType = \"cat\")"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, good bye. ",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "college_1",
        "turns": [
            {
                "isuser": true,
                "text": "Can you tell me the amount and code of the job with the most employees?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the amount and code of the job has most employees",
                "query": "SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "EMP_JOBCODE",
                            "count(*)"
                        ],
                        [
                            "PROF",
                            22
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) ,  T2.emp_jobcode FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num GROUP BY T2.emp_jobcode ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "And the hire dates of those 22 employees?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the hire dates of the employees whose job has most employees.",
                "query": "select EMP_HIREDATE from employee where emp_jobcode in (SELECT emp_jobcode FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1)",
                "result": [
                    [
                        [
                            "EMP_HIREDATE"
                        ],
                        [
                            "1987-7-1"
                        ],
                        [
                            "1992-5-1"
                        ],
                        [
                            "1991-7-1"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num GROUP BY T2.emp_jobcode ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Okay, how about the year that the most employees for the job code PROF were hired?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry, I cannot answer that.",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT strftime('%Y', max(T1.emp_hiredate)) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.emp_jobcode = 'PROF'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "culture_company",
        "turns": [
            {
                "isuser": true,
                "text": "What is the publisher with most number of books?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Alyson is the publisher with most number of books",
                "query": "SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Publisher"
                        ],
                        [
                            "Alyson"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT publisher FROM book_club GROUP BY publisher ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What book titles did they publish in 1989?",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Here is the table of the book titles of books that published in 1989 by the publisher with the most books.",
                "query": "SELECT \tBook_Title FROM book_club where year = 1989 and publisher = (SELECT publisher FROM book_club GROUP BY publisher ORDER BY count(*) DESC LIMIT 1)",
                "result": [
                    [
                        [
                            "Book_Title"
                        ],
                        [
                            "Goldenboy"
                        ],
                        [
                            "The Crystal Curtain"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Book_Title FROM book_club WHERE Year = 1989"
            },
            {
                "isuser": true,
                "text": "Who is the author of Unicorn Mountain?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Michael Bishop is the author of \"Unicorn Mountain\"",
                "query": "SELECT Author_or_Editor FROM book_club where Book_Title = 'Unicorn Mountain'",
                "result": [
                    [
                        [
                            "Author_or_Editor"
                        ],
                        [
                            "Michael Bishop"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Author_or_Editor FROM book_club WHERE Book_Title = \"Unicorn Mountain\""
            },
            {
                "isuser": true,
                "text": "Who is the author of Death Takes the Stage?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Donald Ward is the author of \"Death Takes the Stage\"",
                "query": "SELECT Author_or_Editor FROM book_club where Book_Title = 'Death Takes the Stage'",
                "result": [
                    [
                        [
                            "Author_or_Editor"
                        ],
                        [
                            "Donald Ward"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Author_or_Editor FROM book_club WHERE Book_Title = \"Death Takes the Stage\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "chinook_1",
        "turns": [
            {
                "isuser": false,
                "text": "Did you mean the ids of albums of the artist named 'Accept'?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable",
                "predict": "SELECT T2.AlbumId FROM Artist AS T1 JOIN Album AS T2 ON T1.ArtistId = T2.ArtistId WHERE T1.Name = \"Accept\""
            },
            {
                "isuser": true,
                "text": "How many artists have album?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 204 artists who have an album.",
                "query": "SELECT count(distinct artistid) FROM ALBUM",
                "result": [
                    [
                        [
                            "count(distinct artistid)"
                        ],
                        [
                            204
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM Artist AS T1 JOIN Album AS T2 ON T1.ArtistId = T2.ArtistId"
            },
            {
                "isuser": true,
                "text": "Find the album id of  accept?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "The album ids of the artist named 'Accept' are 2 and 3.",
                "query": "SELECT t2.AlbumId FROM ARTIST as t1 join ALBUM as t2 on t1.artistid = t2.artistid  WHERE t1.name = 'Accept'",
                "result": [
                    [
                        [
                            "AlbumId"
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.AlbumId FROM Artist AS T1 JOIN Album AS T2 ON T1.ArtistId = T2.ArtistId WHERE T1.Name = \"Accept\""
            },
            {
                "isuser": true,
                "text": "How many artists in this table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is just one artist named 'Accept'.",
                "query": "SELECT count(distinct t1.ArtistId) FROM ARTIST as t1 join ALBUM as t2 on t1.artistid = t2.artistid  WHERE t1.name = 'Accept'",
                "result": [
                    [
                        [
                            "count(distinct t1.ArtistId)"
                        ],
                        [
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM Artist"
            },
            {
                "isuser": true,
                "text": "How many albums in this table?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "did you mean the number of all the albums shown in the table?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT COUNT(*) FROM Album"
            },
            {
                "isuser": true,
                "text": "Yes.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 347 albums in total.",
                "query": "SELECT count(*) FROM ALBUM",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            347
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.AlbumId FROM Artist AS T1 JOIN Album AS T2 ON T1.ArtistId = T2.ArtistId WHERE T1.Name = \"Accept\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "dog_kennels",
        "turns": [
            {
                "isuser": true,
                "text": "how many dogs on the table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 15 dogs in total.",
                "query": "SELECT count(*) FROM Dogs",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Dogs"
            },
            {
                "isuser": true,
                "text": "what is the age of Kacey",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The dog named Kacey has an age of 6",
                "query": "SELECT age FROM Dogs where name = \"Kacey\"",
                "result": [
                    [
                        [
                            "age"
                        ],
                        [
                            "6"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT age FROM Dogs WHERE name = \"Kacey\""
            },
            {
                "isuser": true,
                "text": "which dog is highest weight on table",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you want the name of the dog with the highest weight?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT name FROM Dogs WHERE weight = (SELECT max(weight) FROM Dogs)"
            },
            {
                "isuser": true,
                "text": "exactly",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Merritt is the name of the dog with the highest weight",
                "query": "SELECT name FROM Dogs order by weight desc limit 1",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Merritt"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM Dogs WHERE weight = (SELECT max(weight) FROM Dogs)"
            },
            {
                "isuser": true,
                "text": "what is the size code of BUL",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean the  size codes of dogs with a breed code BUL?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT size_code FROM Breeds WHERE breed_code = \"BUL\""
            },
            {
                "isuser": true,
                "text": "exactly",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the size codes of dogs with a breed code BUL",
                "query": "SELECT size_code FROM Dogs where breed_code = \"BUL\"",
                "result": [
                    [
                        [
                            "size_code"
                        ],
                        [
                            "LGE"
                        ],
                        [
                            "MED"
                        ],
                        [
                            "MED"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT size_code FROM Breeds WHERE breed_code = \"BUL\""
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye. ",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "music_4",
        "turns": [
            {
                "isuser": true,
                "text": "what is average of volume?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "5.0 is the average of all volumes of all music festivals. ",
                "query": "SELECT avg(volume) FROM music_festival",
                "result": [
                    [
                        [
                            "avg(volume)"
                        ],
                        [
                            5.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(Volume_Issue) FROM volume"
            },
            {
                "isuser": true,
                "text": "can you show a list of categories?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are all distinct categories of all music festivals.",
                "query": "SELECT distinct category FROM music_festival",
                "result": [
                    [
                        [
                            "Category"
                        ],
                        [
                            "Best Song"
                        ],
                        [
                            "Best Lyrics"
                        ],
                        [
                            "Best Sound Song"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT Category FROM music_festival"
            },
            {
                "isuser": true,
                "text": "can you show me European music festival?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry we don't have explicit information whether or not each festival is in Europe. Please ask something else.",
                "query": "",
                "result": [],
                "predict_type": "REJECT",
                "predict": "SELECT Music_Festival FROM music_festival WHERE Category = \"European\""
            },
            {
                "isuser": true,
                "text": "where are the date of ceremony of music festivals with category 'best song' and 'awarded'?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the dates of ceremony of music festivals with category 'best song' and 'awarded'.",
                "query": "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\"",
                "result": [
                    [
                        [
                            "Date_of_ceremony"
                        ],
                        [
                            "18 February 2011"
                        ],
                        [
                            "18 February 2011"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Date_of_ceremony FROM music_festival WHERE Category IN ('best song', 'awarded')"
            },
            {
                "isuser": true,
                "text": "thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "music_1",
        "turns": [
            {
                "isuser": true,
                "text": "Which artist made the most songs?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "did you want to return his/her name?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT T1.artist_name ,  COUNT(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T1.artist_name ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Enrique is the name of the artist who made the most songs.",
                "query": "SELECT artist_name FROM song GROUP BY artist_name ORDER BY count(*) desc LIMIT 1",
                "result": [
                    [
                        [
                            "artist_name"
                        ],
                        [
                            "Enrique"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.artist_name ,  COUNT(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T1.artist_name ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "What about the name of artist with least number of songs?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Enrique is the name of the artist who made the least songs.",
                "query": "SELECT artist_name FROM song GROUP BY artist_name ORDER BY count(*) LIMIT 1",
                "result": [
                    [
                        [
                            "artist_name"
                        ],
                        [
                            "Enrique"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.artist_name ,  COUNT(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T1.artist_name ORDER BY count(*) ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Ok, then what is the country of origin of Enrique?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The country of origin of the artist Enrique is USA.",
                "query": "SELECT country FROM artist where artist_name = 'Enrique'",
                "result": [
                    [
                        [
                            "country"
                        ],
                        [
                            "USA"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT country FROM artist WHERE artist_name = 'Enrique'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "cre_Docs_and_Epenses",
        "turns": [
            {
                "isuser": true,
                "text": "How many documents do not have expense reports?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 5 documents that do not have expense reports",
                "query": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Documents WHERE document_id NOT IN (SELECT document_id FROM Documents_with_expenses)"
            },
            {
                "isuser": true,
                "text": "What is the largest amount of the 5 reports.",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "what amount do you mean?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT max(budget_amount) FROM Documents_with_Expenses WHERE budget_type_code = 'Travel'"
            },
            {
                "isuser": true,
                "text": "What category would the report fall into?\n\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Do you mean the budget type of each expense record?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT document_type_name FROM Ref_Document_Types WHERE document_type_code IN (SELECT document_type_code FROM Documents WHERE document_id NOT IN (SELECT document_id FROM Documents_with_Expenses))"
            },
            {
                "isuser": true,
                "text": "Yes that is exactly what i mean\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the budget type of each expense record",
                "query": "SELECT Budget_type_code FROM Documents_with_Expenses",
                "result": [
                    [
                        [
                            "Budget_Type_Code"
                        ],
                        [
                            "GV"
                        ],
                        [
                            "GV"
                        ],
                        [
                            "GV"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT document_type_name FROM Ref_Document_Types WHERE document_type_code IN (SELECT document_type_code FROM Documents WHERE document_id NOT IN (SELECT document_id FROM Documents_with_Expenses))"
            },
            {
                "isuser": true,
                "text": "Thanks!\n",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "soccer_2",
        "turns": [
            {
                "isuser": false,
                "text": "Do you mean the total number of enrollment of schools don't have goalie player?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable",
                "predict": "SELECT count(*) FROM College WHERE enr NOT IN (SELECT enr FROM Player WHERE pPos = 'goalie')"
            },
            {
                "isuser": true,
                "text": "Which schools have goalie player? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the table of the schools have goalie player. For example, one of them is LSU",
                "query": "SELECT cName FROM tryout WHERE pPos  =  \"goalie\"",
                "result": [
                    [
                        [
                            "cName"
                        ],
                        [
                            "LSU"
                        ],
                        [
                            "ASU"
                        ],
                        [
                            "ASU"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT cName FROM College WHERE enr IN (SELECT enr FROM Player WHERE pPos = 'goalie')"
            },
            {
                "isuser": true,
                "text": "And which schools don't have a goalie player? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the table of the schools don't have goalie player. For example, one of them is FSU.",
                "query": "SELECT cName FROM tryout WHERE pPos  !=  \"goalie\"",
                "result": [
                    [
                        [
                            "cName"
                        ],
                        [
                            "FSU"
                        ],
                        [
                            "OU"
                        ],
                        [
                            "LSU"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT cName FROM College WHERE enr NOT IN (SELECT enr FROM Player WHERE pPos = 'goalie')"
            },
            {
                "isuser": true,
                "text": "And what is their total number of enrollment? ",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "The total number of the enrollment of colleges which don't have a gloalie player is 41000.",
                "query": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")",
                "result": [
                    [
                        [
                            "sum(enr)"
                        ],
                        [
                            41000
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT sum(enr) FROM College WHERE enr NOT IN (SELECT enr FROM Player WHERE pPos = 'goalie')"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "race_track",
        "turns": [
            {
                "isuser": true,
                "text": "give me the race class with the most number of races ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The race class with the most number of races is DP/GT.",
                "query": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1\n\n",
                "result": [
                    [
                        [
                            "Class"
                        ],
                        [
                            "DP/GT"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "on what date is it?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The dates of the race class with the most number of races are as follows.",
                "query": "SELECT Date FROM race WHERE Class = (SELECT Class FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1)\n\n",
                "result": [
                    [
                        [
                            "Date"
                        ],
                        [
                            "January 26 January 27"
                        ],
                        [
                            "March 29"
                        ],
                        [
                            "April 19"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name, date FROM race WHERE race_id = 1"
            },
            {
                "isuser": true,
                "text": "list the race id",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the race ids of races with a class that has the most number of races.",
                "query": "SELECT Race_ID FROM race WHERE Class = (SELECT Class FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1)\n\n",
                "result": [
                    [
                        [
                            "Race_ID"
                        ],
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT race_id FROM race WHERE race_id > 10"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Good bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "musical",
        "turns": [
            {
                "isuser": true,
                "text": "What 1986 movie was nominated for a Tony Award for Best Book of a Musical?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the name of the movie that was produced in 1986 and nominated for a Tony Award for Best Book of a Musical is The Phantom of the Opera",
                "query": "select name from musical where year = 1986 and category = 'Best Book of a Musical' and Result = 'Nominated'",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "The Phantom of the Opera"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Name FROM musical AS T1 JOIN actor AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T1.Year  =  1986 AND T1.Award  =  \"Best Book of a Musical\""
            },
            {
                "isuser": true,
                "text": "How many actors appeared in it?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are 2 actors who appeared in the movie that was produced in 1986 and nominated for a Tony Award for Best Book of a Musical",
                "query": "SELECT count(T1.Name) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE  t2.year = 1986 and t2.category = 'Best Book of a Musical' and t2.Result = 'Nominated'",
                "result": [
                    [
                        [
                            "count(T1.Name)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM actor WHERE Musical_ID = 2"
            },
            {
                "isuser": true,
                "text": "What are their names?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the names of actors who appeared in the movie that was produced in 1986 and nominated for a Tony Award for Best Book of a Musical",
                "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE t2.year = 1986 and t2.category = 'Best Book of a Musical' and t2.Result = 'Nominated'",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Ray Meagher"
                        ],
                        [
                            "Tom Oliver"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Name FROM musical AS T1 JOIN actor AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T1.Year  =  1986 AND T1.Award  =  \"Best Book of a Musical\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "tracking_share_transactions",
        "turns": [
            {
                "isuser": true,
                "text": "What is the maximum share count of all of the different transaction type codes?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The maximum share cout of PUR is 93191. \nThe maximum share cout of SALE is 96178.",
                "query": "SELECT transaction_type_code ,  max(share_count)  FROM TRANSACTIONS GROUP BY transaction_type_code",
                "result": [
                    [
                        [
                            "transaction_type_code",
                            "max(share_count)"
                        ],
                        [
                            "PUR",
                            "93191"
                        ],
                        [
                            "SALE",
                            "96178"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT MAX(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code"
            },
            {
                "isuser": true,
                "text": "What is the minimum share count of all of the different transaction type codes?",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "The minimum share cout of  PUR\tis NULL. \nThe minimum share cout of  SALE is NULL. ",
                "query": "SELECT transaction_type_code ,  min(share_count)  FROM TRANSACTIONS GROUP BY transaction_type_code",
                "result": [
                    [
                        [
                            "transaction_type_code",
                            "min(share_count)"
                        ],
                        [
                            "PUR",
                            ""
                        ],
                        [
                            "SALE",
                            ""
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT MIN(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code"
            },
            {
                "isuser": true,
                "text": "What is the minimum share count of the transaction type code PUR?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "1522 is the minimum share count of transcation type code 'PUR'.",
                "query": "SELECT share_count  FROM TRANSACTIONS  where transaction_type_code = 'PUR' and share_count != \"\" order by share_count limit 1",
                "result": [
                    [
                        [
                            "share_count"
                        ],
                        [
                            "1522"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT MIN(share_count) FROM TRANSACTIONS WHERE transaction_type_code = 'PUR'"
            },
            {
                "isuser": true,
                "text": "What is the share count of transaction id 2?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The share count of id 2 is 9",
                "query": "SELECT \tshare_count FROM TRANSACTIONS where  transaction_id = 2",
                "result": [
                    [
                        [
                            "share_count"
                        ],
                        [
                            "9"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT share_count FROM TRANSACTIONS WHERE transaction_id = 2"
            },
            {
                "isuser": true,
                "text": "What is the lowest share count?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The lowest share count is 1522.",
                "query": "SELECT \tshare_count FROM TRANSACTIONS where share_count != \"\" order by share_count limit 1",
                "result": [
                    [
                        [
                            "share_count"
                        ],
                        [
                            "1522"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT MIN(share_count) FROM TRANSACTIONS"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "entertainment_awards",
        "turns": [
            {
                "isuser": true,
                "text": "Can you tell me which year had more than one festival please?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The year 2007 had more than one festival.",
                "query": "SELECT YEAR FROM festival_detail GROUP BY YEAR HAVING COUNT(*)  >  1",
                "result": [
                    [
                        [
                            "Year"
                        ],
                        [
                            2007
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Year FROM festival_detail GROUP BY Year HAVING COUNT(*)  >  1"
            },
            {
                "isuser": true,
                "text": "What are the names of the festivals that occurred that year?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the names of the festivals that occurred in year 2007 are Flower Awards and Cherry Awards.",
                "query": "SELECT Festival_Name FROM festival_detail WHERE YEAR = \"2007\"",
                "result": [
                    [
                        [
                            "Festival_Name"
                        ],
                        [
                            "Flower Awards"
                        ],
                        [
                            "Cherry Awards"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Festival_Name FROM festival_detail WHERE Year = 2017"
            },
            {
                "isuser": true,
                "text": "What other years did the Cherry Awards occur during?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Only in 2007 did the Cherry Awards occur.",
                "query": "SELECT YEAR FROM festival_detail WHERE Festival_Name = \"Cherry Awards\"",
                "result": [
                    [
                        [
                            "Year"
                        ],
                        [
                            2007
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT Year FROM festival_detail WHERE Festival_Name = \"Cherry Awards\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "customers_and_addresses",
        "turns": [
            {
                "isuser": true,
                "text": "how many  Customers are there",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 15 customers.",
                "query": "SELECT count(*) from Customers",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Customers"
            },
            {
                "isuser": true,
                "text": "how may customer payment cash method",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "4 customer has payment method cash.",
                "query": "SELECT count(*) from Customers where payment_method = \"Cash\"",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Customers WHERE payment_method = 'Cash'"
            },
            {
                "isuser": true,
                "text": "what is the name of customer id 2",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Tillman Ernser is the name of the customer with id 2.",
                "query": "SELECT customer_name from Customers where customer_id = 2",
                "result": [
                    [
                        [
                            "customer_name"
                        ],
                        [
                            "Tillman Ernser"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_name FROM Customers WHERE customer_id = 2"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "loan_1",
        "turns": [
            {
                "isuser": true,
                "text": "Can show you the customer name of customer ID 1?",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT cust_name from customer where cust_id = 1",
                "result": [
                    [
                        [
                            "cust_name"
                        ],
                        [
                            "Mary"
                        ]
                    ]
                ],
                "predict_type": "",
                "predict": "SELECT cust_name FROM customer WHERE cust_ID = 1"
            },
            {
                "isuser": true,
                "text": "* I have left the chat *",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The customer name of customer id 1 is Mary.",
                "query": "",
                "result": [],
                "predict_type": "answerable",
                "predict": "Goodbye!"
            },
            {
                "isuser": true,
                "text": "Can you show the average account balance of customers with credit score lower than 50 for each account type and their corresponding account types?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average account balance of customers with score lower than 50 for each account type and their corresponding account types are listed.",
                "query": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type",
                "result": [
                    [
                        [
                            "avg(acc_bal)",
                            "acc_type"
                        ],
                        [
                            1000.0,
                            "checking"
                        ],
                        [
                            2000.0,
                            "saving"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "formula_1",
        "turns": [
            {
                "isuser": true,
                "text": "Find the id, forename and number of races of all drivers who have at least participated in two races?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The result table of the ids, forenames and numbers of races of all drivers who have at least participated in two races is shown.",
                "query": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2",
                "result": [
                    [
                        [
                            "driverId",
                            "forename",
                            "count(*)"
                        ],
                        [
                            1,
                            "Lewis",
                            208
                        ],
                        [
                            2,
                            "Nick",
                            184
                        ],
                        [
                            3,
                            "Nico",
                            206
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT driverRef, forename, count(*) AS num_races FROM races GROUP BY driverRef HAVING count(*) >= 2"
            },
            {
                "isuser": true,
                "text": "What is the driver reference and nationality of Fernando?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the driver reference and nationality of the driver whose forename is Fernando?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT driverRef, nationality FROM drivers WHERE forename = \"Fernando\""
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The driver reference and nationality of the driver whose forename is Fernando are alonso and Spanish respectively.",
                "query": "SELECT driverRef , nationality  FROM drivers where forename='Fernando'",
                "result": [
                    [
                        [
                            "driverRef",
                            "nationality"
                        ],
                        [
                            "alonso",
                            "Spanish"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT driverRef, nationality FROM drivers WHERE forename = \"Fernando\""
            },
            {
                "isuser": true,
                "text": "What position and how many wins does the forename Fernando have?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the position of the driver with forename Fernando when he ranked 1 and the number of times that he ranked 1?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT position, wins FROM constructors WHERE forename = \"Fernando\""
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The position of the driver with forename Fernando when he ranked 1 is 6 and the number of times that he ranked 1 is 22.",
                "query": "SELECT T2.position, count(*)  FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid  where T1.forename='Fernando' and rank = 1",
                "result": [
                    [
                        [
                            "position",
                            "count(*)"
                        ],
                        [
                            "6",
                            22
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT position, wins FROM constructors WHERE forename = \"Fernando\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "college_1",
        "turns": [
            {
                "isuser": true,
                "text": "Hello!  How many students are enrolled in the class with the course code of ACCT-211?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The  count  of students  who are enrolled in the class with the course code of ACCT-211 is 2",
                "query": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM ENROLL WHERE CLASS_CODE IN (SELECT CLASS_CODE FROM CLASS WHERE CRS_CODE = 'ACCT-211')"
            },
            {
                "isuser": true,
                "text": "Excellent!  Can you show the class time and class room for ACCt-211?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the class time and class room for ACCt-211 are shown  in  the  table",
                "query": "SELECT CLASS_TIME,\tCLASS_ROOM from CLASS where \tCRS_CODE =  'ACCT-211'",
                "result": [
                    [
                        [
                            "CLASS_TIME",
                            "CLASS_ROOM"
                        ],
                        [
                            "MWF 8:00-8:50 a.m.",
                            "BUS311"
                        ],
                        [
                            "MWF 9:00-9:50 a.m.",
                            "BUS200"
                        ],
                        [
                            "TTh 2:30-3:45 p.m.",
                            "BUS252"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT CLASS_TIME, CLASS_ROOM FROM CLASS WHERE CRS_CODE = 'ACCT-211'"
            },
            {
                "isuser": true,
                "text": "Thank you!  I thought there might be more to that table...  Can you provide me with a list of all of the different course codes?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are all different course codes.",
                "query": "select distinct crs_code from class",
                "result": [
                    [
                        [
                            "CRS_CODE"
                        ],
                        [
                            "ACCT-211"
                        ],
                        [
                            "ACCT-212"
                        ],
                        [
                            "CIS-220"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT CRS_CODE FROM CLASS"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome goodbye ",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "customers_and_addresses",
        "turns": [
            {
                "isuser": true,
                "text": "What is the total number of products?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The total number of products is 95.",
                "query": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id ",
                "result": [
                    [
                        [
                            "sum(t2.order_quantity)"
                        ],
                        [
                            95
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Products"
            },
            {
                "isuser": true,
                "text": "What is the total number of products that are in orders with status \"Delivered\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The total number of  \"Delivered\" products is 18 .",
                "query": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Delivered\"",
                "result": [
                    [
                        [
                            "sum(t2.order_quantity)"
                        ],
                        [
                            18
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Order_Items WHERE order_id IN (SELECT order_id FROM Customer_Orders WHERE order_status = \"Delivered\")"
            },
            {
                "isuser": true,
                "text": "What is the total number of products that are in orders with status \"Cancelled\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The total number of \"Cancelled\" products are 77.",
                "query": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\"",
                "result": [
                    [
                        [
                            "sum(t2.order_quantity)"
                        ],
                        [
                            77
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Order_Items WHERE order_id IN (SELECT order_id FROM Customer_Orders WHERE order_status = \"Cancelled\")"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "music_1",
        "turns": [
            {
                "isuser": false,
                "text": "Here are the names of all the songs.",
                "query": "",
                "result": [],
                "predict_type": "answerable"
            },
            {
                "isuser": true,
                "text": "What's the rating of all songs in English?",
                "type": "answerable",
                "predict": "SELECT song_name FROM song"
            },
            {
                "isuser": false,
                "text": "These are the ratings of all songs in English.",
                "query": "SELECT rating FROM song WHERE languages  =  'english'",
                "result": [
                    [
                        [
                            "rating"
                        ],
                        [
                            6
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable"
            },
            {
                "isuser": true,
                "text": "What are the names of all the songs?",
                "type": "answerable",
                "predict": "SELECT rating FROM song WHERE languages = \"English\""
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT song_name FROM song",
                "result": [
                    [
                        [
                            "song_name"
                        ],
                        [
                            "Aj ei akash"
                        ],
                        [
                            "Ami opar hoye"
                        ],
                        [
                            "Just beat it"
                        ]
                    ]
                ],
                "predict_type": ""
            },
            {
                "isuser": true,
                "text": "Which of those have rating below that of all songs in English?",
                "type": "answerable",
                "predict": "SELECT rating FROM song WHERE languages = \"English\""
            },
            {
                "isuser": false,
                "text": "The song Shukno patar nupur pae has rating below ratings of all songs in English.",
                "query": "SELECT song_name FROM song WHERE rating < (SELECT min(rating) FROM song WHERE languages = 'english')",
                "result": [
                    [
                        [
                            "song_name"
                        ],
                        [
                            "Shukno patar nupur pae"
                        ]
                    ]
                ],
                "predict_type": "answerable"
            },
            {
                "isuser": true,
                "text": "Thanks.",
                "type": "improper",
                "predict": "SELECT song_name,rating FROM song WHERE languages = \"English\" AND rating < (SELECT avg(rating) FROM song WHERE languages = \"English\")"
            },
            {
                "isuser": false,
                "text": "Goodbye.",
                "query": "",
                "result": [],
                "predict_type": "improper"
            }
        ]
    },
    {
        "db_name": "cinema",
        "turns": [
            {
                "isuser": true,
                "text": "How many different cinemas are on the list?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 10 different cinemas on the list",
                "query": "SELECT count(distinct cinema_id) from cinema",
                "result": [
                    [
                        [
                            "count(distinct cinema_id)"
                        ],
                        [
                            10
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(DISTINCT name) FROM cinema"
            },
            {
                "isuser": true,
                "text": "What is the average capacity of each cinema?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the average capacity of each cinema is 433.6",
                "query": "SELECT avg(capacity) from cinema",
                "result": [
                    [
                        [
                            "avg(capacity)"
                        ],
                        [
                            433.6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(capacity) FROM cinema"
            },
            {
                "isuser": true,
                "text": "Which cinema has the highest capacity, and which has the lowest capacity?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the names of the cinemas that have the highest capacity or the lowest capacity",
                "query": "SELECT name from cinema where capacity=(select min(capacity) from cinema) or  capacity=(select max(capacity) from cinema)",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Codling"
                        ],
                        [
                            "Grouse Lodge"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name, MAX(capacity) AS max_capacity, MIN(capacity) AS min_capacity FROM cinema"
            },
            {
                "isuser": true,
                "text": "Which locations have the most cinemas?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The location County Clare has the most cinemas",
                "query": "SELECT location from cinema GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Location"
                        ],
                        [
                            "County Clare"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT LOCATION, COUNT(*) AS num_cinemas FROM cinema GROUP BY LOCATION ORDER BY num_cinemas DESC"
            },
            {
                "isuser": true,
                "text": "Which location has the most cinemas opened in 2010 or later?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The location County Clare has the most cinemas opened in 2010 or later",
                "query": "SELECT LOCATION FROM cinema WHERE openning_year >= 2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Location"
                        ],
                        [
                            "County Clare"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT LOCATION, COUNT(*) AS num_cinemas FROM cinema WHERE openning_year >= 2010 GROUP BY LOCATION ORDER BY num_cinemas DESC"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank! Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "product_catalog",
        "turns": [
            {
                "isuser": true,
                "text": "Can you tell me highest value of the entry name?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of catalog entry with the highest price in dollars is Sprite Lemo",
                "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1",
                "result": [
                    [
                        [
                            "catalog_entry_name"
                        ],
                        [
                            "Sprite Lemo"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(catalog_entry_name) FROM catalog_contents"
            },
            {
                "isuser": true,
                "text": "Is Sprite Lemo under the catalog entry name in the table?\nI can't see it ( Name ) in the table. so can you check it.",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes, the catalog entry id of it is 9. You may want to check catalog entry name.",
                "query": "",
                "result": [],
                "predict_type": "answerable",
                "predict": "SELECT catalog_entry_name FROM catalog_contents WHERE catalog_entry_name = \"Sprite Lemo\""
            },
            {
                "isuser": true,
                "text": "Yes, I want to check it.\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Yes, Sprite Lemo is the entry name of id 9. ",
                "query": "",
                "result": [],
                "predict_type": "answerable",
                "predict": "SELECT catalog_entry_name FROM catalog_contents WHERE catalog_entry_name = \"Sprite Lemo\""
            },
            {
                "isuser": true,
                "text": "Can you tell me lowest value entry name?\n",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "The entry name with the lowest value is Cola",
                "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars LIMIT 1",
                "result": [
                    [
                        [
                            "catalog_entry_name"
                        ],
                        [
                            "Cola"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT min(catalog_entry_name) FROM catalog_contents"
            },
            {
                "isuser": true,
                "text": "Thanks for your co-operation. ",
                "type": "improper"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper",
                "predict": "You're welcome."
            },
            {
                "isuser": false,
                "text": "goodbye!",
                "query": "",
                "result": [],
                "predict_type": "improper"
            }
        ]
    },
    {
        "db_name": "store_1",
        "turns": [
            {
                "isuser": true,
                "text": "what is the billing address of germany",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are all the billing addresses in Germany.",
                "query": "select billing_address from invoices where billing_country = \"Germany\"",
                "result": [
                    [
                        [
                            "billing_address"
                        ],
                        [
                            "Theodor-Heuss-Straße 34"
                        ],
                        [
                            "Berger Straße 10"
                        ],
                        [
                            "Barbarossastraße 19"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT billing_address FROM invoices WHERE billing_country = 'Germany'"
            },
            {
                "isuser": true,
                "text": "what is the invoice date of customer id 2",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the invoice dates of the customer with id 2",
                "query": "select invoice_date from invoices where customer_id = 2",
                "result": [
                    [
                        [
                            "invoice_date"
                        ],
                        [
                            "2007-01-01 00:00:00"
                        ],
                        [
                            "2007-02-11 00:00:00"
                        ],
                        [
                            "2007-10-12 00:00:00"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT invoice_date FROM invoices WHERE customer_id = 2"
            },
            {
                "isuser": true,
                "text": "what is the billing city of norway",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the billing city in Norway.",
                "query": "select distinct(billing_city) from invoices where billing_country = \"Norway\"",
                "result": [
                    [
                        [
                            "billing_city"
                        ],
                        [
                            "Oslo"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT billing_city FROM invoices WHERE billing_country = 'Norway'"
            },
            {
                "isuser": true,
                "text": "what is the last name of state sp",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are all the last names of customers in state SP.",
                "query": "select last_name from customers where state = \"SP\"",
                "result": [
                    [
                        [
                            "last_name"
                        ],
                        [
                            "Gonçalves"
                        ],
                        [
                            "Martins"
                        ],
                        [
                            "Rocha"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT last_name FROM customers WHERE state = 'SP'"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "decoration_competition",
        "turns": [
            {
                "isuser": true,
                "text": "list the name of the members in the order of their rank in rounds",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "this shows  the names of members in ascending order of their rank in rounds",
                "query": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY Rank_in_Round ASC",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Jack Nicklaus"
                        ],
                        [
                            "Lee Trevino"
                        ],
                        [
                            "Billy Casper"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY T2.Rank_in_Round"
            },
            {
                "isuser": true,
                "text": "include member id in this table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "this shows the names of members and member id   in ascending order of their rank in rounds",
                "query": "SELECT T1.Name ,t1.Member_ID FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY Rank_in_Round ASC",
                "result": [
                    [
                        [
                            "Name",
                            "Member_ID"
                        ],
                        [
                            "Jack Nicklaus",
                            1
                        ],
                        [
                            "Lee Trevino",
                            9
                        ],
                        [
                            "Billy Casper",
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Name ,  T1.Member_ID FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY T2.Rank_in_Round"
            },
            {
                "isuser": true,
                "text": "also include the college id in this table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "this shows the names of members, member id and college id in ascending order of their rank in rounds",
                "query": "SELECT T1.Name ,t1.Member_ID,T1.College_ID FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY Rank_in_Round ASC",
                "result": [
                    [
                        [
                            "Name",
                            "Member_ID",
                            "College_ID"
                        ],
                        [
                            "Jack Nicklaus",
                            1,
                            1
                        ],
                        [
                            "Lee Trevino",
                            9,
                            3
                        ],
                        [
                            "Billy Casper",
                            2,
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Name ,  T1.Member_ID ,  T1.College_ID FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY T2.Rank_in_Round"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome,goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "products_for_hire",
        "turns": [
            {
                "isuser": true,
                "text": "what is the daily hire cost of the product id 1",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the daily hire cost of the product for hire with id  of 1 is  26.15",
                "query": "SELECT daily_hire_cost\t FROM Products_for_Hire where product_id=1",
                "result": [
                    [
                        [
                            "daily_hire_cost"
                        ],
                        [
                            26.15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT daily_hire_cost FROM Products_for_hire WHERE product_id = 1"
            },
            {
                "isuser": true,
                "text": "what is the status date of the product name Book collection C ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the status date of the product for hire with name Book collection C  is 2018-03-18 05:25:55",
                "query": "SELECT status_date FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE product_name =\"Book collection C\"",
                "result": [
                    [
                        [
                            "status_date"
                        ],
                        [
                            "2018-03-18 05:25:55"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT status_date FROM View_product_availability WHERE product_name = \"Book collection C\""
            },
            {
                "isuser": true,
                "text": "what is the product description of the booking id 2 ?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "there are no products for hire with booking id 2 ",
                "query": "SELECT product_description  FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE booking_id  =  2",
                "result": [
                    [
                        [
                            "product_description"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product_description FROM Products_for_hire WHERE product_id = 2"
            },
            {
                "isuser": true,
                "text": "what is the product description of the product id 3 ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the product description of the product for hire with id 3 is The Great Gatsby",
                "query": "SELECT product_description  FROM Products_for_Hire where product_id=3",
                "result": [
                    [
                        [
                            "product_description"
                        ],
                        [
                            "The Great Gatsby"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product_description FROM Products_for_hire WHERE product_id = 3"
            },
            {
                "isuser": true,
                "text": "what are the names of products whose availability equals to 1 ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "this shows the names of products whose availability equals to 1 ",
                "query": "SELECT T2.product_name FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.available_yn  =  1",
                "result": [
                    [
                        [
                            "product_name"
                        ],
                        [
                            "Book collection C"
                        ],
                        [
                            "Book collection A"
                        ],
                        [
                            "DVD collection B"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product_name FROM Products_for_hire WHERE product_id IN (SELECT product_id FROM View_product_availability WHERE available_yn = 1)"
            },
            {
                "isuser": true,
                "text": " Okay Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome, goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "medicine_enzyme_interaction",
        "turns": [
            {
                "isuser": true,
                "text": "what are the location of the enzymes?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The locations of enzymes are Mitochondrion and\nCytosol",
                "query": "SELECT distinct Location from enzyme",
                "result": [
                    [
                        [
                            "Location"
                        ],
                        [
                            "Mitochondrion"
                        ],
                        [
                            "Cytosol"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT LOCATION FROM enzyme"
            },
            {
                "isuser": true,
                "text": "find the chromosome of the PGB diaminsea ?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Sorry, I could not understand. Could you please describe what is PGB diaminsea ?",
                "query": "",
                "result": [],
                "predict_type": "REQUEST_MORE",
                "predict": "SELECT Chromosome FROM enzyme WHERE name = \"PGB diaminsea\""
            },
            {
                "isuser": true,
                "text": "i mean chromosome value ?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "You mean PBG deaminase?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT Chromosome FROM enzyme WHERE name = \"PGB diaminsea\""
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Chromosome of PBG deaminase is 11q23.3",
                "query": "SELECT Chromosome from enzyme where name = \"PBG deaminase\"",
                "result": [
                    [
                        [
                            "Chromosome"
                        ],
                        [
                            "11q23.3"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Chromosome FROM enzyme WHERE name = \"PGB diaminsea\""
            },
            {
                "isuser": true,
                "text": "Find the product name of the ALA synthase?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the product name of the ALA synthase is \"δ-Aminolevulinic acid\".",
                "query": "SELECT Product from enzyme where name = \"ALA synthase\"",
                "result": [
                    [
                        [
                            "Product"
                        ],
                        [
                            "δ-Aminolevulinic acid"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Product FROM enzyme WHERE name = \"ALA synthase\""
            },
            {
                "isuser": true,
                "text": "Find the enzyme name of medicine id 3?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are the enzyme names of medicine id 3.",
                "query": "SELECT DISTINCT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.medicine_id  = 3",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "ALA synthase"
                        ],
                        [
                            "ALA dehydratase"
                        ],
                        [
                            "Uroporphyrinogen III synthase"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM enzyme WHERE id IN (SELECT enzyme_id FROM medicine_enzyme_interaction WHERE medicine_id = 3)"
            },
            {
                "isuser": true,
                "text": "Thank you",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "world_1",
        "turns": [
            {
                "isuser": true,
                "text": "What are the names of the nations with the 3 lowest populations?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The following table shows the names of the nations with the 3 lowest populations",
                "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Antarctica"
                        ],
                        [
                            "French Southern territories"
                        ],
                        [
                            "Bouvet Island"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM country ORDER BY Population ASC LIMIT 3"
            },
            {
                "isuser": true,
                "text": "Which nation has the largest surface area?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Russian Federation has the largest surface area.",
                "query": "SELECT Name FROM country ORDER BY surfacearea desc LIMIT 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Russian Federation"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM country ORDER BY SurfaceArea DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Of the 3 nations with the lowest populations, which has the largest surface area?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Of the 3 nations with the lowest populations, Antarctica has the largest surface area",
                "query": "SELECT Name FROM (select * FROM country order by population asc limit 3) ORDER BY surfacearea desc LIMIT 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Antarctica"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM country ORDER BY SurfaceArea DESC LIMIT 1 OFFSET 2"
            },
            {
                "isuser": true,
                "text": "What is the total population of Antarctica?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the total population of Antarctica is 0",
                "query": "SELECT population from country where name = \"Antarctica\"",
                "result": [
                    [
                        [
                            "Population"
                        ],
                        [
                            0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT sum(Population) FROM country WHERE Continent = \"Antarctica\""
            },
            {
                "isuser": true,
                "text": "Wow!  of the 3 nations with the lowest population, what are the population sizes of the other two besides Antarctica?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "The following table shows the name and population of 3 nations with the lowest population. The other two also have 0 population.",
                "query": "SELECT name, population FROM country ORDER BY Population ASC LIMIT 3",
                "result": [
                    [
                        [
                            "Name",
                            "Population"
                        ],
                        [
                            "Antarctica",
                            0
                        ],
                        [
                            "French Southern territories",
                            0
                        ],
                        [
                            "Bouvet Island",
                            0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT sum(Population) FROM country WHERE Continent = \"Antarctica\" UNION SELECT sum(Population) FROM country WHERE Continent != \"Antarctica\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "network_1",
        "turns": [
            {
                "isuser": true,
                "text": "what is the average of friend id?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average friend id is 1514.85.",
                "query": "SELECT AVG(friend_id) FROM friend",
                "result": [
                    [
                        [
                            "AVG(friend_id)"
                        ],
                        [
                            1514.85
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(friend_id) FROM Friend"
            },
            {
                "isuser": true,
                "text": "what is the average of grades?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The average grade of all high schoolers is 10.5.",
                "query": "SELECT AVG(grade) FROM Highschooler",
                "result": [
                    [
                        [
                            "AVG(grade)"
                        ],
                        [
                            10.5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(grade) FROM Highschooler"
            },
            {
                "isuser": true,
                "text": "what is the highest grade?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The highest grade of all high schoolers is 12.",
                "query": "SELECT MAX(grade) FROM Highschooler",
                "result": [
                    [
                        [
                            "MAX(grade)"
                        ],
                        [
                            12
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT max(grade) FROM Highschooler"
            },
            {
                "isuser": true,
                "text": "thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Good bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "music_1",
        "turns": [
            {
                "isuser": true,
                "text": "Can you show the artist name of song Tumi robe nirobe?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The artist name of song Tumi robe nirobe is\nShrikanta",
                "query": "SELECT \tartist_name FROM song  WHERE  song_name = \"Tumi robe nirobe\" ",
                "result": [
                    [
                        [
                            "artist_name"
                        ],
                        [
                            "Shrikanta"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name  =  \"Tumi robe nirobe\""
            },
            {
                "isuser": true,
                "text": "Can you show the rating of the song Tumi robe nirobe?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The rating of the song Tumi robe nirobe  is\n8",
                "query": "SELECT \trating FROM song  WHERE  song_name = \"Tumi robe nirobe\" ",
                "result": [
                    [
                        [
                            "rating"
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.rating FROM song AS T1 WHERE T1.song_name  =  \"Tumi robe nirobe\""
            },
            {
                "isuser": true,
                "text": "What is the genre of the song Tumi robe nirobe?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The genre  of the song Tumi robe nirobe is\ntagore",
                "query": "SELECT \tgenre_is  FROM song  WHERE  song_name = \"Tumi robe nirobe\" ",
                "result": [
                    [
                        [
                            "genre_is"
                        ],
                        [
                            "tagore"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.genre_is FROM song AS T1 WHERE T1.song_name  =  \"Tumi robe nirobe\""
            },
            {
                "isuser": true,
                "text": "Can you show the names of songs whose genre is modern or language is English?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the names of songs whose genre is modern or language is English are  shown  in the table",
                "query": "SELECT song_name FROM song WHERE genre_is = \"modern\" OR languages = \"english\"",
                "result": [
                    [
                        [
                            "song_name"
                        ],
                        [
                            "My love"
                        ],
                        [
                            "Just beat it"
                        ],
                        [
                            "Aj ei akash"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.song_name FROM song AS T1 JOIN genre AS T2 ON T1.genre_is  =  T2.g_name WHERE T2.g_name  =  \"modern\" OR T1.languages  =  \"English\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Welcome and goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "tracking_orders",
        "turns": [
            {
                "isuser": true,
                "text": "what is the customer name of customer id 1",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of customer with customer_id 1 is Savannah.",
                "query": "SELECT customer_name FROM Customers WHERE customer_id=1",
                "result": [
                    [
                        [
                            "customer_name"
                        ],
                        [
                            "Savannah"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_name FROM customers WHERE customer_id = 1"
            },
            {
                "isuser": true,
                "text": "what is the customer name of customer id 2",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of customer with customer_id 2 is George.",
                "query": "SELECT customer_name FROM Customers WHERE customer_id=2",
                "result": [
                    [
                        [
                            "customer_name"
                        ],
                        [
                            "George"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_name FROM customers WHERE customer_id = 2"
            },
            {
                "isuser": true,
                "text": "what is the customer name of customer id 3",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of customer with customer_id 2 is Alberto.",
                "query": "SELECT customer_name FROM Customers WHERE customer_id=3",
                "result": [
                    [
                        [
                            "customer_name"
                        ],
                        [
                            "Alberto"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_name FROM customers WHERE customer_id = 3"
            },
            {
                "isuser": true,
                "text": "find the name of the customers who have at most two orders",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the names of the customers who have at most two orders.",
                "query": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2",
                "result": [
                    [
                        [
                            "customer_name"
                        ],
                        [
                            "Alberto"
                        ],
                        [
                            "Leilani"
                        ],
                        [
                            "Hadley"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT customer_name FROM customers WHERE customer_id IN (SELECT customer_id FROM orders GROUP BY customer_id HAVING COUNT(*) <= 2)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "dorm_1",
        "turns": [
            {
                "isuser": true,
                "text": "What is the average oldest students with different sex?\n",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean what is the average age of students?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT avg(age) ,  sex FROM student GROUP BY sex"
            },
            {
                "isuser": true,
                "text": "What is the average and oldest age for students with different sex?\n\n\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the average and oldest age of students with different sex.",
                "query": "SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex",
                "result": [
                    [
                        [
                            "avg(age)",
                            "max(age)",
                            "Sex"
                        ],
                        [
                            19.7,
                            26,
                            "F"
                        ],
                        [
                            19.5,
                            27,
                            "M"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex"
            }
        ]
    },
    {
        "db_name": "college_2",
        "turns": [
            {
                "isuser": true,
                "text": "What are the names of all students who took any course in the fall semester of the year 2003?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list of the names of students who have taken any course in the fall semester of year 2003.",
                "query": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Manber"
                        ],
                        [
                            "Zelty"
                        ],
                        [
                            "Colin"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM student WHERE ID IN (SELECT ID FROM takes WHERE semester = \"Fall\" AND year = 2003)"
            },
            {
                "isuser": true,
                "text": "What about in the spring semester?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list of the names of students who have taken any course in the spring semester of year 2003. |",
                "query": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Spring' AND YEAR  =  2003)",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Manber"
                        ],
                        [
                            "Zelty"
                        ],
                        [
                            "Duan"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM student WHERE ID IN (SELECT ID FROM takes WHERE semester = \"Spring\" AND year = 2003)"
            },
            {
                "isuser": true,
                "text": "What about in 2004?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the list of the names of students who have taken any course in the spring semester of year 2004.",
                "query": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Spring' AND YEAR  =  2004)",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Manber"
                        ],
                        [
                            "Duan"
                        ],
                        [
                            "Grosch"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM student WHERE ID IN (SELECT ID FROM takes WHERE semester = \"Fall\" AND year = 2004)"
            },
            {
                "isuser": true,
                "text": "What course id were offered in that semester?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of course ids that were offered in the spring semester of year 2004.",
                "query": "SELECT distinct id FROM takes WHERE semester  =  'Spring' AND YEAR  =  2004",
                "result": [
                    [
                        [
                            "ID"
                        ],
                        [
                            "1000"
                        ],
                        [
                            "10076"
                        ],
                        [
                            "10481"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT course_id FROM section WHERE semester = \"Fall\" AND year = 2004"
            },
            {
                "isuser": true,
                "text": "What's the grade of 10838?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The grade of the take with id 10838 in the spring semester in the year 2004 is C+.",
                "query": "SELECT grade FROM takes WHERE semester  =  'Spring' AND YEAR  =  2004 and id = 10838",
                "result": [
                    [
                        [
                            "grade"
                        ],
                        [
                            "C+"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT grade FROM takes WHERE ID = 10838"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks. bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "student_transcripts_tracking",
        "turns": [
            {
                "isuser": true,
                "text": "how many students are enrolled in a bachelor degree program?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of students enrolled in a bachelor degree program is 8.",
                "query": "SELECT count(*) FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Student_Enrolment WHERE degree_program_id = 1"
            },
            {
                "isuser": true,
                "text": "what are their student IDs?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of the student IDs enrolled in a bachelor degree program.",
                "query": "SELECT t1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
                "result": [
                    [
                        [
                            "student_id"
                        ],
                        [
                            9
                        ],
                        [
                            7
                        ],
                        [
                            9
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT student_id FROM Student_Enrolment WHERE degree_program_id = 1"
            },
            {
                "isuser": true,
                "text": "Who are the students with student id 9?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The first, middle, and last names of the student with ID 9 is Reva Golda Osinski.",
                "query": "SELECT DISTINCT t1.first_name, t1.middle_name, t1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE t1.student_id = 9",
                "result": [
                    [
                        [
                            "first_name",
                            "middle_name",
                            "last_name"
                        ],
                        [
                            "Reva",
                            "Golda",
                            "Osinski"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name, middle_name, last_name FROM Students WHERE student_id = 9"
            },
            {
                "isuser": true,
                "text": "what about id 7?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The first, middle, and last names of the student with ID 7 is Frida Aisha Huel.",
                "query": "SELECT DISTINCT t1.first_name, t1.middle_name, t1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE t1.student_id = 7",
                "result": [
                    [
                        [
                            "first_name",
                            "middle_name",
                            "last_name"
                        ],
                        [
                            "Frida",
                            "Aisha",
                            "Huel"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name, middle_name, last_name FROM Students WHERE student_id = 7"
            },
            {
                "isuser": true,
                "text": "what are the degrees of the students in the bachelor program?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a table of the first, middle, and last names and the degree of the students in the bachelor program. For example, Reva Golda Osinski has degree Bachelor.",
                "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name, T3.degree_summary_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
                "result": [
                    [
                        [
                            "first_name",
                            "middle_name",
                            "last_name",
                            "degree_summary_name"
                        ],
                        [
                            "Reva",
                            "Golda",
                            "Osinski",
                            "Bachelor"
                        ],
                        [
                            "Frida",
                            "Aisha",
                            "Huel",
                            "Bachelor"
                        ],
                        [
                            "Jarvis",
                            "Aaliyah",
                            "Carroll",
                            "Bachelor"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT degree_summary_name FROM Degree_Programs WHERE degree_program_id IN (SELECT degree_program_id FROM Student_Enrolment WHERE student_id IN (SELECT student_id FROM Student_Enrolment WHERE degree_program_id = 1))"
            },
            {
                "isuser": true,
                "text": "what are the different degree descriptions available?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of the different degree summary descriptions.",
                "query": "SELECT DISTINCT T3.degree_summary_description FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id",
                "result": [
                    [
                        [
                            "degree_summary_description"
                        ],
                        [
                            "qui"
                        ],
                        [
                            "unde"
                        ],
                        [
                            "aut"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT degree_summary_description FROM Degree_Programs"
            },
            {
                "isuser": true,
                "text": "what were the student ids in the bachelor program again?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of the student IDs of the students in the bachelor program.",
                "query": "SELECT DISTINCT T1.student_ID FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
                "result": [
                    [
                        [
                            "student_id"
                        ],
                        [
                            9
                        ],
                        [
                            7
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT student_id FROM Student_Enrolment WHERE degree_program_id = 1"
            },
            {
                "isuser": true,
                "text": "what are those students first name, middle name, and last names?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of the first, middle, and last name of the students in the bachelor program.",
                "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
                "result": [
                    [
                        [
                            "first_name",
                            "middle_name",
                            "last_name"
                        ],
                        [
                            "Reva",
                            "Golda",
                            "Osinski"
                        ],
                        [
                            "Frida",
                            "Aisha",
                            "Huel"
                        ],
                        [
                            "Jarvis",
                            "Aaliyah",
                            "Carroll"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name, middle_name, last_name FROM Students WHERE student_id IN (SELECT student_id FROM Student_Enrolment WHERE degree_program_id = 1)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "car_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many makes are there for Chevrolet?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 28 distinct makes listed with the model Chevrolet.",
                "query": "SELECT count(DISTINCT Make) FROM CAR_NAMES WHERE Model = 'chevrolet'",
                "result": [
                    [
                        [
                            "count(DISTINCT Make)"
                        ],
                        [
                            28
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM CAR_NAMES WHERE Make = \"Chevrolet\""
            },
            {
                "isuser": true,
                "text": "How many models are in the list?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There are 33 distinct models listed in the table.",
                "query": "SELECT count(DISTINCT Model) FROM CAR_NAMES",
                "result": [
                    [
                        [
                            "count(DISTINCT Model)"
                        ],
                        [
                            33
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM MODEL_LIST"
            },
            {
                "isuser": true,
                "text": "Can you tell me which model has the most makes of cars?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The model with the greatest number of distinct makes is Ford.",
                "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(DISTINCT Make) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Model"
                        ],
                        [
                            "ford"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY COUNT(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you! Goodbye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "match_season",
        "turns": [
            {
                "isuser": true,
                "text": "how many different languages do countries speak?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of different languages is 6.",
                "query": "SELECT count(distinct Official_native_language) FROM country ",
                "result": [
                    [
                        [
                            "count(distinct Official_native_language)"
                        ],
                        [
                            6
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(DISTINCT Official_native_language) FROM country"
            },
            {
                "isuser": true,
                "text": "how  many of them are some form of English?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of languages that are some form of English is 3",
                "query": "SELECT count(distinct Official_native_language) FROM country WHERE Official_native_language LIKE \"%English%\"",
                "result": [
                    [
                        [
                            "count(distinct Official_native_language)"
                        ],
                        [
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM country WHERE Official_native_language LIKE '%English%'"
            },
            {
                "isuser": true,
                "text": "please list those languages",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The languages that are some form of English are Irish English, English Manx. and English.",
                "query": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
                "result": [
                    [
                        [
                            "Official_native_language"
                        ],
                        [
                            "Irish English"
                        ],
                        [
                            "English Manx"
                        ],
                        [
                            "English"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT DISTINCT Official_native_language FROM country WHERE Official_native_language LIKE '%English%'"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "csu_1",
        "turns": [
            {
                "isuser": true,
                "text": "how many campuses are presented on the table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of campuses presented on the table is 23.",
                "query": "SELECT count(*) FROM campuses",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            23
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM campuses"
            },
            {
                "isuser": true,
                "text": "list out the campuses name",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table of the campus names. For example, one of them is California State University-Bakersfield.",
                "query": "SELECT campus FROM campuses",
                "result": [
                    [
                        [
                            "Campus"
                        ],
                        [
                            "California State University-Bakersfield"
                        ],
                        [
                            "California State University-Channel Islands"
                        ],
                        [
                            "California State University-Chico"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT campus FROM campuses"
            },
            {
                "isuser": true,
                "text": "what is the location of California State University-Bakersfield",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the location of California State University-Bakersfield is Bakersfield",
                "query": "SELECT location FROM campuses where campus = \"California State University-Bakersfield\"",
                "result": [
                    [
                        [
                            "Location"
                        ],
                        [
                            "Bakersfield"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT LOCATION FROM campuses WHERE campus = 2"
            },
            {
                "isuser": true,
                "text": "what is the county of California State University-Chico",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the county of California State University-Chico is Butte",
                "query": "SELECT county FROM campuses where campus = \"California State University-Chico\"",
                "result": [
                    [
                        [
                            "County"
                        ],
                        [
                            "Butte"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT County FROM campuses WHERE campus = 3"
            },
            {
                "isuser": true,
                "text": "thank you",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "course_teach",
        "turns": [
            {
                "isuser": true,
                "text": "Can you show me the names of teachers with the course id for the courses they teach?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of names of teachers with the id for courses they teach.",
                "query": "SELECT T2.Name, T1.course_id FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID",
                "result": [
                    [
                        [
                            "Name",
                            "Course_ID"
                        ],
                        [
                            "Kearsley Brown",
                            2
                        ],
                        [
                            "Vicente Carretero",
                            2
                        ],
                        [
                            "Gustaaf Deloor",
                            3
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID"
            },
            {
                "isuser": true,
                "text": "Show me the teacher id with the number of courses they teach.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of names of teachers and the number of courses they teach.",
                "query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
                "result": [
                    [
                        [
                            "Name",
                            "COUNT(*)"
                        ],
                        [
                            "Anne Walker",
                            2
                        ],
                        [
                            "Gustaaf Deloor",
                            1
                        ],
                        [
                            "Kearsley Brown",
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Teacher_ID, COUNT(*) AS num_courses FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID"
            },
            {
                "isuser": true,
                "text": "I want to know the names of the teachers below age 30.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of names of teachers below age 30.",
                "query": "SELECT name from teacher where age < 30",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Gustaaf Deloor"
                        ],
                        [
                            "Vicente Carretero"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T2.Age < 30"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks. bye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "entrepreneur",
        "turns": [
            {
                "isuser": true,
                "text": "How many weight of Francesco Postiglione?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The weight of the person with the name Francesco Postiglione is 80.0",
                "query": "SELECT weight FROM people where name = \"Francesco Postiglione\"",
                "result": [
                    [
                        [
                            "Weight"
                        ],
                        [
                            80.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Weight FROM people WHERE Name = \"Francesco Postiglione\""
            },
            {
                "isuser": true,
                "text": "How much money requested of people id 2?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The money requested of the entrepreneur with people id 2 is 120000.0",
                "query": "SELECT Money_Requested FROM entrepreneur where People_ID = \"2\"",
                "result": [
                    [
                        [
                            "Money_Requested"
                        ],
                        [
                            120000.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Money_Requested FROM entrepreneur WHERE People_ID = 2"
            },
            {
                "isuser": true,
                "text": "Date of birth of Fabrizio Buonocore?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The date of birth of the person with the name Fabrizio Buonocore is 1977-04-28",
                "query": "SELECT date_of_birth FROM people where name = \"Fabrizio Buonocore\"",
                "result": [
                    [
                        [
                            "Date_of_Birth"
                        ],
                        [
                            "1977-04-28"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Date_of_Birth FROM people WHERE Name = \"Fabrizio Buonocore\""
            },
            {
                "isuser": true,
                "text": "What is the name of the entrepreneur with the greatest weight?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the name of the entrepreneur with the greatest weight is Goran Fiorentini",
                "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Goran Fiorentini"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name FROM entrepreneur WHERE Weight = (SELECT MAX(Weight) FROM entrepreneur)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "small_bank_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many balance of customer id 1?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you want the saving balance of the customer with id 1?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT sum(balance) FROM CHECKING WHERE custid = 1"
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the saving balance of the customer with id 1 is 200000.0",
                "query": "SELECT balance from savings where custid = 1",
                "result": [
                    [
                        [
                            "balance"
                        ],
                        [
                            200000.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT sum(balance) FROM CHECKING WHERE custid = 1"
            },
            {
                "isuser": true,
                "text": "Find the savings balance of Wang?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The saving balance of the customer with name Wang is 999999999.0",
                "query": "SELECT T2.balance from accounts as T1 join savings as T2 on T1.custid = T2.custid where T1.name = \"Wang\"",
                "result": [
                    [
                        [
                            "balance"
                        ],
                        [
                            999999999.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT balance FROM SAVINGS WHERE custid = 1"
            },
            {
                "isuser": true,
                "text": "What are the accountant name of customer id 3?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the account with customer id 3 is O'mahony",
                "query": "SELECT name from accounts where custid = 3",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "O'mahony"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM ACCOUNTS WHERE custid = 3"
            },
            {
                "isuser": true,
                "text": "Find the checking balance of the accounts whose savings balance is higher than the average savings balance.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the checking balance of the accounts whose savings balance is higher than the average savings balance",
                "query": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T2.balance > (SELECT avg(balance) FROM savings))",
                "result": [
                    [
                        [
                            "balance"
                        ],
                        [
                            2000.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT balance FROM CHECKING WHERE custid IN (SELECT custid FROM SAVINGS WHERE balance > (SELECT avg(balance) FROM SAVINGS))"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "music_1",
        "turns": [
            {
                "isuser": true,
                "text": "Hello!  Can you provide me with the song name for the song with the lowest resolution?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the song name for the song with the lowest resolution, which is Ami opar hoye.",
                "query": "SELECT T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1",
                "result": [
                    [
                        [
                            "song_name"
                        ],
                        [
                            "Ami opar hoye"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT song_name FROM song ORDER BY resolution ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thanks!  What is the name of the artist who produced the song with the lowest resolution?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Heres the name of the artist who produces the song with the lowest resolution, which is Farida.",
                "query": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1",
                "result": [
                    [
                        [
                            "artist_name"
                        ],
                        [
                            "Farida"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT artist_name FROM song ORDER BY resolution ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Thank you very much!  Can you please tell me what the gender of the artist is?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1",
                "result": [
                    [
                        [
                            "gender"
                        ],
                        [
                            "Female"
                        ]
                    ]
                ],
                "predict_type": "",
                "predict": "SELECT gender FROM artist WHERE artist_name = (SELECT artist_name FROM song ORDER BY resolution ASC LIMIT 1)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "insurance_fnol",
        "turns": [
            {
                "isuser": true,
                "text": "How many service names in this table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The  count  of  service names   is 4",
                "query": "select count(Service_name) from Services",
                "result": [
                    [
                        [
                            "count(Service_name)"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM services"
            },
            {
                "isuser": true,
                "text": "How many customers in this table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The  count  of  customers  is  15",
                "query": "select count(*) from Customers",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM customers"
            },
            {
                "isuser": true,
                "text": "How many customer names in this table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The  count  of different custom names  is  15",
                "query": "select count(distinct \tCustomer_name) from Customers",
                "result": [
                    [
                        [
                            "count(distinct \tCustomer_name)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM customers"
            },
            {
                "isuser": true,
                "text": "How many policy ids are in this table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "the  count of policy id   is \n7",
                "query": "select count(Policy_ID) from First_Notification_of_Loss",
                "result": [
                    [
                        [
                            "count(Policy_ID)"
                        ],
                        [
                            7
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM available_policies"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Welcome and goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "gas_company",
        "turns": [
            {
                "isuser": true,
                "text": "what is the average of market value?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the average market value.",
                "query": "SELECT avg(Market_Value) FROM company",
                "result": [
                    [
                        [
                            "avg(Market_Value)"
                        ],
                        [
                            225.34
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(Market_Value) FROM company"
            },
            {
                "isuser": true,
                "text": "what is the average of assets billion?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "This is the average of assets billion",
                "query": "SELECT avg(Assets_billion) FROM company",
                "result": [
                    [
                        [
                            "avg(Assets_billion)"
                        ],
                        [
                            860.1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT AVG(Assets_billion) FROM company"
            },
            {
                "isuser": true,
                "text": "what is companies headquarters?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "These are the headquarters of companies.",
                "query": "SELECT  Headquarters FROM company",
                "result": [
                    [
                        [
                            "Headquarters"
                        ],
                        [
                            "USA"
                        ],
                        [
                            "USA"
                        ],
                        [
                            "Netherlands"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Headquarters FROM company WHERE Headquarters LIKE '%USA%'"
            },
            {
                "isuser": true,
                "text": "show all headquarters without a company in banking industry.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are all headquarters without a company in banking industry.",
                "query": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'",
                "result": [
                    [
                        [
                            "Headquarters"
                        ],
                        [
                            "Brazil"
                        ],
                        [
                            "Netherlands"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Headquarters FROM company WHERE Main_Industry != 'Banking'"
            },
            {
                "isuser": true,
                "text": "thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You're welcome.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "musical",
        "turns": [
            {
                "isuser": true,
                "text": "Can you list the awards of the musical nominee \"Bob Fosse\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of the awards of nominee Bob Fosse.",
                "query": "SELECT DISTINCT Award FROM musical WHERE Nominee = \"Bob Fosse\"",
                "result": [
                    [
                        [
                            "Award"
                        ],
                        [
                            "Tony Award"
                        ],
                        [
                            "Drama Desk Award"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Award FROM musical WHERE Nominee = \"Bob Fosse\""
            },
            {
                "isuser": true,
                "text": "Can you list the awards of the musical nominee \"Cleavant Derricks\"?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of the awards of nominee Cleavant Derricks.",
                "query": "SELECT DISTINCT Award FROM musical WHERE Nominee = \"Cleavant Derricks\"",
                "result": [
                    [
                        [
                            "Award"
                        ],
                        [
                            "Tony Award"
                        ],
                        [
                            "Drama Desk Award"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Award FROM musical WHERE Nominee = \"Cleavant Derricks\""
            },
            {
                "isuser": true,
                "text": "What categories did Cleavant Derricks win for?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Cleavant Derricks did not win for any category.",
                "query": "SELECT Category FROM musical WHERE Nominee = \"Cleavant Derricks\" AND Result = \"Won\"",
                "result": [
                    [
                        [
                            "Category"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Category FROM musical WHERE Nominee = \"Cleavant Derricks\""
            },
            {
                "isuser": true,
                "text": "What categories were Cleavant Derrick nominated for?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of the categories that Cleavant Derricks was nominated for.",
                "query": "SELECT Category FROM musical WHERE Nominee = \"Cleavant Derricks\" AND Result = \"Nominated\"",
                "result": [
                    [
                        [
                            "Category"
                        ],
                        [
                            "Best Performance by a Leading Actor in a Musical"
                        ],
                        [
                            "Outstanding Actor in a Musical"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Category FROM musical WHERE Nominee = \"Cleavant Derricks\""
            },
            {
                "isuser": true,
                "text": "What categories did Bob Fosse win in?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of categories that Bob Fosse won.",
                "query": "SELECT Category FROM musical WHERE Nominee = \"Bob Fosse\" AND Result = \"Won\"",
                "result": [
                    [
                        [
                            "Category"
                        ],
                        [
                            "Best Choreography"
                        ],
                        [
                            "Outstanding Choreography"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Category FROM musical WHERE Nominee = \"Bob Fosse\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "shop_membership",
        "turns": [
            {
                "isuser": true,
                "text": "What are the register year of Jeremy Jarmon?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The register year of Jeremy Jarmon is 2016",
                "query": "SELECT T1.register_year FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.name=\"Jeremy Jarmon\"",
                "result": [
                    [
                        [
                            "Register_Year"
                        ],
                        [
                            "2016"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Register_Year FROM membership_register_branch WHERE Member_ID = 3"
            },
            {
                "isuser": true,
                "text": "What is Corey Peters Card_Number?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The card number for member Corey Peters is RT91",
                "query": "SELECT Card_Number FROM member where name='Corey Peters'",
                "result": [
                    [
                        [
                            "Card_Number"
                        ],
                        [
                            "RT91"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Card_Number FROM member WHERE Name = \"Corey Peters\""
            },
            {
                "isuser": true,
                "text": "What is Myron Pryor Hometown?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The hometown of member Myron Pryor is Louisville, Kentucky.",
                "query": "SELECT Hometown FROM member where name='Myron Pryor'",
                "result": [
                    [
                        [
                            "Hometown"
                        ],
                        [
                            "Louisville, Kentucky"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Hometown FROM member WHERE Name = \"Myron Pryor\""
            },
            {
                "isuser": true,
                "text": "Show the member name and hometown who registered a branch in 2016.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is list of the member name and hometown who registered a branch in 2016.",
                "query": "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016",
                "result": [
                    [
                        [
                            "Name",
                            "Hometown"
                        ],
                        [
                            "Jeremy Jarmon",
                            "Collierville, Tennessee"
                        ],
                        [
                            "Myron Pryor",
                            "Louisville, Kentucky"
                        ],
                        [
                            "Ventrell Jenkins",
                            "Columbia, South Carolina"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Name, Hometown FROM member WHERE Member_ID IN (SELECT Member_ID FROM membership_register_branch WHERE Register_Year = 2016)"
            },
            {
                "isuser": true,
                "text": "“Thanks!”",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure! Bye!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "products_gen_characteristics",
        "turns": [
            {
                "isuser": true,
                "text": "Is there a product name \"chervil\" in the table Products?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes, here's all the information about the product name \"chervil\"",
                "query": "SELECT * FROM products  WHERE product_name  =  \"chervil\"",
                "result": [
                    [
                        [
                            "product_id",
                            "color_code",
                            "product_category_code",
                            "product_name",
                            "typical_buying_price",
                            "typical_selling_price",
                            "product_description",
                            "other_product_details"
                        ],
                        [
                            11,
                            "7",
                            "Herbs",
                            "chervil",
                            "",
                            "",
                            "minus",
                            null
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product_name FROM Products WHERE product_name = \"chervil\""
            },
            {
                "isuser": true,
                "text": "What is the product description for this product?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The product description of the product named \"chervil\" is minus.",
                "query": "SELECT product_description FROM products  WHERE product_name  =  \"chervil\"",
                "result": [
                    [
                        [
                            "product_description"
                        ],
                        [
                            "minus"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT product_description FROM Products WHERE product_name = \"chervil\""
            },
            {
                "isuser": true,
                "text": "Also, what is the color code?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the color code and description of the product named \"chervil\"",
                "query": "SELECT t1.color_code , t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = \"chervil\"\n\n",
                "result": [
                    [
                        [
                            "color_code",
                            "color_description"
                        ],
                        [
                            "7",
                            "black"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT color_code FROM Products WHERE product_name = \"chervil\""
            },
            {
                "isuser": true,
                "text": "Great, what is the typical product price for this product?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Sorry, we don't have information for the  typical product price for the product named \"chervil\"",
                "query": "SELECT typical_buying_price FROM products WHERE product_name = \"chervil\"\n\n",
                "result": [
                    [
                        [
                            "typical_buying_price"
                        ],
                        [
                            ""
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT typical_buying_price FROM Products WHERE product_name = \"chervil\""
            },
            {
                "isuser": true,
                "text": "No worries, are there any other product details that I should know about?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here's the other product detail of the product named \"chervil\"",
                "query": "SELECT other_product_details FROM products WHERE product_name = \"chervil\"\n\n",
                "result": [
                    [
                        [
                            "other_product_details"
                        ],
                        [
                            null
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT other_product_details FROM Products WHERE product_name = \"chervil\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            }
        ]
    },
    {
        "db_name": "school_player",
        "turns": [
            {
                "isuser": true,
                "text": "Show the School name with School_ID 1?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The school with the id 1 is \"St Aloysius' College\".",
                "query": "SELECT School FROM school WHERE School_ID='1'",
                "result": [
                    [
                        [
                            "School"
                        ],
                        [
                            "St Aloysius' College"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT School FROM school WHERE School_ID = 1"
            },
            {
                "isuser": true,
                "text": "Show the denomination shared by more than one school?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The denominations shared by more than one school are \"Anglican\" and \"Catholic\".",
                "query": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*) > 1",
                "result": [
                    [
                        [
                            "Denomination"
                        ],
                        [
                            "Anglican"
                        ],
                        [
                            "Catholic"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1"
            },
            {
                "isuser": true,
                "text": "Show the Location of Barker College?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The location of the school \"Barker College\" is \"Hornsby\".",
                "query": "SELECT Location FROM school WHERE School='Barker College'",
                "result": [
                    [
                        [
                            "Location"
                        ],
                        [
                            "Hornsby"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT Location FROM school WHERE School = \"Barker College\""
            },
            {
                "isuser": true,
                "text": "Show the names of schools with only girls?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "There is no school with only girls.",
                "query": "SELECT School FROM school WHERE Boys_or_Girls='Girls'",
                "result": [
                    [
                        [
                            "School"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT School FROM school WHERE Boys_or_Girls = \"Girls\""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "student_1",
        "turns": [
            {
                "isuser": true,
                "text": "What are the names of all of the students?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the names of all of the students",
                "query": "select lastname,firstname from list",
                "result": [
                    [
                        [
                            "LastName",
                            "FirstName"
                        ],
                        [
                            "AMY",
                            " PATRINA"
                        ],
                        [
                            "AREHART",
                            " VERTIE"
                        ],
                        [
                            "ATWOOD",
                            " BETHEL"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT FirstName, LastName FROM students"
            },
            {
                "isuser": true,
                "text": "Which classroom has the largest number of students?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "the id of the classroom which has the largest number of students is 109",
                "query": "select classroom from list group by classroom order by count(*) desc limit 1",
                "result": [
                    [
                        [
                            "Classroom"
                        ],
                        [
                            109
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT classroom FROM students GROUP BY classroom ORDER BY count(*) DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "How many students are in that classroom?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are 8 students in the classroom which has the largest number of students.",
                "query": "select count(*) from list group by classroom order by count(*) desc limit 1",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            8
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM students WHERE classroom = 101"
            },
            {
                "isuser": true,
                "text": "What is the name of the teacher who teaches in that classroom?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "here are the names of the teacher who teaches in the classroom which has the largest number of students.",
                "query": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "FirstName",
                            "LastName"
                        ],
                        [
                            " GORDON",
                            "KAWA"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT FirstName, LastName FROM teachers WHERE classroom = 101"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "orchestra",
        "turns": [
            {
                "isuser": true,
                "text": "When are the auditions?\n",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Would you like to know the dates of all performances with the type audition?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "I am sorry, I cannot answer this question. The database does not contain information about auditions."
            },
            {
                "isuser": true,
                "text": "Yes that's exactly it",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is a list of dates for all performances with the type audition.",
                "query": "SELECT date FROM performance WHERE TYPE LIKE \"%audition%\"",
                "result": [
                    [
                        [
                            "Date"
                        ],
                        [
                            "9 June"
                        ],
                        [
                            "10 June"
                        ],
                        [
                            "11 June"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "I am sorry, I cannot answer this question. The database does not contain information about auditions."
            },
            {
                "isuser": true,
                "text": "Are three different orchestras performing?",
                "type": "INFER_SQL"
            },
            {
                "isuser": false,
                "text": "Yes, there are more than 3 different orchestras listed in the table.",
                "query": "SELECT count(DISTINCT Orchestra_ID) FROM performance",
                "result": [
                    [
                        [
                            "count(DISTINCT Orchestra_ID)"
                        ],
                        [
                            11
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "Do you mean the number of orchestras performing?"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you! Goodbye.",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "wta_1",
        "turns": [
            {
                "isuser": true,
                "text": "Can you show the birth date of player id 200002?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The birth date of player id 200002  is\n19820309 ",
                "query": "SELECT birth_date FROM players where player_id=200002",
                "result": [
                    [
                        [
                            "birth_date"
                        ],
                        [
                            19820309
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT birth_date FROM players WHERE player_id = 200002"
            },
            {
                "isuser": true,
                "text": "What is the first name of player id 200001?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The first name of player id 200001 is \nMartina",
                "query": "SELECT first_name FROM players where player_id=200001",
                "result": [
                    [
                        [
                            "first_name"
                        ],
                        [
                            "Martina"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT first_name FROM players WHERE player_id = 200001"
            },
            {
                "isuser": true,
                "text": "Can you show the codes of countries that have more than 50 players?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The country codes of countries that have more than 50 players is  in the  table",
                "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50",
                "result": [
                    [
                        [
                            "country_code"
                        ],
                        [
                            "ALG"
                        ],
                        [
                            "ARG"
                        ],
                        [
                            "AUS"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Welcome and goodbye",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "apartment_rentals",
        "turns": [
            {
                "isuser": true,
                "text": "How many apartments are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of apartments is 15",
                "query": "SELECT count(*) FROM  Apartments ",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            15
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT count(*) FROM Apartments"
            },
            {
                "isuser": true,
                "text": "Which apartments has the largest number of total rooms?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "what attribute did you want me to return for the apartment with the largest number of total rooms? the apartment type code?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT apt_id, apt_number, room_count FROM Apartments ORDER BY room_count DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "The apt ID first.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The  apt ID of the apartment with the largest number of total rooms is 5",
                "query": "SELECT \napt_id FROM Apartments GROUP BY \napt_id ORDER BY sum(room_count) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "apt_id"
                        ],
                        [
                            5
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT apt_id, apt_number, room_count FROM Apartments ORDER BY room_count DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Now what is the apartment type code of that apartment.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": " the apartment type code of that apartment with the largest number of total rooms  is  Flat",
                "query": "SELECT \napt_type_code FROM Apartments GROUP BY \napt_type_code ORDER BY sum(room_count) DESC LIMIT 1",
                "result": [
                    [
                        [
                            "apt_type_code"
                        ],
                        [
                            "Flat"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT apt_type_code FROM Apartments WHERE apt_id = 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "you are welcome  and  bye ",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "journal_committee",
        "turns": [
            {
                "isuser": true,
                "text": "Show the names of editors of age either 24 or 25.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Władysław Grzywna and Mariusz Zalejskic are the names of editors with an age of 24 or 25",
                "query": "SELECT Name FROM editor WHERE Age  =  24 OR Age  =  25",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Władysław Grzywna"
                        ],
                        [
                            "Mariusz Zalejski"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM editor WHERE age  =  24 UNION SELECT name FROM editor WHERE age  =  25"
            },
            {
                "isuser": true,
                "text": "List out the editors name?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "sorry, did you mean you need the Editor ID",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT name FROM editor WHERE age  =  24 UNION SELECT name FROM editor WHERE age  =  25"
            },
            {
                "isuser": true,
                "text": "How many editor id's in the table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "there are 9 editor ids  in the table",
                "query": "SELECT count(Editor_ID) FROM editor",
                "result": [
                    [
                        [
                            "count(Editor_ID)"
                        ],
                        [
                            9
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM editor"
            }
        ]
    },
    {
        "db_name": "body_builder",
        "turns": [
            {
                "isuser": true,
                "text": "which builder has the highest total points? ",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you want their name or id?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT Body_Builder_ID, MAX(Total) AS max_total FROM body_builder GROUP BY Body_Builder_ID"
            },
            {
                "isuser": true,
                "text": "their name please \n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The builder who has the highest total points is Jack Campbell.",
                "query": "SELECT T2.name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Jack Campbell"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Name FROM people AS T1 JOIN body_builder AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Total  =  (SELECT MAX(Total) FROM body_builder)"
            },
            {
                "isuser": true,
                "text": "what is his ID? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The id of the builder who has the highest total points is Jack Campbell is shown in the table.",
                "query": "SELECT T2.name, t2.people_id FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT 1",
                "result": [
                    [
                        [
                            "Name",
                            "People_ID"
                        ],
                        [
                            "Jack Campbell",
                            1
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.Body_Builder_ID FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Name  =  'Mike Mizanin'"
            }
        ]
    },
    {
        "db_name": "assets_maintenance",
        "turns": [
            {
                "isuser": true,
                "text": "Can you list the asset ids, the fault log entry ids and the fault descriptions? ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The asset ids, the fault log entry ids and the fault descriptions are listed in the table.",
                "query": "SELECT asset_id, fault_log_entry_id, fault_description from Fault_Log",
                "result": [
                    [
                        [
                            "asset_id",
                            "fault_log_entry_id",
                            "fault_description"
                        ],
                        [
                            3,
                            1,
                            "system error"
                        ],
                        [
                            7,
                            2,
                            "system error"
                        ],
                        [
                            6,
                            3,
                            "system error"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.asset_id ,  T1.fault_log_entry_id ,  T1.fault_description FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id JOIN Part_Faults AS T3 ON T2.part_fault_id  =  T3.part_fault_id"
            },
            {
                "isuser": true,
                "text": "Hmm, I want to know the asset ids that did not incur any fault log.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the asset ids that did not incur any fault log.",
                "query": "Select asset_id from Assets where asset_id not in (SELECT asset_id from Fault_Log)",
                "result": [
                    [
                        [
                            "asset_id"
                        ],
                        [
                            1
                        ],
                        [
                            4
                        ],
                        [
                            10
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.asset_id FROM Assets AS T1 WHERE NOT EXISTS (SELECT 1 FROM Fault_Log AS T2 JOIN Fault_Log_Parts AS T3 ON T2.fault_log_entry_id  =  T3.fault_log_entry_id JOIN Part_Faults AS T4 ON T3.part_fault_id  =  T4.part_fault_id WHERE T1.asset_id  =  T2.asset_id)"
            },
            {
                "isuser": true,
                "text": "Please just list the asset model of those assets.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the asset models of assets that did not incur any fault log.",
                "query": "Select asset_model from Assets where asset_id not in (SELECT asset_id from Fault_Log)",
                "result": [
                    [
                        [
                            "asset_model"
                        ],
                        [
                            "58 ub"
                        ],
                        [
                            "69 uv"
                        ],
                        [
                            "20 tl"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT T1.asset_model FROM Assets AS T1 WHERE NOT EXISTS (SELECT 1 FROM Fault_Log AS T2 JOIN Fault_Log_Parts AS T3 ON T2.fault_log_entry_id  =  T3.fault_log_entry_id JOIN Part_Faults AS T4 ON T3.part_fault_id  =  T4.part_fault_id WHERE T1.asset_id  =  T2.asset_id)"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "driving_school",
        "turns": [
            {
                "isuser": true,
                "text": "What are the lessons thought by jenessa",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The lesson with id 4 is taught by the staff with first name Jenessa",
                "query": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" ",
                "result": [
                    [
                        [
                            "lesson_id"
                        ],
                        [
                            4
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "I apologize, but the database does not contain information about lessons thought by staff members."
            },
            {
                "isuser": true,
                "text": "What are those id's\n",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "You mean the detailed information about the lesson with id 4?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT staff_id FROM Staff WHERE first_name = \"Jenessa\""
            },
            {
                "isuser": true,
                "text": "yes i need details ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here are the details of the lesson with id 4",
                "query": "SELECT * from Lessons where lesson_id = 4",
                "result": [
                    [
                        [
                            "lesson_id",
                            "customer_id",
                            "lesson_status_code",
                            "staff_id",
                            "vehicle_id",
                            "lesson_date",
                            "lesson_time",
                            "price"
                        ],
                        [
                            4,
                            8,
                            "Completed",
                            1,
                            2,
                            "2018-03-17 19:02:07",
                            "9",
                            306.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT staff_id, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff FROM Staff WHERE first_name = \"Jenessa\""
            },
            {
                "isuser": true,
                "text": "What was the lesson date",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The date of the lesson with id 4 is 2018-03-17 19:02:07",
                "query": "SELECT lesson_date from Lessons where lesson_id = 4",
                "result": [
                    [
                        [
                            "lesson_date"
                        ],
                        [
                            "2018-03-17 19:02:07"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT lesson_date FROM Lessons WHERE staff_id = 1"
            },
            {
                "isuser": true,
                "text": "What was the lesson timing",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The time of the lesson with id 4 is 9",
                "query": "SELECT lesson_time from Lessons where lesson_id = 4",
                "result": [
                    [
                        [
                            "lesson_time"
                        ],
                        [
                            "9"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT lesson_time FROM Lessons WHERE staff_id = 1"
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "result": [],
                "predict_type": "improper",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "flight_1",
        "turns": [
            {
                "isuser": true,
                "text": "list the salaries in ascending order",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table with the salaries of all the employees in ascending order. For example, the lowest salary of them is 20.",
                "query": "SELECT \tsalary FROM Employee ORDER BY salary ASC",
                "result": [
                    [
                        [
                            "salary"
                        ],
                        [
                            20
                        ],
                        [
                            18050
                        ],
                        [
                            23980
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT salary FROM employee ORDER BY salary ASC"
            },
            {
                "isuser": true,
                "text": "show the least three salaries in the table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "Here is the result table with the lowest three salaries of all employees. For example, the lowest salary of them is 20.",
                "query": "SELECT \tsalary FROM Employee ORDER BY salary ASC LIMIT 3",
                "result": [
                    [
                        [
                            "salary"
                        ],
                        [
                            20
                        ],
                        [
                            18050
                        ],
                        [
                            23980
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT salary FROM employee ORDER BY salary ASC LIMIT 3"
            },
            {
                "isuser": true,
                "text": "list the name of the employees with the lowest salaries",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the employee with the lowest salaries is \"Milo Brooks\".",
                "query": "SELECT name FROM Employee ORDER BY salary ASC limit 1",
                "result": [
                    [
                        [
                            "name"
                        ],
                        [
                            "Milo Brooks"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM employee WHERE salary IN (SELECT MIN(salary) FROM employee)"
            },
            {
                "isuser": true,
                "text": "what is the id of him?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The employee id for the employee with the lowest salary is \"574489457\".",
                "query": "SELECT eid FROM Employee ORDER BY salary ASC LIMIT 1",
                "result": [
                    [
                        [
                            "eid"
                        ],
                        [
                            574489457
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT eid FROM employee WHERE salary IN (SELECT MIN(salary) FROM employee)"
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    },
    {
        "db_name": "climbing",
        "turns": [
            {
                "isuser": true,
                "text": "what is height of Kibo (Uhuru Pk)\t\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The height of the mountain named Kibo (Uhuru Pk) is 5895.0.",
                "query": "SELECT height FROM mountain where name='Kibo (Uhuru Pk)'",
                "result": [
                    [
                        [
                            "Height"
                        ],
                        [
                            5895.0
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT height FROM mountain WHERE name = \"Kibo (Uhuru Pk)\""
            },
            {
                "isuser": true,
                "text": "how many mountain does Tanzania have?\n",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the number of mountains in the country Tanzania？",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT COUNT(*) FROM mountain WHERE country = \"Tanzania\""
            },
            {
                "isuser": true,
                "text": "yes\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The number of mountains in the country Tanzania is 2.",
                "query": "SELECT count(*) FROM mountain where country='Tanzania'",
                "result": [
                    [
                        [
                            "count(*)"
                        ],
                        [
                            2
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT COUNT(*) FROM mountain WHERE country = \"Tanzania\""
            },
            {
                "isuser": true,
                "text": "what is the range of Mount Kenya (Batian) in country kenya",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The range of Mount Kenya (Batian) in country Kenya is Mount Kenya.",
                "query": "SELECT Range FROM mountain where country='Kenya' and name='Mount Kenya (Batian)'",
                "result": [
                    [
                        [
                            "Range"
                        ],
                        [
                            "Mount Kenya"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT range FROM mountain WHERE name = \"Mount Kenya (Batian)\" AND country = \"Kenya\""
            },
            {
                "isuser": true,
                "text": "highest mountain in Tanzania",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the name of the highest mountain in country Tanzania?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT name FROM mountain WHERE country = \"Tanzania\" ORDER BY height DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "yes\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the highest mountain in country Tanzania is Kibo (Uhuru Pk).",
                "query": "SELECT name FROM mountain where country='Tanzania' order by height desc limit 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Kibo (Uhuru Pk)"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM mountain WHERE country = \"Tanzania\" ORDER BY height DESC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "The name of the smallest mountain from all countries ",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the name of the lowest mountain?",
                "query": "",
                "result": [],
                "predict_type": "ambiguous",
                "predict": "SELECT name FROM mountain ORDER BY height ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "YES\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "The name of the lowest mountain is Duwoni / Mt Speke (Vittorio Emanuele Pk).",
                "query": "SELECT name FROM mountain  order by height  limit 1",
                "result": [
                    [
                        [
                            "Name"
                        ],
                        [
                            "Duwoni / Mt Speke (Vittorio Emanuele Pk)"
                        ]
                    ]
                ],
                "predict_type": "answerable",
                "predict": "SELECT name FROM mountain ORDER BY height ASC LIMIT 1"
            },
            {
                "isuser": true,
                "text": "THANKS!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Goodbye.",
                "query": "",
                "result": [],
                "predict_type": "WELCOME",
                "predict": "You're welcome!"
            }
        ]
    }
]