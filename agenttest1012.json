[
    {
        "db_name": "battle_death",
        "turns": [
            {
                "isuser": true,
                "text": "How many battles did not lose any ship with tonnage 225?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
                "predict": "SELECT COUNT(DISTINCT T1.id) FROM battle AS T1 WHERE T1.id NOT IN ( SELECT DISTINCT T1.id FROM battle AS T1 INNER JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.tonnage = '225' )",
                "Rewriter": "",
                "Selector": "Table:battle\n[(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(name, name type:text. Value examples:[Battle of Adrianople, Battle of Serres, Battle of Rusion]),(date, date type:text. Value examples:[14 April 1205, June 1205, 31 January 1206]),(bulgarian_commander, bulgarian commander type:text. Value examples:[Kaloyan, Unknown, Boril]),(latin_commander, latin commander type:text. Value examples:[Baldwin I, Unknown, Thierry de Termond]),(result, result type:text. Value examples:[Bulgarian victory, Latin victory, Two Year Truce]),]\nTable:ship\n[(lost_in_battle, lost in battle type:number. Value examples:[8, 7, 6]),(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(name, name type:text. Value examples:[Lettice, Bon Accord, Mary]),(tonnage, tonnage type:text. Value examples:[t, 391, 225]),(ship_type, ship type type:text. Value examples:[Brig, 18-gun Brig, 8 gun Brig]),(location, location type:text. Value examples:[English Channel, SW Approaches, Mid-Atlantic]),(disposition_of_ship, disposition of ship type:text. Value examples:[Captured, Wrecked, Scuttled]),]\nForeign keys:\nship.lost_in_battle = battle.id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            7
                        ]
                    ],
                    "sql": "SELECT COUNT(DISTINCT T1.id) FROM battle AS T1 WHERE T1.id NOT IN ( SELECT DISTINCT T1.id FROM battle AS T1 INNER JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.tonnage = '225' )",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the battles that lost ships with tonnage 225.\nSQL ```sql SELECT DISTINCT T1.id FROM battle AS T1 INNER JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.tonnage = '225'```\nSubquestion 2: Find the battles that did not lose any ship with tonnage 225.\nSQL ```sql SELECT COUNT(DISTINCT T1.id) FROM battle AS T1 WHERE T1.id NOT IN ( SELECT DISTINCT T1.id FROM battle AS T1 INNER JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.tonnage = '225' )```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "How many battles did lose a ship with tonnage 225?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT count(*) FROM battle WHERE id IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
                "predict": "SELECT COUNT(DISTINCT lost_in_battle) FROM ship WHERE tonnage = '225'",
                "Rewriter": "",
                "Selector": "Table:battle\n[(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(name, name type:text. Value examples:[Battle of Adrianople, Battle of Serres, Battle of Rusion]),(date, date type:text. Value examples:[14 April 1205, June 1205, 31 January 1206]),(bulgarian_commander, bulgarian commander type:text. Value examples:[Kaloyan, Unknown, Boril]),(latin_commander, latin commander type:text. Value examples:[Baldwin I, Unknown, Thierry de Termond]),(result, result type:text. Value examples:[Bulgarian victory, Latin victory, Two Year Truce]),]\nTable:ship\n[(lost_in_battle, lost in battle type:number. Value examples:[8, 7, 6]),(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(name, name type:text. Value examples:[Lettice, Bon Accord, Mary]),(tonnage, tonnage type:text. Value examples:[t, 391, 225]),(ship_type, ship type type:text. Value examples:[Brig, 18-gun Brig, 8 gun Brig]),(location, location type:text. Value examples:[English Channel, SW Approaches, Mid-Atlantic]),(disposition_of_ship, disposition of ship type:text. Value examples:[Captured, Wrecked, Scuttled]),]\nForeign keys:\nship.lost_in_battle = battle.id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            1
                        ]
                    ],
                    "sql": "SELECT COUNT(DISTINCT lost_in_battle) FROM ship WHERE tonnage = '225'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the battles that lost a ship with tonnage 225.\nSQL ```sql SELECT DISTINCT lost_in_battle FROM ship WHERE tonnage = '225'```\nSubquestion 2: Count the number of battles that lost a ship with tonnage 225.\nSQL ```sql SELECT COUNT(DISTINCT lost_in_battle) FROM ship WHERE tonnage = '225'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "How many ships have a tonnage of 225?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT count(*) FROM ship WHERE tonnage  =  '225'",
                "predict": "SELECT COUNT(*) FROM ship WHERE tonnage = '225'",
                "Rewriter": "",
                "Selector": "Table:ship\n[(lost_in_battle, lost in battle type:number. Value examples:[8, 7, 6]),(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(tonnage, tonnage type:text. Value examples:[t, 391, 225]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            1
                        ]
                    ],
                    "sql": "SELECT COUNT(*) FROM ship WHERE tonnage = '225'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: How many ships have a tonnage of 225?\nSQL ```sql SELECT COUNT(*) FROM ship WHERE tonnage = '225'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Do any ships have a tonnage above 225?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT count(*) FROM ship WHERE tonnage  >  '225'",
                "predict": "SELECT CASE WHEN EXISTS (SELECT 1 FROM ship WHERE tonnage > '225') THEN 1 ELSE 0 END",
                "Rewriter": "",
                "Selector": "Table:battle\n[(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(name, name type:text. Value examples:[Battle of Adrianople, Battle of Serres, Battle of Rusion]),(date, date type:text. Value examples:[14 April 1205, June 1205, 31 January 1206]),(bulgarian_commander, bulgarian commander type:text. Value examples:[Kaloyan, Unknown, Boril]),(latin_commander, latin commander type:text. Value examples:[Baldwin I, Unknown, Thierry de Termond]),(result, result type:text. Value examples:[Bulgarian victory, Latin victory, Two Year Truce]),]\nTable:ship\n[(lost_in_battle, lost in battle type:number. Value examples:[8, 7, 6]),(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(tonnage, tonnage type:text. Value examples:[t, 391, 225]),]\nForeign keys:\nship.lost_in_battle = battle.id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            1
                        ]
                    ],
                    "sql": "SELECT CASE WHEN EXISTS (SELECT 1 FROM ship WHERE tonnage > '225') THEN 1 ELSE 0 END",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the ships with tonnage above 225.\nSQL: ```sql SELECT * FROM ship WHERE tonnage > '225'```\n\nSubquestion 2: Check if any ships exist with tonnage above 225.\nSQL: ```sql SELECT CASE WHEN EXISTS (SELECT 1 FROM ship WHERE tonnage > '225') THEN 1 ELSE 0 END```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Who won in the battle when the ship with a tonnage of 225 was sunk?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT result FROM battle WHERE id IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
                "predict": "SELECT T1.result FROM battle AS T1 WHERE T1.id IN ( SELECT T2.id FROM battle AS T2 INNER JOIN ship AS T3 ON T2.id = T3.lost_in_battle WHERE T3.tonnage = '225' AND T3.disposition_of_ship = 'Wrecked' )",
                "Rewriter": "",
                "Selector": "Table:battle\n[(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(name, name type:text. Value examples:[Battle of Adrianople, Battle of Serres, Battle of Rusion]),(date, date type:text. Value examples:[14 April 1205, June 1205, 31 January 1206]),(bulgarian_commander, bulgarian commander type:text. Value examples:[Kaloyan, Unknown, Boril]),(latin_commander, latin commander type:text. Value examples:[Baldwin I, Unknown, Thierry de Termond]),(result, result type:text. Value examples:[Bulgarian victory, Latin victory, Two Year Truce]),]\nTable:ship\n[(lost_in_battle, lost in battle type:number. Value examples:[8, 7, 6]),(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(name, name type:text. Value examples:[Lettice, Bon Accord, Mary]),(tonnage, tonnage type:text. Value examples:[t, 391, 225]),(ship_type, ship type type:text. Value examples:[Brig, 18-gun Brig, 8 gun Brig]),(location, location type:text. Value examples:[English Channel, SW Approaches, Mid-Atlantic]),(disposition_of_ship, disposition of ship type:text. Value examples:[Captured, Wrecked, Scuttled]),]\nForeign keys:\nship.lost_in_battle = battle.id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [],
                    "sql": "SELECT T1.result FROM battle AS T1 WHERE T1.id IN ( SELECT T2.id FROM battle AS T2 INNER JOIN ship AS T3 ON T2.id = T3.lost_in_battle WHERE T3.tonnage = '225' AND T3.disposition_of_ship = 'Wrecked' )",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the battle ID where a ship with tonnage 225 was sunk.\nSQL: ```sql SELECT T1.id FROM battle AS T1 INNER JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.tonnage = '225' AND T2.disposition_of_ship = 'Wrecked'```\nSubquestion 2: Find the winner of the battle with the ID found in the previous subquestion.\nSQL: ```sql SELECT T1.result FROM battle AS T1 WHERE T1.id IN ( SELECT T2.id FROM battle AS T2 INNER JOIN ship AS T3 ON T2.id = T3.lost_in_battle WHERE T3.tonnage = '225' AND T3.disposition_of_ship = 'Wrecked' )```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "predict": "You're welcome! Is there anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:battle\n[(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(name, name type:text. Value examples:[Battle of Adrianople, Battle of Serres, Battle of Rusion]),(date, date type:text. Value examples:[14 April 1205, June 1205, 31 January 1206]),(bulgarian_commander, bulgarian commander type:text. Value examples:[Kaloyan, Unknown, Boril]),(latin_commander, latin commander type:text. Value examples:[Baldwin I, Unknown, Thierry de Termond]),(result, result type:text. Value examples:[Bulgarian victory, Latin victory, Two Year Truce]),]\nTable:ship\n[(lost_in_battle, lost in battle type:number. Value examples:[8, 7, 6]),(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(name, name type:text. Value examples:[Lettice, Bon Accord, Mary]),(tonnage, tonnage type:text. Value examples:[t, 391, 225]),(ship_type, ship type type:text. Value examples:[Brig, 18-gun Brig, 8 gun Brig]),(location, location type:text. Value examples:[English Channel, SW Approaches, Mid-Atlantic]),(disposition_of_ship, disposition of ship type:text. Value examples:[Captured, Wrecked, Scuttled]),]\nForeign keys:\nship.lost_in_battle = battle.id\n",
                "Detector": "You're welcome! Is there anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 51
    },
    {
        "db_name": "car_1",
        "turns": [
            {
                "isuser": true,
                "text": "tell me the FullName of the maker amc",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT Fullname FROM car_makers WHERE maker = \"amc\"",
                "predict": "SELECT T1.FullName FROM car_makers AS T1 WHERE T1.Maker = 'amc'",
                "Rewriter": "",
                "Selector": "Table:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nTable:car_makers\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:text. Value examples:[amc, volkswagen, bmw]),(FullName, full name type:text. Value examples:[American Motor Company, Volkswagen, BMW]),(Country, country type:text. Value examples:[1, 2, 3]),]\nTable:model_list\n[(ModelId, model id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:number. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[amc, audi, bmw]),]\nTable:car_names\n[(MakeId, make id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[chevrolet, buick, plymouth]),(Make, make type:text. Value examples:[chevrolet chevelle malibu, buick skylark 320, plymouth satellite]),]\nTable:cars_data\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(MPG, mpg type:text. Value examples:[18, 15, 16]),(Cylinders, cylinders type:number. Value examples:[8, 4, 6]),(Edispl, edispl type:number. Value examples:[307.0, 350.0, 318.0]),(Horsepower, horsepower type:text. Value examples:[130, 165, 150]),(Weight, weight type:number. Value examples:[3504, 3693, 3436]),(Accelerate, accelerate type:number. Value examples:[12.0, 11.5, 11.0]),(Year, year type:number. Value examples:[1970, 1971, 1972]),]\nForeign keys:\ncar_makers.Country = countries.CountryId\nmodel_list.Maker = car_makers.Id\ncar_names.Model = model_list.Model\ncars_data.Id = car_names.MakeId\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [],
                    "sql": "SELECT T2.FullName FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Maker = 'amc'",
                    "executable": false,
                    "log": "no such column: T2.FullName",
                    "process": "Subquestion 1: Find the FullName of the maker amc.\nSQL ```sql SELECT T2.FullName FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Maker = 'amc'```\n\nQuestion Solved. \n"
                },
                "Refiner": {
                    "result": [
                        [
                            "American Motor Company"
                        ]
                    ],
                    "sql": "SELECT T1.FullName FROM car_makers AS T1 WHERE T1.Maker = 'amc'",
                    "executable": true,
                    "log": ""
                }
            },
            {
                "isuser": true,
                "text": "Tell me CountryName for Countryid  1, 2, and 3.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT countryname FROM countries WHERE countryid=1 or countryid=2 or countryid=3)",
                "predict": "SELECT CountryName FROM countries WHERE CountryId IN (1, 2, 3)",
                "Rewriter": "",
                "Selector": "Table:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "usa"
                        ],
                        [
                            "germany"
                        ],
                        [
                            "france"
                        ]
                    ],
                    "sql": "SELECT CountryName FROM countries WHERE CountryId IN (1, 2, 3)",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Tell me CountryName for Countryid 1, 2, and 3.\nSQL ```sql SELECT CountryName FROM countries WHERE CountryId IN (1, 2, 3)```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Tell me the model id made by amc...",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT modelid FROM model_list WHERE model = \"amc\"",
                "predict": "SELECT ModelId FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'amc')",
                "Rewriter": "",
                "Selector": "Table:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nTable:car_makers\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:text. Value examples:[amc, volkswagen, bmw]),(FullName, full name type:text. Value examples:[American Motor Company, Volkswagen, BMW]),(Country, country type:text. Value examples:[1, 2, 3]),]\nTable:model_list\n[(ModelId, model id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:number. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[amc, audi, bmw]),]\nForeign keys:\ncar_makers.Country = countries.CountryId\nmodel_list.Maker = car_makers.Id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            1
                        ]
                    ],
                    "sql": "SELECT ModelId FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'amc')",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the ID of the car maker \"amc\".\nSQL: ```sql SELECT Id FROM car_makers WHERE Maker = 'amc'```\n\nSubquestion 2: Find the ModelId of models made by the car maker with the ID found in the previous subquestion.\nSQL: ```sql SELECT ModelId FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'amc')```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
                "predict": "SELECT T1.CountryId, T1.CountryName FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING COUNT(T2.Id) > 3 UNION SELECT T1.CountryId, T1.CountryName FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.CountryId = T2.Country INNER JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = 'fiat'",
                "Rewriter": "",
                "Selector": "Table:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nTable:car_makers\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:text. Value examples:[amc, volkswagen, bmw]),(FullName, full name type:text. Value examples:[American Motor Company, Volkswagen, BMW]),(Country, country type:text. Value examples:[1, 2, 3]),]\nTable:model_list\n[(ModelId, model id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:number. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[amc, audi, bmw]),]\nTable:car_names\n[(MakeId, make id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[chevrolet, buick, plymouth]),(Make, make type:text. Value examples:[chevrolet chevelle malibu, buick skylark 320, plymouth satellite]),]\nForeign keys:\ncar_makers.Country = countries.CountryId\nmodel_list.Maker = car_makers.Id\ncar_names.Model = model_list.Model\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            1,
                            "usa"
                        ],
                        [
                            2,
                            "germany"
                        ],
                        [
                            4,
                            "japan"
                        ],
                        [
                            5,
                            "italy"
                        ]
                    ],
                    "sql": "SELECT T1.CountryId, T1.CountryName FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING COUNT(T2.Id) > 3 UNION SELECT T1.CountryId, T1.CountryName FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.CountryId = T2.Country INNER JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = 'fiat'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the countries that have more than 3 car makers.\nSQL: ```sql SELECT T1.CountryId, T1.CountryName FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING COUNT(T2.Id) > 3```\nSubquestion 2: Find the countries that produce the 'fiat' model.\nSQL: ```sql SELECT T1.CountryId, T1.CountryName FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.CountryId = T2.Country INNER JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = 'fiat'```\nSubquestion 3: Combine the results of the previous two subquestions.\nSQL: ```sql SELECT T1.CountryId, T1.CountryName FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING COUNT(T2.Id) > 3 UNION SELECT T1.CountryId, T1.CountryName FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.CountryId = T2.Country INNER JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T3.Model = 'fiat'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. bye",
                "query": "",
                "predict": "You're welcome! Is there anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nTable:car_makers\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:text. Value examples:[amc, volkswagen, bmw]),(FullName, full name type:text. Value examples:[American Motor Company, Volkswagen, BMW]),(Country, country type:text. Value examples:[1, 2, 3]),]\nTable:model_list\n[(ModelId, model id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:number. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[amc, audi, bmw]),]\nTable:car_names\n[(MakeId, make id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[chevrolet, buick, plymouth]),(Make, make type:text. Value examples:[chevrolet chevelle malibu, buick skylark 320, plymouth satellite]),]\nTable:cars_data\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(MPG, mpg type:text. Value examples:[18, 15, 16]),(Cylinders, cylinders type:number. Value examples:[8, 4, 6]),(Edispl, edispl type:number. Value examples:[307.0, 350.0, 318.0]),(Horsepower, horsepower type:text. Value examples:[130, 165, 150]),(Weight, weight type:number. Value examples:[3504, 3693, 3436]),(Accelerate, accelerate type:number. Value examples:[12.0, 11.5, 11.0]),(Year, year type:number. Value examples:[1970, 1971, 1972]),]\nForeign keys:\ncar_makers.Country = countries.CountryId\nmodel_list.Maker = car_makers.Id\ncar_names.Model = model_list.Model\ncars_data.Id = car_names.MakeId\n",
                "Detector": "You're welcome! Is there anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 52
    },
    {
        "db_name": "orchestra",
        "turns": [
            {
                "isuser": true,
                "text": "How many orchestras are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT COUNT(DISTINCT Orchestra) FROM orchestra",
                "predict": "SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra",
                "Rewriter": "",
                "Selector": "Table:orchestra\n[(Orchestra_ID, orchestra id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Orchestra, orchestra type:text. Value examples:[London Symphony Orchestra, Columbia Symphony Orchestra, Royal Concertgebouw Orchestra]),(Conductor_ID, conductor id type:number. Value examples:[1, 2, 3]),(Record_Company, record company type:text. Value examples:[Mercury Records, Columbia Masterworks, Philips]),(Year_of_Founded, year of founded type:number. Value examples:[2003.0, 2009.0, 2008.0]),(Major_Record_Format, major record format type:text. Value examples:[CD, CD / LP, DVD]),]\nTable:performance\n[(Performance_ID, performance id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Orchestra_ID, orchestra id type:number. Value examples:[1, 2, 3]),(Type, type type:text. Value examples:[Auditions 1, Auditions 2, Auditions 3]),(Date, date type:text. Value examples:[9 June, 10 June, 11 June]),(Official_ratings_(millions), official ratings (millions) type:number. Value examples:[]),(Weekly_rank, weekly rank type:text. Value examples:[12, 8, 15]),(Share, share type:text. Value examples:[22.7%, 28.0%, 29.4%]),]\nTable:show\n[(Show_ID, show id type:number. Value examples:[1, 2, 3]),(Performance_ID, performance id type:number. Value examples:[1, 2, 3]),(If_first_show, if first show type:others. Value examples:[Glebe Park, Fir Park, St. Mirren Park]),(Result, result type:text. Value examples:[T, F]),(Attendance, attendance type:number. Value examples:[1026.0, 695.0, 555.0]),]\nForeign keys:\nperformance.Orchestra_ID = orchestra.Orchestra_ID\nshow.Performance_ID = performance.Performance_ID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            12
                        ]
                    ],
                    "sql": "SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: How many orchestras are there?\nSQL ```sql SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "How many without performance?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean to ask for the number of orchestras that have no performance?",
                "query": "",
                "predict": "SELECT COUNT(DISTINCT T1.Orchestra_ID) FROM orchestra AS T1 EXCEPT SELECT T2.Orchestra_ID FROM performance AS T2",
                "Rewriter": "",
                "Selector": "Table:conductor\n[(Conductor_ID, conductor id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[Antal Dor\u00e1ti, Igor Stravinsky, Colin Davis]),(Age, age type:number. Value examples:[40, 41, 42]),(Nationality, nationality type:text. Value examples:[USA, UK, France]),(Year_of_Work, year of work type:number. Value examples:[10, 11, 6]),]\nTable:orchestra\n[(Orchestra_ID, orchestra id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Orchestra, orchestra type:text. Value examples:[London Symphony Orchestra, Columbia Symphony Orchestra, Royal Concertgebouw Orchestra]),(Conductor_ID, conductor id type:number. Value examples:[1, 2, 3]),(Record_Company, record company type:text. Value examples:[Mercury Records, Columbia Masterworks, Philips]),(Year_of_Founded, year of founded type:number. Value examples:[2003.0, 2009.0, 2008.0]),(Major_Record_Format, major record format type:text. Value examples:[CD, CD / LP, DVD]),]\nTable:performance\n[(Performance_ID, performance id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Orchestra_ID, orchestra id type:number. Value examples:[1, 2, 3]),(Type, type type:text. Value examples:[Auditions 1, Auditions 2, Auditions 3]),(Date, date type:text. Value examples:[9 June, 10 June, 11 June]),(Official_ratings_(millions), official ratings (millions) type:number. Value examples:[]),(Weekly_rank, weekly rank type:text. Value examples:[12, 8, 15]),(Share, share type:text. Value examples:[22.7%, 28.0%, 29.4%]),]\nForeign keys:\norchestra.Conductor_ID = conductor.Conductor_ID\nperformance.Orchestra_ID = orchestra.Orchestra_ID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            12
                        ]
                    ],
                    "sql": "SELECT COUNT(DISTINCT T1.Orchestra_ID) FROM orchestra AS T1 EXCEPT SELECT T2.Orchestra_ID FROM performance AS T2",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the orchestras that have no performance.\nSQL ```sql SELECT T1.Orchestra_ID FROM orchestra AS T1 EXCEPT SELECT T2.Orchestra_ID FROM performance AS T2```\nSubquestion 2: Count the number of orchestras that have no performance.\nSQL ```sql SELECT COUNT(DISTINCT T1.Orchestra_ID) FROM orchestra AS T1 EXCEPT SELECT T2.Orchestra_ID FROM performance AS T2```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Yes ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT COUNT(Orchestra) FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)\n\n",
                "predict": "SELECT COUNT(T1.Orchestra_ID) FROM orchestra AS T1 EXCEPT SELECT T2.Orchestra_ID FROM performance AS T2",
                "Rewriter": "",
                "Selector": "Table:orchestra\n[(Orchestra_ID, orchestra id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Orchestra, orchestra type:text. Value examples:[London Symphony Orchestra, Columbia Symphony Orchestra, Royal Concertgebouw Orchestra]),(Conductor_ID, conductor id type:number. Value examples:[1, 2, 3]),(Record_Company, record company type:text. Value examples:[Mercury Records, Columbia Masterworks, Philips]),(Year_of_Founded, year of founded type:number. Value examples:[2003.0, 2009.0, 2008.0]),(Major_Record_Format, major record format type:text. Value examples:[CD, CD / LP, DVD]),]\nTable:performance\n[(Performance_ID, performance id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Orchestra_ID, orchestra id type:number. Value examples:[1, 2, 3]),(Type, type type:text. Value examples:[Auditions 1, Auditions 2, Auditions 3]),(Date, date type:text. Value examples:[9 June, 10 June, 11 June]),(Official_ratings_(millions), official ratings (millions) type:number. Value examples:[]),(Weekly_rank, weekly rank type:text. Value examples:[12, 8, 15]),(Share, share type:text. Value examples:[22.7%, 28.0%, 29.4%]),]\nTable:show\n[(Show_ID, show id type:number. Value examples:[1, 2, 3]),(Performance_ID, performance id type:number. Value examples:[1, 2, 3]),(If_first_show, if first show type:others. Value examples:[Glebe Park, Fir Park, St. Mirren Park]),(Result, result type:text. Value examples:[T, F]),(Attendance, attendance type:number. Value examples:[1026.0, 695.0, 555.0]),]\nForeign keys:\nperformance.Orchestra_ID = orchestra.Orchestra_ID\nshow.Performance_ID = performance.Performance_ID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            12
                        ]
                    ],
                    "sql": "SELECT COUNT(T1.Orchestra_ID) FROM orchestra AS T1 EXCEPT SELECT T2.Orchestra_ID FROM performance AS T2",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the orchestras that have no performance.\nSQL ```sql SELECT T1.Orchestra_ID FROM orchestra AS T1 EXCEPT SELECT T2.Orchestra_ID FROM performance AS T2```\nSubquestion 2: Count the number of orchestras that have no performance.\nSQL ```sql SELECT COUNT(T1.Orchestra_ID) FROM orchestra AS T1 EXCEPT SELECT T2.Orchestra_ID FROM performance AS T2```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Can you show me its id and its name please?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT Orchestra_ID, Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)\n\n",
                "predict": "SELECT Orchestra_ID, Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
                "Rewriter": "",
                "Selector": "Table:orchestra\n[(Orchestra_ID, orchestra id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Orchestra, orchestra type:text. Value examples:[London Symphony Orchestra, Columbia Symphony Orchestra, Royal Concertgebouw Orchestra]),]\nTable:performance\n[(Orchestra_ID, orchestra id type:number. Value examples:[1, 2, 3]),]\nForeign keys:\nperformance.Orchestra_ID = orchestra.Orchestra_ID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            12,
                            "San Francisco Symphony Orchestra"
                        ]
                    ],
                    "sql": "SELECT Orchestra_ID, Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the orchestras that have no performance.\nSQL: ```sql SELECT Orchestra_ID, Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Good bye!",
                "query": "",
                "predict": "You're welcome! Is there anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:orchestra\n[(Orchestra_ID, orchestra id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Orchestra, orchestra type:text. Value examples:[London Symphony Orchestra, Columbia Symphony Orchestra, Royal Concertgebouw Orchestra]),(Conductor_ID, conductor id type:number. Value examples:[1, 2, 3]),(Record_Company, record company type:text. Value examples:[Mercury Records, Columbia Masterworks, Philips]),(Year_of_Founded, year of founded type:number. Value examples:[2003.0, 2009.0, 2008.0]),(Major_Record_Format, major record format type:text. Value examples:[CD, CD / LP, DVD]),]\nTable:performance\n[(Performance_ID, performance id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Orchestra_ID, orchestra id type:number. Value examples:[1, 2, 3]),(Type, type type:text. Value examples:[Auditions 1, Auditions 2, Auditions 3]),(Date, date type:text. Value examples:[9 June, 10 June, 11 June]),(Official_ratings_(millions), official ratings (millions) type:number. Value examples:[]),(Weekly_rank, weekly rank type:text. Value examples:[12, 8, 15]),(Share, share type:text. Value examples:[22.7%, 28.0%, 29.4%]),]\nTable:show\n[(Show_ID, show id type:number. Value examples:[1, 2, 3]),(Performance_ID, performance id type:number. Value examples:[1, 2, 3]),(If_first_show, if first show type:others. Value examples:[Glebe Park, Fir Park, St. Mirren Park]),(Result, result type:text. Value examples:[T, F]),(Attendance, attendance type:number. Value examples:[1026.0, 695.0, 555.0]),]\nForeign keys:\nperformance.Orchestra_ID = orchestra.Orchestra_ID\nshow.Performance_ID = performance.Performance_ID\n",
                "Detector": "You're welcome! Is there anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 53
    },
    {
        "db_name": "student_transcripts_tracking",
        "turns": [
            {
                "isuser": true,
                "text": "what are the degree_program IDs in the Table Name: Student_Enrolment?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT DISTINCT degree_program_id from Student_Enrolment",
                "predict": "SELECT DISTINCT 'degree_program_id' FROM Student_Enrolment",
                "Rewriter": "",
                "Selector": "Table:Courses\n[(course_id, course id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(course_name, course name type:text. Value examples:[ds, math, os]),(course_description, course description type:text. Value examples:[p, q, v]),(other_details, other details type:text. Value examples:[None]),]\nTable:Degree_Programs\n[(degree_program_id, degree program id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(department_id, department id type:number. Value examples:[13, 2, 8]),(degree_summary_name, degree summary name type:text. Value examples:[Master, Bachelor, PHD]),(degree_summary_description, degree summary description type:text. Value examples:[architecto, cumque, placeat]),(other_details, other details type:text. Value examples:[None]),]\nTable:Semesters\n[(semester_id, semester id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(semester_name, semester name type:text. Value examples:[spring 2010, summer 2010, fall 2010]),(semester_description, semester description type:text. Value examples:[x, g, w]),(other_details, other details type:text. Value examples:[None]),]\nTable:Student_Enrolment\n[(student_enrolment_id, student enrolment id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(degree_program_id, degree program id type:number. Value examples:[12, 4, 10]),(semester_id, semester id type:number. Value examples:[13, 2, 15]),(student_id, student id type:number. Value examples:[14, 9, 7]),]\nForeign keys:\nStudent_Enrolment.semester_id = Semesters.semester_id\nStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "degree_program_id"
                        ]
                    ],
                    "sql": "SELECT DISTINCT 'degree_program_id' FROM Student_Enrolment",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What are the degree_program IDs in the Table Name: Student_Enrolment? \nSQL ```sql SELECT DISTINCT 'degree_program_id' FROM Student_Enrolment```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "what are the semester IDs in the Table Name: Student_Enrolment?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT DISTINCT semester_id from Student_Enrolment",
                "predict": "SELECT DISTINCT semester_id FROM Student_Enrolment",
                "Rewriter": "",
                "Selector": "Table:Courses\n[(course_id, course id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(course_name, course name type:text. Value examples:[ds, math, os]),(course_description, course description type:text. Value examples:[p, q, v]),(other_details, other details type:text. Value examples:[None]),]\nTable:Degree_Programs\n[(degree_program_id, degree program id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(department_id, department id type:number. Value examples:[13, 2, 8]),(degree_summary_name, degree summary name type:text. Value examples:[Master, Bachelor, PHD]),(degree_summary_description, degree summary description type:text. Value examples:[architecto, cumque, placeat]),(other_details, other details type:text. Value examples:[None]),]\nTable:Semesters\n[(semester_id, semester id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(semester_name, semester name type:text. Value examples:[spring 2010, summer 2010, fall 2010]),(semester_description, semester description type:text. Value examples:[x, g, w]),(other_details, other details type:text. Value examples:[None]),]\nTable:Student_Enrolment\n[(student_enrolment_id, student enrolment id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(degree_program_id, degree program id type:number. Value examples:[12, 4, 10]),(semester_id, semester id type:number. Value examples:[13, 2, 15]),(student_id, student id type:number. Value examples:[14, 9, 7]),]\nForeign keys:\nStudent_Enrolment.semester_id = Semesters.semester_id\nStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            13
                        ],
                        [
                            2
                        ],
                        [
                            15
                        ],
                        [
                            1
                        ],
                        [
                            9
                        ],
                        [
                            5
                        ],
                        [
                            6
                        ],
                        [
                            12
                        ],
                        [
                            4
                        ]
                    ],
                    "sql": "SELECT DISTINCT semester_id FROM Student_Enrolment",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What are the semester IDs in the Table Name: Student_Enrolment?\nSQL ```sql SELECT DISTINCT semester_id FROM Student_Enrolment```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "what are the semester_name in the Table Name: Semesters?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT semester_name from semesters",
                "predict": "SELECT semester_name FROM Semesters",
                "Rewriter": "",
                "Selector": "Table:Courses\n[(course_id, course id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(course_name, course name type:text. Value examples:[ds, math, os]),(course_description, course description type:text. Value examples:[p, q, v]),(other_details, other details type:text. Value examples:[None]),]\nTable:Semesters\n[(semester_id, semester id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(semester_name, semester name type:text. Value examples:[spring 2010, summer 2010, fall 2010]),]\nTable:Student_Enrolment\n[(student_enrolment_id, student enrolment id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(degree_program_id, degree program id type:number. Value examples:[12, 4, 10]),(semester_id, semester id type:number. Value examples:[13, 2, 15]),(student_id, student id type:number. Value examples:[14, 9, 7]),(other_details, other details type:text. Value examples:[None]),]\nForeign keys:\nStudent_Enrolment.semester_id = Semesters.semester_id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "spring 2010"
                        ],
                        [
                            "summer 2010"
                        ],
                        [
                            "fall 2010"
                        ],
                        [
                            "winter 2010"
                        ],
                        [
                            "spring 2018"
                        ],
                        [
                            "spring 2012"
                        ],
                        [
                            "spring 2013"
                        ],
                        [
                            "spring 2014"
                        ],
                        [
                            "spring 2015"
                        ],
                        [
                            "spring 2016"
                        ]
                    ],
                    "sql": "SELECT semester_name FROM Semesters",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What are the semester names in the table Semesters?\nSQL ```sql SELECT semester_name FROM Semesters```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "what is the semester which most student registered in? show both the name and the id.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
                "predict": "SELECT (SELECT semester_name FROM Semesters WHERE semester_id = (SELECT semester_id FROM Student_Enrolment GROUP BY semester_id ORDER BY COUNT(student_id) DESC LIMIT 1)), (SELECT semester_id FROM Student_Enrolment GROUP BY semester_id ORDER BY COUNT(student_id) DESC LIMIT 1)",
                "Rewriter": "",
                "Selector": "Table:Courses\n[(course_id, course id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(course_name, course name type:text. Value examples:[ds, math, os]),(course_description, course description type:text. Value examples:[p, q, v]),(other_details, other details type:text. Value examples:[None]),]\nTable:Degree_Programs\n[(degree_program_id, degree program id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(department_id, department id type:number. Value examples:[13, 2, 8]),(degree_summary_name, degree summary name type:text. Value examples:[Master, Bachelor, PHD]),(degree_summary_description, degree summary description type:text. Value examples:[architecto, cumque, placeat]),(other_details, other details type:text. Value examples:[None]),]\nTable:Semesters\n[(semester_id, semester id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(semester_name, semester name type:text. Value examples:[spring 2010, summer 2010, fall 2010]),]\nTable:Student_Enrolment\n[(semester_id, semester id type:number. Value examples:[13, 2, 15]),(student_id, student id type:number. Value examples:[14, 9, 7]),]\nForeign keys:\nStudent_Enrolment.semester_id = Semesters.semester_id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "summer 2010",
                            2
                        ]
                    ],
                    "sql": "SELECT (SELECT semester_name FROM Semesters WHERE semester_id = (SELECT semester_id FROM Student_Enrolment GROUP BY semester_id ORDER BY COUNT(student_id) DESC LIMIT 1)), (SELECT semester_id FROM Student_Enrolment GROUP BY semester_id ORDER BY COUNT(student_id) DESC LIMIT 1)",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the semester ID with the most student registrations.\nSQL: ```sql SELECT semester_id FROM Student_Enrolment GROUP BY semester_id ORDER BY COUNT(student_id) DESC LIMIT 1```\nSubquestion 2: Find the semester name corresponding to the semester ID with the most student registrations.\nSQL: ```sql SELECT semester_name FROM Semesters WHERE semester_id = (SELECT semester_id FROM Student_Enrolment GROUP BY semester_id ORDER BY COUNT(student_id) DESC LIMIT 1)```\n\nFinal SQL: ```sql SELECT (SELECT semester_name FROM Semesters WHERE semester_id = (SELECT semester_id FROM Student_Enrolment GROUP BY semester_id ORDER BY COUNT(student_id) DESC LIMIT 1)), (SELECT semester_id FROM Student_Enrolment GROUP BY semester_id ORDER BY COUNT(student_id) DESC LIMIT 1)``` \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "okay, thanks for your help.",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, bye. ",
                "query": "",
                "predict": "You're welcome!  Let me know if you have any other questions. \n",
                "Rewriter": "",
                "Selector": "Table:Addresses\n[(address_id, address id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(line_1, line 1 type:text. Value examples:[2294 Grant Square Apt. 235, 3999 Aufderhar Ways Suite 593, 67942 Carlotta Ferry Apt. 686]),(line_2, line 2 type:text. Value examples:[Apt. 370, Apt. 388, Apt. 583]),(line_3, line 3 type:text. Value examples:[None]),(city, city type:text. Value examples:[Port Chelsea, Lake Laishafurt, Goodwinhaven]),(zip_postcode, zip postcode type:text. Value examples:[148, 943, 541]),(state_province_county, state province county type:text. Value examples:[Virginia, Kentucky, Kansas]),(country, country type:text. Value examples:[Iceland, Burundi, Saudi Arabia]),(other_address_details, other address details type:text. Value examples:[None]),]\nTable:Courses\n[(course_id, course id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(course_name, course name type:text. Value examples:[ds, math, os]),(course_description, course description type:text. Value examples:[p, q, v]),(other_details, other details type:text. Value examples:[None]),]\nTable:Departments\n[(department_id, department id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(department_name, department name type:text. Value examples:[computer science, history, art]),(department_description, department description type:text. Value examples:[error, nostrum, aliquam]),(other_details, other details type:text. Value examples:[None]),]\nTable:Degree_Programs\n[(degree_program_id, degree program id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(department_id, department id type:number. Value examples:[13, 2, 8]),(degree_summary_name, degree summary name type:text. Value examples:[Master, Bachelor, PHD]),(degree_summary_description, degree summary description type:text. Value examples:[architecto, cumque, placeat]),(other_details, other details type:text. Value examples:[None]),]\nTable:Sections\n[(section_id, section id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(course_id, course id type:number. Value examples:[9, 2, 8]),(section_name, section name type:text. Value examples:[a, b, c]),(section_description, section description type:text. Value examples:[non, voluptatem, qui]),(other_details, other details type:text. Value examples:[None]),]\nTable:Semesters\n[(semester_id, semester id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(semester_name, semester name type:text. Value examples:[spring 2010, summer 2010, fall 2010]),]\nTable:Students\n[(student_id, student id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(current_address_id, current address id type:number. Value examples:[10, 12, 9]),(permanent_address_id, permanent address id type:number. Value examples:[15, 5, 11]),(first_name, first name type:text. Value examples:[Timmothy, Hobart, Warren]),(middle_name, middle name type:text. Value examples:[Anna, Lorenz, Violet]),(last_name, last name type:text. Value examples:[Ward, Balistreri, Gleichner]),(cell_mobile_number, cell mobile number type:text. Value examples:[(096)889-8954x524, 1-009-710-5151, 07661787471]),(email_address, email address type:text. Value examples:[erwin.zboncak@example.com, swift.kolby@example.com, johns.unique@example.net]),(ssn, ssn type:text. Value examples:[965, 304246, 3]),(date_first_registered, date first registered type:time. Value examples:[1971-02-05 07:28:23, 1976-10-26 02:33:06, 2007-08-29 23:25:41]),(date_left, date left type:time. Value examples:[1971-05-17 19:28:49, 2013-10-05 17:41:28, 2007-03-31 09:53:19]),(other_student_details, other student details type:text. Value examples:[quia, autem, facilis]),]\nTable:Student_Enrolment\n[(degree_program_id, degree program id type:number. Value examples:[12, 4, 10]),(semester_id, semester id type:number. Value examples:[13, 2, 15]),(student_id, student id type:number. Value examples:[14, 9, 7]),]\nTable:Student_Enrolment_Courses\n[(student_course_id, student course id type:number PRIMARY KEY. Value examples:[0, 1, 2]),(course_id, course id type:number. Value examples:[6, 14, 11]),(student_enrolment_id, student enrolment id type:number. Value examples:[2, 8, 5]),]\nForeign keys:\nDegree_Programs.department_id = Departments.department_id\nSections.course_id = Courses.course_id\nStudents.permanent_address_id = Addresses.address_id\nStudents.current_address_id = Addresses.address_id\nStudent_Enrolment.student_id = Students.student_id\nStudent_Enrolment.semester_id = Semesters.semester_id\nStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nStudent_Enrolment_Courses.course_id = Courses.course_id\n",
                "Detector": "You're welcome!  Let me know if you have any other questions. \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 54
    },
    {
        "db_name": "dog_kennels",
        "turns": [
            {
                "isuser": true,
                "text": "Can you show me a list?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "can you give more Information about this question?",
                "query": "",
                "predict": "Please clarify what list you would like to see.  There are many tables in the database.  Can you tell me which table you are interested in? \n",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Charges\n[(charge_id, charge id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(charge_type, charge type type:text. Value examples:[Daily Accommodation, Drugs, Health Check]),(charge_amount, charge amount type:number. Value examples:[98, 322, 640]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Treatment_Types\n[(treatment_type_code, treatment type code type:text PRIMARY KEY. Value examples:[EXAM, VAC, WALK]),(treatment_type_description, treatment type description type:text. Value examples:[Physical examination, Vaccination, Take for a Walk]),]\nTable:Owners\n[(owner_id, owner id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(first_name, first name type:text. Value examples:[Nora, Melisa, Jaclyn]),(last_name, last name type:text. Value examples:[Haley, DuBuque, Stoltenberg]),(street, street type:text. Value examples:[0647 Hintz Village Apt. 024, 1204 Mae Highway Apt. 107, 2635 Caitlyn Plains]),(city, city type:text. Value examples:[Lake Tia, Port Reannamouth, Barrettburgh]),(state, state type:text. Value examples:[Wisconsin, Virginia, Vermont]),(zip_code, zip code type:text. Value examples:[93165, 45244, 02647]),(email_address, email address type:text. Value examples:[lynn81@example.org, ykris@example.com, hudson.favian@example.com]),(home_phone, home phone type:text. Value examples:[1-682-845-0116x63235, (799)563-0260x454, 916.976.9480x13851]),(cell_number, cell number type:text. Value examples:[478.978.0729, (722)768-5439x484, 481-483-9083x37986]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(owner_id, owner id type:number. Value examples:[3, 11, 1]),(breed_code, breed code type:text. Value examples:[ESK, BUL, HUS]),(size_code, size code type:text. Value examples:[LGE, MED, SML]),(name, name type:text. Value examples:[Kacey, Hipolito, Mavis]),(age, age type:text. Value examples:[6, 9, 8]),(date_of_birth, date of birth type:time. Value examples:[2012-01-27 05:11:53, 2013-02-13 05:15:21, 2008-05-19 15:54:49]),(gender, gender type:text. Value examples:[1, 0]),(weight, weight type:text. Value examples:[7.57, 1.72, 8.04]),(date_arrived, date arrived type:time. Value examples:[2017-09-08 20:10:13, 2017-12-22 05:02:02, 2017-06-25 10:14:05]),]\nTable:Professionals\n[(professional_id, professional id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(role_code, role code type:text. Value examples:[Employee, Veterenarian]),(first_name, first name type:text. Value examples:[Taryn, Jayson, Olaf]),(street, street type:text. Value examples:[6915 Oberbrunner Point Suite 491\nGleasonville, LA , 88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194, 68589 Bradly Manor\nNew Audrey, IN 91497]),(city, city type:text. Value examples:[West Heidi, North Odellfurt, Jaceton]),(state, state type:text. Value examples:[Indiana, Connecticut, Wisconsin]),(zip_code, zip code type:text. Value examples:[06646, 43129, 77129]),(last_name, last name type:text. Value examples:[Braun, Ullrich, Watsica]),(email_address, email address type:text. Value examples:[deanna.schuster@example.com, lucile.shanahan@example.org, uboehm@example.org]),(home_phone, home phone type:text. Value examples:[+71(6)2898266914, +02(1)0259033559, 325-155-0801x7005]),(cell_number, cell number type:text. Value examples:[(275)939-2435x80863, 889-940-2676, (369)908-7311x065]),]\nTable:Treatments\n[(treatment_id, treatment id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(dog_id, dog id type:number. Value examples:[14, 4, 2]),(professional_id, professional id type:number. Value examples:[9, 10, 4]),(treatment_type_code, treatment type code type:text. Value examples:[WALK, VAC, EXAM]),(date_of_treatment, date of treatment type:time. Value examples:[2018-03-19 04:39:54, 2018-03-15 20:25:34, 2018-03-08 05:26:23]),(cost_of_treatment, cost of treatment type:number. Value examples:[567, 147, 429]),]\nForeign keys:\nDogs.owner_id = Owners.owner_id\nDogs.owner_id = Owners.owner_id\nDogs.size_code = Sizes.size_code\nDogs.breed_code = Breeds.breed_code\nTreatments.dog_id = Dogs.dog_id\nTreatments.professional_id = Professionals.professional_id\nTreatments.treatment_type_code = Treatment_Types.treatment_type_code\n",
                "Detector": "Please clarify what list you would like to see.  There are many tables in the database.  Can you tell me which table you are interested in? \n",
                "Decomposer": "",
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "I want you to extract just the owner ids and zip codes from the table. Does it make sense?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT  \nowner_id,\tzip_code from Owners",
                "predict": "SELECT owner_id, zip_code FROM Owners",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Owners\n[(owner_id, owner id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(first_name, first name type:text. Value examples:[Nora, Melisa, Jaclyn]),(last_name, last name type:text. Value examples:[Haley, DuBuque, Stoltenberg]),(zip_code, zip code type:text. Value examples:[93165, 45244, 02647]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            1,
                            "93165"
                        ],
                        [
                            2,
                            "45244"
                        ],
                        [
                            3,
                            "02647"
                        ],
                        [
                            4,
                            "87304"
                        ],
                        [
                            5,
                            "61019"
                        ],
                        [
                            6,
                            "25609"
                        ],
                        [
                            7,
                            "00589"
                        ],
                        [
                            8,
                            "86010"
                        ],
                        [
                            9,
                            "92406"
                        ],
                        [
                            10,
                            "78297"
                        ]
                    ],
                    "sql": "SELECT owner_id, zip_code FROM Owners",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Extract owner ids and zip codes from the Owners table.\nSQL ```sql SELECT owner_id, zip_code FROM Owners```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Hmm, can you put the owner ids, dog ids and the cost of treatment in a table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T1.owner_id , T2.dog_id ,T3.cost_of_treatment  FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id ",
                "predict": "SELECT T1.owner_id, T2.dog_id, T3.cost_of_treatment FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id INNER JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Treatment_Types\n[(treatment_type_code, treatment type code type:text PRIMARY KEY. Value examples:[EXAM, VAC, WALK]),(treatment_type_description, treatment type description type:text. Value examples:[Physical examination, Vaccination, Take for a Walk]),]\nTable:Owners\n[(owner_id, owner id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(zip_code, zip code type:text. Value examples:[93165, 45244, 02647]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(owner_id, owner id type:number. Value examples:[3, 11, 1]),]\nTable:Treatments\n[(treatment_id, treatment id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(dog_id, dog id type:number. Value examples:[14, 4, 2]),(cost_of_treatment, cost of treatment type:number. Value examples:[567, 147, 429]),]\nForeign keys:\nDogs.owner_id = Owners.owner_id\nDogs.owner_id = Owners.owner_id\nTreatments.dog_id = Dogs.dog_id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            14,
                            14,
                            567
                        ],
                        [
                            14,
                            4,
                            147
                        ],
                        [
                            14,
                            14,
                            429
                        ],
                        [
                            11,
                            2,
                            266
                        ],
                        [
                            12,
                            12,
                            668
                        ],
                        [
                            6,
                            10,
                            313
                        ],
                        [
                            10,
                            15,
                            852
                        ],
                        [
                            11,
                            2,
                            407
                        ],
                        [
                            14,
                            14,
                            139
                        ],
                        [
                            6,
                            10,
                            681
                        ]
                    ],
                    "sql": "SELECT T1.owner_id, T2.dog_id, T3.cost_of_treatment FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id INNER JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Get the owner ids, dog ids and the cost of treatment.\nSQL ```sql SELECT T1.owner_id, T2.dog_id, T3.cost_of_treatment FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id INNER JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Name of the customers who spend most for it",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean the full name of the owner who has cost largest amount of total cost of treatment for all dogs owned by an owner?",
                "query": "",
                "predict": "The question is ambiguous.  Please clarify what \"it\" refers to. Do you want the names of the customers who spend the most on:\n\n1. **Treatments?** \n2. **Charges?** \n\nPlease specify so I can provide the correct query. \n",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Charges\n[(charge_id, charge id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(charge_type, charge type type:text. Value examples:[Daily Accommodation, Drugs, Health Check]),(charge_amount, charge amount type:number. Value examples:[98, 322, 640]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Treatment_Types\n[(treatment_type_code, treatment type code type:text PRIMARY KEY. Value examples:[EXAM, VAC, WALK]),(treatment_type_description, treatment type description type:text. Value examples:[Physical examination, Vaccination, Take for a Walk]),]\nTable:Owners\n[(owner_id, owner id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(first_name, first name type:text. Value examples:[Nora, Melisa, Jaclyn]),(last_name, last name type:text. Value examples:[Haley, DuBuque, Stoltenberg]),(zip_code, zip code type:text. Value examples:[93165, 45244, 02647]),(email_address, email address type:text. Value examples:[lynn81@example.org, ykris@example.com, hudson.favian@example.com]),(home_phone, home phone type:text. Value examples:[1-682-845-0116x63235, (799)563-0260x454, 916.976.9480x13851]),(cell_number, cell number type:text. Value examples:[478.978.0729, (722)768-5439x484, 481-483-9083x37986]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(owner_id, owner id type:number. Value examples:[3, 11, 1]),(name, name type:text. Value examples:[Kacey, Hipolito, Mavis]),(date_arrived, date arrived type:time. Value examples:[2017-09-08 20:10:13, 2017-12-22 05:02:02, 2017-06-25 10:14:05]),(date_adopted, date adopted type:time. Value examples:[2018-03-06 16:32:11, 2018-03-25 08:12:51, 2018-03-07 21:45:43]),(date_departed, date departed type:time. Value examples:[2018-03-25 06:58:44, 2018-03-25 02:11:32, 2018-03-25 10:25:46]),]\nTable:Treatments\n[(treatment_id, treatment id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(dog_id, dog id type:number. Value examples:[14, 4, 2]),(professional_id, professional id type:number. Value examples:[9, 10, 4]),(treatment_type_code, treatment type code type:text. Value examples:[WALK, VAC, EXAM]),(date_of_treatment, date of treatment type:time. Value examples:[2018-03-19 04:39:54, 2018-03-15 20:25:34, 2018-03-08 05:26:23]),(cost_of_treatment, cost of treatment type:number. Value examples:[567, 147, 429]),]\nForeign keys:\nDogs.owner_id = Owners.owner_id\nDogs.owner_id = Owners.owner_id\nTreatments.dog_id = Dogs.dog_id\nTreatments.treatment_type_code = Treatment_Types.treatment_type_code\n",
                "Detector": "The question is ambiguous.  Please clarify what \"it\" refers to. Do you want the names of the customers who spend the most on:\n\n1. **Treatments?** \n2. **Charges?** \n\nPlease specify so I can provide the correct query. \n",
                "Decomposer": "",
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "YES, but just the first name will be fine.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT  T1.first_name  FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
                "predict": "SELECT T1.first_name FROM Owners AS T1 JOIN (     SELECT T1.owner_id, MAX(total_cost) AS max_cost     FROM (         SELECT T1.owner_id, SUM(T3.cost_of_treatment) AS total_cost         FROM Owners AS T1         JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id         JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id         GROUP BY T1.owner_id     ) AS T1 ) AS T2 ON T1.owner_id = T2.owner_id",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Owners\n[(owner_id, owner id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(first_name, first name type:text. Value examples:[Nora, Melisa, Jaclyn]),(zip_code, zip code type:text. Value examples:[93165, 45244, 02647]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(owner_id, owner id type:number. Value examples:[3, 11, 1]),]\nTable:Treatments\n[(dog_id, dog id type:number. Value examples:[14, 4, 2]),(cost_of_treatment, cost of treatment type:number. Value examples:[567, 147, 429]),]\nForeign keys:\nDogs.owner_id = Owners.owner_id\nDogs.owner_id = Owners.owner_id\nTreatments.dog_id = Dogs.dog_id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Jaclyn"
                        ]
                    ],
                    "sql": "SELECT T1.first_name FROM Owners AS T1 JOIN (     SELECT T1.owner_id, MAX(total_cost) AS max_cost     FROM (         SELECT T1.owner_id, SUM(T3.cost_of_treatment) AS total_cost         FROM Owners AS T1         JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id         JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id         GROUP BY T1.owner_id     ) AS T1 ) AS T2 ON T1.owner_id = T2.owner_id",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the total cost of treatment for each owner.\nSQL: ```sql\nSELECT T1.owner_id, SUM(T3.cost_of_treatment) AS total_cost\nFROM Owners AS T1\nJOIN Dogs AS T2 ON T1.owner_id = T2.owner_id\nJOIN Treatments AS T3 ON T2.dog_id = T3.dog_id\nGROUP BY T1.owner_id\n```\n\nSubquestion 2: Find the owner with the highest total cost of treatment.\nSQL: ```sql\nSELECT T1.owner_id, MAX(total_cost) AS max_cost\nFROM (\n    SELECT T1.owner_id, SUM(T3.cost_of_treatment) AS total_cost\n    FROM Owners AS T1\n    JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id\n    JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id\n    GROUP BY T1.owner_id\n) AS T1\n```\n\nSubquestion 3: Get the first name of the owner with the highest total cost of treatment.\nSQL: ```sql\nSELECT T1.first_name\nFROM Owners AS T1\nJOIN (\n    SELECT T1.owner_id, MAX(total_cost) AS max_cost\n    FROM (\n        SELECT T1.owner_id, SUM(T3.cost_of_treatment) AS total_cost\n        FROM Owners AS T1\n        JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id\n        JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id\n        GROUP BY T1.owner_id\n    ) AS T1\n) AS T2 ON T1.owner_id = T2.owner_id\n```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "To make sure, can you also show me the last name of Jaclyn?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT last_name  from Owners where first_name=\"Jaclyn\"",
                "predict": "SELECT last_name FROM Owners WHERE first_name = 'Jaclyn'",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Owners\n[(owner_id, owner id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(first_name, first name type:text. Value examples:[Nora, Melisa, Jaclyn]),(last_name, last name type:text. Value examples:[Haley, DuBuque, Stoltenberg]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(owner_id, owner id type:number. Value examples:[3, 11, 1]),(abandoned_yn, abandoned yes or no type:text. Value examples:[1, 0]),(breed_code, breed code type:text. Value examples:[ESK, BUL, HUS]),(size_code, size code type:text. Value examples:[LGE, MED, SML]),(name, name type:text. Value examples:[Kacey, Hipolito, Mavis]),(age, age type:text. Value examples:[6, 9, 8]),(date_of_birth, date of birth type:time. Value examples:[2012-01-27 05:11:53, 2013-02-13 05:15:21, 2008-05-19 15:54:49]),(gender, gender type:text. Value examples:[1, 0]),(weight, weight type:text. Value examples:[7.57, 1.72, 8.04]),(date_arrived, date arrived type:time. Value examples:[2017-09-08 20:10:13, 2017-12-22 05:02:02, 2017-06-25 10:14:05]),(date_adopted, date adopted type:time. Value examples:[2018-03-06 16:32:11, 2018-03-25 08:12:51, 2018-03-07 21:45:43]),(date_departed, date departed type:time. Value examples:[2018-03-25 06:58:44, 2018-03-25 02:11:32, 2018-03-25 10:25:46]),]\nForeign keys:\nDogs.owner_id = Owners.owner_id\nDogs.owner_id = Owners.owner_id\nDogs.size_code = Sizes.size_code\nDogs.breed_code = Breeds.breed_code\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Stoltenberg"
                        ]
                    ],
                    "sql": "SELECT last_name FROM Owners WHERE first_name = 'Jaclyn'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the last name of Jaclyn.\nSQL: ```sql SELECT last_name FROM Owners WHERE first_name = 'Jaclyn'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "As a last thing, can you also tell me the owner id and zip code of Jaclyn Stoltenberg, who has paid the largest amount of money in total for their treatments for dogs?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
                "predict": "SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id INNER JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id WHERE T1.first_name = 'Jaclyn' AND T1.last_name = 'Stoltenberg' GROUP BY T1.owner_id ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Owners\n[(owner_id, owner id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(first_name, first name type:text. Value examples:[Nora, Melisa, Jaclyn]),(last_name, last name type:text. Value examples:[Haley, DuBuque, Stoltenberg]),(zip_code, zip code type:text. Value examples:[93165, 45244, 02647]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(owner_id, owner id type:number. Value examples:[3, 11, 1]),]\nTable:Treatments\n[(dog_id, dog id type:number. Value examples:[14, 4, 2]),(cost_of_treatment, cost of treatment type:number. Value examples:[567, 147, 429]),]\nForeign keys:\nDogs.owner_id = Owners.owner_id\nDogs.owner_id = Owners.owner_id\nTreatments.dog_id = Dogs.dog_id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            3,
                            "02647"
                        ]
                    ],
                    "sql": "SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id INNER JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id WHERE T1.first_name = 'Jaclyn' AND T1.last_name = 'Stoltenberg' GROUP BY T1.owner_id ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the owner_id of Jaclyn Stoltenberg.\nSQL: ```sql SELECT owner_id FROM Owners WHERE first_name = 'Jaclyn' AND last_name = 'Stoltenberg'```\n\nSubquestion 2: Find the total cost of treatments for the owner_id found in Subquestion 1.\nSQL: ```sql SELECT SUM(cost_of_treatment) FROM Treatments AS T1 INNER JOIN Dogs AS T2 ON T1.dog_id = T2.dog_id WHERE T2.owner_id = (SELECT owner_id FROM Owners WHERE first_name = 'Jaclyn' AND last_name = 'Stoltenberg')```\n\nSubquestion 3: Find the owner_id and zip_code of Jaclyn Stoltenberg who has paid the largest amount of money in total for their treatments for dogs.\nSQL: ```sql SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id INNER JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id WHERE T1.first_name = 'Jaclyn' AND T1.last_name = 'Stoltenberg' GROUP BY T1.owner_id ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome  and  bye\n",
                "query": "",
                "predict": "You're welcome! Is there anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Treatment_Types\n[(treatment_type_code, treatment type code type:text PRIMARY KEY. Value examples:[EXAM, VAC, WALK]),(treatment_type_description, treatment type description type:text. Value examples:[Physical examination, Vaccination, Take for a Walk]),]\nTable:Owners\n[(owner_id, owner id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(first_name, first name type:text. Value examples:[Nora, Melisa, Jaclyn]),(last_name, last name type:text. Value examples:[Haley, DuBuque, Stoltenberg]),(zip_code, zip code type:text. Value examples:[93165, 45244, 02647]),(email_address, email address type:text. Value examples:[lynn81@example.org, ykris@example.com, hudson.favian@example.com]),(home_phone, home phone type:text. Value examples:[1-682-845-0116x63235, (799)563-0260x454, 916.976.9480x13851]),(cell_number, cell number type:text. Value examples:[478.978.0729, (722)768-5439x484, 481-483-9083x37986]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(owner_id, owner id type:number. Value examples:[3, 11, 1]),(breed_code, breed code type:text. Value examples:[ESK, BUL, HUS]),(size_code, size code type:text. Value examples:[LGE, MED, SML]),(name, name type:text. Value examples:[Kacey, Hipolito, Mavis]),(age, age type:text. Value examples:[6, 9, 8]),(date_of_birth, date of birth type:time. Value examples:[2012-01-27 05:11:53, 2013-02-13 05:15:21, 2008-05-19 15:54:49]),(gender, gender type:text. Value examples:[1, 0]),(weight, weight type:text. Value examples:[7.57, 1.72, 8.04]),(date_arrived, date arrived type:time. Value examples:[2017-09-08 20:10:13, 2017-12-22 05:02:02, 2017-06-25 10:14:05]),(date_adopted, date adopted type:time. Value examples:[2018-03-06 16:32:11, 2018-03-25 08:12:51, 2018-03-07 21:45:43]),(date_departed, date departed type:time. Value examples:[2018-03-25 06:58:44, 2018-03-25 02:11:32, 2018-03-25 10:25:46]),]\nTable:Treatments\n[(treatment_id, treatment id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(dog_id, dog id type:number. Value examples:[14, 4, 2]),(professional_id, professional id type:number. Value examples:[9, 10, 4]),(treatment_type_code, treatment type code type:text. Value examples:[WALK, VAC, EXAM]),(date_of_treatment, date of treatment type:time. Value examples:[2018-03-19 04:39:54, 2018-03-15 20:25:34, 2018-03-08 05:26:23]),(cost_of_treatment, cost of treatment type:number. Value examples:[567, 147, 429]),]\nForeign keys:\nDogs.owner_id = Owners.owner_id\nDogs.owner_id = Owners.owner_id\nDogs.size_code = Sizes.size_code\nDogs.breed_code = Breeds.breed_code\nTreatments.dog_id = Dogs.dog_id\nTreatments.treatment_type_code = Treatment_Types.treatment_type_code\n",
                "Detector": "You're welcome! Is there anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 55
    },
    {
        "db_name": "dog_kennels",
        "turns": [
            {
                "isuser": true,
                "text": "kindly give me the names that might be used for professionals or owners but cannot be use for dog names",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
                "predict": "SELECT T1.first_name FROM ( SELECT DISTINCT first_name FROM Professionals UNION SELECT DISTINCT last_name FROM Professionals UNION SELECT DISTINCT first_name FROM Owners UNION SELECT DISTINCT last_name FROM Owners ) AS T1 EXCEPT SELECT name FROM Dogs",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Owners\n[(first_name, first name type:text. Value examples:[Nora, Melisa, Jaclyn]),(last_name, last name type:text. Value examples:[Haley, DuBuque, Stoltenberg]),]\nTable:Dogs\n[(name, name type:text. Value examples:[Kacey, Hipolito, Mavis]),]\nTable:Professionals\n[(first_name, first name type:text. Value examples:[Taryn, Jayson, Olaf]),(last_name, last name type:text. Value examples:[Braun, Ullrich, Watsica]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Adelle"
                        ],
                        [
                            "Brady"
                        ],
                        [
                            "Braun"
                        ],
                        [
                            "Christiansen"
                        ],
                        [
                            "Cindy"
                        ],
                        [
                            "Considine"
                        ],
                        [
                            "Danny"
                        ],
                        [
                            "Domenica"
                        ],
                        [
                            "DuBuque"
                        ],
                        [
                            "Emelie"
                        ]
                    ],
                    "sql": "SELECT T1.first_name FROM ( SELECT DISTINCT first_name FROM Professionals UNION SELECT DISTINCT last_name FROM Professionals UNION SELECT DISTINCT first_name FROM Owners UNION SELECT DISTINCT last_name FROM Owners ) AS T1 EXCEPT SELECT name FROM Dogs",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find all names that are used for professionals.\nSQL ```sql SELECT DISTINCT first_name FROM Professionals UNION SELECT DISTINCT last_name FROM Professionals```\nSubquestion 2: Find all names that are used for owners.\nSQL ```sql SELECT DISTINCT first_name FROM Owners UNION SELECT DISTINCT last_name FROM Owners```\nSubquestion 3: Find all names that are used for dogs.\nSQL ```sql SELECT DISTINCT name FROM Dogs```\nSubquestion 4: Find all names that are used for professionals or owners but not for dogs.\nSQL ```sql SELECT T1.first_name FROM ( SELECT DISTINCT first_name FROM Professionals UNION SELECT DISTINCT last_name FROM Professionals UNION SELECT DISTINCT first_name FROM Owners UNION SELECT DISTINCT last_name FROM Owners ) AS T1 EXCEPT SELECT name FROM Dogs```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Are there names that are mostly used by professional but aren't used for dog names",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Can you please clarify what you would like me to search the database for?",
                "query": "",
                "predict": "SELECT first_name FROM Professionals EXCEPT SELECT name FROM Dogs EXCEPT SELECT first_name FROM Owners",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Owners\n[(owner_id, owner id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(first_name, first name type:text. Value examples:[Nora, Melisa, Jaclyn]),(last_name, last name type:text. Value examples:[Haley, DuBuque, Stoltenberg]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(name, name type:text. Value examples:[Kacey, Hipolito, Mavis]),]\nTable:Professionals\n[(professional_id, professional id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(first_name, first name type:text. Value examples:[Taryn, Jayson, Olaf]),(last_name, last name type:text. Value examples:[Braun, Ullrich, Watsica]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Brady"
                        ],
                        [
                            "Danny"
                        ],
                        [
                            "Domenica"
                        ],
                        [
                            "Ericka"
                        ],
                        [
                            "Jayson"
                        ],
                        [
                            "Karley"
                        ],
                        [
                            "Lesly"
                        ],
                        [
                            "Monte"
                        ],
                        [
                            "Olaf"
                        ],
                        [
                            "Ruben"
                        ]
                    ],
                    "sql": "SELECT first_name FROM Professionals EXCEPT SELECT name FROM Dogs EXCEPT SELECT first_name FROM Owners",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the names that are used by professionals.\nSQL ```sql SELECT first_name FROM Professionals```\nSubquestion 2: Find the names that are used by owners.\nSQL ```sql SELECT first_name FROM Owners```\nSubquestion 3: Find the names that are used by professionals or owners.\nSQL ```sql SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners```\nSubquestion 4: Find the names that are used by dogs.\nSQL ```sql SELECT name FROM Dogs```\nSubquestion 5: Find the names that are used by professionals or owners but not used by dogs.\nSQL ```sql SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs```\nSubquestion 6: Find the names that are used by professionals but not used by dogs.\nSQL ```sql SELECT first_name FROM Professionals EXCEPT SELECT name FROM Dogs```\nSubquestion 7: Find the names that are used by owners but not used by dogs.\nSQL ```sql SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs```\nSubquestion 8: Find the names that are used by professionals but not used by owners or dogs.\nSQL ```sql SELECT first_name FROM Professionals EXCEPT SELECT name FROM Dogs EXCEPT SELECT first_name FROM Owners```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "How to contact Taryn",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Would you like the email address of professionals with name Taryn?",
                "query": "",
                "predict": "SELECT email_address, home_phone, cell_number FROM Professionals WHERE professional_id = (SELECT professional_id FROM Professionals WHERE first_name = 'Taryn')",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Owners\n[(owner_id, owner id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(first_name, first name type:text. Value examples:[Nora, Melisa, Jaclyn]),(last_name, last name type:text. Value examples:[Haley, DuBuque, Stoltenberg]),(email_address, email address type:text. Value examples:[lynn81@example.org, ykris@example.com, hudson.favian@example.com]),(home_phone, home phone type:text. Value examples:[1-682-845-0116x63235, (799)563-0260x454, 916.976.9480x13851]),(cell_number, cell number type:text. Value examples:[478.978.0729, (722)768-5439x484, 481-483-9083x37986]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(owner_id, owner id type:number. Value examples:[3, 11, 1]),(abandoned_yn, abandoned yes or no type:text. Value examples:[1, 0]),(breed_code, breed code type:text. Value examples:[ESK, BUL, HUS]),(size_code, size code type:text. Value examples:[LGE, MED, SML]),(name, name type:text. Value examples:[Kacey, Hipolito, Mavis]),(age, age type:text. Value examples:[6, 9, 8]),(date_of_birth, date of birth type:time. Value examples:[2012-01-27 05:11:53, 2013-02-13 05:15:21, 2008-05-19 15:54:49]),(gender, gender type:text. Value examples:[1, 0]),(weight, weight type:text. Value examples:[7.57, 1.72, 8.04]),(date_arrived, date arrived type:time. Value examples:[2017-09-08 20:10:13, 2017-12-22 05:02:02, 2017-06-25 10:14:05]),(date_adopted, date adopted type:time. Value examples:[2018-03-06 16:32:11, 2018-03-25 08:12:51, 2018-03-07 21:45:43]),(date_departed, date departed type:time. Value examples:[2018-03-25 06:58:44, 2018-03-25 02:11:32, 2018-03-25 10:25:46]),]\nTable:Professionals\n[(professional_id, professional id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(first_name, first name type:text. Value examples:[Taryn, Jayson, Olaf]),(last_name, last name type:text. Value examples:[Braun, Ullrich, Watsica]),(email_address, email address type:text. Value examples:[deanna.schuster@example.com, lucile.shanahan@example.org, uboehm@example.org]),(home_phone, home phone type:text. Value examples:[+71(6)2898266914, +02(1)0259033559, 325-155-0801x7005]),(cell_number, cell number type:text. Value examples:[(275)939-2435x80863, 889-940-2676, (369)908-7311x065]),]\nForeign keys:\nDogs.owner_id = Owners.owner_id\nDogs.owner_id = Owners.owner_id\nDogs.size_code = Sizes.size_code\nDogs.breed_code = Breeds.breed_code\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "deanna.schuster@example.com",
                            "+71(6)2898266914",
                            "(275)939-2435x80863"
                        ]
                    ],
                    "sql": "SELECT email_address, home_phone, cell_number FROM Professionals WHERE professional_id = (SELECT professional_id FROM Professionals WHERE first_name = 'Taryn')",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the professional ID of Taryn.\nSQL: ```sql SELECT professional_id FROM Professionals WHERE first_name = 'Taryn'```\n\nSubquestion 2: Find the contact information of the professional with the ID found in the previous step.\nSQL: ```sql SELECT email_address, home_phone, cell_number FROM Professionals WHERE professional_id = (SELECT professional_id FROM Professionals WHERE first_name = 'Taryn')```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT email_address FROM Professionals WHERE First_Name = \"Taryn\"",
                "predict": "SELECT email_address FROM Professionals WHERE first_name = 'Taryn'",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Owners\n[(owner_id, owner id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(first_name, first name type:text. Value examples:[Nora, Melisa, Jaclyn]),(email_address, email address type:text. Value examples:[lynn81@example.org, ykris@example.com, hudson.favian@example.com]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(owner_id, owner id type:number. Value examples:[3, 11, 1]),(abandoned_yn, abandoned yes or no type:text. Value examples:[1, 0]),(breed_code, breed code type:text. Value examples:[ESK, BUL, HUS]),(size_code, size code type:text. Value examples:[LGE, MED, SML]),(name, name type:text. Value examples:[Kacey, Hipolito, Mavis]),(age, age type:text. Value examples:[6, 9, 8]),(date_of_birth, date of birth type:time. Value examples:[2012-01-27 05:11:53, 2013-02-13 05:15:21, 2008-05-19 15:54:49]),(gender, gender type:text. Value examples:[1, 0]),(weight, weight type:text. Value examples:[7.57, 1.72, 8.04]),(date_arrived, date arrived type:time. Value examples:[2017-09-08 20:10:13, 2017-12-22 05:02:02, 2017-06-25 10:14:05]),(date_adopted, date adopted type:time. Value examples:[2018-03-06 16:32:11, 2018-03-25 08:12:51, 2018-03-07 21:45:43]),(date_departed, date departed type:time. Value examples:[2018-03-25 06:58:44, 2018-03-25 02:11:32, 2018-03-25 10:25:46]),]\nTable:Professionals\n[(professional_id, professional id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(first_name, first name type:text. Value examples:[Taryn, Jayson, Olaf]),(email_address, email address type:text. Value examples:[deanna.schuster@example.com, lucile.shanahan@example.org, uboehm@example.org]),]\nForeign keys:\nDogs.owner_id = Owners.owner_id\nDogs.owner_id = Owners.owner_id\nDogs.size_code = Sizes.size_code\nDogs.breed_code = Breeds.breed_code\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "deanna.schuster@example.com"
                        ]
                    ],
                    "sql": "SELECT email_address FROM Professionals WHERE first_name = 'Taryn'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the email address of the professional named Taryn.\nSQL: ```sql SELECT email_address FROM Professionals WHERE first_name = 'Taryn'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "In what state can i find Jayson",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT state FROM Professionals WHERE First_Name = \"Jayson\"",
                "predict": "SELECT T1.state FROM Professionals AS T1 WHERE T1.first_name = 'Jayson'",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Owners\n[(first_name, first name type:text. Value examples:[Nora, Melisa, Jaclyn]),(state, state type:text. Value examples:[Wisconsin, Virginia, Vermont]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(owner_id, owner id type:number. Value examples:[3, 11, 1]),(abandoned_yn, abandoned yes or no type:text. Value examples:[1, 0]),(breed_code, breed code type:text. Value examples:[ESK, BUL, HUS]),(size_code, size code type:text. Value examples:[LGE, MED, SML]),(name, name type:text. Value examples:[Kacey, Hipolito, Mavis]),(age, age type:text. Value examples:[6, 9, 8]),(date_of_birth, date of birth type:time. Value examples:[2012-01-27 05:11:53, 2013-02-13 05:15:21, 2008-05-19 15:54:49]),(gender, gender type:text. Value examples:[1, 0]),(weight, weight type:text. Value examples:[7.57, 1.72, 8.04]),(date_arrived, date arrived type:time. Value examples:[2017-09-08 20:10:13, 2017-12-22 05:02:02, 2017-06-25 10:14:05]),(date_adopted, date adopted type:time. Value examples:[2018-03-06 16:32:11, 2018-03-25 08:12:51, 2018-03-07 21:45:43]),(date_departed, date departed type:time. Value examples:[2018-03-25 06:58:44, 2018-03-25 02:11:32, 2018-03-25 10:25:46]),]\nTable:Professionals\n[(first_name, first name type:text. Value examples:[Taryn, Jayson, Olaf]),(state, state type:text. Value examples:[Indiana, Connecticut, Wisconsin]),]\nForeign keys:\nDogs.size_code = Sizes.size_code\nDogs.breed_code = Breeds.breed_code\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Connecticut"
                        ]
                    ],
                    "sql": "SELECT T1.state FROM Professionals AS T1 WHERE T1.first_name = 'Jayson'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the state where Jayson is located as a professional.\nSQL: ```sql SELECT T1.state FROM Professionals AS T1 WHERE T1.first_name = 'Jayson'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you! Goodbye.",
                "query": "",
                "predict": "You're welcome! \ud83d\ude0a \n",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Treatment_Types\n[(treatment_type_code, treatment type code type:text PRIMARY KEY. Value examples:[EXAM, VAC, WALK]),(treatment_type_description, treatment type description type:text. Value examples:[Physical examination, Vaccination, Take for a Walk]),]\nTable:Owners\n[(owner_id, owner id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(first_name, first name type:text. Value examples:[Nora, Melisa, Jaclyn]),(last_name, last name type:text. Value examples:[Haley, DuBuque, Stoltenberg]),(street, street type:text. Value examples:[0647 Hintz Village Apt. 024, 1204 Mae Highway Apt. 107, 2635 Caitlyn Plains]),(city, city type:text. Value examples:[Lake Tia, Port Reannamouth, Barrettburgh]),(state, state type:text. Value examples:[Wisconsin, Virginia, Vermont]),(zip_code, zip code type:text. Value examples:[93165, 45244, 02647]),(email_address, email address type:text. Value examples:[lynn81@example.org, ykris@example.com, hudson.favian@example.com]),(home_phone, home phone type:text. Value examples:[1-682-845-0116x63235, (799)563-0260x454, 916.976.9480x13851]),(cell_number, cell number type:text. Value examples:[478.978.0729, (722)768-5439x484, 481-483-9083x37986]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(owner_id, owner id type:number. Value examples:[3, 11, 1]),(breed_code, breed code type:text. Value examples:[ESK, BUL, HUS]),(size_code, size code type:text. Value examples:[LGE, MED, SML]),(name, name type:text. Value examples:[Kacey, Hipolito, Mavis]),(date_arrived, date arrived type:time. Value examples:[2017-09-08 20:10:13, 2017-12-22 05:02:02, 2017-06-25 10:14:05]),(date_adopted, date adopted type:time. Value examples:[2018-03-06 16:32:11, 2018-03-25 08:12:51, 2018-03-07 21:45:43]),(date_departed, date departed type:time. Value examples:[2018-03-25 06:58:44, 2018-03-25 02:11:32, 2018-03-25 10:25:46]),]\nTable:Professionals\n[(professional_id, professional id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(first_name, first name type:text. Value examples:[Taryn, Jayson, Olaf]),(street, street type:text. Value examples:[6915 Oberbrunner Point Suite 491\nGleasonville, LA , 88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194, 68589 Bradly Manor\nNew Audrey, IN 91497]),(city, city type:text. Value examples:[West Heidi, North Odellfurt, Jaceton]),(state, state type:text. Value examples:[Indiana, Connecticut, Wisconsin]),(zip_code, zip code type:text. Value examples:[06646, 43129, 77129]),(last_name, last name type:text. Value examples:[Braun, Ullrich, Watsica]),(email_address, email address type:text. Value examples:[deanna.schuster@example.com, lucile.shanahan@example.org, uboehm@example.org]),(home_phone, home phone type:text. Value examples:[+71(6)2898266914, +02(1)0259033559, 325-155-0801x7005]),(cell_number, cell number type:text. Value examples:[(275)939-2435x80863, 889-940-2676, (369)908-7311x065]),]\nForeign keys:\nDogs.owner_id = Owners.owner_id\nDogs.owner_id = Owners.owner_id\nDogs.size_code = Sizes.size_code\nDogs.breed_code = Breeds.breed_code\n",
                "Detector": "You're welcome! \ud83d\ude0a \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 56
    },
    {
        "db_name": "flight_2",
        "turns": [
            {
                "isuser": true,
                "text": "How many flights in this table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT count(*) FROM flights",
                "predict": "SELECT COUNT(FlightNo) FROM flights",
                "Rewriter": "",
                "Selector": "Table:airlines\n[(uid, airline id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Airline, airline name type:text. Value examples:[United Airlines, US Airways, Delta Airlines]),(Abbreviation, abbreviation type:text. Value examples:[UAL, USAir, Delta]),(Country, country type:text. Value examples:[USA]),]\nTable:airports\n[(City, city type:text. Value examples:[Aberdeen , Abilene , Abingdon ]),(AirportCode, airport code type:text PRIMARY KEY. Value examples:[AAF, ABI, ABL]),(AirportName, airport name type:text. Value examples:[Phillips AAF , Municipal , Dyess AFB ]),(Country, country type:text. Value examples:[United States ]),(CountryAbbrev, country abbrev type:text. Value examples:[US , US]),]\nTable:flights\n[(Airline, airline type:number PRIMARY KEY. Value examples:[1, 2, 3]),(FlightNo, flight number type:number. Value examples:[28, 29, 44]),(SourceAirport, source airport type:text. Value examples:[ APG,  ASY,  CVO]),(DestAirport, destination airport type:text. Value examples:[ ASY,  APG,  ACV]),]\nForeign keys:\nflights.DestAirport = airports.AirportCode\nflights.SourceAirport = airports.AirportCode\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [],
                    "sql": "SELECT COUNT(T1.\u2018FlightNo\u2018) FROM flights AS T1",
                    "executable": false,
                    "log": "no such column: T1.\u2018FlightNo\u2018",
                    "process": "Subquestion 1: How many flights in this table? \nSQL ```sql SELECT COUNT(T1.\u2018FlightNo\u2018) FROM flights AS T1```\n\nQuestion Solved. \n"
                },
                "Refiner": {
                    "result": [
                        [
                            1200
                        ]
                    ],
                    "sql": "SELECT COUNT(FlightNo) FROM flights",
                    "executable": true,
                    "log": ""
                }
            },
            {
                "isuser": true,
                "text": "Which city has least number of departing flights?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) ASC LIMIT 1",
                "predict": "SELECT T1.City FROM airports AS T1 INNER JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY COUNT(T2.SourceAirport) ASC LIMIT 1",
                "Rewriter": "",
                "Selector": "Table:airlines\n[(uid, airline id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Airline, airline name type:text. Value examples:[United Airlines, US Airways, Delta Airlines]),(Abbreviation, abbreviation type:text. Value examples:[UAL, USAir, Delta]),(Country, country type:text. Value examples:[USA]),]\nTable:airports\n[(City, city type:text. Value examples:[Aberdeen , Abilene , Abingdon ]),(AirportCode, airport code type:text PRIMARY KEY. Value examples:[AAF, ABI, ABL]),(AirportName, airport name type:text. Value examples:[Phillips AAF , Municipal , Dyess AFB ]),]\nTable:flights\n[(Airline, airline type:number PRIMARY KEY. Value examples:[1, 2, 3]),(SourceAirport, source airport type:text. Value examples:[ APG,  ASY,  CVO]),(DestAirport, destination airport type:text. Value examples:[ ASY,  APG,  ACV]),]\nForeign keys:\nflights.DestAirport = airports.AirportCode\nflights.SourceAirport = airports.AirportCode\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [],
                    "sql": "SELECT T1.City FROM airports AS T1 INNER JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY COUNT(T2.SourceAirport) ASC LIMIT 1",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Count the number of departing flights for each city.\nSQL ```sql SELECT T1.City, COUNT(T2.SourceAirport) FROM airports AS T1 INNER JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City```\nSubquestion 2: Find the city with the least number of departing flights.\nSQL ```sql SELECT T1.City FROM airports AS T1 INNER JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY COUNT(T2.SourceAirport) ASC LIMIT 1```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Find the flight number of APG?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT FlightNo FROM flights WHERE SourceAirport=\"APG\"",
                "predict": "SELECT T2.FlightNo FROM airports AS T1 INNER JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportCode = 'APG'",
                "Rewriter": "",
                "Selector": "Table:airports\n[(City, city type:text. Value examples:[Aberdeen , Abilene , Abingdon ]),(AirportCode, airport code type:text PRIMARY KEY. Value examples:[AAF, ABI, ABL]),]\nTable:flights\n[(Airline, airline type:number PRIMARY KEY. Value examples:[1, 2, 3]),(FlightNo, flight number type:number. Value examples:[28, 29, 44]),(SourceAirport, source airport type:text. Value examples:[ APG,  ASY,  CVO]),(DestAirport, destination airport type:text. Value examples:[ ASY,  APG,  ACV]),]\nForeign keys:\nflights.DestAirport = airports.AirportCode\nflights.SourceAirport = airports.AirportCode\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [],
                    "sql": "SELECT T2.FlightNo FROM airports AS T1 INNER JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportCode = 'APG'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the flight number of APG. \nSQL ```sql SELECT T2.FlightNo FROM airports AS T1 INNER JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportCode = 'APG'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Anything you'd like to know more?",
                "query": "",
                "predict": "You're welcome! Is there anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:airlines\n[(uid, airline id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Airline, airline name type:text. Value examples:[United Airlines, US Airways, Delta Airlines]),(Abbreviation, abbreviation type:text. Value examples:[UAL, USAir, Delta]),(Country, country type:text. Value examples:[USA]),]\nTable:airports\n[(City, city type:text. Value examples:[Aberdeen , Abilene , Abingdon ]),(AirportCode, airport code type:text PRIMARY KEY. Value examples:[AAF, ABI, ABL]),(Country, country type:text. Value examples:[United States ]),(CountryAbbrev, country abbrev type:text. Value examples:[US , US]),]\nTable:flights\n[(Airline, airline type:number PRIMARY KEY. Value examples:[1, 2, 3]),(FlightNo, flight number type:number. Value examples:[28, 29, 44]),(SourceAirport, source airport type:text. Value examples:[ APG,  ASY,  CVO]),(DestAirport, destination airport type:text. Value examples:[ ASY,  APG,  ACV]),]\nForeign keys:\nflights.DestAirport = airports.AirportCode\nflights.SourceAirport = airports.AirportCode\n",
                "Detector": "You're welcome! Is there anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Find the airport names of DYS?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT AirportName FROM airports WHERE AirportCode=\"DYS\"",
                "predict": "SELECT T1.AirportName FROM airports AS T1 WHERE T1.AirportCode = 'DYS'",
                "Rewriter": "",
                "Selector": "Table:airports\n[(City, city type:text. Value examples:[Aberdeen , Abilene , Abingdon ]),(AirportCode, airport code type:text PRIMARY KEY. Value examples:[AAF, ABI, ABL]),(AirportName, airport name type:text. Value examples:[Phillips AAF , Municipal , Dyess AFB ]),(Country, country type:text. Value examples:[United States ]),(CountryAbbrev, country abbrev type:text. Value examples:[US , US]),]\nTable:flights\n[(Airline, airline type:number PRIMARY KEY. Value examples:[1, 2, 3]),(FlightNo, flight number type:number. Value examples:[28, 29, 44]),(SourceAirport, source airport type:text. Value examples:[ APG,  ASY,  CVO]),(DestAirport, destination airport type:text. Value examples:[ ASY,  APG,  ACV]),]\nForeign keys:\nflights.DestAirport = airports.AirportCode\nflights.SourceAirport = airports.AirportCode\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Dyess AFB "
                        ]
                    ],
                    "sql": "SELECT T1.AirportName FROM airports AS T1 WHERE T1.AirportCode = 'DYS'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the airport names of DYS.\nSQL ```sql SELECT T1.AirportName FROM airports AS T1 WHERE T1.AirportCode = 'DYS'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Fin the city of ABR?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT CITY FROM airports WHERE AirportCode=\"ABR\"",
                "predict": "SELECT City FROM airports WHERE AirportCode = 'ABR'",
                "Rewriter": "",
                "Selector": "Table:airports\n[(City, city type:text. Value examples:[Aberdeen , Abilene , Abingdon ]),(AirportCode, airport code type:text PRIMARY KEY. Value examples:[AAF, ABI, ABL]),(AirportName, airport name type:text. Value examples:[Phillips AAF , Municipal , Dyess AFB ]),(Country, country type:text. Value examples:[United States ]),(CountryAbbrev, country abbrev type:text. Value examples:[US , US]),]\nTable:flights\n[(Airline, airline type:number PRIMARY KEY. Value examples:[1, 2, 3]),(FlightNo, flight number type:number. Value examples:[28, 29, 44]),(SourceAirport, source airport type:text. Value examples:[ APG,  ASY,  CVO]),(DestAirport, destination airport type:text. Value examples:[ ASY,  APG,  ACV]),]\nForeign keys:\nflights.DestAirport = airports.AirportCode\nflights.SourceAirport = airports.AirportCode\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Aberdeen "
                        ]
                    ],
                    "sql": "SELECT City FROM airports WHERE AirportCode = 'ABR'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the city of ABR.\nSQL ```sql SELECT City FROM airports WHERE AirportCode = 'ABR'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "predict": "You are welcome! Anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:airlines\n[(uid, airline id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Airline, airline name type:text. Value examples:[United Airlines, US Airways, Delta Airlines]),(Abbreviation, abbreviation type:text. Value examples:[UAL, USAir, Delta]),(Country, country type:text. Value examples:[USA]),]\nTable:airports\n[(City, city type:text. Value examples:[Aberdeen , Abilene , Abingdon ]),(AirportCode, airport code type:text PRIMARY KEY. Value examples:[AAF, ABI, ABL]),(AirportName, airport name type:text. Value examples:[Phillips AAF , Municipal , Dyess AFB ]),(Country, country type:text. Value examples:[United States ]),(CountryAbbrev, country abbrev type:text. Value examples:[US , US]),]\nTable:flights\n[(Airline, airline type:number PRIMARY KEY. Value examples:[1, 2, 3]),(FlightNo, flight number type:number. Value examples:[28, 29, 44]),(SourceAirport, source airport type:text. Value examples:[ APG,  ASY,  CVO]),(DestAirport, destination airport type:text. Value examples:[ ASY,  APG,  ACV]),]\nForeign keys:\nflights.DestAirport = airports.AirportCode\nflights.SourceAirport = airports.AirportCode\n",
                "Detector": "You are welcome! Anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 57
    },
    {
        "db_name": "world_1",
        "turns": [
            {
                "isuser": true,
                "text": "What is the name of the country with the shortest life expectancy in Asia?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
                "predict": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1",
                "Rewriter": "",
                "Selector": "Table:country\n[(Code, code type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Name, name type:text. Value examples:[Aruba, Afghanistan, Angola]),(Continent, continent type:text. Value examples:[North America, Asia, Africa]),(SurfaceArea, surface area type:number. Value examples:[193.0, 652090.0, 1246700.0]),(IndepYear, indepdent year type:number. Value examples:[None, 1919, 1975]),(Population, population type:number. Value examples:[103000, 22720000, 12878000]),(LifeExpectancy, life expectancy type:number. Value examples:[78.4, 45.9, 38.3]),(GNP, gnp type:number. Value examples:[828.0, 5976.0, 6648.0]),(GNPOld, gnp old type:number. Value examples:[793.0, None, 7984.0]),(HeadOfState, head of state type:text. Value examples:[Beatrix, Mohammad Omar, Jos\u00e9 Eduardo dos Santos]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Afghanistan"
                        ]
                    ],
                    "sql": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the country with the shortest life expectancy in Asia.\nSQL ```sql SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "And in Africa?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean among country in Africa, or among the country in Africa and in Asia.",
                "query": "",
                "predict": "SELECT Name FROM country WHERE Continent = 'Africa' ORDER BY LifeExpectancy LIMIT 1",
                "Rewriter": "",
                "Selector": "Table:country\n[(Code, code type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Name, name type:text. Value examples:[Aruba, Afghanistan, Angola]),(Continent, continent type:text. Value examples:[North America, Asia, Africa]),(Region, region type:text. Value examples:[Caribbean, Southern and Central Asia, Central Africa]),(SurfaceArea, surface area type:number. Value examples:[193.0, 652090.0, 1246700.0]),(IndepYear, indepdent year type:number. Value examples:[None, 1919, 1975]),(Population, population type:number. Value examples:[103000, 22720000, 12878000]),(LifeExpectancy, life expectancy type:number. Value examples:[78.4, 45.9, 38.3]),(GNP, gnp type:number. Value examples:[828.0, 5976.0, 6648.0]),(GNPOld, gnp old type:number. Value examples:[793.0, None, 7984.0]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "British Indian Ocean Territory"
                        ]
                    ],
                    "sql": "SELECT Name FROM country WHERE Continent = 'Africa' ORDER BY LifeExpectancy LIMIT 1",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What is the name of the country with the shortest life expectancy in Africa? \nSQL ```sql SELECT Name FROM country WHERE Continent = 'Africa' ORDER BY LifeExpectancy LIMIT 1```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT Name FROM country WHERE Continent  =  \"Africa\" ORDER BY LifeExpectancy LIMIT 1"
            },
            {
                "isuser": true,
                "text": "Among country in Africa",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT Name FROM country WHERE Continent  =  \"Africa\" ORDER BY LifeExpectancy LIMIT 1",
                "predict": "SELECT Name FROM country WHERE Continent = 'Africa' ORDER BY LifeExpectancy LIMIT 1",
                "Rewriter": "",
                "Selector": "Table:country\n[(Code, code type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Name, name type:text. Value examples:[Aruba, Afghanistan, Angola]),(Continent, continent type:text. Value examples:[North America, Asia, Africa]),(LifeExpectancy, life expectancy type:number. Value examples:[78.4, 45.9, 38.3]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "British Indian Ocean Territory"
                        ]
                    ],
                    "sql": "SELECT Name FROM country WHERE Continent = 'Africa' ORDER BY LifeExpectancy LIMIT 1",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the name of the country with the shortest life expectancy in Africa.\nSQL ```sql SELECT Name FROM country WHERE Continent = 'Africa' ORDER BY LifeExpectancy LIMIT 1```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What is the GNP of Afghanistan?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT \tGNP FROM country WHERE name=\"Afghanistan\"",
                "predict": "SELECT GNP FROM country WHERE Name = 'Afghanistan'",
                "Rewriter": "",
                "Selector": "Table:country\n[(Code, code type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Name, name type:text. Value examples:[Aruba, Afghanistan, Angola]),(Continent, continent type:text. Value examples:[North America, Asia, Africa]),(Region, region type:text. Value examples:[Caribbean, Southern and Central Asia, Central Africa]),(SurfaceArea, surface area type:number. Value examples:[193.0, 652090.0, 1246700.0]),(IndepYear, indepdent year type:number. Value examples:[None, 1919, 1975]),(Population, population type:number. Value examples:[103000, 22720000, 12878000]),(LifeExpectancy, life expectancy type:number. Value examples:[78.4, 45.9, 38.3]),(GNP, gnp type:number. Value examples:[828.0, 5976.0, 6648.0]),(GNPOld, gnp old type:number. Value examples:[793.0, None, 7984.0]),(LocalName, local name type:text. Value examples:[Aruba, Afganistan/Afqanestan, Angola]),(GovernmentForm, government form type:text. Value examples:[Nonmetropolitan Territory of The Netherlands, Islamic Emirate, Republic]),(HeadOfState, head of state type:text. Value examples:[Beatrix, Mohammad Omar, Jos\u00e9 Eduardo dos Santos]),(Capital, capital type:number. Value examples:[129, 1, 56]),(Code2, code2 type:text. Value examples:[AW, AF, AO]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            5976.0
                        ]
                    ],
                    "sql": "SELECT GNP FROM country WHERE Name = 'Afghanistan'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the GNP of Afghanistan.\nSQL: ```sql SELECT GNP FROM country WHERE Name = 'Afghanistan'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What is the population of Afghanistan?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT \tPopulation FROM country WHERE name=\"Afghanistan\"",
                "predict": "SELECT Population FROM country WHERE Name = 'Afghanistan'",
                "Rewriter": "",
                "Selector": "Table:country\n[(Code, code type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Name, name type:text. Value examples:[Aruba, Afghanistan, Angola]),(Continent, continent type:text. Value examples:[North America, Asia, Africa]),(Population, population type:number. Value examples:[103000, 22720000, 12878000]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            22720000
                        ]
                    ],
                    "sql": "SELECT Population FROM country WHERE Name = 'Afghanistan'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What is the population of Afghanistan?\nSQL ```sql SELECT Population FROM country WHERE Name = 'Afghanistan'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure! Do you want to know more?",
                "query": "",
                "predict": "You're welcome! Is there anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:country\n[(Code, code type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Name, name type:text. Value examples:[Aruba, Afghanistan, Angola]),(Continent, continent type:text. Value examples:[North America, Asia, Africa]),(Population, population type:number. Value examples:[103000, 22720000, 12878000]),(LifeExpectancy, life expectancy type:number. Value examples:[78.4, 45.9, 38.3]),(GNP, gnp type:number. Value examples:[828.0, 5976.0, 6648.0]),(Code2, code2 type:text. Value examples:[AW, AF, AO]),]\nForeign keys:\n",
                "Detector": "You're welcome! Is there anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "No.",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thanks. Bye!",
                "query": "",
                "predict": "You're welcome! Is there anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:country\n[(Code, code type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Name, name type:text. Value examples:[Aruba, Afghanistan, Angola]),(Continent, continent type:text. Value examples:[North America, Asia, Africa]),(Population, population type:number. Value examples:[103000, 22720000, 12878000]),(LifeExpectancy, life expectancy type:number. Value examples:[78.4, 45.9, 38.3]),(GNP, gnp type:number. Value examples:[828.0, 5976.0, 6648.0]),(Code2, code2 type:text. Value examples:[AW, AF, AO]),]\nForeign keys:\n",
                "Detector": "You're welcome! Is there anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 58
    },
    {
        "db_name": "poker_player",
        "turns": [
            {
                "isuser": true,
                "text": "How much did the winning poker player make?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT Earnings FROM poker_player ",
                "predict": "You're asking about the earnings of the winning poker player.  To answer this, I need to know which poker player won.  Can you clarify which poker player you're referring to?  For example, you could tell me their name or their People_ID. \n",
                "Rewriter": "",
                "Selector": "Table:poker_player\n[(Poker_Player_ID, poker player id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(People_ID, people id type:number. Value examples:[1, 2, 5]),(Final_Table_Made, final table made type:number. Value examples:[42.0, 10.0, 21.0]),(Best_Finish, best finish type:number. Value examples:[1.0, 2.0, 3.0]),(Earnings, earnings type:number. Value examples:[476090.0, 189233.0, 104871.0]),]\nTable:people\n[(People_ID, people id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Nationality, nationality type:text. Value examples:[Russia, Bulgaria]),(Name, name type:text. Value examples:[Aleksey Ostapenko, Teodor Salparov, Roman Bragin]),(Birth_Date, birth date type:text. Value examples:[May 26, 1986, August 16, 1982, April 17, 1987]),(Height, height type:number. Value examples:[207.0, 182.0, 187.0]),]\nForeign keys:\npoker_player.People_ID = people.People_ID\n",
                "Detector": "You're asking about the earnings of the winning poker player.  To answer this, I need to know which poker player won.  Can you clarify which poker player you're referring to?  For example, you could tell me their name or their People_ID. \n",
                "Decomposer": "",
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Cool who was the winner?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry the information is not available from the table.",
                "query": "",
                "predict": "The database only stores the best finish for each player, not the winner of a specific tournament.  To answer your question, we would need information about the specific tournament. \n",
                "Rewriter": "",
                "Selector": "Table:poker_player\n[(Poker_Player_ID, poker player id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(People_ID, people id type:number. Value examples:[1, 2, 5]),(Best_Finish, best finish type:number. Value examples:[1.0, 2.0, 3.0]),(Earnings, earnings type:number. Value examples:[476090.0, 189233.0, 104871.0]),]\nTable:people\n[(People_ID, people id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[Aleksey Ostapenko, Teodor Salparov, Roman Bragin]),]\nForeign keys:\npoker_player.People_ID = people.People_ID\n",
                "Detector": "The database only stores the best finish for each player, not the winner of a specific tournament.  To answer your question, we would need information about the specific tournament. \n",
                "Decomposer": "",
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Can you rank the poker players earnings from highest to lowest?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT Earnings FROM poker_player order by Earnings desc ",
                "predict": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
                "Rewriter": "",
                "Selector": "Table:poker_player\n[(Poker_Player_ID, poker player id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(People_ID, people id type:number. Value examples:[1, 2, 5]),(Earnings, earnings type:number. Value examples:[476090.0, 189233.0, 104871.0]),]\nTable:people\n[(People_ID, people id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Nationality, nationality type:text. Value examples:[Russia, Bulgaria]),(Name, name type:text. Value examples:[Aleksey Ostapenko, Teodor Salparov, Roman Bragin]),(Birth_Date, birth date type:text. Value examples:[May 26, 1986, August 16, 1982, April 17, 1987]),(Height, height type:number. Value examples:[207.0, 182.0, 187.0]),]\nForeign keys:\npoker_player.People_ID = people.People_ID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            596462.0
                        ],
                        [
                            476090.0
                        ],
                        [
                            189233.0
                        ],
                        [
                            142800.0
                        ],
                        [
                            104871.0
                        ]
                    ],
                    "sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Rank the poker players earnings from highest to lowest. \nSQL ```sql SELECT Earnings FROM poker_player ORDER BY Earnings DESC```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "How many final tables did the poker player with the least amount of earnings make?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT Final_Table_Made FROM poker_player order by Earnings asc limit 1",
                "predict": "SELECT Final_Table_Made FROM poker_player WHERE People_ID = (SELECT People_ID FROM poker_player ORDER BY Earnings ASC LIMIT 1)",
                "Rewriter": "",
                "Selector": "Table:poker_player\n[(Poker_Player_ID, poker player id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(People_ID, people id type:number. Value examples:[1, 2, 5]),(Final_Table_Made, final table made type:number. Value examples:[42.0, 10.0, 21.0]),(Earnings, earnings type:number. Value examples:[476090.0, 189233.0, 104871.0]),]\nTable:people\n[(People_ID, people id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Nationality, nationality type:text. Value examples:[Russia, Bulgaria]),(Name, name type:text. Value examples:[Aleksey Ostapenko, Teodor Salparov, Roman Bragin]),(Birth_Date, birth date type:text. Value examples:[May 26, 1986, August 16, 1982, April 17, 1987]),(Height, height type:number. Value examples:[207.0, 182.0, 187.0]),]\nForeign keys:\npoker_player.People_ID = people.People_ID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            21.0
                        ]
                    ],
                    "sql": "SELECT Final_Table_Made FROM poker_player WHERE People_ID = (SELECT People_ID FROM poker_player ORDER BY Earnings ASC LIMIT 1)",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the poker player with the least amount of earnings.\nSQL: ```sql SELECT People_ID FROM poker_player ORDER BY Earnings ASC LIMIT 1```\nSubquestion 2: How many final tables did the poker player with the least amount of earnings make?\nSQL: ```sql SELECT Final_Table_Made FROM poker_player WHERE People_ID = (SELECT People_ID FROM poker_player ORDER BY Earnings ASC LIMIT 1)```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What about the poker player with the most earnings how many final table did they make?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT Final_Table_Made FROM poker_player order by Earnings desc limit 1",
                "predict": "SELECT Final_Table_Made FROM poker_player WHERE People_ID = (SELECT People_ID FROM poker_player ORDER BY Earnings DESC LIMIT 1)",
                "Rewriter": "",
                "Selector": "Table:poker_player\n[(Poker_Player_ID, poker player id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(People_ID, people id type:number. Value examples:[1, 2, 5]),(Final_Table_Made, final table made type:number. Value examples:[42.0, 10.0, 21.0]),(Best_Finish, best finish type:number. Value examples:[1.0, 2.0, 3.0]),(Money_Rank, money rank type:number. Value examples:[68.0, 141.0, 166.0]),(Earnings, earnings type:number. Value examples:[476090.0, 189233.0, 104871.0]),]\nTable:people\n[(People_ID, people id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Nationality, nationality type:text. Value examples:[Russia, Bulgaria]),(Name, name type:text. Value examples:[Aleksey Ostapenko, Teodor Salparov, Roman Bragin]),(Birth_Date, birth date type:text. Value examples:[May 26, 1986, August 16, 1982, April 17, 1987]),(Height, height type:number. Value examples:[207.0, 182.0, 187.0]),]\nForeign keys:\npoker_player.People_ID = people.People_ID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            19.0
                        ]
                    ],
                    "sql": "SELECT Final_Table_Made FROM poker_player WHERE People_ID = (SELECT People_ID FROM poker_player ORDER BY Earnings DESC LIMIT 1)",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the poker player with the most earnings.\nSQL: ```sql SELECT People_ID FROM poker_player ORDER BY Earnings DESC LIMIT 1```\nSubquestion 2: How many final tables did the poker player with the most earnings make?\nSQL: ```sql SELECT Final_Table_Made FROM poker_player WHERE People_ID = (SELECT People_ID FROM poker_player ORDER BY Earnings DESC LIMIT 1)```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "predict": "You're welcome! Is there anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:poker_player\n[(Poker_Player_ID, poker player id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(People_ID, people id type:number. Value examples:[1, 2, 5]),(Final_Table_Made, final table made type:number. Value examples:[42.0, 10.0, 21.0]),(Earnings, earnings type:number. Value examples:[476090.0, 189233.0, 104871.0]),]\nTable:people\n[(People_ID, people id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Nationality, nationality type:text. Value examples:[Russia, Bulgaria]),(Name, name type:text. Value examples:[Aleksey Ostapenko, Teodor Salparov, Roman Bragin]),]\nForeign keys:\npoker_player.People_ID = people.People_ID\n",
                "Detector": "You're welcome! Is there anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 59
    },
    {
        "db_name": "dog_kennels",
        "turns": [
            {
                "isuser": true,
                "text": "Tell me how many dogs have gone through any treatments.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT count(*) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
                "predict": "SELECT COUNT(DISTINCT T1.dog_id) FROM Treatments AS T1",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Treatment_Types\n[(treatment_type_code, treatment type code type:text PRIMARY KEY. Value examples:[EXAM, VAC, WALK]),(treatment_type_description, treatment type description type:text. Value examples:[Physical examination, Vaccination, Take for a Walk]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),]\nTable:Treatments\n[(treatment_id, treatment id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(dog_id, dog id type:number. Value examples:[14, 4, 2]),(treatment_type_code, treatment type code type:text. Value examples:[WALK, VAC, EXAM]),(date_of_treatment, date of treatment type:time. Value examples:[2018-03-19 04:39:54, 2018-03-15 20:25:34, 2018-03-08 05:26:23]),(cost_of_treatment, cost of treatment type:number. Value examples:[567, 147, 429]),]\nForeign keys:\nTreatments.dog_id = Dogs.dog_id\nTreatments.treatment_type_code = Treatment_Types.treatment_type_code\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            9
                        ]
                    ],
                    "sql": "SELECT COUNT(DISTINCT T1.dog_id) FROM Treatments AS T1",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: How many dogs have gone through any treatments?\nSQL ```sql SELECT COUNT(DISTINCT T1.dog_id) FROM Treatments AS T1```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Tell me how old the youngest is.",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the youngest among those that have gone through any treatment?",
                "query": "",
                "predict": "SELECT MIN(age) FROM Dogs",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(name, name type:text. Value examples:[Kacey, Hipolito, Mavis]),(age, age type:text. Value examples:[6, 9, 8]),(date_of_birth, date of birth type:time. Value examples:[2012-01-27 05:11:53, 2013-02-13 05:15:21, 2008-05-19 15:54:49]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "1"
                        ]
                    ],
                    "sql": "SELECT MIN(age) FROM Dogs",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the age of the youngest dog.\nSQL: ```sql SELECT MIN(age) FROM Dogs```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT min(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
                "predict": "SELECT MIN(date_of_birth) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Treatment_Types\n[(treatment_type_code, treatment type code type:text PRIMARY KEY. Value examples:[EXAM, VAC, WALK]),(treatment_type_description, treatment type description type:text. Value examples:[Physical examination, Vaccination, Take for a Walk]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(date_of_birth, date of birth type:time. Value examples:[2012-01-27 05:11:53, 2013-02-13 05:15:21, 2008-05-19 15:54:49]),(date_arrived, date arrived type:time. Value examples:[2017-09-08 20:10:13, 2017-12-22 05:02:02, 2017-06-25 10:14:05]),(date_adopted, date adopted type:time. Value examples:[2018-03-06 16:32:11, 2018-03-25 08:12:51, 2018-03-07 21:45:43]),(date_departed, date departed type:time. Value examples:[2018-03-25 06:58:44, 2018-03-25 02:11:32, 2018-03-25 10:25:46]),]\nTable:Treatments\n[(treatment_id, treatment id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(dog_id, dog id type:number. Value examples:[14, 4, 2]),(date_of_treatment, date of treatment type:time. Value examples:[2018-03-19 04:39:54, 2018-03-15 20:25:34, 2018-03-08 05:26:23]),(cost_of_treatment, cost of treatment type:number. Value examples:[567, 147, 429]),]\nForeign keys:\nTreatments.dog_id = Dogs.dog_id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "2008-05-30 12:51:34"
                        ]
                    ],
                    "sql": "SELECT MIN(date_of_birth) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the dog_id of dogs that have gone through any treatments.\nSQL: ```sql SELECT DISTINCT dog_id FROM Treatments```\nSubquestion 2: Find the date of birth of the youngest dog that has gone through any treatments.\nSQL: ```sql SELECT MIN(date_of_birth) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "And how old is the oldest that has gone through any treatment?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT max(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
                "predict": "SELECT MAX(T1.age) FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Treatment_Types\n[(treatment_type_code, treatment type code type:text PRIMARY KEY. Value examples:[EXAM, VAC, WALK]),(treatment_type_description, treatment type description type:text. Value examples:[Physical examination, Vaccination, Take for a Walk]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(age, age type:text. Value examples:[6, 9, 8]),(date_arrived, date arrived type:time. Value examples:[2017-09-08 20:10:13, 2017-12-22 05:02:02, 2017-06-25 10:14:05]),(date_adopted, date adopted type:time. Value examples:[2018-03-06 16:32:11, 2018-03-25 08:12:51, 2018-03-07 21:45:43]),(date_departed, date departed type:time. Value examples:[2018-03-25 06:58:44, 2018-03-25 02:11:32, 2018-03-25 10:25:46]),]\nTable:Treatments\n[(treatment_id, treatment id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(dog_id, dog id type:number. Value examples:[14, 4, 2]),(date_of_treatment, date of treatment type:time. Value examples:[2018-03-19 04:39:54, 2018-03-15 20:25:34, 2018-03-08 05:26:23]),(cost_of_treatment, cost of treatment type:number. Value examples:[567, 147, 429]),]\nForeign keys:\nTreatments.dog_id = Dogs.dog_id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "9"
                        ]
                    ],
                    "sql": "SELECT MAX(T1.age) FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the age of the oldest dog that has gone through any treatment.\nSQL: ```sql SELECT MAX(T1.age) FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "How about the average age?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the average age of those that have gone through any treatment?",
                "query": "",
                "predict": "SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(age, age type:text. Value examples:[6, 9, 8]),(date_arrived, date arrived type:time. Value examples:[2017-09-08 20:10:13, 2017-12-22 05:02:02, 2017-06-25 10:14:05]),(date_adopted, date adopted type:time. Value examples:[2018-03-06 16:32:11, 2018-03-25 08:12:51, 2018-03-07 21:45:43]),(date_departed, date departed type:time. Value examples:[2018-03-25 06:58:44, 2018-03-25 02:11:32, 2018-03-25 10:25:46]),]\nTable:Treatments\n[(treatment_id, treatment id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(dog_id, dog id type:number. Value examples:[14, 4, 2]),(date_of_treatment, date of treatment type:time. Value examples:[2018-03-19 04:39:54, 2018-03-15 20:25:34, 2018-03-08 05:26:23]),(cost_of_treatment, cost of treatment type:number. Value examples:[567, 147, 429]),]\nForeign keys:\nTreatments.dog_id = Dogs.dog_id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            5.111111111111111
                        ]
                    ],
                    "sql": "SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the average age of dogs that have gone through any treatments.\nSQL: ```sql\nSELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)\n```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
                "predict": "SELECT AVG(CAST(T1.age AS REAL)) FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Treatment_Types\n[(treatment_type_code, treatment type code type:text PRIMARY KEY. Value examples:[EXAM, VAC, WALK]),(treatment_type_description, treatment type description type:text. Value examples:[Physical examination, Vaccination, Take for a Walk]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(age, age type:text. Value examples:[6, 9, 8]),(date_arrived, date arrived type:time. Value examples:[2017-09-08 20:10:13, 2017-12-22 05:02:02, 2017-06-25 10:14:05]),(date_adopted, date adopted type:time. Value examples:[2018-03-06 16:32:11, 2018-03-25 08:12:51, 2018-03-07 21:45:43]),(date_departed, date departed type:time. Value examples:[2018-03-25 06:58:44, 2018-03-25 02:11:32, 2018-03-25 10:25:46]),]\nTable:Treatments\n[(dog_id, dog id type:number. Value examples:[14, 4, 2]),(treatment_type_code, treatment type code type:text. Value examples:[WALK, VAC, EXAM]),(date_of_treatment, date of treatment type:time. Value examples:[2018-03-19 04:39:54, 2018-03-15 20:25:34, 2018-03-08 05:26:23]),(cost_of_treatment, cost of treatment type:number. Value examples:[567, 147, 429]),]\nForeign keys:\nTreatments.dog_id = Dogs.dog_id\nTreatments.treatment_type_code = Treatment_Types.treatment_type_code\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            5.466666666666667
                        ]
                    ],
                    "sql": "SELECT AVG(CAST(T1.age AS REAL)) FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the average age of dogs that have gone through any treatment.\nSQL: ```sql SELECT AVG(CAST(T1.age AS REAL)) FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "thanks.bye.",
                "query": "",
                "predict": "You're welcome! Is there anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Treatment_Types\n[(treatment_type_code, treatment type code type:text PRIMARY KEY. Value examples:[EXAM, VAC, WALK]),(treatment_type_description, treatment type description type:text. Value examples:[Physical examination, Vaccination, Take for a Walk]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(age, age type:text. Value examples:[6, 9, 8]),(date_arrived, date arrived type:time. Value examples:[2017-09-08 20:10:13, 2017-12-22 05:02:02, 2017-06-25 10:14:05]),(date_adopted, date adopted type:time. Value examples:[2018-03-06 16:32:11, 2018-03-25 08:12:51, 2018-03-07 21:45:43]),(date_departed, date departed type:time. Value examples:[2018-03-25 06:58:44, 2018-03-25 02:11:32, 2018-03-25 10:25:46]),]\nTable:Treatments\n[(dog_id, dog id type:number. Value examples:[14, 4, 2]),(treatment_type_code, treatment type code type:text. Value examples:[WALK, VAC, EXAM]),(date_of_treatment, date of treatment type:time. Value examples:[2018-03-19 04:39:54, 2018-03-15 20:25:34, 2018-03-08 05:26:23]),(cost_of_treatment, cost of treatment type:number. Value examples:[567, 147, 429]),]\nForeign keys:\nTreatments.dog_id = Dogs.dog_id\nTreatments.treatment_type_code = Treatment_Types.treatment_type_code\n",
                "Detector": "You're welcome! Is there anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 60
    },
    {
        "db_name": "dog_kennels",
        "turns": [
            {
                "isuser": true,
                "text": "Tell me how many dogs have gone through any treatments.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT count(*) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
                "predict": "SELECT COUNT(DISTINCT T1.dog_id) FROM Treatments AS T1",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Treatment_Types\n[(treatment_type_code, treatment type code type:text PRIMARY KEY. Value examples:[EXAM, VAC, WALK]),(treatment_type_description, treatment type description type:text. Value examples:[Physical examination, Vaccination, Take for a Walk]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),]\nTable:Treatments\n[(treatment_id, treatment id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(dog_id, dog id type:number. Value examples:[14, 4, 2]),(treatment_type_code, treatment type code type:text. Value examples:[WALK, VAC, EXAM]),(date_of_treatment, date of treatment type:time. Value examples:[2018-03-19 04:39:54, 2018-03-15 20:25:34, 2018-03-08 05:26:23]),(cost_of_treatment, cost of treatment type:number. Value examples:[567, 147, 429]),]\nForeign keys:\nTreatments.dog_id = Dogs.dog_id\nTreatments.treatment_type_code = Treatment_Types.treatment_type_code\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            9
                        ]
                    ],
                    "sql": "SELECT COUNT(DISTINCT T1.dog_id) FROM Treatments AS T1",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: How many dogs have gone through any treatments?\nSQL ```sql SELECT COUNT(DISTINCT T1.dog_id) FROM Treatments AS T1```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Tell me how old the youngest dog is.",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the youngest among those that have gone through any treatment?",
                "query": "",
                "predict": "SELECT MIN(age) FROM Dogs",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(breed_code, breed code type:text. Value examples:[ESK, BUL, HUS]),(size_code, size code type:text. Value examples:[LGE, MED, SML]),(name, name type:text. Value examples:[Kacey, Hipolito, Mavis]),(age, age type:text. Value examples:[6, 9, 8]),(date_of_birth, date of birth type:time. Value examples:[2012-01-27 05:11:53, 2013-02-13 05:15:21, 2008-05-19 15:54:49]),(gender, gender type:text. Value examples:[1, 0]),(weight, weight type:text. Value examples:[7.57, 1.72, 8.04]),(date_arrived, date arrived type:time. Value examples:[2017-09-08 20:10:13, 2017-12-22 05:02:02, 2017-06-25 10:14:05]),(date_adopted, date adopted type:time. Value examples:[2018-03-06 16:32:11, 2018-03-25 08:12:51, 2018-03-07 21:45:43]),]\nForeign keys:\nDogs.size_code = Sizes.size_code\nDogs.breed_code = Breeds.breed_code\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "1"
                        ]
                    ],
                    "sql": "SELECT MIN(age) FROM Dogs",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the age of the youngest dog.\nSQL: ```sql SELECT MIN(age) FROM Dogs```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT min(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
                "predict": "SELECT MIN(date_of_birth) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Treatment_Types\n[(treatment_type_code, treatment type code type:text PRIMARY KEY. Value examples:[EXAM, VAC, WALK]),(treatment_type_description, treatment type description type:text. Value examples:[Physical examination, Vaccination, Take for a Walk]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(date_of_birth, date of birth type:time. Value examples:[2012-01-27 05:11:53, 2013-02-13 05:15:21, 2008-05-19 15:54:49]),(date_arrived, date arrived type:time. Value examples:[2017-09-08 20:10:13, 2017-12-22 05:02:02, 2017-06-25 10:14:05]),(date_adopted, date adopted type:time. Value examples:[2018-03-06 16:32:11, 2018-03-25 08:12:51, 2018-03-07 21:45:43]),(date_departed, date departed type:time. Value examples:[2018-03-25 06:58:44, 2018-03-25 02:11:32, 2018-03-25 10:25:46]),]\nTable:Treatments\n[(treatment_id, treatment id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(dog_id, dog id type:number. Value examples:[14, 4, 2]),(treatment_type_code, treatment type code type:text. Value examples:[WALK, VAC, EXAM]),(date_of_treatment, date of treatment type:time. Value examples:[2018-03-19 04:39:54, 2018-03-15 20:25:34, 2018-03-08 05:26:23]),(cost_of_treatment, cost of treatment type:number. Value examples:[567, 147, 429]),]\nForeign keys:\nTreatments.dog_id = Dogs.dog_id\nTreatments.treatment_type_code = Treatment_Types.treatment_type_code\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "2008-05-30 12:51:34"
                        ]
                    ],
                    "sql": "SELECT MIN(date_of_birth) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the dog_id of dogs that have gone through any treatments.\nSQL: ```sql SELECT DISTINCT dog_id FROM Treatments```\nSubquestion 2: Find the date of birth of the youngest dog that has gone through any treatments.\nSQL: ```sql SELECT MIN(date_of_birth) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "And how old is the oldest that has gone through any treatment?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT max(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
                "predict": "SELECT MAX(T1.age) FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Treatment_Types\n[(treatment_type_code, treatment type code type:text PRIMARY KEY. Value examples:[EXAM, VAC, WALK]),(treatment_type_description, treatment type description type:text. Value examples:[Physical examination, Vaccination, Take for a Walk]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(age, age type:text. Value examples:[6, 9, 8]),(date_of_birth, date of birth type:time. Value examples:[2012-01-27 05:11:53, 2013-02-13 05:15:21, 2008-05-19 15:54:49]),(date_arrived, date arrived type:time. Value examples:[2017-09-08 20:10:13, 2017-12-22 05:02:02, 2017-06-25 10:14:05]),(date_adopted, date adopted type:time. Value examples:[2018-03-06 16:32:11, 2018-03-25 08:12:51, 2018-03-07 21:45:43]),(date_departed, date departed type:time. Value examples:[2018-03-25 06:58:44, 2018-03-25 02:11:32, 2018-03-25 10:25:46]),]\nTable:Treatments\n[(treatment_id, treatment id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(dog_id, dog id type:number. Value examples:[14, 4, 2]),(treatment_type_code, treatment type code type:text. Value examples:[WALK, VAC, EXAM]),(date_of_treatment, date of treatment type:time. Value examples:[2018-03-19 04:39:54, 2018-03-15 20:25:34, 2018-03-08 05:26:23]),(cost_of_treatment, cost of treatment type:number. Value examples:[567, 147, 429]),]\nForeign keys:\nTreatments.dog_id = Dogs.dog_id\nTreatments.treatment_type_code = Treatment_Types.treatment_type_code\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "9"
                        ]
                    ],
                    "sql": "SELECT MAX(T1.age) FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the age of the oldest dog that has gone through any treatment.\nSQL: ```sql SELECT MAX(T1.age) FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "How about the average?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the average age of those that have gone through any treatment?",
                "query": "",
                "predict": "SELECT AVG(CAST(T1.age AS REAL))  FROM Dogs AS T1  INNER JOIN Treatments AS T2  ON T1.dog_id = T2.dog_id",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Treatment_Types\n[(treatment_type_code, treatment type code type:text PRIMARY KEY. Value examples:[EXAM, VAC, WALK]),(treatment_type_description, treatment type description type:text. Value examples:[Physical examination, Vaccination, Take for a Walk]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(age, age type:text. Value examples:[6, 9, 8]),(date_arrived, date arrived type:time. Value examples:[2017-09-08 20:10:13, 2017-12-22 05:02:02, 2017-06-25 10:14:05]),(date_adopted, date adopted type:time. Value examples:[2018-03-06 16:32:11, 2018-03-25 08:12:51, 2018-03-07 21:45:43]),(date_departed, date departed type:time. Value examples:[2018-03-25 06:58:44, 2018-03-25 02:11:32, 2018-03-25 10:25:46]),]\nTable:Treatments\n[(treatment_id, treatment id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(dog_id, dog id type:number. Value examples:[14, 4, 2]),(treatment_type_code, treatment type code type:text. Value examples:[WALK, VAC, EXAM]),(date_of_treatment, date of treatment type:time. Value examples:[2018-03-19 04:39:54, 2018-03-15 20:25:34, 2018-03-08 05:26:23]),(cost_of_treatment, cost of treatment type:number. Value examples:[567, 147, 429]),]\nForeign keys:\nTreatments.dog_id = Dogs.dog_id\nTreatments.treatment_type_code = Treatment_Types.treatment_type_code\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            5.466666666666667
                        ]
                    ],
                    "sql": "SELECT AVG(CAST(T1.age AS REAL))  FROM Dogs AS T1  INNER JOIN Treatments AS T2  ON T1.dog_id = T2.dog_id",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the average age of dogs that have gone through any treatments.\nSQL: ```sql\nSELECT AVG(CAST(T1.age AS REAL)) \nFROM Dogs AS T1 \nINNER JOIN Treatments AS T2 \nON T1.dog_id = T2.dog_id\n```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
                "predict": "SELECT AVG(CAST(T1.age AS REAL)) FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Treatment_Types\n[(treatment_type_code, treatment type code type:text PRIMARY KEY. Value examples:[EXAM, VAC, WALK]),(treatment_type_description, treatment type description type:text. Value examples:[Physical examination, Vaccination, Take for a Walk]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(age, age type:text. Value examples:[6, 9, 8]),(date_arrived, date arrived type:time. Value examples:[2017-09-08 20:10:13, 2017-12-22 05:02:02, 2017-06-25 10:14:05]),(date_adopted, date adopted type:time. Value examples:[2018-03-06 16:32:11, 2018-03-25 08:12:51, 2018-03-07 21:45:43]),(date_departed, date departed type:time. Value examples:[2018-03-25 06:58:44, 2018-03-25 02:11:32, 2018-03-25 10:25:46]),]\nTable:Treatments\n[(dog_id, dog id type:number. Value examples:[14, 4, 2]),(treatment_type_code, treatment type code type:text. Value examples:[WALK, VAC, EXAM]),(date_of_treatment, date of treatment type:time. Value examples:[2018-03-19 04:39:54, 2018-03-15 20:25:34, 2018-03-08 05:26:23]),(cost_of_treatment, cost of treatment type:number. Value examples:[567, 147, 429]),]\nForeign keys:\nTreatments.dog_id = Dogs.dog_id\nTreatments.treatment_type_code = Treatment_Types.treatment_type_code\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            5.466666666666667
                        ]
                    ],
                    "sql": "SELECT AVG(CAST(T1.age AS REAL)) FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the average age of dogs that have gone through any treatment.\nSQL: ```sql SELECT AVG(CAST(T1.age AS REAL)) FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "thanks.bye.",
                "query": "",
                "predict": "You're welcome! Is there anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Treatment_Types\n[(treatment_type_code, treatment type code type:text PRIMARY KEY. Value examples:[EXAM, VAC, WALK]),(treatment_type_description, treatment type description type:text. Value examples:[Physical examination, Vaccination, Take for a Walk]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(owner_id, owner id type:number. Value examples:[3, 11, 1]),(breed_code, breed code type:text. Value examples:[ESK, BUL, HUS]),(size_code, size code type:text. Value examples:[LGE, MED, SML]),(name, name type:text. Value examples:[Kacey, Hipolito, Mavis]),(age, age type:text. Value examples:[6, 9, 8]),(date_of_birth, date of birth type:time. Value examples:[2012-01-27 05:11:53, 2013-02-13 05:15:21, 2008-05-19 15:54:49]),(date_arrived, date arrived type:time. Value examples:[2017-09-08 20:10:13, 2017-12-22 05:02:02, 2017-06-25 10:14:05]),(date_adopted, date adopted type:time. Value examples:[2018-03-06 16:32:11, 2018-03-25 08:12:51, 2018-03-07 21:45:43]),(date_departed, date departed type:time. Value examples:[2018-03-25 06:58:44, 2018-03-25 02:11:32, 2018-03-25 10:25:46]),]\nTable:Treatments\n[(treatment_id, treatment id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(dog_id, dog id type:number. Value examples:[14, 4, 2]),(professional_id, professional id type:number. Value examples:[9, 10, 4]),(treatment_type_code, treatment type code type:text. Value examples:[WALK, VAC, EXAM]),(date_of_treatment, date of treatment type:time. Value examples:[2018-03-19 04:39:54, 2018-03-15 20:25:34, 2018-03-08 05:26:23]),(cost_of_treatment, cost of treatment type:number. Value examples:[567, 147, 429]),]\nForeign keys:\nDogs.size_code = Sizes.size_code\nDogs.breed_code = Breeds.breed_code\nTreatments.dog_id = Dogs.dog_id\nTreatments.treatment_type_code = Treatment_Types.treatment_type_code\n",
                "Detector": "You're welcome! Is there anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 61
    },
    {
        "db_name": "student_transcripts_tracking",
        "turns": [
            {
                "isuser": true,
                "text": "Hi there! Does different semesters this list have?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do  you  mean  the type of  semester name\uff1f",
                "query": "",
                "predict": "SELECT DISTINCT semester_name FROM Semesters",
                "Rewriter": "",
                "Selector": "Table:Courses\n[(course_id, course id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(course_name, course name type:text. Value examples:[ds, math, os]),(course_description, course description type:text. Value examples:[p, q, v]),(other_details, other details type:text. Value examples:[None]),]\nTable:Semesters\n[(semester_id, semester id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(semester_name, semester name type:text. Value examples:[spring 2010, summer 2010, fall 2010]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "spring 2010"
                        ],
                        [
                            "summer 2010"
                        ],
                        [
                            "fall 2010"
                        ],
                        [
                            "winter 2010"
                        ],
                        [
                            "spring 2018"
                        ],
                        [
                            "spring 2012"
                        ],
                        [
                            "spring 2013"
                        ],
                        [
                            "spring 2014"
                        ],
                        [
                            "spring 2015"
                        ],
                        [
                            "spring 2016"
                        ]
                    ],
                    "sql": "SELECT DISTINCT semester_name FROM Semesters",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: List all distinct semester names.\nSQL ```sql SELECT DISTINCT semester_name FROM Semesters```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Yes!  My apologies for being unclear.  How many different semester name types are on this list?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT distinct semester_name FROM Semesters ",
                "predict": "SELECT COUNT(DISTINCT semester_name) FROM Semesters",
                "Rewriter": "",
                "Selector": "Table:Semesters\n[(semester_name, semester name type:text. Value examples:[spring 2010, summer 2010, fall 2010]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            14
                        ]
                    ],
                    "sql": "SELECT COUNT(DISTINCT semester_name) FROM Semesters",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: How many different semester name types are on this list? \nSQL ```sql SELECT COUNT(DISTINCT semester_name) FROM Semesters```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Awesome!  Much appreciated!  Can you filter this list to show just the semester names which do not have any \nstudent enrolment ids associated, or in other words semesters which do not have any students enrolled?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
                "predict": "SELECT T1.semester_name FROM Semesters AS T1 LEFT JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.student_enrolment_id IS NULL",
                "Rewriter": "",
                "Selector": "Table:Courses\n[(course_id, course id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(course_name, course name type:text. Value examples:[ds, math, os]),(course_description, course description type:text. Value examples:[p, q, v]),(other_details, other details type:text. Value examples:[None]),]\nTable:Semesters\n[(semester_id, semester id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(semester_name, semester name type:text. Value examples:[spring 2010, summer 2010, fall 2010]),]\nTable:Student_Enrolment\n[(student_enrolment_id, student enrolment id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(semester_id, semester id type:number. Value examples:[13, 2, 15]),]\nForeign keys:\nStudent_Enrolment.semester_id = Semesters.semester_id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "fall 2010"
                        ],
                        [
                            "spring 2013"
                        ],
                        [
                            "spring 2014"
                        ],
                        [
                            "spring 2016"
                        ],
                        [
                            "spring 2017"
                        ],
                        [
                            "winter 2018"
                        ]
                    ],
                    "sql": "SELECT T1.semester_name FROM Semesters AS T1 LEFT JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.student_enrolment_id IS NULL",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the semester names that have no student enrolment ids associated.\nSQL ```sql SELECT T1.semester_name FROM Semesters AS T1 LEFT JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.student_enrolment_id IS NULL```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thank you!  Can you update this list to show the associated semester IDs and semester descriptions?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT semester_id,semester_name,semester_description FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
                "predict": "SELECT T1.semester_id, T1.semester_name, T1.semester_description FROM Semesters AS T1 WHERE T1.semester_id NOT IN ( SELECT semester_id FROM Student_Enrolment )",
                "Rewriter": "",
                "Selector": "Table:Courses\n[(course_id, course id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(course_name, course name type:text. Value examples:[ds, math, os]),(course_description, course description type:text. Value examples:[p, q, v]),(other_details, other details type:text. Value examples:[None]),]\nTable:Semesters\n[(semester_id, semester id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(semester_name, semester name type:text. Value examples:[spring 2010, summer 2010, fall 2010]),(semester_description, semester description type:text. Value examples:[x, g, w]),]\nTable:Student_Enrolment\n[(semester_id, semester id type:number. Value examples:[13, 2, 15]),]\nForeign keys:\nStudent_Enrolment.semester_id = Semesters.semester_id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            3,
                            "fall 2010",
                            "w"
                        ],
                        [
                            7,
                            "spring 2013",
                            "y"
                        ],
                        [
                            8,
                            "spring 2014",
                            "x"
                        ],
                        [
                            10,
                            "spring 2016",
                            "f"
                        ],
                        [
                            11,
                            "spring 2017",
                            "g"
                        ],
                        [
                            14,
                            "winter 2018",
                            "t"
                        ]
                    ],
                    "sql": "SELECT T1.semester_id, T1.semester_name, T1.semester_description FROM Semesters AS T1 WHERE T1.semester_id NOT IN ( SELECT semester_id FROM Student_Enrolment )",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Get the semester names which do not have any students enrolled.\nSQL ```sql SELECT T1.semester_name FROM Semesters AS T1 WHERE T1.semester_id NOT IN ( SELECT semester_id FROM Student_Enrolment )```\nSubquestion 2: Update this list to show the associated semester IDs and semester descriptions.\nSQL ```sql SELECT T1.semester_id, T1.semester_name, T1.semester_description FROM Semesters AS T1 WHERE T1.semester_id NOT IN ( SELECT semester_id FROM Student_Enrolment )```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You  are  welcome and  goodbye!",
                "query": "",
                "predict": "You're welcome!  Is there anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:Courses\n[(course_id, course id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(course_name, course name type:text. Value examples:[ds, math, os]),(course_description, course description type:text. Value examples:[p, q, v]),(other_details, other details type:text. Value examples:[None]),]\nTable:Semesters\n[(semester_id, semester id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(semester_name, semester name type:text. Value examples:[spring 2010, summer 2010, fall 2010]),(semester_description, semester description type:text. Value examples:[x, g, w]),]\nTable:Student_Enrolment\n[(semester_id, semester id type:number. Value examples:[13, 2, 15]),]\nForeign keys:\nStudent_Enrolment.semester_id = Semesters.semester_id\n",
                "Detector": "You're welcome!  Is there anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 62
    },
    {
        "db_name": "wta_1",
        "turns": [
            {
                "isuser": true,
                "text": "What are the codes of countries that have more than 50 players?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
                "predict": "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
                "Rewriter": "",
                "Selector": "Table:players\n[(player_id, player id type:number PRIMARY KEY. Value examples:[200001, 200002, 200003]),(first_name, first name type:text. Value examples:[Martina, Mirjana, Justine]),(last_name, last name type:text. Value examples:[Hingis, Lucic, Henin]),(hand, hand type:text. Value examples:[R, L, U]),(birth_date, birth date type:time. Value examples:[19800930, 19820309, 19820601]),(country_code, country code type:text. Value examples:[SUI, CRO, BEL]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "ALG"
                        ],
                        [
                            "ARG"
                        ],
                        [
                            "AUS"
                        ],
                        [
                            "AUT"
                        ],
                        [
                            "BEL"
                        ],
                        [
                            "BIH"
                        ],
                        [
                            "BLR"
                        ],
                        [
                            "BOL"
                        ],
                        [
                            "BRA"
                        ],
                        [
                            "BUL"
                        ]
                    ],
                    "sql": "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Count the number of players for each country.\nSQL ```sql SELECT country_code, COUNT(*) FROM players GROUP BY country_code```\nSubquestion 2: Find the codes of countries that have more than 50 players.\nSQL ```sql SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What are the codes of countries that have less than 40 players?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  <  40",
                "predict": "SELECT country_code FROM players GROUP BY country_code HAVING count(*) < 40",
                "Rewriter": "",
                "Selector": "Table:players\n[(player_id, player id type:number PRIMARY KEY. Value examples:[200001, 200002, 200003]),(first_name, first name type:text. Value examples:[Martina, Mirjana, Justine]),(last_name, last name type:text. Value examples:[Hingis, Lucic, Henin]),(hand, hand type:text. Value examples:[R, L, U]),(birth_date, birth date type:time. Value examples:[19800930, 19820309, 19820601]),(country_code, country code type:text. Value examples:[SUI, CRO, BEL]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "AHO"
                        ],
                        [
                            "ALB"
                        ],
                        [
                            "AND"
                        ],
                        [
                            "ANG"
                        ],
                        [
                            "ANT"
                        ],
                        [
                            "ARM"
                        ],
                        [
                            "AZE"
                        ],
                        [
                            "BAH"
                        ],
                        [
                            "BAR"
                        ],
                        [
                            "BDI"
                        ]
                    ],
                    "sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*) < 40",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the codes of countries that have less than 40 players.\nSQL: ```sql\nSELECT country_code FROM players GROUP BY country_code HAVING count(*) < 40\n```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What are the player names from the country code AHO?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you want first name and last name?",
                "query": "",
                "predict": "SELECT first_name, last_name FROM players WHERE country_code = 'AHO'",
                "Rewriter": "",
                "Selector": "Table:players\n[(player_id, player id type:number PRIMARY KEY. Value examples:[200001, 200002, 200003]),(first_name, first name type:text. Value examples:[Martina, Mirjana, Justine]),(last_name, last name type:text. Value examples:[Hingis, Lucic, Henin]),(country_code, country code type:text. Value examples:[SUI, CRO, BEL]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Tsarina",
                            "Domacasse"
                        ],
                        [
                            "Lorna",
                            "Simmons"
                        ],
                        [
                            "Marisa",
                            "Tseng"
                        ],
                        [
                            "Nicole",
                            "Weber"
                        ],
                        [
                            "Eveline",
                            "Wouters"
                        ],
                        [
                            "Fausthyara",
                            "Pietersz"
                        ]
                    ],
                    "sql": "SELECT first_name, last_name FROM players WHERE country_code = 'AHO'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Get the player names from the country code AHO.\nSQL ```sql SELECT first_name, last_name FROM players WHERE country_code = 'AHO'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT first_name,last_name FROM players where country_code='AHO'",
                "predict": "SELECT last_name FROM players WHERE country_code = 'AHO'",
                "Rewriter": "",
                "Selector": "Table:players\n[(player_id, player id type:number PRIMARY KEY. Value examples:[200001, 200002, 200003]),(first_name, first name type:text. Value examples:[Martina, Mirjana, Justine]),(last_name, last name type:text. Value examples:[Hingis, Lucic, Henin]),(country_code, country code type:text. Value examples:[SUI, CRO, BEL]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Domacasse"
                        ],
                        [
                            "Simmons"
                        ],
                        [
                            "Tseng"
                        ],
                        [
                            "Weber"
                        ],
                        [
                            "Wouters"
                        ],
                        [
                            "Pietersz"
                        ]
                    ],
                    "sql": "SELECT last_name FROM players WHERE country_code = 'AHO'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Get the first names of players from country code AHO.\nSQL: ```sql SELECT first_name FROM players WHERE country_code = 'AHO'```\n\nSubquestion 2: Get the last names of players from country code AHO.\nSQL: ```sql SELECT last_name FROM players WHERE country_code = 'AHO'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What are their player IDs?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT player_id FROM players where country_code='AHO'",
                "predict": "SELECT player_id FROM players WHERE country_code = 'AHO'",
                "Rewriter": "",
                "Selector": "Table:players\n[(player_id, player id type:number PRIMARY KEY. Value examples:[200001, 200002, 200003]),(first_name, first name type:text. Value examples:[Martina, Mirjana, Justine]),(last_name, last name type:text. Value examples:[Hingis, Lucic, Henin]),(country_code, country code type:text. Value examples:[SUI, CRO, BEL]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            206442
                        ],
                        [
                            206443
                        ],
                        [
                            206445
                        ],
                        [
                            206446
                        ],
                        [
                            206449
                        ],
                        [
                            211453
                        ]
                    ],
                    "sql": "SELECT player_id FROM players WHERE country_code = 'AHO'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What are the player IDs from the country code AHO?\nSQL ```sql SELECT player_id FROM players WHERE country_code = 'AHO'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What hand is player id 206449?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT hand FROM players where player_id=206449",
                "predict": "SELECT hand FROM players WHERE player_id = 206449",
                "Rewriter": "",
                "Selector": "Table:players\n[(player_id, player id type:number PRIMARY KEY. Value examples:[200001, 200002, 200003]),(first_name, first name type:text. Value examples:[Martina, Mirjana, Justine]),(last_name, last name type:text. Value examples:[Hingis, Lucic, Henin]),(hand, hand type:text. Value examples:[R, L, U]),(birth_date, birth date type:time. Value examples:[19800930, 19820309, 19820601]),(country_code, country code type:text. Value examples:[SUI, CRO, BEL]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "U"
                        ]
                    ],
                    "sql": "SELECT hand FROM players WHERE player_id = 206449",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What hand is player id 206449? \nSQL ```sql SELECT hand FROM players WHERE player_id = 206449```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "How many other players have that?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT count(*) FROM players where hand='U'",
                "predict": "SELECT COUNT(*) FROM players WHERE hand = (SELECT hand FROM players WHERE player_id = 206449)",
                "Rewriter": "",
                "Selector": "Table:players\n[(player_id, player id type:number PRIMARY KEY. Value examples:[200001, 200002, 200003]),(first_name, first name type:text. Value examples:[Martina, Mirjana, Justine]),(last_name, last name type:text. Value examples:[Hingis, Lucic, Henin]),(hand, hand type:text. Value examples:[R, L, U]),(country_code, country code type:text. Value examples:[SUI, CRO, BEL]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            14193
                        ]
                    ],
                    "sql": "SELECT COUNT(*) FROM players WHERE hand = (SELECT hand FROM players WHERE player_id = 206449)",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What is the hand of player id 206449?\nSQL ```sql SELECT hand FROM players WHERE player_id = 206449```\nSubquestion 2: How many other players have that hand?\nSQL ```sql SELECT COUNT(*) FROM players WHERE hand = (SELECT hand FROM players WHERE player_id = 206449)```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure! Do you want more?",
                "query": "",
                "predict": "You're welcome! Is there anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:players\n[(player_id, player id type:number PRIMARY KEY. Value examples:[200001, 200002, 200003]),(first_name, first name type:text. Value examples:[Martina, Mirjana, Justine]),(last_name, last name type:text. Value examples:[Hingis, Lucic, Henin]),(hand, hand type:text. Value examples:[R, L, U]),(country_code, country code type:text. Value examples:[SUI, CRO, BEL]),]\nForeign keys:\n",
                "Detector": "You're welcome! Is there anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "No, thank you! Have a great day!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You too. Bye!",
                "query": "",
                "predict": "You're welcome! Have a great day too! \n",
                "Rewriter": "",
                "Selector": "Table:players\n[(player_id, player id type:number PRIMARY KEY. Value examples:[200001, 200002, 200003]),(first_name, first name type:text. Value examples:[Martina, Mirjana, Justine]),(last_name, last name type:text. Value examples:[Hingis, Lucic, Henin]),(hand, hand type:text. Value examples:[R, L, U]),(country_code, country code type:text. Value examples:[SUI, CRO, BEL]),]\nForeign keys:\n",
                "Detector": "You're welcome! Have a great day too! \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 63
    },
    {
        "db_name": "battle_death",
        "turns": [
            {
                "isuser": true,
                "text": "Can you please show the names of the battles that had no ships lost in the 'English Channel'?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT name FROM battle EXCEPT SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
                "predict": "SELECT T1.name FROM battle AS T1 WHERE T1.id NOT IN ( SELECT DISTINCT T1.id FROM battle AS T1 INNER JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel' )",
                "Rewriter": "",
                "Selector": "Table:battle\n[(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(name, name type:text. Value examples:[Battle of Adrianople, Battle of Serres, Battle of Rusion]),(date, date type:text. Value examples:[14 April 1205, June 1205, 31 January 1206]),(bulgarian_commander, bulgarian commander type:text. Value examples:[Kaloyan, Unknown, Boril]),(latin_commander, latin commander type:text. Value examples:[Baldwin I, Unknown, Thierry de Termond]),(result, result type:text. Value examples:[Bulgarian victory, Latin victory, Two Year Truce]),]\nTable:ship\n[(lost_in_battle, lost in battle type:number. Value examples:[8, 7, 6]),(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(name, name type:text. Value examples:[Lettice, Bon Accord, Mary]),(tonnage, tonnage type:text. Value examples:[t, 391, 225]),(ship_type, ship type type:text. Value examples:[Brig, 18-gun Brig, 8 gun Brig]),(location, location type:text. Value examples:[English Channel, SW Approaches, Mid-Atlantic]),(disposition_of_ship, disposition of ship type:text. Value examples:[Captured, Wrecked, Scuttled]),]\nForeign keys:\nship.lost_in_battle = battle.id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Battle of Adrianople"
                        ],
                        [
                            "Battle of Serres"
                        ],
                        [
                            "Battle of Rusion"
                        ]
                    ],
                    "sql": "SELECT T1.name FROM battle AS T1 WHERE T1.id NOT IN ( SELECT DISTINCT T1.id FROM battle AS T1 INNER JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel' )",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the battles that had ships lost in the 'English Channel'.\nSQL ```sql SELECT DISTINCT T1.id FROM battle AS T1 INNER JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel'```\nSubquestion 2: Find the battles that had no ships lost in the 'English Channel'.\nSQL ```sql SELECT T1.name FROM battle AS T1 WHERE T1.id NOT IN ( SELECT DISTINCT T1.id FROM battle AS T1 INNER JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel' )```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What are the results of those battles?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT RESULT  FROM battle where name not in (SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel')",
                "predict": "SELECT T1.result FROM battle AS T1 WHERE T1.name IN ( SELECT T2.name FROM battle AS T2 EXCEPT SELECT T3.name FROM battle AS T3 JOIN ship AS T4 ON T3.id = T4.lost_in_battle WHERE T4.location = 'English Channel' )",
                "Rewriter": "",
                "Selector": "Table:battle\n[(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(name, name type:text. Value examples:[Battle of Adrianople, Battle of Serres, Battle of Rusion]),(result, result type:text. Value examples:[Bulgarian victory, Latin victory, Two Year Truce]),]\nTable:ship\n[(lost_in_battle, lost in battle type:number. Value examples:[8, 7, 6]),(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(location, location type:text. Value examples:[English Channel, SW Approaches, Mid-Atlantic]),]\nForeign keys:\nship.lost_in_battle = battle.id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Bulgarian victory"
                        ],
                        [
                            "Bulgarian victory"
                        ],
                        [
                            "Bulgarian victory"
                        ]
                    ],
                    "sql": "SELECT T1.result FROM battle AS T1 WHERE T1.name IN ( SELECT T2.name FROM battle AS T2 EXCEPT SELECT T3.name FROM battle AS T3 JOIN ship AS T4 ON T3.id = T4.lost_in_battle WHERE T4.location = 'English Channel' )",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Get the names of the battles that had no ships lost in the 'English Channel'.\nSQL ```sql SELECT T1.name FROM battle AS T1 EXCEPT SELECT T2.name FROM battle AS T2 JOIN ship AS T3 ON T2.id = T3.lost_in_battle WHERE T3.location = 'English Channel'```\nSubquestion 2: What are the results of those battles?\nSQL ```sql SELECT T1.result FROM battle AS T1 WHERE T1.name IN ( SELECT T2.name FROM battle AS T2 EXCEPT SELECT T3.name FROM battle AS T3 JOIN ship AS T4 ON T3.id = T4.lost_in_battle WHERE T4.location = 'English Channel' )```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Who are the Bulgarian commanders of those battles, please?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT bulgarian_commander FROM battle where name not in (SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel')",
                "predict": "SELECT T1.bulgarian_commander FROM battle AS T1 WHERE T1.name IN (SELECT T2.name FROM battle AS T2 EXCEPT SELECT T3.name FROM battle AS T3 JOIN ship AS T4 ON T3.id = T4.lost_in_battle WHERE T4.location = 'English Channel')",
                "Rewriter": "",
                "Selector": "Table:battle\n[(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(name, name type:text. Value examples:[Battle of Adrianople, Battle of Serres, Battle of Rusion]),(bulgarian_commander, bulgarian commander type:text. Value examples:[Kaloyan, Unknown, Boril]),(result, result type:text. Value examples:[Bulgarian victory, Latin victory, Two Year Truce]),]\nTable:ship\n[(lost_in_battle, lost in battle type:number. Value examples:[8, 7, 6]),(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(name, name type:text. Value examples:[Lettice, Bon Accord, Mary]),(tonnage, tonnage type:text. Value examples:[t, 391, 225]),(ship_type, ship type type:text. Value examples:[Brig, 18-gun Brig, 8 gun Brig]),(location, location type:text. Value examples:[English Channel, SW Approaches, Mid-Atlantic]),(disposition_of_ship, disposition of ship type:text. Value examples:[Captured, Wrecked, Scuttled]),]\nForeign keys:\nship.lost_in_battle = battle.id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Kaloyan"
                        ],
                        [
                            "Kaloyan"
                        ],
                        [
                            "Kaloyan"
                        ]
                    ],
                    "sql": "SELECT T1.bulgarian_commander FROM battle AS T1 WHERE T1.name IN (SELECT T2.name FROM battle AS T2 EXCEPT SELECT T3.name FROM battle AS T3 JOIN ship AS T4 ON T3.id = T4.lost_in_battle WHERE T4.location = 'English Channel')",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Get the names of the battles that had no ships lost in the 'English Channel'.\nSQL ```sql SELECT T1.name FROM battle AS T1 EXCEPT SELECT T2.name FROM battle AS T2 JOIN ship AS T3 ON T2.id = T3.lost_in_battle WHERE T3.location = 'English Channel'```\nSubquestion 2: Get the Bulgarian commanders of those battles.\nSQL ```sql SELECT T1.bulgarian_commander FROM battle AS T1 WHERE T1.name IN (SELECT T2.name FROM battle AS T2 EXCEPT SELECT T3.name FROM battle AS T3 JOIN ship AS T4 ON T3.id = T4.lost_in_battle WHERE T4.location = 'English Channel')```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What were the dates of those battles?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT date FROM battle where name not in (SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel')",
                "predict": "SELECT T1.date FROM battle AS T1 WHERE T1.name NOT IN (SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel')",
                "Rewriter": "",
                "Selector": "Table:battle\n[(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(name, name type:text. Value examples:[Battle of Adrianople, Battle of Serres, Battle of Rusion]),(date, date type:text. Value examples:[14 April 1205, June 1205, 31 January 1206]),]\nTable:ship\n[(lost_in_battle, lost in battle type:number. Value examples:[8, 7, 6]),(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(name, name type:text. Value examples:[Lettice, Bon Accord, Mary]),(tonnage, tonnage type:text. Value examples:[t, 391, 225]),(ship_type, ship type type:text. Value examples:[Brig, 18-gun Brig, 8 gun Brig]),(location, location type:text. Value examples:[English Channel, SW Approaches, Mid-Atlantic]),(disposition_of_ship, disposition of ship type:text. Value examples:[Captured, Wrecked, Scuttled]),]\nForeign keys:\nship.lost_in_battle = battle.id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "14 April 1205"
                        ],
                        [
                            "June 1205"
                        ],
                        [
                            "31 January 1206"
                        ]
                    ],
                    "sql": "SELECT T1.date FROM battle AS T1 WHERE T1.name NOT IN (SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel')",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the names of battles that had no ships lost in the 'English Channel'.\nSQL: ```sql SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel'```\nSubquestion 2: Find the dates of battles that had no ships lost in the 'English Channel'.\nSQL: ```sql SELECT T1.date FROM battle AS T1 WHERE T1.name NOT IN (SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel')```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What ship type was in those battles?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry, I cannot answer this.",
                "query": "",
                "predict": "The database schema does not contain information about ship types lost in battles.  You can only query for the number of ships lost in a battle. \n",
                "Rewriter": "",
                "Selector": "Table:battle\n[(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(name, name type:text. Value examples:[Battle of Adrianople, Battle of Serres, Battle of Rusion]),(date, date type:text. Value examples:[14 April 1205, June 1205, 31 January 1206]),(bulgarian_commander, bulgarian commander type:text. Value examples:[Kaloyan, Unknown, Boril]),(latin_commander, latin commander type:text. Value examples:[Baldwin I, Unknown, Thierry de Termond]),(result, result type:text. Value examples:[Bulgarian victory, Latin victory, Two Year Truce]),]\nTable:ship\n[(lost_in_battle, lost in battle type:number. Value examples:[8, 7, 6]),(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(ship_type, ship type type:text. Value examples:[Brig, 18-gun Brig, 8 gun Brig]),]\nForeign keys:\nship.lost_in_battle = battle.id\n",
                "Detector": "The database schema does not contain information about ship types lost in battles.  You can only query for the number of ships lost in a battle. \n",
                "Decomposer": "",
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Who were the latin commanders of those battles?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT  latin_commander  FROM battle where name not in (SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel')",
                "predict": "SELECT latin_commander FROM battle WHERE name IN (SELECT T1.name FROM battle AS T1 EXCEPT SELECT T2.name FROM battle AS T2 JOIN ship AS T3 ON T2.id = T3.lost_in_battle WHERE T3.location = 'English Channel')",
                "Rewriter": "",
                "Selector": "Table:battle\n[(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(name, name type:text. Value examples:[Battle of Adrianople, Battle of Serres, Battle of Rusion]),(date, date type:text. Value examples:[14 April 1205, June 1205, 31 January 1206]),(bulgarian_commander, bulgarian commander type:text. Value examples:[Kaloyan, Unknown, Boril]),(latin_commander, latin commander type:text. Value examples:[Baldwin I, Unknown, Thierry de Termond]),(result, result type:text. Value examples:[Bulgarian victory, Latin victory, Two Year Truce]),]\nTable:ship\n[(lost_in_battle, lost in battle type:number. Value examples:[8, 7, 6]),(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(name, name type:text. Value examples:[Lettice, Bon Accord, Mary]),(tonnage, tonnage type:text. Value examples:[t, 391, 225]),(ship_type, ship type type:text. Value examples:[Brig, 18-gun Brig, 8 gun Brig]),(location, location type:text. Value examples:[English Channel, SW Approaches, Mid-Atlantic]),(disposition_of_ship, disposition of ship type:text. Value examples:[Captured, Wrecked, Scuttled]),]\nForeign keys:\nship.lost_in_battle = battle.id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Baldwin I"
                        ],
                        [
                            "Unknown"
                        ],
                        [
                            "Thierry de Termond"
                        ]
                    ],
                    "sql": "SELECT latin_commander FROM battle WHERE name IN (SELECT T1.name FROM battle AS T1 EXCEPT SELECT T2.name FROM battle AS T2 JOIN ship AS T3 ON T2.id = T3.lost_in_battle WHERE T3.location = 'English Channel')",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the names of battles that had no ships lost in the 'English Channel'.\nSQL: ```sql SELECT T1.name FROM battle AS T1 EXCEPT SELECT T2.name FROM battle AS T2 JOIN ship AS T3 ON T2.id = T3.lost_in_battle WHERE T3.location = 'English Channel'```\nSubquestion 2: Find the Latin commanders of those battles.\nSQL: ```sql SELECT latin_commander FROM battle WHERE name IN (SELECT T1.name FROM battle AS T1 EXCEPT SELECT T2.name FROM battle AS T2 JOIN ship AS T3 ON T2.id = T3.lost_in_battle WHERE T3.location = 'English Channel')```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure! Bye!",
                "query": "",
                "predict": "You're welcome! Is there anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:battle\n[(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(name, name type:text. Value examples:[Battle of Adrianople, Battle of Serres, Battle of Rusion]),(date, date type:text. Value examples:[14 April 1205, June 1205, 31 January 1206]),(bulgarian_commander, bulgarian commander type:text. Value examples:[Kaloyan, Unknown, Boril]),(latin_commander, latin commander type:text. Value examples:[Baldwin I, Unknown, Thierry de Termond]),(result, result type:text. Value examples:[Bulgarian victory, Latin victory, Two Year Truce]),]\nTable:ship\n[(lost_in_battle, lost in battle type:number. Value examples:[8, 7, 6]),(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(name, name type:text. Value examples:[Lettice, Bon Accord, Mary]),(tonnage, tonnage type:text. Value examples:[t, 391, 225]),(ship_type, ship type type:text. Value examples:[Brig, 18-gun Brig, 8 gun Brig]),(location, location type:text. Value examples:[English Channel, SW Approaches, Mid-Atlantic]),(disposition_of_ship, disposition of ship type:text. Value examples:[Captured, Wrecked, Scuttled]),]\nForeign keys:\nship.lost_in_battle = battle.id\n",
                "Detector": "You're welcome! Is there anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 64
    },
    {
        "db_name": "employee_hire_evaluation",
        "turns": [
            {
                "isuser": true,
                "text": "The no. of stores?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean to ask for the number of shops in the database?",
                "query": "",
                "predict": "SELECT COUNT(DISTINCT Shop_ID) FROM shop",
                "Rewriter": "",
                "Selector": "Table:shop\n[(Shop_ID, shop id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[FC Haka, HJK, FC Honka]),(Location, location type:text. Value examples:[Valkeakoski, Helsinki, Espoo]),(District, district type:text. Value examples:[Tehtaan kentt\u00e4, Finnair Stadium, Tapiolan Urheilupuisto]),(Number_products, number products type:number. Value examples:[3516, 10770, 6000]),(Manager_name, manager name type:text. Value examples:[Olli Huttunen, Antti Muurinen, Mika Lehkosuo]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            9
                        ]
                    ],
                    "sql": "SELECT COUNT(DISTINCT Shop_ID) FROM shop",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Count the number of stores.\nSQL ```sql SELECT COUNT(DISTINCT Shop_ID) FROM shop```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT COUNT(*) FROM shop",
                "predict": "SELECT COUNT(Shop_ID) FROM shop",
                "Rewriter": "",
                "Selector": "Table:shop\n[(Shop_ID, shop id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[FC Haka, HJK, FC Honka]),(Location, location type:text. Value examples:[Valkeakoski, Helsinki, Espoo]),(District, district type:text. Value examples:[Tehtaan kentt\u00e4, Finnair Stadium, Tapiolan Urheilupuisto]),(Number_products, number products type:number. Value examples:[3516, 10770, 6000]),(Manager_name, manager name type:text. Value examples:[Olli Huttunen, Antti Muurinen, Mika Lehkosuo]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [],
                    "sql": "SELECT COUNT(T1.\u2018Shop_ID\u2018) FROM shop AS T1",
                    "executable": false,
                    "log": "no such column: T1.\u2018Shop_ID\u2018",
                    "process": "Subquestion 1: Count the number of shops in the database.\nSQL ```sql SELECT COUNT(T1.\u2018Shop_ID\u2018) FROM shop AS T1```\n\nQuestion Solved. \n"
                },
                "Refiner": {
                    "result": [
                        [
                            9
                        ]
                    ],
                    "sql": "SELECT COUNT(Shop_ID) FROM shop",
                    "executable": true,
                    "log": ""
                }
            },
            {
                "isuser": true,
                "text": "What is the most products that one shop has?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT MAX(Number_products) FROM shop",
                "predict": "SELECT MAX(Number_products) FROM shop",
                "Rewriter": "",
                "Selector": "Table:shop\n[(Shop_ID, shop id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[FC Haka, HJK, FC Honka]),(Location, location type:text. Value examples:[Valkeakoski, Helsinki, Espoo]),(District, district type:text. Value examples:[Tehtaan kentt\u00e4, Finnair Stadium, Tapiolan Urheilupuisto]),(Number_products, number products type:number. Value examples:[3516, 10770, 6000]),(Manager_name, manager name type:text. Value examples:[Olli Huttunen, Antti Muurinen, Mika Lehkosuo]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            15000
                        ]
                    ],
                    "sql": "SELECT MAX(Number_products) FROM shop",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the maximum number of products among all shops.\nSQL ```sql SELECT MAX(Number_products) FROM shop```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What about the minimum number or products that one shop has?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT MIN(Number_products) FROM shop",
                "predict": "SELECT MIN(Number_products) FROM shop",
                "Rewriter": "",
                "Selector": "Table:shop\n[(Shop_ID, shop id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[FC Haka, HJK, FC Honka]),(Location, location type:text. Value examples:[Valkeakoski, Helsinki, Espoo]),(District, district type:text. Value examples:[Tehtaan kentt\u00e4, Finnair Stadium, Tapiolan Urheilupuisto]),(Number_products, number products type:number. Value examples:[3516, 10770, 6000]),(Manager_name, manager name type:text. Value examples:[Olli Huttunen, Antti Muurinen, Mika Lehkosuo]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            1600
                        ]
                    ],
                    "sql": "SELECT MIN(Number_products) FROM shop",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What is the minimum number of products that one shop has?\nSQL ```sql SELECT MIN(Number_products) FROM shop```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Good bye!",
                "query": "",
                "predict": "You're welcome! \ud83d\ude0a \n",
                "Rewriter": "",
                "Selector": "Table:employee\n[(Employee_ID, employee id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[George Chuter, Lee Mears, Mark Regan]),(Age, age type:number. Value examples:[23, 29, 43]),(City, city type:text. Value examples:[Bristol, Bath, Wasps]),]\nTable:shop\n[(Shop_ID, shop id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[FC Haka, HJK, FC Honka]),(Location, location type:text. Value examples:[Valkeakoski, Helsinki, Espoo]),(District, district type:text. Value examples:[Tehtaan kentt\u00e4, Finnair Stadium, Tapiolan Urheilupuisto]),(Number_products, number products type:number. Value examples:[3516, 10770, 6000]),(Manager_name, manager name type:text. Value examples:[Olli Huttunen, Antti Muurinen, Mika Lehkosuo]),]\nTable:hiring\n[(Shop_ID, shop id type:number. Value examples:[1, 8, 4]),(Employee_ID, employee id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Start_from, start from type:text. Value examples:[2009, 2003, 2011]),(Is_full_time, is full time type:others. Value examples:[T, F]),]\nTable:evaluation\n[(Employee_ID, employee id type:text PRIMARY KEY. Value examples:[1, 10, 2]),(Year_awarded, year awarded type:text. Value examples:[2011, 2016, 2015]),(Bonus, bonus type:number. Value examples:[3000.0, 3200.0, 2900.0]),]\nForeign keys:\nhiring.Employee_ID = employee.Employee_ID\nhiring.Shop_ID = shop.Shop_ID\nevaluation.Employee_ID = employee.Employee_ID\n",
                "Detector": "You're welcome! \ud83d\ude0a \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 65
    },
    {
        "db_name": "dog_kennels",
        "turns": [
            {
                "isuser": true,
                "text": "which breed is the top ranked?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
                "predict": "The database schema does not contain information about dog rankings.  Therefore, I cannot answer your question. \n",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(breed_code, breed code type:text. Value examples:[ESK, BUL, HUS]),]\nForeign keys:\nDogs.breed_code = Breeds.breed_code\n",
                "Detector": "The database schema does not contain information about dog rankings.  Therefore, I cannot answer your question. \n",
                "Decomposer": "",
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "what is the total count for bulldog?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT count(*) FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code where T1.breed_name = \"Bulldog\"",
                "predict": "SELECT COUNT(T1.dog_id) FROM Dogs AS T1 INNER JOIN Breeds AS T2 ON T1.breed_code = T2.breed_code WHERE T2.breed_name = 'Bulldog'",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(breed_code, breed code type:text. Value examples:[ESK, BUL, HUS]),]\nForeign keys:\nDogs.breed_code = Breeds.breed_code\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            7
                        ]
                    ],
                    "sql": "SELECT COUNT(T1.dog_id) FROM Dogs AS T1 INNER JOIN Breeds AS T2 ON T1.breed_code = T2.breed_code WHERE T2.breed_name = 'Bulldog'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What is the total count for bulldog?\nSQL ```sql SELECT COUNT(T1.dog_id) FROM Dogs AS T1 INNER JOIN Breeds AS T2 ON T1.breed_code = T2.breed_code WHERE T2.breed_name = 'Bulldog'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "after bulldog, which breed has the next most dogs?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 2",
                "predict": "SELECT T1.breed_name FROM Breeds AS T1 INNER JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code WHERE T1.breed_name != 'Bulldog' GROUP BY T1.breed_name ORDER BY COUNT(T2.dog_id) DESC LIMIT 1",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(breed_code, breed code type:text. Value examples:[ESK, BUL, HUS]),]\nForeign keys:\nDogs.breed_code = Breeds.breed_code\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Husky"
                        ]
                    ],
                    "sql": "SELECT T1.breed_name FROM Breeds AS T1 INNER JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code WHERE T1.breed_name != 'Bulldog' GROUP BY T1.breed_name ORDER BY COUNT(T2.dog_id) DESC LIMIT 1",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the count of dogs for each breed.\nSQL: ```sql SELECT T1.breed_name, COUNT(T2.dog_id) AS dog_count FROM Breeds AS T1 INNER JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY dog_count DESC```\n\nSubquestion 2: Find the breed with the second highest count of dogs, excluding \"Bulldog\".\nSQL: ```sql SELECT T1.breed_name FROM Breeds AS T1 INNER JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code WHERE T1.breed_name != 'Bulldog' GROUP BY T1.breed_name ORDER BY COUNT(T2.dog_id) DESC LIMIT 1```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "are there any breeds with 0 dogs?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T1.breed_name except SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name",
                "predict": "SELECT T1.breed_name FROM Breeds AS T1 LEFT JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code WHERE T2.dog_id IS NULL",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(breed_code, breed code type:text. Value examples:[ESK, BUL, HUS]),]\nForeign keys:\nDogs.breed_code = Breeds.breed_code\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [],
                    "sql": "SELECT T1.breed_name FROM Breeds AS T1 LEFT JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code WHERE T2.dog_id IS NULL",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the breeds with 0 dogs.\nSQL ```sql SELECT T1.breed_name FROM Breeds AS T1 LEFT JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code WHERE T2.dog_id IS NULL```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "any with 1 dog?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name having count(*) == 1",
                "predict": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name HAVING COUNT(T2.dog_id) = 1",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(breed_code, breed code type:text. Value examples:[ESK, BUL, HUS]),]\nForeign keys:\nDogs.breed_code = Breeds.breed_code\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [],
                    "sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name HAVING COUNT(T2.dog_id) = 1",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the breeds with a count of 1 dog.\nSQL: ```sql\nSELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name HAVING COUNT(T2.dog_id) = 1\n```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "predict": "You're welcome! Is there anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(owner_id, owner id type:number. Value examples:[3, 11, 1]),(breed_code, breed code type:text. Value examples:[ESK, BUL, HUS]),]\nForeign keys:\nDogs.breed_code = Breeds.breed_code\n",
                "Detector": "You're welcome! Is there anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 66
    },
    {
        "db_name": "pets_1",
        "turns": [
            {
                "isuser": true,
                "text": "What are the names of all students who have cat pets?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' ",
                "predict": "SELECT T1.Fname, T1.Lname FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat'",
                "Rewriter": "",
                "Selector": "Table:Student\n[(StuID, student id type:number PRIMARY KEY. Value examples:[1001, 1002, 1003]),(LName, last name type:text. Value examples:[Smith, Kim, Jones]),(Fname, first name type:text. Value examples:[Linda, Tracy, Shiela]),(Major, major type:number. Value examples:[600, 520, 540]),(Advisor, advisor type:number. Value examples:[1121, 7712, 7792]),(city_code, city code type:text. Value examples:[BAL, HKG, WAS]),]\nTable:Has_Pet\n[(StuID, student id type:number. Value examples:[1001, 1002]),(PetID, pet id type:number. Value examples:[2001, 2002, 2003]),]\nTable:Pets\n[(PetID, pet id type:number PRIMARY KEY. Value examples:[2001, 2002, 2003]),(PetType, pet type type:text. Value examples:[cat, dog]),]\nForeign keys:\nHas_Pet.StuID = Student.StuID\nHas_Pet.PetID = Pets.PetID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Linda",
                            "Smith"
                        ]
                    ],
                    "sql": "SELECT T1.Fname, T1.Lname FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the student IDs of students who have cat pets.\nSQL: ```sql SELECT T1.StuID FROM Has_Pet AS T1 INNER JOIN Pets AS T2 ON T1.PetID = T2.PetID WHERE T2.PetType = 'cat'```\nSubquestion 2: Find the names of all students who have cat pets.\nSQL: ```sql SELECT T1.Fname, T1.Lname FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What are the first names of all students who have dog pets?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' ",
                "predict": "SELECT T1.Fname FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'dog'",
                "Rewriter": "",
                "Selector": "Table:Student\n[(StuID, student id type:number PRIMARY KEY. Value examples:[1001, 1002, 1003]),(LName, last name type:text. Value examples:[Smith, Kim, Jones]),(Fname, first name type:text. Value examples:[Linda, Tracy, Shiela]),(Age, age type:number. Value examples:[18, 19, 21]),(Sex, sex type:text. Value examples:[F, M]),(Major, major type:number. Value examples:[600, 520, 540]),(Advisor, advisor type:number. Value examples:[1121, 7712, 7792]),(city_code, city code type:text. Value examples:[BAL, HKG, WAS]),]\nTable:Has_Pet\n[(StuID, student id type:number. Value examples:[1001, 1002]),(PetID, pet id type:number. Value examples:[2001, 2002, 2003]),]\nTable:Pets\n[(PetID, pet id type:number PRIMARY KEY. Value examples:[2001, 2002, 2003]),(PetType, pet type type:text. Value examples:[cat, dog]),(pet_age, pet age type:number. Value examples:[3, 2, 1]),(weight, weight type:number. Value examples:[12.0, 13.4, 9.3]),]\nForeign keys:\nHas_Pet.StuID = Student.StuID\nHas_Pet.PetID = Pets.PetID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Tracy"
                        ],
                        [
                            "Tracy"
                        ]
                    ],
                    "sql": "SELECT T1.Fname FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'dog'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the student IDs of students who have dog pets.\nSQL: ```sql SELECT T1.StuID FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'dog'```\nSubquestion 2: Find the first names of students who have dog pets.\nSQL: ```sql SELECT T1.Fname FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'dog'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "How many students have any type of pet?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT count(T2.StuId) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid ",
                "predict": "SELECT COUNT(DISTINCT T1.StuID) FROM Has_Pet AS T1",
                "Rewriter": "",
                "Selector": "Table:Student\n[(StuID, student id type:number PRIMARY KEY. Value examples:[1001, 1002, 1003]),(LName, last name type:text. Value examples:[Smith, Kim, Jones]),(Fname, first name type:text. Value examples:[Linda, Tracy, Shiela]),(Age, age type:number. Value examples:[18, 19, 21]),(Sex, sex type:text. Value examples:[F, M]),(Major, major type:number. Value examples:[600, 520, 540]),(Advisor, advisor type:number. Value examples:[1121, 7712, 7792]),(city_code, city code type:text. Value examples:[BAL, HKG, WAS]),]\nTable:Has_Pet\n[(StuID, student id type:number. Value examples:[1001, 1002]),(PetID, pet id type:number. Value examples:[2001, 2002, 2003]),]\nTable:Pets\n[(PetID, pet id type:number PRIMARY KEY. Value examples:[2001, 2002, 2003]),(PetType, pet type type:text. Value examples:[cat, dog]),]\nForeign keys:\nHas_Pet.StuID = Student.StuID\nHas_Pet.PetID = Pets.PetID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            2
                        ]
                    ],
                    "sql": "SELECT COUNT(DISTINCT T1.StuID) FROM Has_Pet AS T1",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: How many students have any type of pet? \nSQL ```sql SELECT COUNT(DISTINCT T1.StuID) FROM Has_Pet AS T1```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Are there any students that have both a cat and a dog?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
                "predict": "SELECT CASE WHEN EXISTS ( SELECT T1.StuID FROM ( SELECT T1.StuID FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' ) AS T1 INTERSECT SELECT T1.StuID FROM ( SELECT T1.StuID FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'dog' ) AS T1 ) THEN 'Yes' ELSE 'No' END",
                "Rewriter": "",
                "Selector": "Table:Student\n[(StuID, student id type:number PRIMARY KEY. Value examples:[1001, 1002, 1003]),(LName, last name type:text. Value examples:[Smith, Kim, Jones]),(Fname, first name type:text. Value examples:[Linda, Tracy, Shiela]),(Age, age type:number. Value examples:[18, 19, 21]),(Sex, sex type:text. Value examples:[F, M]),(Major, major type:number. Value examples:[600, 520, 540]),(Advisor, advisor type:number. Value examples:[1121, 7712, 7792]),(city_code, city code type:text. Value examples:[BAL, HKG, WAS]),]\nTable:Has_Pet\n[(StuID, student id type:number. Value examples:[1001, 1002]),(PetID, pet id type:number. Value examples:[2001, 2002, 2003]),]\nTable:Pets\n[(PetID, pet id type:number PRIMARY KEY. Value examples:[2001, 2002, 2003]),(PetType, pet type type:text. Value examples:[cat, dog]),]\nForeign keys:\nHas_Pet.StuID = Student.StuID\nHas_Pet.PetID = Pets.PetID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "No"
                        ]
                    ],
                    "sql": "SELECT CASE WHEN EXISTS ( SELECT T1.StuID FROM ( SELECT T1.StuID FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' ) AS T1 INTERSECT SELECT T1.StuID FROM ( SELECT T1.StuID FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'dog' ) AS T1 ) THEN 'Yes' ELSE 'No' END",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the student IDs of students who have a cat.\nSQL: ```sql SELECT T1.StuID FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat'```\nSubquestion 2: Find the student IDs of students who have a dog.\nSQL: ```sql SELECT T1.StuID FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'dog'```\nSubquestion 3: Find the student IDs that are in both the results of subquestion 1 and subquestion 2.\nSQL: ```sql SELECT T1.StuID FROM ( SELECT T1.StuID FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' ) AS T1 INTERSECT SELECT T1.StuID FROM ( SELECT T1.StuID FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'dog' ) AS T1```\nSubquestion 4: Check if the result of subquestion 3 is empty.\nSQL: ```sql SELECT CASE WHEN EXISTS ( SELECT T1.StuID FROM ( SELECT T1.StuID FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' ) AS T1 INTERSECT SELECT T1.StuID FROM ( SELECT T1.StuID FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'dog' ) AS T1 ) THEN 'Yes' ELSE 'No' END```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What is the age of Linda's pet?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T3.pet_age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T1.Fname = \"Linda\"",
                "predict": "SELECT T3.pet_age FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Fname = 'Linda'",
                "Rewriter": "",
                "Selector": "Table:Student\n[(StuID, student id type:number PRIMARY KEY. Value examples:[1001, 1002, 1003]),(LName, last name type:text. Value examples:[Smith, Kim, Jones]),(Fname, first name type:text. Value examples:[Linda, Tracy, Shiela]),(Age, age type:number. Value examples:[18, 19, 21]),(Sex, sex type:text. Value examples:[F, M]),(Major, major type:number. Value examples:[600, 520, 540]),(Advisor, advisor type:number. Value examples:[1121, 7712, 7792]),(city_code, city code type:text. Value examples:[BAL, HKG, WAS]),]\nTable:Has_Pet\n[(StuID, student id type:number. Value examples:[1001, 1002]),(PetID, pet id type:number. Value examples:[2001, 2002, 2003]),]\nTable:Pets\n[(PetID, pet id type:number PRIMARY KEY. Value examples:[2001, 2002, 2003]),(PetType, pet type type:text. Value examples:[cat, dog]),(pet_age, pet age type:number. Value examples:[3, 2, 1]),(weight, weight type:number. Value examples:[12.0, 13.4, 9.3]),]\nForeign keys:\nHas_Pet.StuID = Student.StuID\nHas_Pet.PetID = Pets.PetID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            3
                        ]
                    ],
                    "sql": "SELECT T3.pet_age FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Fname = 'Linda'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the StuID of Linda.\nSQL: ```sql SELECT StuID FROM Student WHERE Fname = 'Linda'```\n\nSubquestion 2: Find the PetID of Linda's pet.\nSQL: ```sql SELECT T2.PetID FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T1.Fname = 'Linda'```\n\nSubquestion 3: Find the age of Linda's pet.\nSQL: ```sql SELECT T3.pet_age FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Fname = 'Linda'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye",
                "query": "",
                "predict": "You're welcome! Is there anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:Student\n[(StuID, student id type:number PRIMARY KEY. Value examples:[1001, 1002, 1003]),(LName, last name type:text. Value examples:[Smith, Kim, Jones]),(Fname, first name type:text. Value examples:[Linda, Tracy, Shiela]),(Age, age type:number. Value examples:[18, 19, 21]),(Sex, sex type:text. Value examples:[F, M]),(Major, major type:number. Value examples:[600, 520, 540]),(Advisor, advisor type:number. Value examples:[1121, 7712, 7792]),(city_code, city code type:text. Value examples:[BAL, HKG, WAS]),]\nTable:Has_Pet\n[(StuID, student id type:number. Value examples:[1001, 1002]),(PetID, pet id type:number. Value examples:[2001, 2002, 2003]),]\nTable:Pets\n[(PetID, pet id type:number PRIMARY KEY. Value examples:[2001, 2002, 2003]),(PetType, pet type type:text. Value examples:[cat, dog]),(pet_age, pet age type:number. Value examples:[3, 2, 1]),(weight, weight type:number. Value examples:[12.0, 13.4, 9.3]),]\nForeign keys:\nHas_Pet.StuID = Student.StuID\nHas_Pet.PetID = Pets.PetID\n",
                "Detector": "You're welcome! Is there anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 67
    },
    {
        "db_name": "student_transcripts_tracking",
        "turns": [
            {
                "isuser": true,
                "text": "The students enrolled in 2 degree programs in one semester?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "did you want to return their first, middle and last names?",
                "query": "",
                "predict": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.student_id IN (     SELECT student_id     FROM Student_Enrolment     GROUP BY student_id, semester_id     HAVING COUNT(DISTINCT degree_program_id) > 1 );",
                "Rewriter": "",
                "Selector": "Table:Courses\n[(course_id, course id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(course_name, course name type:text. Value examples:[ds, math, os]),(course_description, course description type:text. Value examples:[p, q, v]),(other_details, other details type:text. Value examples:[None]),]\nTable:Departments\n[(department_id, department id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(department_name, department name type:text. Value examples:[computer science, history, art]),(department_description, department description type:text. Value examples:[error, nostrum, aliquam]),(other_details, other details type:text. Value examples:[None]),]\nTable:Degree_Programs\n[(degree_program_id, degree program id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(department_id, department id type:number. Value examples:[13, 2, 8]),(degree_summary_name, degree summary name type:text. Value examples:[Master, Bachelor, PHD]),(degree_summary_description, degree summary description type:text. Value examples:[architecto, cumque, placeat]),(other_details, other details type:text. Value examples:[None]),]\nTable:Semesters\n[(semester_id, semester id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(semester_name, semester name type:text. Value examples:[spring 2010, summer 2010, fall 2010]),(semester_description, semester description type:text. Value examples:[x, g, w]),(other_details, other details type:text. Value examples:[None]),]\nTable:Students\n[(student_id, student id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(current_address_id, current address id type:number. Value examples:[10, 12, 9]),(permanent_address_id, permanent address id type:number. Value examples:[15, 5, 11]),(first_name, first name type:text. Value examples:[Timmothy, Hobart, Warren]),(middle_name, middle name type:text. Value examples:[Anna, Lorenz, Violet]),(last_name, last name type:text. Value examples:[Ward, Balistreri, Gleichner]),(cell_mobile_number, cell mobile number type:text. Value examples:[(096)889-8954x524, 1-009-710-5151, 07661787471]),(email_address, email address type:text. Value examples:[erwin.zboncak@example.com, swift.kolby@example.com, johns.unique@example.net]),(ssn, ssn type:text. Value examples:[965, 304246, 3]),(date_first_registered, date first registered type:time. Value examples:[1971-02-05 07:28:23, 1976-10-26 02:33:06, 2007-08-29 23:25:41]),(date_left, date left type:time. Value examples:[1971-05-17 19:28:49, 2013-10-05 17:41:28, 2007-03-31 09:53:19]),(other_student_details, other student details type:text. Value examples:[quia, autem, facilis]),]\nTable:Student_Enrolment\n[(student_enrolment_id, student enrolment id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(degree_program_id, degree program id type:number. Value examples:[12, 4, 10]),(semester_id, semester id type:number. Value examples:[13, 2, 15]),(student_id, student id type:number. Value examples:[14, 9, 7]),]\nForeign keys:\nDegree_Programs.department_id = Departments.department_id\nStudent_Enrolment.student_id = Students.student_id\nStudent_Enrolment.semester_id = Semesters.semester_id\nStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Frida",
                            "Aisha",
                            "Huel"
                        ],
                        [
                            "Frida",
                            "Aisha",
                            "Huel"
                        ],
                        [
                            "Frida",
                            "Aisha",
                            "Huel"
                        ]
                    ],
                    "sql": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.student_id IN (     SELECT student_id     FROM Student_Enrolment     GROUP BY student_id, semester_id     HAVING COUNT(DISTINCT degree_program_id) > 1 );",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the student IDs who are enrolled in more than one degree program in a single semester.\nSQL: ```sql\nSELECT student_id\nFROM Student_Enrolment\nGROUP BY student_id, semester_id\nHAVING COUNT(DISTINCT degree_program_id) > 1;\n```\n\nSubquestion 2: Get the student names of the students identified in the previous subquestion.\nSQL: ```sql\nSELECT T1.first_name, T1.middle_name, T1.last_name\nFROM Students AS T1\nINNER JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id\nWHERE T1.student_id IN (\n    SELECT student_id\n    FROM Student_Enrolment\n    GROUP BY student_id, semester_id\n    HAVING COUNT(DISTINCT degree_program_id) > 1\n);\n```\n\n**Final SQL:**\n```sql\nSELECT T1.first_name, T1.middle_name, T1.last_name\nFROM Students AS T1\nINNER JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id\nWHERE T1.student_id IN (\n    SELECT student_id\n    FROM Student_Enrolment\n    GROUP BY student_id, semester_id\n    HAVING COUNT(DISTINCT degree_program_id) > 1\n);\n``` \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
                "predict": "SELECT   T1.first_name,   T1.middle_name,   T1.last_name FROM Students AS T1 INNER JOIN (   SELECT     T1.student_id   FROM Student_Enrolment AS T1   INNER JOIN Degree_Programs AS T2     ON T1.degree_program_id = T2.degree_program_id   GROUP BY     T1.student_id,     T1.semester_id   HAVING     COUNT(DISTINCT T1.degree_program_id) = 2 ) AS T2   ON T1.student_id = T2.student_id;",
                "Rewriter": "",
                "Selector": "Table:Courses\n[(course_id, course id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(course_name, course name type:text. Value examples:[ds, math, os]),(course_description, course description type:text. Value examples:[p, q, v]),(other_details, other details type:text. Value examples:[None]),]\nTable:Departments\n[(department_id, department id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(department_name, department name type:text. Value examples:[computer science, history, art]),(department_description, department description type:text. Value examples:[error, nostrum, aliquam]),(other_details, other details type:text. Value examples:[None]),]\nTable:Degree_Programs\n[(degree_program_id, degree program id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(department_id, department id type:number. Value examples:[13, 2, 8]),(degree_summary_name, degree summary name type:text. Value examples:[Master, Bachelor, PHD]),(degree_summary_description, degree summary description type:text. Value examples:[architecto, cumque, placeat]),(other_details, other details type:text. Value examples:[None]),]\nTable:Semesters\n[(semester_id, semester id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(semester_name, semester name type:text. Value examples:[spring 2010, summer 2010, fall 2010]),(semester_description, semester description type:text. Value examples:[x, g, w]),(other_details, other details type:text. Value examples:[None]),]\nTable:Students\n[(student_id, student id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(current_address_id, current address id type:number. Value examples:[10, 12, 9]),(permanent_address_id, permanent address id type:number. Value examples:[15, 5, 11]),(first_name, first name type:text. Value examples:[Timmothy, Hobart, Warren]),(middle_name, middle name type:text. Value examples:[Anna, Lorenz, Violet]),(last_name, last name type:text. Value examples:[Ward, Balistreri, Gleichner]),(cell_mobile_number, cell mobile number type:text. Value examples:[(096)889-8954x524, 1-009-710-5151, 07661787471]),(email_address, email address type:text. Value examples:[erwin.zboncak@example.com, swift.kolby@example.com, johns.unique@example.net]),(ssn, ssn type:text. Value examples:[965, 304246, 3]),(date_first_registered, date first registered type:time. Value examples:[1971-02-05 07:28:23, 1976-10-26 02:33:06, 2007-08-29 23:25:41]),]\nTable:Student_Enrolment\n[(student_enrolment_id, student enrolment id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(degree_program_id, degree program id type:number. Value examples:[12, 4, 10]),(semester_id, semester id type:number. Value examples:[13, 2, 15]),(student_id, student id type:number. Value examples:[14, 9, 7]),]\nTable:Student_Enrolment_Courses\n[(student_course_id, student course id type:number PRIMARY KEY. Value examples:[0, 1, 2]),(course_id, course id type:number. Value examples:[6, 14, 11]),(student_enrolment_id, student enrolment id type:number. Value examples:[2, 8, 5]),]\nForeign keys:\nDegree_Programs.department_id = Departments.department_id\nStudent_Enrolment.student_id = Students.student_id\nStudent_Enrolment.semester_id = Semesters.semester_id\nStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\nStudent_Enrolment_Courses.course_id = Courses.course_id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Frida",
                            "Aisha",
                            "Huel"
                        ]
                    ],
                    "sql": "SELECT   T1.first_name,   T1.middle_name,   T1.last_name FROM Students AS T1 INNER JOIN (   SELECT     T1.student_id   FROM Student_Enrolment AS T1   INNER JOIN Degree_Programs AS T2     ON T1.degree_program_id = T2.degree_program_id   GROUP BY     T1.student_id,     T1.semester_id   HAVING     COUNT(DISTINCT T1.degree_program_id) = 2 ) AS T2   ON T1.student_id = T2.student_id;",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the student IDs of students enrolled in 2 degree programs in one semester.\nSQL: ```sql\nSELECT T1.student_id\nFROM Student_Enrolment AS T1\nINNER JOIN Degree_Programs AS T2\n  ON T1.degree_program_id = T2.degree_program_id\nGROUP BY\n  T1.student_id,\n  T1.semester_id\nHAVING\n  COUNT(DISTINCT T1.degree_program_id) = 2;\n```\n\nSubquestion 2: Get the first, middle, and last names of the students from the previous subquestion.\nSQL: ```sql\nSELECT\n  T1.first_name,\n  T1.middle_name,\n  T1.last_name\nFROM Students AS T1\nINNER JOIN (\n  SELECT\n    T1.student_id\n  FROM Student_Enrolment AS T1\n  INNER JOIN Degree_Programs AS T2\n    ON T1.degree_program_id = T2.degree_program_id\n  GROUP BY\n    T1.student_id,\n    T1.semester_id\n  HAVING\n    COUNT(DISTINCT T1.degree_program_id) = 2\n) AS T2\n  ON T1.student_id = T2.student_id;\n```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "what are their student_id?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
                "predict": "SELECT T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(DISTINCT T2.degree_program_id) = 2",
                "Rewriter": "",
                "Selector": "Table:Courses\n[(course_id, course id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(course_name, course name type:text. Value examples:[ds, math, os]),(course_description, course description type:text. Value examples:[p, q, v]),(other_details, other details type:text. Value examples:[None]),]\nTable:Degree_Programs\n[(degree_program_id, degree program id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(department_id, department id type:number. Value examples:[13, 2, 8]),(degree_summary_name, degree summary name type:text. Value examples:[Master, Bachelor, PHD]),(degree_summary_description, degree summary description type:text. Value examples:[architecto, cumque, placeat]),(other_details, other details type:text. Value examples:[None]),]\nTable:Semesters\n[(semester_id, semester id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(semester_name, semester name type:text. Value examples:[spring 2010, summer 2010, fall 2010]),(semester_description, semester description type:text. Value examples:[x, g, w]),(other_details, other details type:text. Value examples:[None]),]\nTable:Students\n[(student_id, student id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(current_address_id, current address id type:number. Value examples:[10, 12, 9]),(permanent_address_id, permanent address id type:number. Value examples:[15, 5, 11]),(first_name, first name type:text. Value examples:[Timmothy, Hobart, Warren]),(middle_name, middle name type:text. Value examples:[Anna, Lorenz, Violet]),(last_name, last name type:text. Value examples:[Ward, Balistreri, Gleichner]),(cell_mobile_number, cell mobile number type:text. Value examples:[(096)889-8954x524, 1-009-710-5151, 07661787471]),(email_address, email address type:text. Value examples:[erwin.zboncak@example.com, swift.kolby@example.com, johns.unique@example.net]),(ssn, ssn type:text. Value examples:[965, 304246, 3]),(date_first_registered, date first registered type:time. Value examples:[1971-02-05 07:28:23, 1976-10-26 02:33:06, 2007-08-29 23:25:41]),]\nTable:Student_Enrolment\n[(student_enrolment_id, student enrolment id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(degree_program_id, degree program id type:number. Value examples:[12, 4, 10]),(semester_id, semester id type:number. Value examples:[13, 2, 15]),(student_id, student id type:number. Value examples:[14, 9, 7]),]\nTable:Student_Enrolment_Courses\n[(student_course_id, student course id type:number PRIMARY KEY. Value examples:[0, 1, 2]),(course_id, course id type:number. Value examples:[6, 14, 11]),(student_enrolment_id, student enrolment id type:number. Value examples:[2, 8, 5]),]\nForeign keys:\nStudent_Enrolment.student_id = Students.student_id\nStudent_Enrolment.semester_id = Semesters.semester_id\nStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\nStudent_Enrolment_Courses.course_id = Courses.course_id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            4
                        ],
                        [
                            6
                        ],
                        [
                            14
                        ]
                    ],
                    "sql": "SELECT T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(DISTINCT T2.degree_program_id) = 2",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the student IDs of students enrolled in 2 degree programs in one semester.\nSQL: ```sql\nSELECT T1.student_id\nFROM Students AS T1\nJOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id\nGROUP BY T1.student_id\nHAVING COUNT(DISTINCT T2.degree_program_id) = 2\n```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "what is student_id 4 email address",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT email_address FROM Students where student_id = 4",
                "predict": "SELECT T1.email_address FROM Students AS T1 WHERE T1.student_id = 4",
                "Rewriter": "",
                "Selector": "Table:Courses\n[(course_id, course id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(course_name, course name type:text. Value examples:[ds, math, os]),(course_description, course description type:text. Value examples:[p, q, v]),(other_details, other details type:text. Value examples:[None]),]\nTable:Degree_Programs\n[(degree_program_id, degree program id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(department_id, department id type:number. Value examples:[13, 2, 8]),(degree_summary_name, degree summary name type:text. Value examples:[Master, Bachelor, PHD]),(degree_summary_description, degree summary description type:text. Value examples:[architecto, cumque, placeat]),(other_details, other details type:text. Value examples:[None]),]\nTable:Semesters\n[(semester_id, semester id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(semester_name, semester name type:text. Value examples:[spring 2010, summer 2010, fall 2010]),(semester_description, semester description type:text. Value examples:[x, g, w]),(other_details, other details type:text. Value examples:[None]),]\nTable:Students\n[(student_id, student id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(current_address_id, current address id type:number. Value examples:[10, 12, 9]),(permanent_address_id, permanent address id type:number. Value examples:[15, 5, 11]),(first_name, first name type:text. Value examples:[Timmothy, Hobart, Warren]),(middle_name, middle name type:text. Value examples:[Anna, Lorenz, Violet]),(last_name, last name type:text. Value examples:[Ward, Balistreri, Gleichner]),(cell_mobile_number, cell mobile number type:text. Value examples:[(096)889-8954x524, 1-009-710-5151, 07661787471]),(email_address, email address type:text. Value examples:[erwin.zboncak@example.com, swift.kolby@example.com, johns.unique@example.net]),(ssn, ssn type:text. Value examples:[965, 304246, 3]),(date_first_registered, date first registered type:time. Value examples:[1971-02-05 07:28:23, 1976-10-26 02:33:06, 2007-08-29 23:25:41]),(date_left, date left type:time. Value examples:[1971-05-17 19:28:49, 2013-10-05 17:41:28, 2007-03-31 09:53:19]),]\nTable:Student_Enrolment\n[(student_enrolment_id, student enrolment id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(degree_program_id, degree program id type:number. Value examples:[12, 4, 10]),(semester_id, semester id type:number. Value examples:[13, 2, 15]),(student_id, student id type:number. Value examples:[14, 9, 7]),(other_details, other details type:text. Value examples:[None]),]\nTable:Student_Enrolment_Courses\n[(student_course_id, student course id type:number PRIMARY KEY. Value examples:[0, 1, 2]),(course_id, course id type:number. Value examples:[6, 14, 11]),(student_enrolment_id, student enrolment id type:number. Value examples:[2, 8, 5]),]\nForeign keys:\nStudent_Enrolment.student_id = Students.student_id\nStudent_Enrolment.semester_id = Semesters.semester_id\nStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\nStudent_Enrolment_Courses.course_id = Courses.course_id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "jillian26@example.net"
                        ]
                    ],
                    "sql": "SELECT T1.email_address FROM Students AS T1 WHERE T1.student_id = 4",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What is student_id 4 email address? \nSQL ```sql SELECT T1.email_address FROM Students AS T1 WHERE T1.student_id = 4```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "what is Timothy Anna Ward's date first registered?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT date_first_registered FROM Students where first_name = 'Timmothy' and middle_name = 'Anna' and last_name = 'Ward'",
                "predict": "SELECT date_first_registered FROM Students WHERE student_id = (SELECT student_id FROM Students WHERE first_name = 'Timothy' AND middle_name = 'Anna' AND last_name = 'Ward')",
                "Rewriter": "",
                "Selector": "Table:Courses\n[(course_id, course id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(course_name, course name type:text. Value examples:[ds, math, os]),(course_description, course description type:text. Value examples:[p, q, v]),(other_details, other details type:text. Value examples:[None]),]\nTable:Degree_Programs\n[(degree_program_id, degree program id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(department_id, department id type:number. Value examples:[13, 2, 8]),(degree_summary_name, degree summary name type:text. Value examples:[Master, Bachelor, PHD]),(degree_summary_description, degree summary description type:text. Value examples:[architecto, cumque, placeat]),(other_details, other details type:text. Value examples:[None]),]\nTable:Semesters\n[(semester_id, semester id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(semester_name, semester name type:text. Value examples:[spring 2010, summer 2010, fall 2010]),(semester_description, semester description type:text. Value examples:[x, g, w]),(other_details, other details type:text. Value examples:[None]),]\nTable:Students\n[(student_id, student id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(first_name, first name type:text. Value examples:[Timmothy, Hobart, Warren]),(middle_name, middle name type:text. Value examples:[Anna, Lorenz, Violet]),(last_name, last name type:text. Value examples:[Ward, Balistreri, Gleichner]),(cell_mobile_number, cell mobile number type:text. Value examples:[(096)889-8954x524, 1-009-710-5151, 07661787471]),(email_address, email address type:text. Value examples:[erwin.zboncak@example.com, swift.kolby@example.com, johns.unique@example.net]),(ssn, ssn type:text. Value examples:[965, 304246, 3]),(date_first_registered, date first registered type:time. Value examples:[1971-02-05 07:28:23, 1976-10-26 02:33:06, 2007-08-29 23:25:41]),(date_left, date left type:time. Value examples:[1971-05-17 19:28:49, 2013-10-05 17:41:28, 2007-03-31 09:53:19]),(other_student_details, other student details type:text. Value examples:[quia, autem, facilis]),]\nTable:Student_Enrolment\n[(student_enrolment_id, student enrolment id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(degree_program_id, degree program id type:number. Value examples:[12, 4, 10]),(semester_id, semester id type:number. Value examples:[13, 2, 15]),(student_id, student id type:number. Value examples:[14, 9, 7]),(other_details, other details type:text. Value examples:[None]),]\nTable:Student_Enrolment_Courses\n[(student_course_id, student course id type:number PRIMARY KEY. Value examples:[0, 1, 2]),(course_id, course id type:number. Value examples:[6, 14, 11]),(student_enrolment_id, student enrolment id type:number. Value examples:[2, 8, 5]),]\nForeign keys:\nStudent_Enrolment.student_id = Students.student_id\nStudent_Enrolment.semester_id = Semesters.semester_id\nStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\nStudent_Enrolment_Courses.course_id = Courses.course_id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [],
                    "sql": "SELECT date_first_registered FROM Students WHERE student_id = (SELECT student_id FROM Students WHERE first_name = 'Timothy' AND middle_name = 'Anna' AND last_name = 'Ward')",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the student_id of Timothy Anna Ward.\nSQL: ```sql SELECT student_id FROM Students WHERE first_name = 'Timothy' AND middle_name = 'Anna' AND last_name = 'Ward'```\n\nSubquestion 2: Get the date first registered for the student_id found in the previous step.\nSQL: ```sql SELECT date_first_registered FROM Students WHERE student_id = (SELECT student_id FROM Students WHERE first_name = 'Timothy' AND middle_name = 'Anna' AND last_name = 'Ward')```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye.",
                "query": "",
                "predict": "You're welcome! Is there anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:Addresses\n[(address_id, address id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(line_1, line 1 type:text. Value examples:[2294 Grant Square Apt. 235, 3999 Aufderhar Ways Suite 593, 67942 Carlotta Ferry Apt. 686]),(line_2, line 2 type:text. Value examples:[Apt. 370, Apt. 388, Apt. 583]),(line_3, line 3 type:text. Value examples:[None]),(city, city type:text. Value examples:[Port Chelsea, Lake Laishafurt, Goodwinhaven]),(zip_postcode, zip postcode type:text. Value examples:[148, 943, 541]),(state_province_county, state province county type:text. Value examples:[Virginia, Kentucky, Kansas]),(country, country type:text. Value examples:[Iceland, Burundi, Saudi Arabia]),(other_address_details, other address details type:text. Value examples:[None]),]\nTable:Courses\n[(course_id, course id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(course_name, course name type:text. Value examples:[ds, math, os]),(course_description, course description type:text. Value examples:[p, q, v]),(other_details, other details type:text. Value examples:[None]),]\nTable:Departments\n[(department_id, department id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(department_name, department name type:text. Value examples:[computer science, history, art]),(department_description, department description type:text. Value examples:[error, nostrum, aliquam]),(other_details, other details type:text. Value examples:[None]),]\nTable:Degree_Programs\n[(degree_program_id, degree program id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(department_id, department id type:number. Value examples:[13, 2, 8]),(degree_summary_name, degree summary name type:text. Value examples:[Master, Bachelor, PHD]),(degree_summary_description, degree summary description type:text. Value examples:[architecto, cumque, placeat]),(other_details, other details type:text. Value examples:[None]),]\nTable:Sections\n[(section_id, section id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(course_id, course id type:number. Value examples:[9, 2, 8]),(section_name, section name type:text. Value examples:[a, b, c]),(section_description, section description type:text. Value examples:[non, voluptatem, qui]),(other_details, other details type:text. Value examples:[None]),]\nTable:Semesters\n[(semester_id, semester id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(semester_name, semester name type:text. Value examples:[spring 2010, summer 2010, fall 2010]),(semester_description, semester description type:text. Value examples:[x, g, w]),(other_details, other details type:text. Value examples:[None]),]\nTable:Students\n[(student_id, student id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(current_address_id, current address id type:number. Value examples:[10, 12, 9]),(permanent_address_id, permanent address id type:number. Value examples:[15, 5, 11]),(first_name, first name type:text. Value examples:[Timmothy, Hobart, Warren]),(middle_name, middle name type:text. Value examples:[Anna, Lorenz, Violet]),(last_name, last name type:text. Value examples:[Ward, Balistreri, Gleichner]),(email_address, email address type:text. Value examples:[erwin.zboncak@example.com, swift.kolby@example.com, johns.unique@example.net]),(date_first_registered, date first registered type:time. Value examples:[1971-02-05 07:28:23, 1976-10-26 02:33:06, 2007-08-29 23:25:41]),(date_left, date left type:time. Value examples:[1971-05-17 19:28:49, 2013-10-05 17:41:28, 2007-03-31 09:53:19]),]\nTable:Student_Enrolment\n[(student_enrolment_id, student enrolment id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(degree_program_id, degree program id type:number. Value examples:[12, 4, 10]),(semester_id, semester id type:number. Value examples:[13, 2, 15]),(student_id, student id type:number. Value examples:[14, 9, 7]),]\nTable:Student_Enrolment_Courses\n[(student_course_id, student course id type:number PRIMARY KEY. Value examples:[0, 1, 2]),(course_id, course id type:number. Value examples:[6, 14, 11]),(student_enrolment_id, student enrolment id type:number. Value examples:[2, 8, 5]),]\nForeign keys:\nDegree_Programs.department_id = Departments.department_id\nSections.course_id = Courses.course_id\nStudents.permanent_address_id = Addresses.address_id\nStudents.current_address_id = Addresses.address_id\nStudent_Enrolment.student_id = Students.student_id\nStudent_Enrolment.semester_id = Semesters.semester_id\nStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id\nStudent_Enrolment_Courses.course_id = Courses.course_id\n",
                "Detector": "You're welcome! Is there anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 68
    },
    {
        "db_name": "orchestra",
        "turns": [
            {
                "isuser": true,
                "text": "How many record companies are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT count(Record_Company) FROM orchestra ",
                "predict": "SELECT COUNT(DISTINCT Record_Company) FROM orchestra",
                "Rewriter": "",
                "Selector": "Table:orchestra\n[(Orchestra_ID, orchestra id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Orchestra, orchestra type:text. Value examples:[London Symphony Orchestra, Columbia Symphony Orchestra, Royal Concertgebouw Orchestra]),(Conductor_ID, conductor id type:number. Value examples:[1, 2, 3]),(Record_Company, record company type:text. Value examples:[Mercury Records, Columbia Masterworks, Philips]),(Year_of_Founded, year of founded type:number. Value examples:[2003.0, 2009.0, 2008.0]),(Major_Record_Format, major record format type:text. Value examples:[CD, CD / LP, DVD]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            11
                        ]
                    ],
                    "sql": "SELECT COUNT(DISTINCT Record_Company) FROM orchestra",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: How many distinct record companies are there?\nSQL ```sql SELECT COUNT(DISTINCT Record_Company) FROM orchestra```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "How many orchestras are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT count(Orchestra_ID) FROM orchestra ",
                "predict": "SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra",
                "Rewriter": "",
                "Selector": "Table:orchestra\n[(Orchestra_ID, orchestra id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Orchestra, orchestra type:text. Value examples:[London Symphony Orchestra, Columbia Symphony Orchestra, Royal Concertgebouw Orchestra]),(Conductor_ID, conductor id type:number. Value examples:[1, 2, 3]),(Record_Company, record company type:text. Value examples:[Mercury Records, Columbia Masterworks, Philips]),(Year_of_Founded, year of founded type:number. Value examples:[2003.0, 2009.0, 2008.0]),(Major_Record_Format, major record format type:text. Value examples:[CD, CD / LP, DVD]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            12
                        ]
                    ],
                    "sql": "SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: How many orchestras are there?\nSQL ```sql SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Do any conductors work for more than one orchestra?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "select count(Orchestra) from orchestra group by Conductor_ID having count(orchestra)>1",
                "predict": "SELECT T1.Conductor_ID FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID HAVING COUNT(DISTINCT T2.Orchestra_ID) > 1",
                "Rewriter": "",
                "Selector": "Table:conductor\n[(Conductor_ID, conductor id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[Antal Dor\u00e1ti, Igor Stravinsky, Colin Davis]),(Nationality, nationality type:text. Value examples:[USA, UK, France]),(Year_of_Work, year of work type:number. Value examples:[10, 11, 6]),]\nTable:orchestra\n[(Orchestra_ID, orchestra id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Orchestra, orchestra type:text. Value examples:[London Symphony Orchestra, Columbia Symphony Orchestra, Royal Concertgebouw Orchestra]),(Conductor_ID, conductor id type:number. Value examples:[1, 2, 3]),(Record_Company, record company type:text. Value examples:[Mercury Records, Columbia Masterworks, Philips]),(Year_of_Founded, year of founded type:number. Value examples:[2003.0, 2009.0, 2008.0]),(Major_Record_Format, major record format type:text. Value examples:[CD, CD / LP, DVD]),]\nTable:performance\n[(Performance_ID, performance id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Orchestra_ID, orchestra id type:number. Value examples:[1, 2, 3]),(Type, type type:text. Value examples:[Auditions 1, Auditions 2, Auditions 3]),(Date, date type:text. Value examples:[9 June, 10 June, 11 June]),(Official_ratings_(millions), official ratings (millions) type:number. Value examples:[]),(Weekly_rank, weekly rank type:text. Value examples:[12, 8, 15]),(Share, share type:text. Value examples:[22.7%, 28.0%, 29.4%]),]\nTable:show\n[(Show_ID, show id type:number. Value examples:[1, 2, 3]),(Performance_ID, performance id type:number. Value examples:[1, 2, 3]),(If_first_show, if first show type:others. Value examples:[Glebe Park, Fir Park, St. Mirren Park]),(Result, result type:text. Value examples:[T, F]),(Attendance, attendance type:number. Value examples:[1026.0, 695.0, 555.0]),]\nForeign keys:\norchestra.Conductor_ID = conductor.Conductor_ID\nperformance.Orchestra_ID = orchestra.Orchestra_ID\nshow.Performance_ID = performance.Performance_ID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [],
                    "sql": "SELECT T1.Conductor_ID FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID HAVING COUNT(DISTINCT T2.Orchestra_ID) > 1",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the conductors who work for more than one orchestra.\nSQL ```sql SELECT T1.Conductor_ID FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID HAVING COUNT(DISTINCT T2.Orchestra_ID) > 1```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Can you list the orchestras by the date?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean listing the names of the orchestras by the date they were founded starting with the oldest?",
                "query": "",
                "predict": "The database schema does not contain information about the date of the orchestra's founding.  Therefore, I cannot list the orchestras by date. \n",
                "Rewriter": "",
                "Selector": "Table:orchestra\n[(Orchestra_ID, orchestra id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Orchestra, orchestra type:text. Value examples:[London Symphony Orchestra, Columbia Symphony Orchestra, Royal Concertgebouw Orchestra]),(Conductor_ID, conductor id type:number. Value examples:[1, 2, 3]),(Record_Company, record company type:text. Value examples:[Mercury Records, Columbia Masterworks, Philips]),(Year_of_Founded, year of founded type:number. Value examples:[2003.0, 2009.0, 2008.0]),(Major_Record_Format, major record format type:text. Value examples:[CD, CD / LP, DVD]),]\nTable:performance\n[(Performance_ID, performance id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Orchestra_ID, orchestra id type:number. Value examples:[1, 2, 3]),(Date, date type:text. Value examples:[9 June, 10 June, 11 June]),(Official_ratings_(millions), official ratings (millions) type:number. Value examples:[]),(Weekly_rank, weekly rank type:text. Value examples:[12, 8, 15]),(Share, share type:text. Value examples:[22.7%, 28.0%, 29.4%]),]\nTable:show\n[(Show_ID, show id type:number. Value examples:[1, 2, 3]),(Performance_ID, performance id type:number. Value examples:[1, 2, 3]),(If_first_show, if first show type:others. Value examples:[Glebe Park, Fir Park, St. Mirren Park]),(Result, result type:text. Value examples:[T, F]),(Attendance, attendance type:number. Value examples:[1026.0, 695.0, 555.0]),]\nForeign keys:\nperformance.Orchestra_ID = orchestra.Orchestra_ID\nshow.Performance_ID = performance.Performance_ID\n",
                "Detector": "The database schema does not contain information about the date of the orchestra's founding.  Therefore, I cannot list the orchestras by date. \n",
                "Decomposer": "",
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "yes.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "select orchestra from orchestra order by Year_of_Founded",
                "predict": "SELECT Orchestra FROM orchestra ORDER BY Year_of_Founded ASC",
                "Rewriter": "",
                "Selector": "Table:conductor\n[(Conductor_ID, conductor id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[Antal Dor\u00e1ti, Igor Stravinsky, Colin Davis]),(Age, age type:number. Value examples:[40, 41, 42]),(Nationality, nationality type:text. Value examples:[USA, UK, France]),(Year_of_Work, year of work type:number. Value examples:[10, 11, 6]),]\nTable:orchestra\n[(Orchestra_ID, orchestra id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Orchestra, orchestra type:text. Value examples:[London Symphony Orchestra, Columbia Symphony Orchestra, Royal Concertgebouw Orchestra]),(Conductor_ID, conductor id type:number. Value examples:[1, 2, 3]),(Record_Company, record company type:text. Value examples:[Mercury Records, Columbia Masterworks, Philips]),(Year_of_Founded, year of founded type:number. Value examples:[2003.0, 2009.0, 2008.0]),(Major_Record_Format, major record format type:text. Value examples:[CD, CD / LP, DVD]),]\nTable:performance\n[(Performance_ID, performance id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Orchestra_ID, orchestra id type:number. Value examples:[1, 2, 3]),(Date, date type:text. Value examples:[9 June, 10 June, 11 June]),]\nForeign keys:\norchestra.Conductor_ID = conductor.Conductor_ID\nperformance.Orchestra_ID = orchestra.Orchestra_ID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Royal Danish Orchestra"
                        ],
                        [
                            "Detroit Symphony Orchestra"
                        ],
                        [
                            "Seattle Symphony Orchestra"
                        ],
                        [
                            "London Symphony Orchestra"
                        ],
                        [
                            "Chicago Symphony Orchestra"
                        ],
                        [
                            "Montreal Symphony Orchestra"
                        ],
                        [
                            "Philharmonia Orchestra"
                        ],
                        [
                            "Orchestre de Paris"
                        ],
                        [
                            "Royal Concertgebouw Orchestra"
                        ],
                        [
                            "Kirov Orchestra"
                        ]
                    ],
                    "sql": "SELECT Orchestra FROM orchestra ORDER BY Year_of_Founded ASC",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: List the orchestras by the date they were founded starting with the oldest.\nSQL ```sql SELECT Orchestra FROM orchestra ORDER BY Year_of_Founded ASC```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What year was the Royal Danish Orchestra founded?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "select year_of_founded  from orchestra where orchestra='Royal Danish Orchestra'",
                "predict": "The database does not contain information about the Royal Danish Orchestra. \n",
                "Rewriter": "",
                "Selector": "Table:orchestra\n[(Orchestra_ID, orchestra id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Orchestra, orchestra type:text. Value examples:[London Symphony Orchestra, Columbia Symphony Orchestra, Royal Concertgebouw Orchestra]),(Conductor_ID, conductor id type:number. Value examples:[1, 2, 3]),(Record_Company, record company type:text. Value examples:[Mercury Records, Columbia Masterworks, Philips]),(Year_of_Founded, year of founded type:number. Value examples:[2003.0, 2009.0, 2008.0]),(Major_Record_Format, major record format type:text. Value examples:[CD, CD / LP, DVD]),]\nForeign keys:\n",
                "Detector": "The database does not contain information about the Royal Danish Orchestra. \n",
                "Decomposer": "",
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What record company is shared by the most orchestras?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
                "predict": "SELECT Record_Company FROM (     SELECT Record_Company, COUNT(Orchestra_ID) AS orchestra_count     FROM orchestra     GROUP BY Record_Company ) ORDER BY orchestra_count DESC LIMIT 1",
                "Rewriter": "",
                "Selector": "Table:orchestra\n[(Orchestra_ID, orchestra id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Orchestra, orchestra type:text. Value examples:[London Symphony Orchestra, Columbia Symphony Orchestra, Royal Concertgebouw Orchestra]),(Conductor_ID, conductor id type:number. Value examples:[1, 2, 3]),(Record_Company, record company type:text. Value examples:[Mercury Records, Columbia Masterworks, Philips]),(Year_of_Founded, year of founded type:number. Value examples:[2003.0, 2009.0, 2008.0]),(Major_Record_Format, major record format type:text. Value examples:[CD, CD / LP, DVD]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Decca Records"
                        ]
                    ],
                    "sql": "SELECT Record_Company FROM (     SELECT Record_Company, COUNT(Orchestra_ID) AS orchestra_count     FROM orchestra     GROUP BY Record_Company ) ORDER BY orchestra_count DESC LIMIT 1",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Count the number of orchestras for each record company.\nSQL: ```sql\nSELECT Record_Company, COUNT(Orchestra_ID) AS orchestra_count\nFROM orchestra\nGROUP BY Record_Company\n```\n\nSubquestion 2: Find the record company with the maximum count of orchestras.\nSQL: ```sql\nSELECT Record_Company\nFROM (\n    SELECT Record_Company, COUNT(Orchestra_ID) AS orchestra_count\n    FROM orchestra\n    GROUP BY Record_Company\n)\nORDER BY orchestra_count DESC\nLIMIT 1\n```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Goodbye.",
                "query": "",
                "predict": "You're welcome! Is there anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:conductor\n[(Conductor_ID, conductor id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[Antal Dor\u00e1ti, Igor Stravinsky, Colin Davis]),(Age, age type:number. Value examples:[40, 41, 42]),(Nationality, nationality type:text. Value examples:[USA, UK, France]),(Year_of_Work, year of work type:number. Value examples:[10, 11, 6]),]\nTable:orchestra\n[(Orchestra_ID, orchestra id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Orchestra, orchestra type:text. Value examples:[London Symphony Orchestra, Columbia Symphony Orchestra, Royal Concertgebouw Orchestra]),(Conductor_ID, conductor id type:number. Value examples:[1, 2, 3]),(Record_Company, record company type:text. Value examples:[Mercury Records, Columbia Masterworks, Philips]),]\nTable:performance\n[(Performance_ID, performance id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Orchestra_ID, orchestra id type:number. Value examples:[1, 2, 3]),(Type, type type:text. Value examples:[Auditions 1, Auditions 2, Auditions 3]),(Date, date type:text. Value examples:[9 June, 10 June, 11 June]),(Official_ratings_(millions), official ratings (millions) type:number. Value examples:[]),(Weekly_rank, weekly rank type:text. Value examples:[12, 8, 15]),(Share, share type:text. Value examples:[22.7%, 28.0%, 29.4%]),]\nTable:show\n[(Show_ID, show id type:number. Value examples:[1, 2, 3]),(Performance_ID, performance id type:number. Value examples:[1, 2, 3]),(If_first_show, if first show type:others. Value examples:[Glebe Park, Fir Park, St. Mirren Park]),(Result, result type:text. Value examples:[T, F]),(Attendance, attendance type:number. Value examples:[1026.0, 695.0, 555.0]),]\nForeign keys:\norchestra.Conductor_ID = conductor.Conductor_ID\nperformance.Orchestra_ID = orchestra.Orchestra_ID\nshow.Performance_ID = performance.Performance_ID\n",
                "Detector": "You're welcome! Is there anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 69
    },
    {
        "db_name": "flight_2",
        "turns": [
            {
                "isuser": true,
                "text": "How many 'United Airlines' flights go to the Airport 'ASY'?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
                "predict": "SELECT COUNT(DISTINCT FlightNo) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND DestAirport = 'ASY'",
                "Rewriter": "",
                "Selector": "Table:airlines\n[(uid, airline id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Airline, airline name type:text. Value examples:[United Airlines, US Airways, Delta Airlines]),(Abbreviation, abbreviation type:text. Value examples:[UAL, USAir, Delta]),]\nTable:airports\n[(City, city type:text. Value examples:[Aberdeen , Abilene , Abingdon ]),(AirportCode, airport code type:text PRIMARY KEY. Value examples:[AAF, ABI, ABL]),(AirportName, airport name type:text. Value examples:[Phillips AAF , Municipal , Dyess AFB ]),(Country, country type:text. Value examples:[United States ]),(CountryAbbrev, country abbrev type:text. Value examples:[US , US]),]\nTable:flights\n[(Airline, airline type:number PRIMARY KEY. Value examples:[1, 2, 3]),(FlightNo, flight number type:number. Value examples:[28, 29, 44]),(SourceAirport, source airport type:text. Value examples:[ APG,  ASY,  CVO]),(DestAirport, destination airport type:text. Value examples:[ ASY,  APG,  ACV]),]\nForeign keys:\nflights.DestAirport = airports.AirportCode\nflights.SourceAirport = airports.AirportCode\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            0
                        ]
                    ],
                    "sql": "SELECT COUNT(DISTINCT FlightNo) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND DestAirport = 'ASY'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the airline ID for 'United Airlines'.\nSQL: ```sql SELECT uid FROM airlines WHERE Airline = 'United Airlines'```\n\nSubquestion 2: Count the number of flights from the airline ID found in Subquestion 1 that go to 'ASY'.\nSQL: ```sql SELECT COUNT(DISTINCT FlightNo) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND DestAirport = 'ASY'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What is the airline ID of United Airlines?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "select uid from airlines where airline = \"United Airlines\"",
                "predict": "SELECT uid FROM airlines WHERE Airline = 'United Airlines'",
                "Rewriter": "",
                "Selector": "Table:airlines\n[(uid, airline id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Airline, airline name type:text. Value examples:[United Airlines, US Airways, Delta Airlines]),(Abbreviation, abbreviation type:text. Value examples:[UAL, USAir, Delta]),(Country, country type:text. Value examples:[USA]),]\nTable:airports\n[(City, city type:text. Value examples:[Aberdeen , Abilene , Abingdon ]),(AirportCode, airport code type:text PRIMARY KEY. Value examples:[AAF, ABI, ABL]),(AirportName, airport name type:text. Value examples:[Phillips AAF , Municipal , Dyess AFB ]),(Country, country type:text. Value examples:[United States ]),(CountryAbbrev, country abbrev type:text. Value examples:[US , US]),]\nTable:flights\n[(Airline, airline type:number PRIMARY KEY. Value examples:[1, 2, 3]),(FlightNo, flight number type:number. Value examples:[28, 29, 44]),(SourceAirport, source airport type:text. Value examples:[ APG,  ASY,  CVO]),(DestAirport, destination airport type:text. Value examples:[ ASY,  APG,  ACV]),]\nForeign keys:\nflights.DestAirport = airports.AirportCode\nflights.SourceAirport = airports.AirportCode\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            1
                        ]
                    ],
                    "sql": "SELECT uid FROM airlines WHERE Airline = 'United Airlines'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What is the airline ID of United Airlines?\nSQL ```sql SELECT uid FROM airlines WHERE Airline = 'United Airlines'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "How many airlines with airline id 1 go to the destination airport ASY?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT count(*) FROM FLIGHTS WHERE airline = 1 and DestAirport  =  \" ASY\"",
                "predict": "SELECT COUNT(DISTINCT T1.Airline) FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T1.DestAirport = 'ASY' AND T2.uid = 1",
                "Rewriter": "",
                "Selector": "Table:airlines\n[(uid, airline id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Airline, airline name type:text. Value examples:[United Airlines, US Airways, Delta Airlines]),(Abbreviation, abbreviation type:text. Value examples:[UAL, USAir, Delta]),(Country, country type:text. Value examples:[USA]),]\nTable:airports\n[(City, city type:text. Value examples:[Aberdeen , Abilene , Abingdon ]),(AirportCode, airport code type:text PRIMARY KEY. Value examples:[AAF, ABI, ABL]),(AirportName, airport name type:text. Value examples:[Phillips AAF , Municipal , Dyess AFB ]),(Country, country type:text. Value examples:[United States ]),(CountryAbbrev, country abbrev type:text. Value examples:[US , US]),]\nTable:flights\n[(Airline, airline type:number PRIMARY KEY. Value examples:[1, 2, 3]),(FlightNo, flight number type:number. Value examples:[28, 29, 44]),(SourceAirport, source airport type:text. Value examples:[ APG,  ASY,  CVO]),(DestAirport, destination airport type:text. Value examples:[ ASY,  APG,  ACV]),]\nForeign keys:\nflights.DestAirport = airports.AirportCode\nflights.SourceAirport = airports.AirportCode\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            0
                        ]
                    ],
                    "sql": "SELECT COUNT(DISTINCT T1.Airline) FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T1.DestAirport = 'ASY' AND T2.uid = 1",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: How many airlines with airline id 1 go to the destination airport ASY? \nSQL ```sql SELECT COUNT(DISTINCT T1.Airline) FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T1.DestAirport = 'ASY' AND T2.uid = 1```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "thank. bye.",
                "query": "",
                "predict": "You're welcome! Is there anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:airlines\n[(uid, airline id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Airline, airline name type:text. Value examples:[United Airlines, US Airways, Delta Airlines]),(Abbreviation, abbreviation type:text. Value examples:[UAL, USAir, Delta]),(Country, country type:text. Value examples:[USA]),]\nTable:airports\n[(City, city type:text. Value examples:[Aberdeen , Abilene , Abingdon ]),(AirportCode, airport code type:text PRIMARY KEY. Value examples:[AAF, ABI, ABL]),(AirportName, airport name type:text. Value examples:[Phillips AAF , Municipal , Dyess AFB ]),(Country, country type:text. Value examples:[United States ]),(CountryAbbrev, country abbrev type:text. Value examples:[US , US]),]\nTable:flights\n[(Airline, airline type:number PRIMARY KEY. Value examples:[1, 2, 3]),(FlightNo, flight number type:number. Value examples:[28, 29, 44]),(SourceAirport, source airport type:text. Value examples:[ APG,  ASY,  CVO]),(DestAirport, destination airport type:text. Value examples:[ ASY,  APG,  ACV]),]\nForeign keys:\nflights.DestAirport = airports.AirportCode\nflights.SourceAirport = airports.AirportCode\n",
                "Detector": "You're welcome! Is there anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 70
    },
    {
        "db_name": "car_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many Volvo cars are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT count(*) FROM CAR_names where model = \"volvo\"",
                "predict": "The database does not contain information about Volvo cars.  The database only contains information about the car makers listed in the car_makers table. \n",
                "Rewriter": "",
                "Selector": "Table:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nTable:car_makers\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:text. Value examples:[amc, volkswagen, bmw]),(FullName, full name type:text. Value examples:[American Motor Company, Volkswagen, BMW]),(Country, country type:text. Value examples:[1, 2, 3]),]\nTable:model_list\n[(ModelId, model id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:number. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[amc, audi, bmw]),]\nTable:car_names\n[(MakeId, make id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[chevrolet, buick, plymouth]),(Make, make type:text. Value examples:[chevrolet chevelle malibu, buick skylark 320, plymouth satellite]),]\nTable:cars_data\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(MPG, mpg type:text. Value examples:[18, 15, 16]),(Cylinders, cylinders type:number. Value examples:[8, 4, 6]),(Edispl, edispl type:number. Value examples:[307.0, 350.0, 318.0]),(Horsepower, horsepower type:text. Value examples:[130, 165, 150]),(Weight, weight type:number. Value examples:[3504, 3693, 3436]),(Accelerate, accelerate type:number. Value examples:[12.0, 11.5, 11.0]),(Year, year type:number. Value examples:[1970, 1971, 1972]),]\nForeign keys:\ncar_makers.Country = countries.CountryId\nmodel_list.Maker = car_makers.Id\ncar_names.Model = model_list.Model\ncars_data.Id = car_names.MakeId\n",
                "Detector": "The database does not contain information about Volvo cars.  The database only contains information about the car makers listed in the car_makers table. \n",
                "Decomposer": "",
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Which of them has the least accelerate?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you want its car id?",
                "query": "",
                "predict": "SELECT MIN(Accelerate) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'volvo')",
                "Rewriter": "",
                "Selector": "Table:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nTable:car_makers\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:text. Value examples:[amc, volkswagen, bmw]),(FullName, full name type:text. Value examples:[American Motor Company, Volkswagen, BMW]),(Country, country type:text. Value examples:[1, 2, 3]),]\nTable:model_list\n[(ModelId, model id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:number. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[amc, audi, bmw]),]\nTable:car_names\n[(MakeId, make id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[chevrolet, buick, plymouth]),(Make, make type:text. Value examples:[chevrolet chevelle malibu, buick skylark 320, plymouth satellite]),]\nTable:cars_data\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(MPG, mpg type:text. Value examples:[18, 15, 16]),(Cylinders, cylinders type:number. Value examples:[8, 4, 6]),(Edispl, edispl type:number. Value examples:[307.0, 350.0, 318.0]),(Horsepower, horsepower type:text. Value examples:[130, 165, 150]),(Weight, weight type:number. Value examples:[3504, 3693, 3436]),(Accelerate, accelerate type:number. Value examples:[12.0, 11.5, 11.0]),(Year, year type:number. Value examples:[1970, 1971, 1972]),]\nForeign keys:\ncar_makers.Country = countries.CountryId\nmodel_list.Maker = car_makers.Id\ncar_names.Model = model_list.Model\ncars_data.Id = car_names.MakeId\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            13.6
                        ]
                    ],
                    "sql": "SELECT MIN(Accelerate) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'volvo')",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the MakeId of Volvo cars.\nSQL: ```sql SELECT MakeId FROM car_names WHERE Model = 'volvo'```\n\nSubquestion 2: Find the accelerate value of the Volvo car with the least accelerate.\nSQL: ```sql SELECT MIN(Accelerate) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'volvo')```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T1.id FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
                "predict": "SELECT T1.Id FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.Accelerate ASC LIMIT 1",
                "Rewriter": "",
                "Selector": "Table:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nTable:car_makers\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:text. Value examples:[amc, volkswagen, bmw]),(FullName, full name type:text. Value examples:[American Motor Company, Volkswagen, BMW]),(Country, country type:text. Value examples:[1, 2, 3]),]\nTable:model_list\n[(ModelId, model id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:number. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[amc, audi, bmw]),]\nTable:car_names\n[(MakeId, make id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[chevrolet, buick, plymouth]),(Make, make type:text. Value examples:[chevrolet chevelle malibu, buick skylark 320, plymouth satellite]),]\nTable:cars_data\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(MPG, mpg type:text. Value examples:[18, 15, 16]),(Cylinders, cylinders type:number. Value examples:[8, 4, 6]),(Edispl, edispl type:number. Value examples:[307.0, 350.0, 318.0]),(Horsepower, horsepower type:text. Value examples:[130, 165, 150]),(Weight, weight type:number. Value examples:[3504, 3693, 3436]),(Accelerate, accelerate type:number. Value examples:[12.0, 11.5, 11.0]),(Year, year type:number. Value examples:[1970, 1971, 1972]),]\nForeign keys:\ncar_makers.Country = countries.CountryId\nmodel_list.Maker = car_makers.Id\ncar_names.Model = model_list.Model\ncars_data.Id = car_names.MakeId\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            283
                        ]
                    ],
                    "sql": "SELECT T1.Id FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.Accelerate ASC LIMIT 1",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the car id of the Volvo car with the least accelerate.\nSQL ```sql SELECT T1.Id FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.Accelerate ASC LIMIT 1```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "How many cylinders does that car have?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
                "predict": "SELECT T1.Cylinders FROM CARS_DATA AS T1 INNER JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.Accelerate ASC LIMIT 1",
                "Rewriter": "",
                "Selector": "Table:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nTable:car_makers\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:text. Value examples:[amc, volkswagen, bmw]),(FullName, full name type:text. Value examples:[American Motor Company, Volkswagen, BMW]),(Country, country type:text. Value examples:[1, 2, 3]),]\nTable:model_list\n[(ModelId, model id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:number. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[amc, audi, bmw]),]\nTable:car_names\n[(MakeId, make id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[chevrolet, buick, plymouth]),(Make, make type:text. Value examples:[chevrolet chevelle malibu, buick skylark 320, plymouth satellite]),]\nTable:cars_data\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(MPG, mpg type:text. Value examples:[18, 15, 16]),(Cylinders, cylinders type:number. Value examples:[8, 4, 6]),(Edispl, edispl type:number. Value examples:[307.0, 350.0, 318.0]),(Horsepower, horsepower type:text. Value examples:[130, 165, 150]),(Weight, weight type:number. Value examples:[3504, 3693, 3436]),(Accelerate, accelerate type:number. Value examples:[12.0, 11.5, 11.0]),(Year, year type:number. Value examples:[1970, 1971, 1972]),]\nForeign keys:\ncar_makers.Country = countries.CountryId\nmodel_list.Maker = car_makers.Id\ncar_names.Model = model_list.Model\ncars_data.Id = car_names.MakeId\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            6
                        ]
                    ],
                    "sql": "SELECT T1.Cylinders FROM CARS_DATA AS T1 INNER JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.Accelerate ASC LIMIT 1",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the car id of the Volvo car with the least accelerate.\nSQL: ```sql SELECT T1.Id FROM CARS_DATA AS T1 INNER JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.Accelerate ASC LIMIT 1```\nSubquestion 2: Find the number of cylinders of the car with the least accelerate.\nSQL: ```sql SELECT T1.Cylinders FROM CARS_DATA AS T1 INNER JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.Accelerate ASC LIMIT 1```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "predict": "You're welcome!  Let me know if you have any other questions. \n",
                "Rewriter": "",
                "Selector": "Table:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nTable:car_makers\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:text. Value examples:[amc, volkswagen, bmw]),(FullName, full name type:text. Value examples:[American Motor Company, Volkswagen, BMW]),(Country, country type:text. Value examples:[1, 2, 3]),]\nTable:model_list\n[(ModelId, model id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:number. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[amc, audi, bmw]),]\nTable:car_names\n[(MakeId, make id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[chevrolet, buick, plymouth]),(Make, make type:text. Value examples:[chevrolet chevelle malibu, buick skylark 320, plymouth satellite]),]\nTable:cars_data\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(MPG, mpg type:text. Value examples:[18, 15, 16]),(Cylinders, cylinders type:number. Value examples:[8, 4, 6]),(Edispl, edispl type:number. Value examples:[307.0, 350.0, 318.0]),(Horsepower, horsepower type:text. Value examples:[130, 165, 150]),(Weight, weight type:number. Value examples:[3504, 3693, 3436]),(Accelerate, accelerate type:number. Value examples:[12.0, 11.5, 11.0]),(Year, year type:number. Value examples:[1970, 1971, 1972]),]\nForeign keys:\ncar_makers.Country = countries.CountryId\nmodel_list.Maker = car_makers.Id\ncar_names.Model = model_list.Model\ncars_data.Id = car_names.MakeId\n",
                "Detector": "You're welcome!  Let me know if you have any other questions. \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 71
    },
    {
        "db_name": "network_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many students are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT count(*) FROM Highschooler ",
                "predict": "SELECT COUNT(DISTINCT ID) FROM Highschooler",
                "Rewriter": "",
                "Selector": "Table:Highschooler\n[(ID, id type:number PRIMARY KEY. Value examples:[1025, 1101, 1247]),(name, name type:text. Value examples:[Jordan, Gabriel, Tiffany]),(grade, grade type:number. Value examples:[9, 10, 11]),]\nTable:Friend\n[(student_id, student id type:number PRIMARY KEY. Value examples:[1101, 1247, 1304]),(friend_id, friend id type:number. Value examples:[1381, 1689, 1709]),]\nTable:Likes\n[(student_id, student id type:number PRIMARY KEY. Value examples:[1025, 1247, 1316]),(liked_id, liked id type:number. Value examples:[1709, 1689, 1247]),]\nForeign keys:\nFriend.friend_id = Highschooler.ID\nFriend.student_id = Highschooler.ID\nLikes.student_id = Highschooler.ID\nLikes.liked_id = Highschooler.ID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            16
                        ]
                    ],
                    "sql": "SELECT COUNT(DISTINCT ID) FROM Highschooler",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: How many students are there?\nSQL ```sql SELECT COUNT(DISTINCT ID) FROM Highschooler```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What about friends?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT count(*) FROM Friend",
                "predict": "The question is ambiguous. Do you want to know how many friends there are in the database, or how many friends each student has? Please clarify your question. \n",
                "Rewriter": "",
                "Selector": "Table:Highschooler\n[(ID, id type:number PRIMARY KEY. Value examples:[1025, 1101, 1247]),(name, name type:text. Value examples:[Jordan, Gabriel, Tiffany]),(grade, grade type:number. Value examples:[9, 10, 11]),]\nTable:Friend\n[(student_id, student id type:number PRIMARY KEY. Value examples:[1101, 1247, 1304]),(friend_id, friend id type:number. Value examples:[1381, 1689, 1709]),]\nForeign keys:\nFriend.friend_id = Highschooler.ID\nFriend.student_id = Highschooler.ID\n",
                "Detector": "The question is ambiguous. Do you want to know how many friends there are in the database, or how many friends each student has? Please clarify your question. \n",
                "Decomposer": "",
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What are the names of all the highschoolers who have friends ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
                "predict": "SELECT T1.name FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T1.ID = T2.student_id",
                "Rewriter": "",
                "Selector": "Table:Highschooler\n[(ID, id type:number PRIMARY KEY. Value examples:[1025, 1101, 1247]),(name, name type:text. Value examples:[Jordan, Gabriel, Tiffany]),]\nTable:Friend\n[(student_id, student id type:number PRIMARY KEY. Value examples:[1101, 1247, 1304]),(friend_id, friend id type:number. Value examples:[1381, 1689, 1709]),]\nForeign keys:\nFriend.friend_id = Highschooler.ID\nFriend.student_id = Highschooler.ID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Jordan"
                        ],
                        [
                            "Jordan"
                        ],
                        [
                            "Gabriel"
                        ],
                        [
                            "Tiffany"
                        ],
                        [
                            "Cassandra"
                        ],
                        [
                            "Gabriel"
                        ],
                        [
                            "Andrew"
                        ],
                        [
                            "Andrew"
                        ],
                        [
                            "Andrew"
                        ],
                        [
                            "Kris"
                        ]
                    ],
                    "sql": "SELECT T1.name FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T1.ID = T2.student_id",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the IDs of all highschoolers who have friends.\nSQL: ```sql SELECT DISTINCT student_id FROM Friend```\nSubquestion 2: Find the names of all highschoolers who have friends.\nSQL: ```sql SELECT T1.name FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T1.ID = T2.student_id```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Can you show me their corresponding friends\n as well?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
                "predict": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id",
                "Rewriter": "",
                "Selector": "Table:Highschooler\n[(ID, id type:number PRIMARY KEY. Value examples:[1025, 1101, 1247]),(name, name type:text. Value examples:[Jordan, Gabriel, Tiffany]),(grade, grade type:number. Value examples:[9, 10, 11]),]\nTable:Friend\n[(student_id, student id type:number PRIMARY KEY. Value examples:[1101, 1247, 1304]),(friend_id, friend id type:number. Value examples:[1381, 1689, 1709]),]\nForeign keys:\nFriend.friend_id = Highschooler.ID\nFriend.student_id = Highschooler.ID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Tiffany"
                        ],
                        [
                            "Gabriel"
                        ],
                        [
                            "Cassandra"
                        ],
                        [
                            "Alexis"
                        ],
                        [
                            "Alexis"
                        ],
                        [
                            "Andrew"
                        ],
                        [
                            "Kris"
                        ],
                        [
                            "Austin"
                        ],
                        [
                            "Jordan"
                        ],
                        [
                            "Haley"
                        ]
                    ],
                    "sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What are the names of all the highschoolers who have friends?\nSQL ```sql SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id```\nSubquestion 2: What are the names of their corresponding friends?\nSQL ```sql SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "predict": "You're welcome! Is there anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:Highschooler\n[(ID, id type:number PRIMARY KEY. Value examples:[1025, 1101, 1247]),(name, name type:text. Value examples:[Jordan, Gabriel, Tiffany]),(grade, grade type:number. Value examples:[9, 10, 11]),]\nTable:Friend\n[(student_id, student id type:number PRIMARY KEY. Value examples:[1101, 1247, 1304]),(friend_id, friend id type:number. Value examples:[1381, 1689, 1709]),]\nTable:Likes\n[(student_id, student id type:number PRIMARY KEY. Value examples:[1025, 1247, 1316]),(liked_id, liked id type:number. Value examples:[1709, 1689, 1247]),]\nForeign keys:\nFriend.friend_id = Highschooler.ID\nFriend.student_id = Highschooler.ID\nLikes.student_id = Highschooler.ID\nLikes.liked_id = Highschooler.ID\n",
                "Detector": "You're welcome! Is there anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 72
    },
    {
        "db_name": "car_1",
        "turns": [
            {
                "isuser": true,
                "text": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
                "predict": "SELECT T1.Model FROM model_list AS T1 INNER JOIN car_names AS T2 ON T1.Model = T2.Model INNER JOIN cars_data AS T3 ON T2.Make = T3.Id ORDER BY CAST(T3.MPG AS REAL) DESC LIMIT 1",
                "Rewriter": "",
                "Selector": "Table:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nTable:car_makers\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:text. Value examples:[amc, volkswagen, bmw]),(FullName, full name type:text. Value examples:[American Motor Company, Volkswagen, BMW]),(Country, country type:text. Value examples:[1, 2, 3]),]\nTable:model_list\n[(Maker, maker type:number. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[amc, audi, bmw]),]\nTable:car_names\n[(Model, model type:text. Value examples:[chevrolet, buick, plymouth]),(Make, make type:text. Value examples:[chevrolet chevelle malibu, buick skylark 320, plymouth satellite]),]\nTable:cars_data\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(MPG, mpg type:text. Value examples:[18, 15, 16]),]\nForeign keys:\ncar_makers.Country = countries.CountryId\nmodel_list.Maker = car_makers.Id\ncar_names.Model = model_list.Model\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [],
                    "sql": "SELECT T1.Model FROM model_list AS T1 INNER JOIN car_names AS T2 ON T1.Model = T2.Model INNER JOIN cars_data AS T3 ON T2.Make = T3.Id ORDER BY CAST(T3.MPG AS REAL) DESC LIMIT 1",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the model with the maximum miles per gallon (MPG).\nSQL ```sql SELECT T1.Model FROM model_list AS T1 INNER JOIN car_names AS T2 ON T1.Model = T2.Model INNER JOIN cars_data AS T3 ON T2.Make = T3.Id ORDER BY CAST(T3.MPG AS REAL) DESC LIMIT 1```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Which model has the highest horsepower?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower DESC LIMIT 1;",
                "predict": "SELECT T1.Model FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id ORDER BY T2.Horsepower DESC LIMIT 1",
                "Rewriter": "",
                "Selector": "Table:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nTable:car_makers\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(FullName, full name type:text. Value examples:[American Motor Company, Volkswagen, BMW]),(Country, country type:text. Value examples:[1, 2, 3]),]\nTable:model_list\n[(ModelId, model id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:number. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[amc, audi, bmw]),]\nTable:car_names\n[(MakeId, make id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[chevrolet, buick, plymouth]),(Make, make type:text. Value examples:[chevrolet chevelle malibu, buick skylark 320, plymouth satellite]),]\nTable:cars_data\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(MPG, mpg type:text. Value examples:[18, 15, 16]),(Cylinders, cylinders type:number. Value examples:[8, 4, 6]),(Edispl, edispl type:number. Value examples:[307.0, 350.0, 318.0]),(Horsepower, horsepower type:text. Value examples:[130, 165, 150]),(Weight, weight type:number. Value examples:[3504, 3693, 3436]),(Accelerate, accelerate type:number. Value examples:[12.0, 11.5, 11.0]),(Year, year type:number. Value examples:[1970, 1971, 1972]),]\nForeign keys:\ncar_makers.Country = countries.CountryId\nmodel_list.Maker = car_makers.Id\ncar_names.Model = model_list.Model\ncars_data.Id = car_names.MakeId\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "ford"
                        ]
                    ],
                    "sql": "SELECT T1.Model FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id ORDER BY T2.Horsepower DESC LIMIT 1",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the model with the highest horsepower.\nSQL ```sql SELECT T1.Model FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id ORDER BY T2.Horsepower DESC LIMIT 1```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            }
        ],
        "id": 73
    },
    {
        "db_name": "wta_1",
        "turns": [
            {
                "isuser": true,
                "text": "how many players are presented on the table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT count(*) FROM players ",
                "predict": "SELECT COUNT(DISTINCT player_id) FROM players",
                "Rewriter": "",
                "Selector": "Table:players\n[(player_id, player id type:number PRIMARY KEY. Value examples:[200001, 200002, 200003]),(first_name, first name type:text. Value examples:[Martina, Mirjana, Justine]),(last_name, last name type:text. Value examples:[Hingis, Lucic, Henin]),(hand, hand type:text. Value examples:[R, L, U]),(birth_date, birth date type:time. Value examples:[19800930, 19820309, 19820601]),(country_code, country code type:text. Value examples:[SUI, CRO, BEL]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            20662
                        ]
                    ],
                    "sql": "SELECT COUNT(DISTINCT player_id) FROM players",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: How many players are presented on the table?\nSQL ```sql SELECT COUNT(DISTINCT player_id) FROM players```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "list out the players first name",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT first_name FROM players ",
                "predict": "SELECT first_name FROM players",
                "Rewriter": "",
                "Selector": "Table:players\n[(player_id, player id type:number PRIMARY KEY. Value examples:[200001, 200002, 200003]),(first_name, first name type:text. Value examples:[Martina, Mirjana, Justine]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [],
                    "sql": "SELECT first_name FROM players",
                    "executable": false,
                    "log": "Could not decode to UTF-8 column 'first_name' with text 'Selin G\ufffd\ufffdLseren'",
                    "process": "Subquestion 1: List out the players first name\nSQL ```sql SELECT first_name FROM players```\n\nQuestion Solved. \n========== \n"
                },
                "Refiner": {
                    "result": [],
                    "sql": "SELECT first_name FROM players",
                    "executable": false,
                    "log": "Could not decode to UTF-8 column 'first_name' with text 'Selin G\ufffd\ufffdLseren'"
                }
            },
            {
                "isuser": true,
                "text": "what is the country code of Mirjana",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT country_code FROM players  where first_name = \"Mirjana\"",
                "predict": "SELECT country_code FROM players WHERE first_name = 'Mirjana'",
                "Rewriter": "",
                "Selector": "Table:players\n[(player_id, player id type:number PRIMARY KEY. Value examples:[200001, 200002, 200003]),(first_name, first name type:text. Value examples:[Martina, Mirjana, Justine]),(last_name, last name type:text. Value examples:[Hingis, Lucic, Henin]),(country_code, country code type:text. Value examples:[SUI, CRO, BEL]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "CRO"
                        ]
                    ],
                    "sql": "SELECT country_code FROM players WHERE first_name = 'Mirjana'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the player_id of Mirjana.\nSQL: ```sql SELECT player_id FROM players WHERE first_name = 'Mirjana'```\nSubquestion 2: What is the country code of Mirjana?\nSQL: ```sql SELECT country_code FROM players WHERE first_name = 'Mirjana'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "what is the birth date of Justine",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT birth_date FROM players  where first_name = \"Mirjana\"",
                "predict": "SELECT birth_date FROM players WHERE first_name = 'Justine'",
                "Rewriter": "",
                "Selector": "Table:players\n[(player_id, player id type:number PRIMARY KEY. Value examples:[200001, 200002, 200003]),(first_name, first name type:text. Value examples:[Martina, Mirjana, Justine]),(last_name, last name type:text. Value examples:[Hingis, Lucic, Henin]),(hand, hand type:text. Value examples:[R, L, U]),(birth_date, birth date type:time. Value examples:[19800930, 19820309, 19820601]),(country_code, country code type:text. Value examples:[SUI, CRO, BEL]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            19820601
                        ],
                        [
                            19720310
                        ],
                        [
                            19680411
                        ],
                        [
                            19880131
                        ],
                        [
                            19840131
                        ],
                        [
                            19880816
                        ],
                        [
                            19880809
                        ],
                        [
                            19950320
                        ],
                        [
                            20000615
                        ],
                        [
                            19910816
                        ]
                    ],
                    "sql": "SELECT birth_date FROM players WHERE first_name = 'Justine'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the birth date of Justine.\nSQL ```sql SELECT birth_date FROM players WHERE first_name = 'Justine'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "predict": "You're welcome! \ud83d\ude0a \n",
                "Rewriter": "",
                "Selector": "Table:players\n[(player_id, player id type:number PRIMARY KEY. Value examples:[200001, 200002, 200003]),(first_name, first name type:text. Value examples:[Martina, Mirjana, Justine]),(last_name, last name type:text. Value examples:[Hingis, Lucic, Henin]),(hand, hand type:text. Value examples:[R, L, U]),(birth_date, birth date type:time. Value examples:[19800930, 19820309, 19820601]),(country_code, country code type:text. Value examples:[SUI, CRO, BEL]),]\nTable:matches\n[(best_of, best of type:number. Value examples:[3]),(draw_size, draw size type:number. Value examples:[4, 32, 128]),(loser_age, loser age type:number. Value examples:[24.626967830300003, 23.6221765914, 25.7577002053]),(loser_entry, loser entry type:text. Value examples:[]),(loser_hand, loser hand type:text. Value examples:[R, L]),(loser_ht, loser ht type:number. Value examples:[170, 183, 173]),(loser_id, loser id type:number. Value examples:[201474, 201520, 201493]),(loser_ioc, loser ioc type:text. Value examples:[POL, CZE, GER]),(loser_name, loser name type:text. Value examples:[Agnieszka Radwanska, Petra Kvitova, Angelique Kerber]),(loser_rank, loser rank type:number. Value examples:[4, 6, 9]),(loser_rank_points, loser rank points type:number. Value examples:[5890, 4370, 3715]),(loser_seed, loser seed type:number. Value examples:[3, 5, 8]),(match_num, match num type:number. Value examples:[297, 296, 295]),(minutes, minutes type:number. Value examples:[82, 72, 64]),(round, round type:text. Value examples:[RR, SF, QF]),(score, score type:text. Value examples:[6-2 6-4, 6-2 6-3, 6-3 6-1]),(surface, surface type:text. Value examples:[Hard, Clay, Grass]),(tourney_date, tourney date type:time. Value examples:[20131021, 20160104, 20160111]),(tourney_id, tourney id type:text. Value examples:[2013-W-WT-TUR-01A-2013, 2016-1049, 2016-M020]),(tourney_level, tourney level type:text. Value examples:[W, I, G]),(tourney_name, tourney name type:text. Value examples:[WTA Championships, Auckland, Brisbane]),(winner_age, winner age type:number. Value examples:[32.0684462697, 23.6221765914, 25.7577002053]),(winner_entry, winner entry type:text. Value examples:[]),(winner_hand, winner hand type:text. Value examples:[R, L]),(winner_ht, winner ht type:number. Value examples:[175, 183, 173]),(winner_id, winner id type:number. Value examples:[200033, 201520, 201493]),(winner_ioc, winner ioc type:text. Value examples:[USA, CZE, GER]),(winner_name, winner name type:text. Value examples:[Serena Williams, Petra Kvitova, Angelique Kerber]),(winner_rank, winner rank type:number. Value examples:[1, 6, 9]),(winner_rank_points, winner rank points type:number. Value examples:[12040, 4370, 3715]),(winner_seed, winner seed type:number. Value examples:[1, 5, 8]),(year, year type:number. Value examples:[2013, 2016, 2017]),]\nTable:rankings\n[(ranking_date, ranking date type:time. Value examples:[20000101, 20000103, 20000110]),(ranking, ranking type:number. Value examples:[3, 4, 28]),(player_id, player id type:number. Value examples:[200748, 200033, 200020]),(ranking_points, ranking points type:number. Value examples:[4378, 3021, 960]),(tours, tours type:number. Value examples:[13, 15, 0]),]\nForeign keys:\nmatches.winner_id = players.player_id\nmatches.loser_id = players.player_id\nrankings.player_id = players.player_id\n",
                "Detector": "You're welcome! \ud83d\ude0a \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 74
    },
    {
        "db_name": "world_1",
        "turns": [
            {
                "isuser": true,
                "text": "What is the population of Afghanistan?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT Population FROM country where Name  =  \"Afghanistan\"",
                "predict": "SELECT Population FROM country WHERE Name = 'Afghanistan'",
                "Rewriter": "",
                "Selector": "Table:country\n[(Code, code type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Name, name type:text. Value examples:[Aruba, Afghanistan, Angola]),(Population, population type:number. Value examples:[103000, 22720000, 12878000]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            22720000
                        ]
                    ],
                    "sql": "SELECT Population FROM country WHERE Name = 'Afghanistan'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the population of Afghanistan.\nSQL ```sql SELECT Population FROM country WHERE Name = 'Afghanistan'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "And for Aruba?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT Population FROM country where Name  =  \"Aruba\"",
                "predict": "SELECT Population FROM country WHERE Name = 'Aruba'",
                "Rewriter": "",
                "Selector": "Table:country\n[(Code, code type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Name, name type:text. Value examples:[Aruba, Afghanistan, Angola]),(Population, population type:number. Value examples:[103000, 22720000, 12878000]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            103000
                        ]
                    ],
                    "sql": "SELECT Population FROM country WHERE Name = 'Aruba'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What is the population of Aruba?\nSQL ```sql SELECT Population FROM country WHERE Name = 'Aruba'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What languages are spoken in Aruba?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
                "predict": "SELECT T2.Language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.Code WHERE T1.Name = 'Aruba'",
                "Rewriter": "",
                "Selector": "Table:country\n[(Code, code type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Name, name type:text. Value examples:[Aruba, Afghanistan, Angola]),(Continent, continent type:text. Value examples:[North America, Asia, Africa]),(Region, region type:text. Value examples:[Caribbean, Southern and Central Asia, Central Africa]),(Population, population type:number. Value examples:[103000, 22720000, 12878000]),(LifeExpectancy, life expectancy type:number. Value examples:[78.4, 45.9, 38.3]),(GNP, gnp type:number. Value examples:[828.0, 5976.0, 6648.0]),(GNPOld, gnp old type:number. Value examples:[793.0, None, 7984.0]),(LocalName, local name type:text. Value examples:[Aruba, Afganistan/Afqanestan, Angola]),(GovernmentForm, government form type:text. Value examples:[Nonmetropolitan Territory of The Netherlands, Islamic Emirate, Republic]),(HeadOfState, head of state type:text. Value examples:[Beatrix, Mohammad Omar, Jos\u00e9 Eduardo dos Santos]),(Capital, capital type:number. Value examples:[129, 1, 56]),(Code2, code2 type:text. Value examples:[AW, AF, AO]),]\nTable:countrylanguage\n[(Language, language type:text. Value examples:[Dutch, English, Papiamento]),(IsOfficial, is official type:text. Value examples:[T, F]),(Percentage, percentage type:number. Value examples:[5.3, 9.5, 76.7]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [],
                    "sql": "SELECT T2.Language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.Code WHERE T1.Name = 'Aruba'",
                    "executable": false,
                    "log": "no such column: T2.Code",
                    "process": "Subquestion 1: Find the code of Aruba.\nSQL: ```sql SELECT Code FROM country WHERE Name = 'Aruba'```\n\nSubquestion 2: Find the languages spoken in Aruba.\nSQL: ```sql SELECT T2.Language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.Code WHERE T1.Name = 'Aruba'```\n\nQuestion Solved. \n"
                },
                "Refiner": {
                    "result": [],
                    "sql": "SELECT T2.Language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.Code WHERE T1.Name = 'Aruba'",
                    "executable": false,
                    "log": "no such column: T2.Code"
                }
            },
            {
                "isuser": true,
                "text": "How about official?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you ask for the official language of Aruba?",
                "query": "",
                "predict": "Please clarify what you mean by \"official\". Are you asking for the official language of Aruba, or the official government form? \n",
                "Rewriter": "",
                "Selector": "Table:country\n[(Code, code type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Name, name type:text. Value examples:[Aruba, Afghanistan, Angola]),(Continent, continent type:text. Value examples:[North America, Asia, Africa]),(Region, region type:text. Value examples:[Caribbean, Southern and Central Asia, Central Africa]),(Population, population type:number. Value examples:[103000, 22720000, 12878000]),(LifeExpectancy, life expectancy type:number. Value examples:[78.4, 45.9, 38.3]),(GNP, gnp type:number. Value examples:[828.0, 5976.0, 6648.0]),(GNPOld, gnp old type:number. Value examples:[793.0, None, 7984.0]),(LocalName, local name type:text. Value examples:[Aruba, Afganistan/Afqanestan, Angola]),(GovernmentForm, government form type:text. Value examples:[Nonmetropolitan Territory of The Netherlands, Islamic Emirate, Republic]),(HeadOfState, head of state type:text. Value examples:[Beatrix, Mohammad Omar, Jos\u00e9 Eduardo dos Santos]),(Capital, capital type:number. Value examples:[129, 1, 56]),(Code2, code2 type:text. Value examples:[AW, AF, AO]),]\nTable:countrylanguage\n[(CountryCode, countrycode type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Language, language type:text. Value examples:[Dutch, English, Papiamento]),(IsOfficial, is official type:text. Value examples:[T, F]),(Percentage, percentage type:number. Value examples:[5.3, 9.5, 76.7]),]\nForeign keys:\ncountrylanguage.CountryCode = country.Code\n",
                "Detector": "Please clarify what you mean by \"official\". Are you asking for the official language of Aruba, or the official government form? \n",
                "Decomposer": "",
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Yes.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" and T2.IsOfficial='T'",
                "predict": "SELECT T2.Language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba' AND T2.IsOfficial = 'T'",
                "Rewriter": "",
                "Selector": "Table:country\n[(Code, code type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Name, name type:text. Value examples:[Aruba, Afghanistan, Angola]),(Continent, continent type:text. Value examples:[North America, Asia, Africa]),(Region, region type:text. Value examples:[Caribbean, Southern and Central Asia, Central Africa]),(Population, population type:number. Value examples:[103000, 22720000, 12878000]),(LifeExpectancy, life expectancy type:number. Value examples:[78.4, 45.9, 38.3]),(GNP, gnp type:number. Value examples:[828.0, 5976.0, 6648.0]),(GNPOld, gnp old type:number. Value examples:[793.0, None, 7984.0]),(LocalName, local name type:text. Value examples:[Aruba, Afganistan/Afqanestan, Angola]),(GovernmentForm, government form type:text. Value examples:[Nonmetropolitan Territory of The Netherlands, Islamic Emirate, Republic]),(HeadOfState, head of state type:text. Value examples:[Beatrix, Mohammad Omar, Jos\u00e9 Eduardo dos Santos]),(Capital, capital type:number. Value examples:[129, 1, 56]),(Code2, code2 type:text. Value examples:[AW, AF, AO]),]\nTable:countrylanguage\n[(CountryCode, countrycode type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Language, language type:text. Value examples:[Dutch, English, Papiamento]),(IsOfficial, is official type:text. Value examples:[T, F]),(Percentage, percentage type:number. Value examples:[5.3, 9.5, 76.7]),]\nForeign keys:\ncountrylanguage.CountryCode = country.Code\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Dutch"
                        ]
                    ],
                    "sql": "SELECT T2.Language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba' AND T2.IsOfficial = 'T'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the official languages of Aruba.\nSQL: ```sql SELECT T2.Language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba' AND T2.IsOfficial = 'T'``` \n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What about for Afghanistan?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" and T2.IsOfficial='T'",
                "predict": "SELECT T2.Language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Afghanistan' AND T2.IsOfficial = 'T'",
                "Rewriter": "",
                "Selector": "Table:country\n[(Code, code type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Name, name type:text. Value examples:[Aruba, Afghanistan, Angola]),(Continent, continent type:text. Value examples:[North America, Asia, Africa]),(Region, region type:text. Value examples:[Caribbean, Southern and Central Asia, Central Africa]),(Population, population type:number. Value examples:[103000, 22720000, 12878000]),(LocalName, local name type:text. Value examples:[Aruba, Afganistan/Afqanestan, Angola]),(GovernmentForm, government form type:text. Value examples:[Nonmetropolitan Territory of The Netherlands, Islamic Emirate, Republic]),(HeadOfState, head of state type:text. Value examples:[Beatrix, Mohammad Omar, Jos\u00e9 Eduardo dos Santos]),(Capital, capital type:number. Value examples:[129, 1, 56]),(Code2, code2 type:text. Value examples:[AW, AF, AO]),]\nTable:countrylanguage\n[(CountryCode, countrycode type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Language, language type:text. Value examples:[Dutch, English, Papiamento]),(IsOfficial, is official type:text. Value examples:[T, F]),(Percentage, percentage type:number. Value examples:[5.3, 9.5, 76.7]),]\nForeign keys:\ncountrylanguage.CountryCode = country.Code\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Dari"
                        ],
                        [
                            "Pashto"
                        ]
                    ],
                    "sql": "SELECT T2.Language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Afghanistan' AND T2.IsOfficial = 'T'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What is the official language of Afghanistan?\nSQL ```sql SELECT T2.Language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Afghanistan' AND T2.IsOfficial = 'T'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "How many other countries speak Dari?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT count(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.language='Dari' and T1.name != 'Afghanistan'",
                "predict": "SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'Dari'",
                "Rewriter": "",
                "Selector": "Table:country\n[(Code, code type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Name, name type:text. Value examples:[Aruba, Afghanistan, Angola]),(Continent, continent type:text. Value examples:[North America, Asia, Africa]),(Region, region type:text. Value examples:[Caribbean, Southern and Central Asia, Central Africa]),(Population, population type:number. Value examples:[103000, 22720000, 12878000]),(LocalName, local name type:text. Value examples:[Aruba, Afganistan/Afqanestan, Angola]),(GovernmentForm, government form type:text. Value examples:[Nonmetropolitan Territory of The Netherlands, Islamic Emirate, Republic]),(HeadOfState, head of state type:text. Value examples:[Beatrix, Mohammad Omar, Jos\u00e9 Eduardo dos Santos]),(Capital, capital type:number. Value examples:[129, 1, 56]),(Code2, code2 type:text. Value examples:[AW, AF, AO]),]\nTable:countrylanguage\n[(CountryCode, countrycode type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Language, language type:text. Value examples:[Dutch, English, Papiamento]),(IsOfficial, is official type:text. Value examples:[T, F]),(Percentage, percentage type:number. Value examples:[5.3, 9.5, 76.7]),]\nForeign keys:\ncountrylanguage.CountryCode = country.Code\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [],
                    "sql": "SELECT COUNT(DISTINCT T1.Code) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'Dari'",
                    "executable": false,
                    "log": "no such column: T1.Code",
                    "process": "Subquestion 1: Find the countries that speak Dari.\nSQL: ```sql SELECT T1.Code FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'Dari'```\nSubquestion 2: Count the number of countries that speak Dari.\nSQL: ```sql SELECT COUNT(DISTINCT T1.Code) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'Dari'```\n\nQuestion Solved. \n"
                },
                "Refiner": {
                    "result": [
                        [
                            1
                        ]
                    ],
                    "sql": "SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'Dari'",
                    "executable": true,
                    "log": ""
                }
            },
            {
                "isuser": true,
                "text": "Do other countries speak Pashto?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.language='Pashto' and T1.name!='Afghanistan'",
                "predict": "SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Pashto' AND T1.Name != 'Afghanistan'",
                "Rewriter": "",
                "Selector": "Table:country\n[(Code, code type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Name, name type:text. Value examples:[Aruba, Afghanistan, Angola]),(Continent, continent type:text. Value examples:[North America, Asia, Africa]),(Region, region type:text. Value examples:[Caribbean, Southern and Central Asia, Central Africa]),(Population, population type:number. Value examples:[103000, 22720000, 12878000]),(LocalName, local name type:text. Value examples:[Aruba, Afganistan/Afqanestan, Angola]),(GovernmentForm, government form type:text. Value examples:[Nonmetropolitan Territory of The Netherlands, Islamic Emirate, Republic]),(HeadOfState, head of state type:text. Value examples:[Beatrix, Mohammad Omar, Jos\u00e9 Eduardo dos Santos]),(Capital, capital type:number. Value examples:[129, 1, 56]),(Code2, code2 type:text. Value examples:[AW, AF, AO]),]\nTable:countrylanguage\n[(CountryCode, countrycode type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Language, language type:text. Value examples:[Dutch, English, Papiamento]),(IsOfficial, is official type:text. Value examples:[T, F]),(Percentage, percentage type:number. Value examples:[5.3, 9.5, 76.7]),]\nForeign keys:\ncountrylanguage.CountryCode = country.Code\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Pakistan"
                        ]
                    ],
                    "sql": "SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Pashto' AND T1.Name != 'Afghanistan'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the countries that speak Pashto.\nSQL: ```sql SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Pashto'```\n\nSubquestion 2: Filter out Afghanistan from the list of countries that speak Pashto.\nSQL: ```sql SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Pashto' AND T1.Name != 'Afghanistan'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Is it an official language of Pakistan?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.isOfficial='T' and T1.name='Pakistan'",
                "predict": "SELECT T2.Language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Pakistan' AND T2.IsOfficial = 'T'",
                "Rewriter": "",
                "Selector": "Table:country\n[(Code, code type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Name, name type:text. Value examples:[Aruba, Afghanistan, Angola]),(Continent, continent type:text. Value examples:[North America, Asia, Africa]),(Region, region type:text. Value examples:[Caribbean, Southern and Central Asia, Central Africa]),(Population, population type:number. Value examples:[103000, 22720000, 12878000]),(LocalName, local name type:text. Value examples:[Aruba, Afganistan/Afqanestan, Angola]),(GovernmentForm, government form type:text. Value examples:[Nonmetropolitan Territory of The Netherlands, Islamic Emirate, Republic]),(HeadOfState, head of state type:text. Value examples:[Beatrix, Mohammad Omar, Jos\u00e9 Eduardo dos Santos]),(Capital, capital type:number. Value examples:[129, 1, 56]),(Code2, code2 type:text. Value examples:[AW, AF, AO]),]\nTable:countrylanguage\n[(CountryCode, countrycode type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Language, language type:text. Value examples:[Dutch, English, Papiamento]),(IsOfficial, is official type:text. Value examples:[T, F]),(Percentage, percentage type:number. Value examples:[5.3, 9.5, 76.7]),]\nForeign keys:\ncountrylanguage.CountryCode = country.Code\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Urdu"
                        ]
                    ],
                    "sql": "SELECT T2.Language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Pakistan' AND T2.IsOfficial = 'T'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the official languages of Pakistan.\nSQL: ```sql SELECT T2.Language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Pakistan' AND T2.IsOfficial = 'T'``` \n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure! You are welcome! Anything else I can do?",
                "query": "",
                "predict": "You're welcome! Is there anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:country\n[(Code, code type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Name, name type:text. Value examples:[Aruba, Afghanistan, Angola]),(Continent, continent type:text. Value examples:[North America, Asia, Africa]),(Region, region type:text. Value examples:[Caribbean, Southern and Central Asia, Central Africa]),(Population, population type:number. Value examples:[103000, 22720000, 12878000]),(LifeExpectancy, life expectancy type:number. Value examples:[78.4, 45.9, 38.3]),(GNP, gnp type:number. Value examples:[828.0, 5976.0, 6648.0]),(GNPOld, gnp old type:number. Value examples:[793.0, None, 7984.0]),(LocalName, local name type:text. Value examples:[Aruba, Afganistan/Afqanestan, Angola]),(GovernmentForm, government form type:text. Value examples:[Nonmetropolitan Territory of The Netherlands, Islamic Emirate, Republic]),(HeadOfState, head of state type:text. Value examples:[Beatrix, Mohammad Omar, Jos\u00e9 Eduardo dos Santos]),(Capital, capital type:number. Value examples:[129, 1, 56]),(Code2, code2 type:text. Value examples:[AW, AF, AO]),]\nTable:countrylanguage\n[(CountryCode, countrycode type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Language, language type:text. Value examples:[Dutch, English, Papiamento]),(IsOfficial, is official type:text. Value examples:[T, F]),(Percentage, percentage type:number. Value examples:[5.3, 9.5, 76.7]),]\nForeign keys:\ncountrylanguage.CountryCode = country.Code\n",
                "Detector": "You're welcome! Is there anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Nope, that's all, THX~",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "predict": "Sure! You are welcome! Anything else I can do? \n",
                "Rewriter": "",
                "Selector": "Table:country\n[(Code, code type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Name, name type:text. Value examples:[Aruba, Afghanistan, Angola]),(Continent, continent type:text. Value examples:[North America, Asia, Africa]),(Region, region type:text. Value examples:[Caribbean, Southern and Central Asia, Central Africa]),(Population, population type:number. Value examples:[103000, 22720000, 12878000]),(LifeExpectancy, life expectancy type:number. Value examples:[78.4, 45.9, 38.3]),(GNP, gnp type:number. Value examples:[828.0, 5976.0, 6648.0]),(GNPOld, gnp old type:number. Value examples:[793.0, None, 7984.0]),(LocalName, local name type:text. Value examples:[Aruba, Afganistan/Afqanestan, Angola]),(GovernmentForm, government form type:text. Value examples:[Nonmetropolitan Territory of The Netherlands, Islamic Emirate, Republic]),(HeadOfState, head of state type:text. Value examples:[Beatrix, Mohammad Omar, Jos\u00e9 Eduardo dos Santos]),(Capital, capital type:number. Value examples:[129, 1, 56]),(Code2, code2 type:text. Value examples:[AW, AF, AO]),]\nTable:countrylanguage\n[(CountryCode, countrycode type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Language, language type:text. Value examples:[Dutch, English, Papiamento]),(IsOfficial, is official type:text. Value examples:[T, F]),(Percentage, percentage type:number. Value examples:[5.3, 9.5, 76.7]),]\nForeign keys:\ncountrylanguage.CountryCode = country.Code\n",
                "Detector": "Sure! You are welcome! Anything else I can do? \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 75
    },
    {
        "db_name": "wta_1",
        "turns": [
            {
                "isuser": true,
                "text": "What are the names of the 3 youngest winners across all matches?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT winner_name  FROM matches ORDER BY winner_age LIMIT 3",
                "predict": "SELECT T1.winner_name FROM matches AS T1 ORDER BY T1.winner_age ASC LIMIT 3",
                "Rewriter": "",
                "Selector": "Table:players\n[(player_id, player id type:number PRIMARY KEY. Value examples:[200001, 200002, 200003]),(first_name, first name type:text. Value examples:[Martina, Mirjana, Justine]),(last_name, last name type:text. Value examples:[Hingis, Lucic, Henin]),(birth_date, birth date type:time. Value examples:[19800930, 19820309, 19820601]),]\nTable:matches\n[(winner_age, winner age type:number. Value examples:[32.0684462697, 23.6221765914, 25.7577002053]),(winner_id, winner id type:number. Value examples:[200033, 201520, 201493]),(winner_name, winner name type:text. Value examples:[Serena Williams, Petra Kvitova, Angelique Kerber]),]\nForeign keys:\nmatches.winner_id = players.player_id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Madison Keys"
                        ],
                        [
                            "Madison Keys"
                        ],
                        [
                            "Madison Keys"
                        ]
                    ],
                    "sql": "SELECT T1.winner_name FROM matches AS T1 ORDER BY T1.winner_age ASC LIMIT 3",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the 3 youngest winners across all matches.\nSQL ```sql SELECT T1.winner_name FROM matches AS T1 ORDER BY T1.winner_age ASC LIMIT 3```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What are their ranks?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "do you want to show their names as well?",
                "query": "",
                "predict": "SELECT T2.winner_rank FROM matches AS T1 INNER JOIN matches AS T2 ON T1.winner_name = T2.winner_name ORDER BY T1.winner_age LIMIT 3",
                "Rewriter": "",
                "Selector": "Table:players\n[(player_id, player id type:number PRIMARY KEY. Value examples:[200001, 200002, 200003]),(first_name, first name type:text. Value examples:[Martina, Mirjana, Justine]),(last_name, last name type:text. Value examples:[Hingis, Lucic, Henin]),(hand, hand type:text. Value examples:[R, L, U]),(birth_date, birth date type:time. Value examples:[19800930, 19820309, 19820601]),(country_code, country code type:text. Value examples:[SUI, CRO, BEL]),]\nTable:matches\n[(winner_age, winner age type:number. Value examples:[32.0684462697, 23.6221765914, 25.7577002053]),(winner_id, winner id type:number. Value examples:[200033, 201520, 201493]),(winner_name, winner name type:text. Value examples:[Serena Williams, Petra Kvitova, Angelique Kerber]),(winner_rank, winner rank type:number. Value examples:[1, 6, 9]),]\nForeign keys:\nmatches.winner_id = players.player_id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            7
                        ],
                        [
                            9
                        ],
                        [
                            9
                        ]
                    ],
                    "sql": "SELECT T2.winner_rank FROM matches AS T1 INNER JOIN matches AS T2 ON T1.winner_name = T2.winner_name ORDER BY T1.winner_age LIMIT 3",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What are the names of the 3 youngest winners across all matches?\nSQL ```sql SELECT winner_name FROM matches ORDER BY winner_age LIMIT 3```\nSubquestion 2: What are their ranks?\nSQL ```sql SELECT T2.winner_rank FROM matches AS T1 INNER JOIN matches AS T2 ON T1.winner_name = T2.winner_name ORDER BY T1.winner_age LIMIT 3```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "yes, please",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT DISTINCT winner_name,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
                "predict": "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3",
                "Rewriter": "",
                "Selector": "Table:players\n[(player_id, player id type:number PRIMARY KEY. Value examples:[200001, 200002, 200003]),(first_name, first name type:text. Value examples:[Martina, Mirjana, Justine]),(last_name, last name type:text. Value examples:[Hingis, Lucic, Henin]),(hand, hand type:text. Value examples:[R, L, U]),(birth_date, birth date type:time. Value examples:[19800930, 19820309, 19820601]),(country_code, country code type:text. Value examples:[SUI, CRO, BEL]),]\nTable:matches\n[(winner_age, winner age type:number. Value examples:[32.0684462697, 23.6221765914, 25.7577002053]),(winner_id, winner id type:number. Value examples:[200033, 201520, 201493]),(winner_name, winner name type:text. Value examples:[Serena Williams, Petra Kvitova, Angelique Kerber]),(winner_rank, winner rank type:number. Value examples:[1, 6, 9]),]\nForeign keys:\nmatches.winner_id = players.player_id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Madison Keys",
                            17
                        ],
                        [
                            "Madison Keys",
                            24
                        ],
                        [
                            "Madison Keys",
                            16
                        ]
                    ],
                    "sql": "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What are the names and ranks of the 3 youngest winners across all matches?\nSQL ```sql SELECT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": false,
                "text": "There are the names and ranks of the 3 youngest winners across all matches.",
                "query": ""
            },
            {
                "isuser": true,
                "text": "What is the loser name for each of those matches?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT loser_name FROM matches ORDER BY winner_age LIMIT 3",
                "predict": "SELECT loser_name FROM matches WHERE match_num IN (SELECT match_num FROM matches ORDER BY winner_age LIMIT 3)",
                "Rewriter": "",
                "Selector": "Table:players\n[(player_id, player id type:number PRIMARY KEY. Value examples:[200001, 200002, 200003]),(first_name, first name type:text. Value examples:[Martina, Mirjana, Justine]),(last_name, last name type:text. Value examples:[Hingis, Lucic, Henin]),(hand, hand type:text. Value examples:[R, L, U]),(birth_date, birth date type:time. Value examples:[19800930, 19820309, 19820601]),(country_code, country code type:text. Value examples:[SUI, CRO, BEL]),]\nTable:matches\n[(loser_id, loser id type:number. Value examples:[201474, 201520, 201493]),(loser_name, loser name type:text. Value examples:[Agnieszka Radwanska, Petra Kvitova, Angelique Kerber]),(match_num, match num type:number. Value examples:[297, 296, 295]),(winner_age, winner age type:number. Value examples:[32.0684462697, 23.6221765914, 25.7577002053]),(winner_id, winner id type:number. Value examples:[200033, 201520, 201493]),(winner_name, winner name type:text. Value examples:[Serena Williams, Petra Kvitova, Angelique Kerber]),(winner_rank, winner rank type:number. Value examples:[1, 6, 9]),]\nForeign keys:\nmatches.winner_id = players.player_id\nmatches.loser_id = players.player_id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Caroline Wozniacki"
                        ],
                        [
                            "Carla Suarez Navarro"
                        ],
                        [
                            "Ana Ivanovic"
                        ],
                        [
                            "Su Wei Hsieh"
                        ],
                        [
                            "Ana Ivanovic"
                        ],
                        [
                            "Yanina Wickmayer"
                        ],
                        [
                            "Agnieszka Radwanska"
                        ],
                        [
                            "Karolina Pliskova"
                        ],
                        [
                            "Angelique Kerber"
                        ],
                        [
                            "Roberta Vinci"
                        ]
                    ],
                    "sql": "SELECT loser_name FROM matches WHERE match_num IN (SELECT match_num FROM matches ORDER BY winner_age LIMIT 3)",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the match numbers of the 3 youngest winners.\nSQL: ```sql SELECT match_num FROM matches ORDER BY winner_age LIMIT 3```\n\nSubquestion 2: Find the loser names for the matches identified in Subquestion 1.\nSQL: ```sql SELECT loser_name FROM matches WHERE match_num IN (SELECT match_num FROM matches ORDER BY winner_age LIMIT 3)```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye!",
                "query": "",
                "predict": "You're welcome!  Let me know if you have any other questions. \n",
                "Rewriter": "",
                "Selector": "Table:players\n[(player_id, player id type:number PRIMARY KEY. Value examples:[200001, 200002, 200003]),(first_name, first name type:text. Value examples:[Martina, Mirjana, Justine]),(last_name, last name type:text. Value examples:[Hingis, Lucic, Henin]),(hand, hand type:text. Value examples:[R, L, U]),(birth_date, birth date type:time. Value examples:[19800930, 19820309, 19820601]),(country_code, country code type:text. Value examples:[SUI, CRO, BEL]),]\nTable:matches\n[(loser_id, loser id type:number. Value examples:[201474, 201520, 201493]),(loser_name, loser name type:text. Value examples:[Agnieszka Radwanska, Petra Kvitova, Angelique Kerber]),(match_num, match num type:number. Value examples:[297, 296, 295]),(tourney_date, tourney date type:time. Value examples:[20131021, 20160104, 20160111]),(tourney_name, tourney name type:text. Value examples:[WTA Championships, Auckland, Brisbane]),(winner_age, winner age type:number. Value examples:[32.0684462697, 23.6221765914, 25.7577002053]),(winner_id, winner id type:number. Value examples:[200033, 201520, 201493]),(winner_name, winner name type:text. Value examples:[Serena Williams, Petra Kvitova, Angelique Kerber]),(winner_rank, winner rank type:number. Value examples:[1, 6, 9]),(year, year type:number. Value examples:[2013, 2016, 2017]),]\nForeign keys:\nmatches.winner_id = players.player_id\nmatches.loser_id = players.player_id\n",
                "Detector": "You're welcome!  Let me know if you have any other questions. \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 76
    },
    {
        "db_name": "dog_kennels",
        "turns": [
            {
                "isuser": true,
                "text": "List the names of all the professionals. ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT first_name, last_name FROM professionals ",
                "predict": "SELECT T1.first_name, T1.last_name FROM Professionals AS T1",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Treatment_Types\n[(treatment_type_code, treatment type code type:text PRIMARY KEY. Value examples:[EXAM, VAC, WALK]),(treatment_type_description, treatment type description type:text. Value examples:[Physical examination, Vaccination, Take for a Walk]),]\nTable:Professionals\n[(professional_id, professional id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(first_name, first name type:text. Value examples:[Taryn, Jayson, Olaf]),(last_name, last name type:text. Value examples:[Braun, Ullrich, Watsica]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Taryn",
                            "Braun"
                        ],
                        [
                            "Jayson",
                            "Ullrich"
                        ],
                        [
                            "Olaf",
                            "Watsica"
                        ],
                        [
                            "Vernice",
                            "Tillman"
                        ],
                        [
                            "Danny",
                            "Considine"
                        ],
                        [
                            "Ruben",
                            "O'Reilly"
                        ],
                        [
                            "Velva",
                            "Hayes"
                        ],
                        [
                            "Karley",
                            "Hyatt"
                        ],
                        [
                            "Monte",
                            "Kshlerin"
                        ],
                        [
                            "Domenica",
                            "Jacobs"
                        ]
                    ],
                    "sql": "SELECT T1.first_name, T1.last_name FROM Professionals AS T1",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: List the names of all the professionals. \nSQL ```sql SELECT T1.first_name, T1.last_name FROM Professionals AS T1```\n\nQuestion Solved. \n========== \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "List the names of all professionals that live in a city containing the substring West.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT first_name, last_name FROM professionals  WHERE city LIKE '%West%'",
                "predict": "SELECT first_name, last_name FROM Professionals WHERE city LIKE '%West%'",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Professionals\n[(first_name, first name type:text. Value examples:[Taryn, Jayson, Olaf]),(city, city type:text. Value examples:[West Heidi, North Odellfurt, Jaceton]),(last_name, last name type:text. Value examples:[Braun, Ullrich, Watsica]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Taryn",
                            "Braun"
                        ]
                    ],
                    "sql": "SELECT first_name, last_name FROM Professionals WHERE city LIKE '%West%'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: List the names of all professionals that live in a city containing the substring West.\nSQL ```sql SELECT first_name, last_name FROM Professionals WHERE city LIKE '%West%'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "List the role of the professional named Taryn. ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT role_code FROM professionals  WHERE first_name = \"Taryn\"",
                "predict": "SELECT role_code FROM Professionals WHERE first_name = 'Taryn'",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Treatment_Types\n[(treatment_type_code, treatment type code type:text PRIMARY KEY. Value examples:[EXAM, VAC, WALK]),(treatment_type_description, treatment type description type:text. Value examples:[Physical examination, Vaccination, Take for a Walk]),]\nTable:Professionals\n[(professional_id, professional id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(role_code, role code type:text. Value examples:[Employee, Veterenarian]),(first_name, first name type:text. Value examples:[Taryn, Jayson, Olaf]),(last_name, last name type:text. Value examples:[Braun, Ullrich, Watsica]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Employee"
                        ]
                    ],
                    "sql": "SELECT role_code FROM Professionals WHERE first_name = 'Taryn'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the role code of the professional named Taryn.\nSQL ```sql SELECT role_code FROM Professionals WHERE first_name = 'Taryn'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "List the role, street, city, and state of the professional with first name Taryn. ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT role_code , street , city , state FROM professionals WHERE first_name = \"Taryn\"",
                "predict": "SELECT role_code, street, city, state FROM Professionals WHERE first_name = 'Taryn'",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Treatment_Types\n[(treatment_type_code, treatment type code type:text PRIMARY KEY. Value examples:[EXAM, VAC, WALK]),(treatment_type_description, treatment type description type:text. Value examples:[Physical examination, Vaccination, Take for a Walk]),]\nTable:Professionals\n[(professional_id, professional id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(role_code, role code type:text. Value examples:[Employee, Veterenarian]),(first_name, first name type:text. Value examples:[Taryn, Jayson, Olaf]),(street, street type:text. Value examples:[6915 Oberbrunner Point Suite 491\nGleasonville, LA , 88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194, 68589 Bradly Manor\nNew Audrey, IN 91497]),(city, city type:text. Value examples:[West Heidi, North Odellfurt, Jaceton]),(state, state type:text. Value examples:[Indiana, Connecticut, Wisconsin]),(last_name, last name type:text. Value examples:[Braun, Ullrich, Watsica]),(email_address, email address type:text. Value examples:[deanna.schuster@example.com, lucile.shanahan@example.org, uboehm@example.org]),(home_phone, home phone type:text. Value examples:[+71(6)2898266914, +02(1)0259033559, 325-155-0801x7005]),(cell_number, cell number type:text. Value examples:[(275)939-2435x80863, 889-940-2676, (369)908-7311x065]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Employee",
                            "6915 Oberbrunner Point Suite 491\nGleasonville, LA ",
                            "West Heidi",
                            "Indiana"
                        ]
                    ],
                    "sql": "SELECT role_code, street, city, state FROM Professionals WHERE first_name = 'Taryn'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the role, street, city, and state of the professional with first name Taryn.\nSQL: ```sql SELECT role_code, street, city, state FROM Professionals WHERE first_name = 'Taryn'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "List the name of all professionals with the same state as Taryn. ",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry I can't answer this question",
                "query": "",
                "predict": "SELECT first_name, last_name FROM Professionals WHERE state = (SELECT state FROM Professionals WHERE first_name = 'Taryn')",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Professionals\n[(professional_id, professional id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(role_code, role code type:text. Value examples:[Employee, Veterenarian]),(first_name, first name type:text. Value examples:[Taryn, Jayson, Olaf]),(street, street type:text. Value examples:[6915 Oberbrunner Point Suite 491\nGleasonville, LA , 88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194, 68589 Bradly Manor\nNew Audrey, IN 91497]),(city, city type:text. Value examples:[West Heidi, North Odellfurt, Jaceton]),(state, state type:text. Value examples:[Indiana, Connecticut, Wisconsin]),(zip_code, zip code type:text. Value examples:[06646, 43129, 77129]),(last_name, last name type:text. Value examples:[Braun, Ullrich, Watsica]),(email_address, email address type:text. Value examples:[deanna.schuster@example.com, lucile.shanahan@example.org, uboehm@example.org]),(home_phone, home phone type:text. Value examples:[+71(6)2898266914, +02(1)0259033559, 325-155-0801x7005]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Taryn",
                            "Braun"
                        ],
                        [
                            "Karley",
                            "Hyatt"
                        ]
                    ],
                    "sql": "SELECT first_name, last_name FROM Professionals WHERE state = (SELECT state FROM Professionals WHERE first_name = 'Taryn')",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What is the state of the professional named Taryn?\nSQL: ```sql SELECT state FROM Professionals WHERE first_name = 'Taryn'```\n\nSubquestion 2: List the name of all professionals with the same state as Taryn.\nSQL: ```sql SELECT first_name, last_name FROM Professionals WHERE state = (SELECT state FROM Professionals WHERE first_name = 'Taryn')```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "List the names of all the professionals and their state. ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT first_name,state FROM professionals",
                "predict": "SELECT first_name, last_name, state FROM Professionals",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Professionals\n[(professional_id, professional id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(role_code, role code type:text. Value examples:[Employee, Veterenarian]),(first_name, first name type:text. Value examples:[Taryn, Jayson, Olaf]),(state, state type:text. Value examples:[Indiana, Connecticut, Wisconsin]),(last_name, last name type:text. Value examples:[Braun, Ullrich, Watsica]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Taryn",
                            "Braun",
                            "Indiana"
                        ],
                        [
                            "Jayson",
                            "Ullrich",
                            "Connecticut"
                        ],
                        [
                            "Olaf",
                            "Watsica",
                            "Wisconsin"
                        ],
                        [
                            "Vernice",
                            "Tillman",
                            "Mississippi"
                        ],
                        [
                            "Danny",
                            "Considine",
                            "Hawaii"
                        ],
                        [
                            "Ruben",
                            "O'Reilly",
                            "NewMexico"
                        ],
                        [
                            "Velva",
                            "Hayes",
                            "NorthCarolina"
                        ],
                        [
                            "Karley",
                            "Hyatt",
                            "Indiana"
                        ],
                        [
                            "Monte",
                            "Kshlerin",
                            "SouthCarolina"
                        ],
                        [
                            "Domenica",
                            "Jacobs",
                            "California"
                        ]
                    ],
                    "sql": "SELECT first_name, last_name, state FROM Professionals",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: List the names of all the professionals and their state. \nSQL ```sql SELECT first_name, last_name, state FROM Professionals```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "List the names of all professionals with the state Indiana. ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT first_name FROM professionals WHERE state = \"Indiana\"",
                "predict": "SELECT first_name, last_name FROM Professionals WHERE state = 'Indiana'",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Professionals\n[(professional_id, professional id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(role_code, role code type:text. Value examples:[Employee, Veterenarian]),(first_name, first name type:text. Value examples:[Taryn, Jayson, Olaf]),(state, state type:text. Value examples:[Indiana, Connecticut, Wisconsin]),(last_name, last name type:text. Value examples:[Braun, Ullrich, Watsica]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Taryn",
                            "Braun"
                        ],
                        [
                            "Karley",
                            "Hyatt"
                        ]
                    ],
                    "sql": "SELECT first_name, last_name FROM Professionals WHERE state = 'Indiana'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: List the names of all professionals with the state Indiana. \nSQL ```sql SELECT first_name, last_name FROM Professionals WHERE state = 'Indiana'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye!\n",
                "query": "",
                "predict": "You're welcome! Is there anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Treatment_Types\n[(treatment_type_code, treatment type code type:text PRIMARY KEY. Value examples:[EXAM, VAC, WALK]),(treatment_type_description, treatment type description type:text. Value examples:[Physical examination, Vaccination, Take for a Walk]),]\nTable:Professionals\n[(professional_id, professional id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(role_code, role code type:text. Value examples:[Employee, Veterenarian]),(first_name, first name type:text. Value examples:[Taryn, Jayson, Olaf]),(street, street type:text. Value examples:[6915 Oberbrunner Point Suite 491\nGleasonville, LA , 88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194, 68589 Bradly Manor\nNew Audrey, IN 91497]),(city, city type:text. Value examples:[West Heidi, North Odellfurt, Jaceton]),(state, state type:text. Value examples:[Indiana, Connecticut, Wisconsin]),(zip_code, zip code type:text. Value examples:[06646, 43129, 77129]),(last_name, last name type:text. Value examples:[Braun, Ullrich, Watsica]),(email_address, email address type:text. Value examples:[deanna.schuster@example.com, lucile.shanahan@example.org, uboehm@example.org]),(home_phone, home phone type:text. Value examples:[+71(6)2898266914, +02(1)0259033559, 325-155-0801x7005]),]\nForeign keys:\n",
                "Detector": "You're welcome! Is there anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 77
    },
    {
        "db_name": "battle_death",
        "turns": [
            {
                "isuser": true,
                "text": "How many death events are there?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT count(*) FROM death ",
                "predict": "SELECT COUNT(id) FROM death",
                "Rewriter": "",
                "Selector": "Table:death\n[(caused_by_ship_id, caused by ship id type:number. Value examples:[1, 2, 3]),(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(note, note type:text. Value examples:[Dantewada, Chhattisgarh, Erraboru, Chhattisgarh, East Champaran, Bihar]),(killed, killed type:number. Value examples:[8, 3, 25]),(injured, injured type:number. Value examples:[0, 9, 5]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [],
                    "sql": "SELECT COUNT(T1.\u2018id\u2018) FROM death AS T1",
                    "executable": false,
                    "log": "no such column: T1.\u2018id\u2018",
                    "process": "Subquestion 1: How many death events are there? \nSQL ```sql SELECT COUNT(T1.\u2018id\u2018) FROM death AS T1```\n\nQuestion Solved. \n========== \n"
                },
                "Refiner": {
                    "result": [
                        [
                            13
                        ]
                    ],
                    "sql": "SELECT COUNT(id) FROM death",
                    "executable": true,
                    "log": ""
                }
            },
            {
                "isuser": true,
                "text": "Which event has the most deaths?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "What information do you need? all the information of this event or some specific information, like the note?",
                "query": "",
                "predict": "SELECT id FROM death ORDER BY killed DESC LIMIT 1",
                "Rewriter": "",
                "Selector": "Table:battle\n[(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(name, name type:text. Value examples:[Battle of Adrianople, Battle of Serres, Battle of Rusion]),(date, date type:text. Value examples:[14 April 1205, June 1205, 31 January 1206]),(bulgarian_commander, bulgarian commander type:text. Value examples:[Kaloyan, Unknown, Boril]),(latin_commander, latin commander type:text. Value examples:[Baldwin I, Unknown, Thierry de Termond]),(result, result type:text. Value examples:[Bulgarian victory, Latin victory, Two Year Truce]),]\nTable:ship\n[(lost_in_battle, lost in battle type:number. Value examples:[8, 7, 6]),(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(name, name type:text. Value examples:[Lettice, Bon Accord, Mary]),(tonnage, tonnage type:text. Value examples:[t, 391, 225]),(ship_type, ship type type:text. Value examples:[Brig, 18-gun Brig, 8 gun Brig]),(location, location type:text. Value examples:[English Channel, SW Approaches, Mid-Atlantic]),(disposition_of_ship, disposition of ship type:text. Value examples:[Captured, Wrecked, Scuttled]),]\nTable:death\n[(caused_by_ship_id, caused by ship id type:number. Value examples:[1, 2, 3]),(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(note, note type:text. Value examples:[Dantewada, Chhattisgarh, Erraboru, Chhattisgarh, East Champaran, Bihar]),(killed, killed type:number. Value examples:[8, 3, 25]),(injured, injured type:number. Value examples:[0, 9, 5]),]\nForeign keys:\nship.lost_in_battle = battle.id\ndeath.caused_by_ship_id = ship.id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            9
                        ]
                    ],
                    "sql": "SELECT id FROM death ORDER BY killed DESC LIMIT 1",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the event with the most deaths.\nSQL ```sql SELECT id FROM death ORDER BY killed DESC LIMIT 1```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Which death event has the highest number killed?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT * FROM death where killed = (select max(killed) from death)",
                "predict": "SELECT id FROM death ORDER BY killed DESC LIMIT 1",
                "Rewriter": "",
                "Selector": "Table:death\n[(caused_by_ship_id, caused by ship id type:number. Value examples:[1, 2, 3]),(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(note, note type:text. Value examples:[Dantewada, Chhattisgarh, Erraboru, Chhattisgarh, East Champaran, Bihar]),(killed, killed type:number. Value examples:[8, 3, 25]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            9
                        ]
                    ],
                    "sql": "SELECT id FROM death ORDER BY killed DESC LIMIT 1",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the death event with the highest number of killed.\nSQL ```sql SELECT id FROM death ORDER BY killed DESC LIMIT 1```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Was anyone injured in these death events?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT * FROM death where injured > 0",
                "predict": "SELECT COUNT(*) FROM death WHERE injured > 0",
                "Rewriter": "",
                "Selector": "Table:death\n[(caused_by_ship_id, caused by ship id type:number. Value examples:[1, 2, 3]),(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(note, note type:text. Value examples:[Dantewada, Chhattisgarh, Erraboru, Chhattisgarh, East Champaran, Bihar]),(killed, killed type:number. Value examples:[8, 3, 25]),(injured, injured type:number. Value examples:[0, 9, 5]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            2
                        ]
                    ],
                    "sql": "SELECT COUNT(*) FROM death WHERE injured > 0",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Are there any death events with injured people?\nSQL ```sql SELECT COUNT(*) FROM death WHERE injured > 0```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Were there any death with the substring East?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "You mean the events with the substring East in the event note?",
                "query": "",
                "predict": "SELECT * FROM death WHERE note LIKE '%East%'",
                "Rewriter": "",
                "Selector": "Table:death\n[(caused_by_ship_id, caused by ship id type:number. Value examples:[1, 2, 3]),(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(note, note type:text. Value examples:[Dantewada, Chhattisgarh, Erraboru, Chhattisgarh, East Champaran, Bihar]),(killed, killed type:number. Value examples:[8, 3, 25]),(injured, injured type:number. Value examples:[0, 9, 5]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            3,
                            3,
                            "East Champaran, Bihar",
                            2,
                            0
                        ]
                    ],
                    "sql": "SELECT * FROM death WHERE note LIKE '%East%'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find death events with the substring \"East\" in the note.\nSQL: ```sql SELECT * FROM death WHERE note LIKE '%East%'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Yes, please list them",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT * FROM death where note like \"%East%\"",
                "predict": "SELECT * FROM death WHERE note LIKE '%East%'",
                "Rewriter": "",
                "Selector": "Table:death\n[(caused_by_ship_id, caused by ship id type:number. Value examples:[1, 2, 3]),(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(note, note type:text. Value examples:[Dantewada, Chhattisgarh, Erraboru, Chhattisgarh, East Champaran, Bihar]),(killed, killed type:number. Value examples:[8, 3, 25]),(injured, injured type:number. Value examples:[0, 9, 5]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            3,
                            3,
                            "East Champaran, Bihar",
                            2,
                            0
                        ]
                    ],
                    "sql": "SELECT * FROM death WHERE note LIKE '%East%'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: List death events with the substring East in the event note.\nSQL ```sql SELECT * FROM death WHERE note LIKE '%East%'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you! Bye!",
                "query": "",
                "predict": "You're welcome! Is there anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:battle\n[(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(name, name type:text. Value examples:[Battle of Adrianople, Battle of Serres, Battle of Rusion]),(date, date type:text. Value examples:[14 April 1205, June 1205, 31 January 1206]),(bulgarian_commander, bulgarian commander type:text. Value examples:[Kaloyan, Unknown, Boril]),(latin_commander, latin commander type:text. Value examples:[Baldwin I, Unknown, Thierry de Termond]),(result, result type:text. Value examples:[Bulgarian victory, Latin victory, Two Year Truce]),]\nTable:ship\n[(lost_in_battle, lost in battle type:number. Value examples:[8, 7, 6]),(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(name, name type:text. Value examples:[Lettice, Bon Accord, Mary]),(tonnage, tonnage type:text. Value examples:[t, 391, 225]),(ship_type, ship type type:text. Value examples:[Brig, 18-gun Brig, 8 gun Brig]),(location, location type:text. Value examples:[English Channel, SW Approaches, Mid-Atlantic]),(disposition_of_ship, disposition of ship type:text. Value examples:[Captured, Wrecked, Scuttled]),]\nTable:death\n[(caused_by_ship_id, caused by ship id type:number. Value examples:[1, 2, 3]),(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(note, note type:text. Value examples:[Dantewada, Chhattisgarh, Erraboru, Chhattisgarh, East Champaran, Bihar]),(killed, killed type:number. Value examples:[8, 3, 25]),(injured, injured type:number. Value examples:[0, 9, 5]),]\nForeign keys:\nship.lost_in_battle = battle.id\ndeath.caused_by_ship_id = ship.id\n",
                "Detector": "You're welcome! Is there anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 78
    },
    {
        "db_name": "battle_death",
        "turns": [
            {
                "isuser": true,
                "text": "What are the death situations caused by the ship with tonnage 't' ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T1.killed FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'\n\n",
                "predict": "The database schema does not contain information about the death situations.  The 'death' table only contains information about the number of killed and injured, and a note field.  It does not contain information about the circumstances of the deaths. \n",
                "Rewriter": "",
                "Selector": "Table:ship\n[(lost_in_battle, lost in battle type:number. Value examples:[8, 7, 6]),(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(name, name type:text. Value examples:[Lettice, Bon Accord, Mary]),(tonnage, tonnage type:text. Value examples:[t, 391, 225]),(ship_type, ship type type:text. Value examples:[Brig, 18-gun Brig, 8 gun Brig]),(location, location type:text. Value examples:[English Channel, SW Approaches, Mid-Atlantic]),(disposition_of_ship, disposition of ship type:text. Value examples:[Captured, Wrecked, Scuttled]),]\nTable:death\n[(caused_by_ship_id, caused by ship id type:number. Value examples:[1, 2, 3]),(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(note, note type:text. Value examples:[Dantewada, Chhattisgarh, Erraboru, Chhattisgarh, East Champaran, Bihar]),(killed, killed type:number. Value examples:[8, 3, 25]),(injured, injured type:number. Value examples:[0, 9, 5]),]\nForeign keys:\ndeath.caused_by_ship_id = ship.id\n",
                "Detector": "The database schema does not contain information about the death situations.  The 'death' table only contains information about the number of killed and injured, and a note field.  It does not contain information about the circumstances of the deaths. \n",
                "Decomposer": "",
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What are the injury situations caused by the ship with tonnage 't' ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'\n\n",
                "predict": "SELECT injured FROM death WHERE caused_by_ship_id = (SELECT id FROM ship WHERE tonnage = 't')",
                "Rewriter": "",
                "Selector": "Table:ship\n[(lost_in_battle, lost in battle type:number. Value examples:[8, 7, 6]),(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(tonnage, tonnage type:text. Value examples:[t, 391, 225]),]\nTable:death\n[(caused_by_ship_id, caused by ship id type:number. Value examples:[1, 2, 3]),(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(injured, injured type:number. Value examples:[0, 9, 5]),]\nForeign keys:\ndeath.caused_by_ship_id = ship.id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            0
                        ],
                        [
                            0
                        ]
                    ],
                    "sql": "SELECT injured FROM death WHERE caused_by_ship_id = (SELECT id FROM ship WHERE tonnage = 't')",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the ID of the ship with tonnage 't'.\nSQL: ```sql SELECT id FROM ship WHERE tonnage = 't'```\n\nSubquestion 2: Find the injury situations caused by the ship with tonnage 't'.\nSQL: ```sql SELECT injured FROM death WHERE caused_by_ship_id = (SELECT id FROM ship WHERE tonnage = 't')```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Tell me the total number of death and injury situations caused by the ship with tonnage 't'..",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT COUNT(T1.id) FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'\n\n",
                "predict": "SELECT SUM(T1.killed) + SUM(T1.injured) FROM death AS T1 INNER JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'",
                "Rewriter": "",
                "Selector": "Table:ship\n[(lost_in_battle, lost in battle type:number. Value examples:[8, 7, 6]),(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(tonnage, tonnage type:text. Value examples:[t, 391, 225]),]\nTable:death\n[(caused_by_ship_id, caused by ship id type:number. Value examples:[1, 2, 3]),(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(killed, killed type:number. Value examples:[8, 3, 25]),(injured, injured type:number. Value examples:[0, 9, 5]),]\nForeign keys:\ndeath.caused_by_ship_id = ship.id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            90
                        ]
                    ],
                    "sql": "SELECT SUM(T1.killed) + SUM(T1.injured) FROM death AS T1 INNER JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Get the total number of death situations caused by the ship with tonnage 't'.\nSQL ```sql SELECT COUNT(T1.killed) FROM death AS T1 INNER JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'```\nSubquestion 2: Get the total number of injury situations caused by the ship with tonnage 't'.\nSQL ```sql SELECT COUNT(T1.injured) FROM death AS T1 INNER JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'```\nSubquestion 3: Get the total number of death and injury situations caused by the ship with tonnage 't'.\nSQL ```sql SELECT SUM(T1.killed) + SUM(T1.injured) FROM death AS T1 INNER JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome. Good bye!",
                "query": "",
                "predict": "You're welcome! Is there anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:ship\n[(lost_in_battle, lost in battle type:number. Value examples:[8, 7, 6]),(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(tonnage, tonnage type:text. Value examples:[t, 391, 225]),]\nTable:death\n[(caused_by_ship_id, caused by ship id type:number. Value examples:[1, 2, 3]),(id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(killed, killed type:number. Value examples:[8, 3, 25]),(injured, injured type:number. Value examples:[0, 9, 5]),]\nForeign keys:\ndeath.caused_by_ship_id = ship.id\n",
                "Detector": "You're welcome! Is there anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 79
    },
    {
        "db_name": "car_1",
        "turns": [
            {
                "isuser": true,
                "text": "Can you list the number of car makers on each continent?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
                "predict": "SELECT T1.Continent, COUNT(T3.Id) FROM continents AS T1 INNER JOIN countries AS T2 ON T1.ContId = T2.Continent INNER JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
                "Rewriter": "",
                "Selector": "Table:continents\n[(ContId, cont id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Continent, continent type:text. Value examples:[america, europe, asia]),]\nTable:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nTable:car_makers\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:text. Value examples:[amc, volkswagen, bmw]),(FullName, full name type:text. Value examples:[American Motor Company, Volkswagen, BMW]),(Country, country type:text. Value examples:[1, 2, 3]),]\nTable:model_list\n[(ModelId, model id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:number. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[amc, audi, bmw]),]\nForeign keys:\ncountries.Continent = continents.ContId\ncar_makers.Country = countries.CountryId\nmodel_list.Maker = car_makers.Id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "america",
                            4
                        ],
                        [
                            "asia",
                            7
                        ],
                        [
                            "europe",
                            11
                        ]
                    ],
                    "sql": "SELECT T1.Continent, COUNT(T3.Id) FROM continents AS T1 INNER JOIN countries AS T2 ON T1.ContId = T2.Continent INNER JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: List the number of car makers on each continent. \nSQL ```sql SELECT T1.Continent, COUNT(T3.Id) FROM continents AS T1 INNER JOIN countries AS T2 ON T1.ContId = T2.Continent INNER JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What about the number of car makers in the country USA?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "seLECT count(*) FROM car_makers as T1 join countries as T2 on T2.CountryId  =  T1.Country where T2.countryname = \"usa\"",
                "predict": "SELECT COUNT(DISTINCT T2.Id) FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T1.CountryName = 'usa'",
                "Rewriter": "",
                "Selector": "Table:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nTable:car_makers\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:text. Value examples:[amc, volkswagen, bmw]),(FullName, full name type:text. Value examples:[American Motor Company, Volkswagen, BMW]),(Country, country type:text. Value examples:[1, 2, 3]),]\nTable:model_list\n[(ModelId, model id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:number. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[amc, audi, bmw]),]\nForeign keys:\ncar_makers.Country = countries.CountryId\nmodel_list.Maker = car_makers.Id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            4
                        ]
                    ],
                    "sql": "SELECT COUNT(DISTINCT T2.Id) FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T1.CountryName = 'usa'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the CountryId for USA.\nSQL ```sql SELECT CountryId FROM countries WHERE CountryName = 'usa'```\nSubquestion 2: Count the number of car makers in the country USA.\nSQL ```sql SELECT COUNT(DISTINCT T2.Id) FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T1.CountryName = 'usa'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "How about in the country Germany?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "seLECT count(*) FROM car_makers as T1 join countries as T2 on T2.CountryId  =  T1.Country where T2.countryname = \"germany\"",
                "predict": "SELECT COUNT(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'germany')",
                "Rewriter": "",
                "Selector": "Table:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nTable:car_makers\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:text. Value examples:[amc, volkswagen, bmw]),(FullName, full name type:text. Value examples:[American Motor Company, Volkswagen, BMW]),(Country, country type:text. Value examples:[1, 2, 3]),]\nTable:model_list\n[(ModelId, model id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:number. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[amc, audi, bmw]),]\nTable:car_names\n[(MakeId, make id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[chevrolet, buick, plymouth]),(Make, make type:text. Value examples:[chevrolet chevelle malibu, buick skylark 320, plymouth satellite]),]\nForeign keys:\ncar_makers.Country = countries.CountryId\nmodel_list.Maker = car_makers.Id\ncar_names.Model = model_list.Model\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            4
                        ]
                    ],
                    "sql": "SELECT COUNT(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'germany')",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the CountryId for Germany.\nSQL: ```sql SELECT CountryId FROM countries WHERE CountryName = 'germany'```\n\nSubquestion 2: Count the number of car makers in the country Germany.\nSQL: ```sql SELECT COUNT(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'germany')```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What about France?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "seLECT count(*) FROM car_makers as T1 join countries as T2 on T2.CountryId  =  T1.Country where T2.countryname = \"france\"",
                "predict": "SELECT COUNT(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'france')",
                "Rewriter": "",
                "Selector": "Table:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nTable:car_makers\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(FullName, full name type:text. Value examples:[American Motor Company, Volkswagen, BMW]),(Country, country type:text. Value examples:[1, 2, 3]),]\nTable:model_list\n[(ModelId, model id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:number. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[amc, audi, bmw]),]\nTable:car_names\n[(MakeId, make id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[chevrolet, buick, plymouth]),(Make, make type:text. Value examples:[chevrolet chevelle malibu, buick skylark 320, plymouth satellite]),]\nForeign keys:\ncar_makers.Country = countries.CountryId\nmodel_list.Maker = car_makers.Id\ncar_names.Model = model_list.Model\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            3
                        ]
                    ],
                    "sql": "SELECT COUNT(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'france')",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the CountryId for France.\nSQL: ```sql SELECT CountryId FROM countries WHERE CountryName = 'france'```\n\nSubquestion 2: Count the number of car makers in France.\nSQL: ```sql SELECT COUNT(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'france')```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye",
                "query": "",
                "predict": "You're welcome! Is there anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:continents\n[(ContId, cont id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Continent, continent type:text. Value examples:[america, europe, asia]),]\nTable:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nTable:car_makers\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:text. Value examples:[amc, volkswagen, bmw]),(FullName, full name type:text. Value examples:[American Motor Company, Volkswagen, BMW]),(Country, country type:text. Value examples:[1, 2, 3]),]\nTable:model_list\n[(ModelId, model id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:number. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[amc, audi, bmw]),]\nTable:car_names\n[(MakeId, make id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[chevrolet, buick, plymouth]),(Make, make type:text. Value examples:[chevrolet chevelle malibu, buick skylark 320, plymouth satellite]),]\nForeign keys:\ncountries.Continent = continents.ContId\ncar_makers.Country = countries.CountryId\nmodel_list.Maker = car_makers.Id\ncar_names.Model = model_list.Model\n",
                "Detector": "You're welcome! Is there anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 80
    },
    {
        "db_name": "cre_Doc_Template_Mgt",
        "turns": [
            {
                "isuser": true,
                "text": "How many documents have template type code BK?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
                "predict": "SELECT COUNT(DISTINCT Document_ID) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'BK')",
                "Rewriter": "",
                "Selector": "Table:Ref_Template_Types\n[(Template_Type_Code, template type code type:text PRIMARY KEY. Value examples:[AD, BK, CV]),(Template_Type_Description, template type description type:text. Value examples:[Presentation, CV, Advertisement]),]\nTable:Templates\n[(Template_ID, template id type:number PRIMARY KEY. Value examples:[0, 1, 4]),(Template_Type_Code, template type code type:text. Value examples:[PP, BK, PPT]),]\nTable:Documents\n[(Document_ID, document id type:number PRIMARY KEY. Value examples:[0, 1, 3]),(Template_ID, template id type:number. Value examples:[7, 25, 6]),]\nForeign keys:\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDocuments.Template_ID = Templates.Template_ID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            5
                        ]
                    ],
                    "sql": "SELECT COUNT(DISTINCT Document_ID) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'BK')",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the Template_ID of templates with Template_Type_Code 'BK'.\nSQL: ```sql SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'BK'```\nSubquestion 2: Count the number of documents that have the Template_ID from the previous subquestion.\nSQL: ```sql SELECT COUNT(DISTINCT Document_ID) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'BK')```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "And their names?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
                "predict": "SELECT T3.Document_Name FROM Templates AS T1 INNER JOIN Documents AS T3 ON T1.Template_ID = T3.Template_ID INNER JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Code = 'BK'",
                "Rewriter": "",
                "Selector": "Table:Ref_Template_Types\n[(Template_Type_Code, template type code type:text PRIMARY KEY. Value examples:[AD, BK, CV]),(Template_Type_Description, template type description type:text. Value examples:[Presentation, CV, Advertisement]),]\nTable:Templates\n[(Template_ID, template id type:number PRIMARY KEY. Value examples:[0, 1, 4]),(Template_Type_Code, template type code type:text. Value examples:[PP, BK, PPT]),]\nTable:Documents\n[(Document_ID, document id type:number PRIMARY KEY. Value examples:[0, 1, 3]),(Template_ID, template id type:number. Value examples:[7, 25, 6]),(Document_Name, document name type:text. Value examples:[Introduction of OS, Understanding DB, Summer Show]),]\nForeign keys:\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDocuments.Template_ID = Templates.Template_ID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Robbin CV"
                        ],
                        [
                            "Data base"
                        ],
                        [
                            "How to read a book"
                        ],
                        [
                            "Palm reading"
                        ],
                        [
                            "About Korea"
                        ]
                    ],
                    "sql": "SELECT T3.Document_Name FROM Templates AS T1 INNER JOIN Documents AS T3 ON T1.Template_ID = T3.Template_ID INNER JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Code = 'BK'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: List the names of documents that have template type code BK.\nSQL ```sql SELECT T3.Document_Name FROM Templates AS T1 INNER JOIN Documents AS T3 ON T1.Template_ID = T3.Template_ID INNER JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Code = 'BK'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "How many documents do not have template type code BK?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "Select count(*) from documents where document_name not in \n(SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\")",
                "predict": "SELECT COUNT(DISTINCT T2.Document_ID) FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Template_Type_Code != 'BK'",
                "Rewriter": "",
                "Selector": "Table:Ref_Template_Types\n[(Template_Type_Code, template type code type:text PRIMARY KEY. Value examples:[AD, BK, CV]),(Template_Type_Description, template type description type:text. Value examples:[Presentation, CV, Advertisement]),]\nTable:Templates\n[(Template_ID, template id type:number PRIMARY KEY. Value examples:[0, 1, 4]),(Template_Type_Code, template type code type:text. Value examples:[PP, BK, PPT]),]\nTable:Documents\n[(Document_ID, document id type:number PRIMARY KEY. Value examples:[0, 1, 3]),(Template_ID, template id type:number. Value examples:[7, 25, 6]),(Document_Name, document name type:text. Value examples:[Introduction of OS, Understanding DB, Summer Show]),]\nForeign keys:\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDocuments.Template_ID = Templates.Template_ID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            10
                        ]
                    ],
                    "sql": "SELECT COUNT(DISTINCT T2.Document_ID) FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Template_Type_Code != 'BK'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the number of documents that do not have template type code BK.\nSQL ```sql SELECT COUNT(DISTINCT T2.Document_ID) FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Template_Type_Code != 'BK'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Great! I appreciate your help. Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you, good bye. ",
                "query": "",
                "predict": "You're welcome! I'm glad I could help. \n",
                "Rewriter": "",
                "Selector": "Table:Ref_Template_Types\n[(Template_Type_Code, template type code type:text PRIMARY KEY. Value examples:[AD, BK, CV]),(Template_Type_Description, template type description type:text. Value examples:[Presentation, CV, Advertisement]),]\nTable:Templates\n[(Template_ID, template id type:number PRIMARY KEY. Value examples:[0, 1, 4]),(Version_Number, version number type:number. Value examples:[5, 9, 4]),(Template_Type_Code, template type code type:text. Value examples:[PP, BK, PPT]),(Date_Effective_From, date effective from type:time. Value examples:[2005-11-12 07:09:48, 2010-09-24 01:15:11, 2002-03-02 14:39:49]),(Date_Effective_To, date effective to type:time. Value examples:[2008-01-05 14:19:28, 1999-07-08 03:31:04, 2001-04-18 09:29:52]),]\nTable:Documents\n[(Document_ID, document id type:number PRIMARY KEY. Value examples:[0, 1, 3]),(Template_ID, template id type:number. Value examples:[7, 25, 6]),(Document_Name, document name type:text. Value examples:[Introduction of OS, Understanding DB, Summer Show]),]\nForeign keys:\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDocuments.Template_ID = Templates.Template_ID\n",
                "Detector": "You're welcome! I'm glad I could help. \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 81
    },
    {
        "db_name": "dog_kennels",
        "turns": [
            {
                "isuser": true,
                "text": "which professionals live in state of indiana?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "What information do you want to know about these professionals? ",
                "query": "",
                "predict": "SELECT * FROM Professionals WHERE state = 'Indiana'",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Professionals\n[(professional_id, professional id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(role_code, role code type:text. Value examples:[Employee, Veterenarian]),(first_name, first name type:text. Value examples:[Taryn, Jayson, Olaf]),(street, street type:text. Value examples:[6915 Oberbrunner Point Suite 491\nGleasonville, LA , 88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194, 68589 Bradly Manor\nNew Audrey, IN 91497]),(city, city type:text. Value examples:[West Heidi, North Odellfurt, Jaceton]),(state, state type:text. Value examples:[Indiana, Connecticut, Wisconsin]),(zip_code, zip code type:text. Value examples:[06646, 43129, 77129]),(last_name, last name type:text. Value examples:[Braun, Ullrich, Watsica]),(email_address, email address type:text. Value examples:[deanna.schuster@example.com, lucile.shanahan@example.org, uboehm@example.org]),(home_phone, home phone type:text. Value examples:[+71(6)2898266914, +02(1)0259033559, 325-155-0801x7005]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            1,
                            "Employee",
                            "Taryn",
                            "6915 Oberbrunner Point Suite 491\nGleasonville, LA ",
                            "West Heidi",
                            "Indiana",
                            "06646",
                            "Braun",
                            "deanna.schuster@example.com",
                            "+71(6)2898266914",
                            "(275)939-2435x80863"
                        ],
                        [
                            8,
                            "Employee",
                            "Karley",
                            "36895 Eli Ferry\nPort Marcelle, FL 45712",
                            "Kirastad",
                            "Indiana",
                            "33020",
                            "Hyatt",
                            "goyette.roosevelt@example.net",
                            "891.475.2256",
                            "328.842.3792"
                        ]
                    ],
                    "sql": "SELECT * FROM Professionals WHERE state = 'Indiana'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Which professionals live in the state of Indiana?\nSQL ```sql SELECT * FROM Professionals WHERE state = 'Indiana'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "I would like to know all the information about professionals?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT * FROM Professionals WHERE state  =  'Indiana'",
                "predict": "SELECT * FROM Professionals",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Treatment_Types\n[(treatment_type_code, treatment type code type:text PRIMARY KEY. Value examples:[EXAM, VAC, WALK]),(treatment_type_description, treatment type description type:text. Value examples:[Physical examination, Vaccination, Take for a Walk]),]\nTable:Professionals\n[(professional_id, professional id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(role_code, role code type:text. Value examples:[Employee, Veterenarian]),(first_name, first name type:text. Value examples:[Taryn, Jayson, Olaf]),(street, street type:text. Value examples:[6915 Oberbrunner Point Suite 491\nGleasonville, LA , 88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194, 68589 Bradly Manor\nNew Audrey, IN 91497]),(city, city type:text. Value examples:[West Heidi, North Odellfurt, Jaceton]),(state, state type:text. Value examples:[Indiana, Connecticut, Wisconsin]),(zip_code, zip code type:text. Value examples:[06646, 43129, 77129]),(last_name, last name type:text. Value examples:[Braun, Ullrich, Watsica]),(email_address, email address type:text. Value examples:[deanna.schuster@example.com, lucile.shanahan@example.org, uboehm@example.org]),(home_phone, home phone type:text. Value examples:[+71(6)2898266914, +02(1)0259033559, 325-155-0801x7005]),(cell_number, cell number type:text. Value examples:[(275)939-2435x80863, 889-940-2676, (369)908-7311x065]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            1,
                            "Employee",
                            "Taryn",
                            "6915 Oberbrunner Point Suite 491\nGleasonville, LA ",
                            "West Heidi",
                            "Indiana",
                            "06646",
                            "Braun",
                            "deanna.schuster@example.com",
                            "+71(6)2898266914",
                            "(275)939-2435x80863"
                        ],
                        [
                            2,
                            "Employee",
                            "Jayson",
                            "88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194",
                            "North Odellfurt",
                            "Connecticut",
                            "43129",
                            "Ullrich",
                            "lucile.shanahan@example.org",
                            "+02(1)0259033559",
                            "889-940-2676"
                        ],
                        [
                            3,
                            "Employee",
                            "Olaf",
                            "68589 Bradly Manor\nNew Audrey, IN 91497",
                            "Jaceton",
                            "Wisconsin",
                            "77129",
                            "Watsica",
                            "uboehm@example.org",
                            "325-155-0801x7005",
                            "(369)908-7311x065"
                        ],
                        [
                            4,
                            "Veterenarian",
                            "Vernice",
                            "72532 Hane Course\nLake Berylland, ND 95283",
                            "Domenickton",
                            "Mississippi",
                            "02281",
                            "Tillman",
                            "lourdes.lowe@example.net",
                            "312.216.3352",
                            "00230569697"
                        ],
                        [
                            5,
                            "Veterenarian",
                            "Danny",
                            "188 VonRueden Tunnel Suite 630\nNorth Macibury, NV ",
                            "New Laurytown",
                            "Hawaii",
                            "84515",
                            "Considine",
                            "mekhi.little@example.org",
                            "1-609-566-2752x25197",
                            "011.193.9081x3186"
                        ],
                        [
                            6,
                            "Veterenarian",
                            "Ruben",
                            "17286 Waters Green\nEast Bernadinefort, CA 89573",
                            "Baileymouth",
                            "NewMexico",
                            "52476",
                            "O'Reilly",
                            "jacynthe.mclaughlin@example.net",
                            "+43(5)1132733868",
                            "139-321-7313"
                        ],
                        [
                            7,
                            "Veterenarian",
                            "Velva",
                            "44234 Marvin Shoals Suite 659\nNorth Frances, AL 23",
                            "McLaughlinfort",
                            "NorthCarolina",
                            "67980",
                            "Hayes",
                            "lambert62@example.org",
                            "022.529.0550x1319",
                            "499-434-0215x1628"
                        ],
                        [
                            8,
                            "Employee",
                            "Karley",
                            "36895 Eli Ferry\nPort Marcelle, FL 45712",
                            "Kirastad",
                            "Indiana",
                            "33020",
                            "Hyatt",
                            "goyette.roosevelt@example.net",
                            "891.475.2256",
                            "328.842.3792"
                        ],
                        [
                            9,
                            "Veterenarian",
                            "Monte",
                            "07073 Brenna Ways Suite 089\nLowehaven, KY 93275-96",
                            "South Rockyport",
                            "SouthCarolina",
                            "80775",
                            "Kshlerin",
                            "schneider.kathryne@example.org",
                            "320-508-6023",
                            "962-983-8109x3509"
                        ],
                        [
                            10,
                            "Employee",
                            "Domenica",
                            "7284 Torphy Flats Apt. 610\nDiannaburgh, SC 78560",
                            "New Maryjane",
                            "California",
                            "54312",
                            "Jacobs",
                            "jerrod.bahringer@example.org",
                            "(230)338-3342x585",
                            "461-801-2600"
                        ]
                    ],
                    "sql": "SELECT * FROM Professionals",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: List all information about professionals. \nSQL ```sql SELECT * FROM Professionals```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "ok, I need to know the cell number of taryn",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT cell_number FROM Professionals WHERE first_name = \"Taryn\"",
                "predict": "SELECT cell_number FROM Professionals WHERE first_name = 'Taryn'",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Professionals\n[(professional_id, professional id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(role_code, role code type:text. Value examples:[Employee, Veterenarian]),(first_name, first name type:text. Value examples:[Taryn, Jayson, Olaf]),(street, street type:text. Value examples:[6915 Oberbrunner Point Suite 491\nGleasonville, LA , 88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194, 68589 Bradly Manor\nNew Audrey, IN 91497]),(city, city type:text. Value examples:[West Heidi, North Odellfurt, Jaceton]),(state, state type:text. Value examples:[Indiana, Connecticut, Wisconsin]),(zip_code, zip code type:text. Value examples:[06646, 43129, 77129]),(last_name, last name type:text. Value examples:[Braun, Ullrich, Watsica]),(email_address, email address type:text. Value examples:[deanna.schuster@example.com, lucile.shanahan@example.org, uboehm@example.org]),(home_phone, home phone type:text. Value examples:[+71(6)2898266914, +02(1)0259033559, 325-155-0801x7005]),(cell_number, cell number type:text. Value examples:[(275)939-2435x80863, 889-940-2676, (369)908-7311x065]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "(275)939-2435x80863"
                        ]
                    ],
                    "sql": "SELECT cell_number FROM Professionals WHERE first_name = 'Taryn'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the cell number of Taryn.\nSQL: ```sql SELECT cell_number FROM Professionals WHERE first_name = 'Taryn'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "ok,thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "thank you, good bye",
                "query": "",
                "predict": "You're welcome! Is there anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Treatment_Types\n[(treatment_type_code, treatment type code type:text PRIMARY KEY. Value examples:[EXAM, VAC, WALK]),(treatment_type_description, treatment type description type:text. Value examples:[Physical examination, Vaccination, Take for a Walk]),]\nTable:Professionals\n[(professional_id, professional id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(role_code, role code type:text. Value examples:[Employee, Veterenarian]),(first_name, first name type:text. Value examples:[Taryn, Jayson, Olaf]),(street, street type:text. Value examples:[6915 Oberbrunner Point Suite 491\nGleasonville, LA , 88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194, 68589 Bradly Manor\nNew Audrey, IN 91497]),(city, city type:text. Value examples:[West Heidi, North Odellfurt, Jaceton]),(state, state type:text. Value examples:[Indiana, Connecticut, Wisconsin]),(zip_code, zip code type:text. Value examples:[06646, 43129, 77129]),(last_name, last name type:text. Value examples:[Braun, Ullrich, Watsica]),(email_address, email address type:text. Value examples:[deanna.schuster@example.com, lucile.shanahan@example.org, uboehm@example.org]),(home_phone, home phone type:text. Value examples:[+71(6)2898266914, +02(1)0259033559, 325-155-0801x7005]),(cell_number, cell number type:text. Value examples:[(275)939-2435x80863, 889-940-2676, (369)908-7311x065]),]\nForeign keys:\n",
                "Detector": "You're welcome! Is there anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 83
    },
    {
        "db_name": "cre_Doc_Template_Mgt",
        "turns": [
            {
                "isuser": true,
                "text": "how many templates there",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT count(*) FROM Templates",
                "predict": "SELECT COUNT(DISTINCT Template_ID) FROM Templates",
                "Rewriter": "",
                "Selector": "Table:Ref_Template_Types\n[(Template_Type_Code, template type code type:text PRIMARY KEY. Value examples:[AD, BK, CV]),(Template_Type_Description, template type description type:text. Value examples:[Presentation, CV, Advertisement]),]\nTable:Templates\n[(Template_ID, template id type:number PRIMARY KEY. Value examples:[0, 1, 4]),(Version_Number, version number type:number. Value examples:[5, 9, 4]),(Template_Type_Code, template type code type:text. Value examples:[PP, BK, PPT]),(Date_Effective_From, date effective from type:time. Value examples:[2005-11-12 07:09:48, 2010-09-24 01:15:11, 2002-03-02 14:39:49]),(Date_Effective_To, date effective to type:time. Value examples:[2008-01-05 14:19:28, 1999-07-08 03:31:04, 2001-04-18 09:29:52]),]\nForeign keys:\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            20
                        ]
                    ],
                    "sql": "SELECT COUNT(DISTINCT Template_ID) FROM Templates",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: How many templates are there?\nSQL ```sql SELECT COUNT(DISTINCT Template_ID) FROM Templates```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "what is the date effective of template id 1",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT Date_Effective_From, Date_Effective_To FROM Templates where Template_ID=1 ",
                "predict": "SELECT 'Date_Effective_From' FROM Templates WHERE 'Template_ID' = 1",
                "Rewriter": "",
                "Selector": "Table:Ref_Template_Types\n[(Template_Type_Code, template type code type:text PRIMARY KEY. Value examples:[AD, BK, CV]),(Template_Type_Description, template type description type:text. Value examples:[Presentation, CV, Advertisement]),]\nTable:Templates\n[(Template_ID, template id type:number PRIMARY KEY. Value examples:[0, 1, 4]),(Version_Number, version number type:number. Value examples:[5, 9, 4]),(Template_Type_Code, template type code type:text. Value examples:[PP, BK, PPT]),(Date_Effective_From, date effective from type:time. Value examples:[2005-11-12 07:09:48, 2010-09-24 01:15:11, 2002-03-02 14:39:49]),(Date_Effective_To, date effective to type:time. Value examples:[2008-01-05 14:19:28, 1999-07-08 03:31:04, 2001-04-18 09:29:52]),]\nForeign keys:\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [],
                    "sql": "SELECT 'Date_Effective_From' FROM Templates WHERE 'Template_ID' = 1",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What is the date effective of template id 1?\nSQL ```sql SELECT 'Date_Effective_From' FROM Templates WHERE 'Template_ID' = 1```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "what is the template type code of template id 4",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT Template_Type_Code  FROM Templates where Template_ID=4",
                "predict": "SELECT Template_Type_Code FROM Templates WHERE Template_ID = 4",
                "Rewriter": "",
                "Selector": "Table:Ref_Template_Types\n[(Template_Type_Code, template type code type:text PRIMARY KEY. Value examples:[AD, BK, CV]),(Template_Type_Description, template type description type:text. Value examples:[Presentation, CV, Advertisement]),]\nTable:Templates\n[(Template_ID, template id type:number PRIMARY KEY. Value examples:[0, 1, 4]),(Template_Type_Code, template type code type:text. Value examples:[PP, BK, PPT]),(Date_Effective_From, date effective from type:time. Value examples:[2005-11-12 07:09:48, 2010-09-24 01:15:11, 2002-03-02 14:39:49]),(Date_Effective_To, date effective to type:time. Value examples:[2008-01-05 14:19:28, 1999-07-08 03:31:04, 2001-04-18 09:29:52]),]\nForeign keys:\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "BK"
                        ]
                    ],
                    "sql": "SELECT Template_Type_Code FROM Templates WHERE Template_ID = 4",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What is the template type code of template id 4?\nSQL ```sql SELECT Template_Type_Code FROM Templates WHERE Template_ID = 4```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "what is the version number of template id 0",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT Version_Number  FROM Templates where Template_ID=0",
                "predict": "SELECT Version_Number FROM Templates WHERE Template_ID = 0",
                "Rewriter": "",
                "Selector": "Table:Ref_Template_Types\n[(Template_Type_Code, template type code type:text PRIMARY KEY. Value examples:[AD, BK, CV]),(Template_Type_Description, template type description type:text. Value examples:[Presentation, CV, Advertisement]),]\nTable:Templates\n[(Template_ID, template id type:number PRIMARY KEY. Value examples:[0, 1, 4]),(Version_Number, version number type:number. Value examples:[5, 9, 4]),(Template_Type_Code, template type code type:text. Value examples:[PP, BK, PPT]),(Date_Effective_From, date effective from type:time. Value examples:[2005-11-12 07:09:48, 2010-09-24 01:15:11, 2002-03-02 14:39:49]),(Date_Effective_To, date effective to type:time. Value examples:[2008-01-05 14:19:28, 1999-07-08 03:31:04, 2001-04-18 09:29:52]),]\nForeign keys:\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            5
                        ]
                    ],
                    "sql": "SELECT Version_Number FROM Templates WHERE Template_ID = 0",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What is the version number of template id 0?\nSQL ```sql SELECT Version_Number FROM Templates WHERE Template_ID = 0```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Do you want to know something else?",
                "query": "",
                "predict": "You're welcome! Is there anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:Ref_Template_Types\n[(Template_Type_Code, template type code type:text PRIMARY KEY. Value examples:[AD, BK, CV]),(Template_Type_Description, template type description type:text. Value examples:[Presentation, CV, Advertisement]),]\nTable:Templates\n[(Template_ID, template id type:number PRIMARY KEY. Value examples:[0, 1, 4]),(Version_Number, version number type:number. Value examples:[5, 9, 4]),(Template_Type_Code, template type code type:text. Value examples:[PP, BK, PPT]),(Date_Effective_From, date effective from type:time. Value examples:[2005-11-12 07:09:48, 2010-09-24 01:15:11, 2002-03-02 14:39:49]),(Date_Effective_To, date effective to type:time. Value examples:[2008-01-05 14:19:28, 1999-07-08 03:31:04, 2001-04-18 09:29:52]),]\nForeign keys:\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\n",
                "Detector": "You're welcome! Is there anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 84
    },
    {
        "db_name": "car_1",
        "turns": [
            {
                "isuser": true,
                "text": "WHAT IS THE ACCELERATE OF THE CAR MAKE AMC HORNET SPORTABOUT(SW)",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
                "predict": "SELECT T2.Accelerate FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T1.MakeId = ( SELECT T1.MakeId FROM car_names AS T1 INNER JOIN model_list AS T2 ON T1.Model = T2.Model INNER JOIN car_makers AS T3 ON T2.Maker = T3.Id WHERE T3.Maker = 'amc' AND T1.Make = 'amc hornet sportabout(sw)' )",
                "Rewriter": "",
                "Selector": "Table:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nTable:car_makers\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:text. Value examples:[amc, volkswagen, bmw]),(FullName, full name type:text. Value examples:[American Motor Company, Volkswagen, BMW]),(Country, country type:text. Value examples:[1, 2, 3]),]\nTable:model_list\n[(ModelId, model id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:number. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[amc, audi, bmw]),]\nTable:car_names\n[(MakeId, make id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[chevrolet, buick, plymouth]),(Make, make type:text. Value examples:[chevrolet chevelle malibu, buick skylark 320, plymouth satellite]),]\nTable:cars_data\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(MPG, mpg type:text. Value examples:[18, 15, 16]),(Cylinders, cylinders type:number. Value examples:[8, 4, 6]),(Edispl, edispl type:number. Value examples:[307.0, 350.0, 318.0]),(Horsepower, horsepower type:text. Value examples:[130, 165, 150]),(Weight, weight type:number. Value examples:[3504, 3693, 3436]),(Accelerate, accelerate type:number. Value examples:[12.0, 11.5, 11.0]),(Year, year type:number. Value examples:[1970, 1971, 1972]),]\nForeign keys:\ncar_makers.Country = countries.CountryId\nmodel_list.Maker = car_makers.Id\ncar_names.Model = model_list.Model\ncars_data.Id = car_names.MakeId\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [],
                    "sql": "SELECT T2.Accelerate FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T1.MakeId = ( SELECT T1.MakeId FROM car_names AS T1 INNER JOIN model_list AS T2 ON T1.Model = T2.Model INNER JOIN car_makers AS T3 ON T2.Maker = T3.Id WHERE T3.Maker = 'amc' AND T1.Make = 'amc hornet sportabout(sw)' )",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the MakeId of the car make AMC Hornet Sportabout(SW).\nSQL ```sql SELECT T1.MakeId FROM car_names AS T1 INNER JOIN model_list AS T2 ON T1.Model = T2.Model INNER JOIN car_makers AS T3 ON T2.Maker = T3.Id WHERE T3.Maker = 'amc' AND T1.Make = 'amc hornet sportabout(sw)'```\nSubquestion 2: Find the accelerate of the car with the MakeId.\nSQL ```sql SELECT T2.Accelerate FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T1.MakeId = ( SELECT T1.MakeId FROM car_names AS T1 INNER JOIN model_list AS T2 ON T1.Model = T2.Model INNER JOIN car_makers AS T3 ON T2.Maker = T3.Id WHERE T3.Maker = 'amc' AND T1.Make = 'amc hornet sportabout(sw)' )```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "WHICH CAR MODEL GIVES MORE ACCELRATION",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T2.Model FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId order by T1.Accelerate desc limit 1",
                "predict": "SELECT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId ORDER BY T1.Accelerate DESC LIMIT 1",
                "Rewriter": "",
                "Selector": "Table:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nTable:car_makers\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:text. Value examples:[amc, volkswagen, bmw]),(FullName, full name type:text. Value examples:[American Motor Company, Volkswagen, BMW]),(Country, country type:text. Value examples:[1, 2, 3]),]\nTable:model_list\n[(Maker, maker type:number. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[amc, audi, bmw]),]\nTable:car_names\n[(MakeId, make id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[chevrolet, buick, plymouth]),(Make, make type:text. Value examples:[chevrolet chevelle malibu, buick skylark 320, plymouth satellite]),]\nTable:cars_data\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Accelerate, accelerate type:number. Value examples:[12.0, 11.5, 11.0]),]\nForeign keys:\ncar_makers.Country = countries.CountryId\nmodel_list.Maker = car_makers.Id\ncar_names.Model = model_list.Model\ncars_data.Id = car_names.MakeId\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "peugeot"
                        ]
                    ],
                    "sql": "SELECT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId ORDER BY T1.Accelerate DESC LIMIT 1",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the car model with the highest acceleration.\nSQL ```sql SELECT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId ORDER BY T1.Accelerate DESC LIMIT 1```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "CAN YOU WHICH CAR MODEL IS MOST RECENT RELEASED",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T2.Model FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId order by T1.Year desc limit 1",
                "predict": "SELECT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = (SELECT MAX(T3.Year) FROM cars_data AS T3 INNER JOIN car_names AS T4 ON T3.Id = T4.MakeId)",
                "Rewriter": "",
                "Selector": "Table:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nTable:car_makers\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:text. Value examples:[amc, volkswagen, bmw]),(FullName, full name type:text. Value examples:[American Motor Company, Volkswagen, BMW]),(Country, country type:text. Value examples:[1, 2, 3]),]\nTable:model_list\n[(ModelId, model id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:number. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[amc, audi, bmw]),]\nTable:car_names\n[(MakeId, make id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[chevrolet, buick, plymouth]),(Make, make type:text. Value examples:[chevrolet chevelle malibu, buick skylark 320, plymouth satellite]),]\nTable:cars_data\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Year, year type:number. Value examples:[1970, 1971, 1972]),]\nForeign keys:\ncar_makers.Country = countries.CountryId\nmodel_list.Maker = car_makers.Id\ncar_names.Model = model_list.Model\ncars_data.Id = car_names.MakeId\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "chevrolet"
                        ],
                        [
                            "chevrolet"
                        ],
                        [
                            "chevrolet"
                        ],
                        [
                            "pontiac"
                        ],
                        [
                            "dodge"
                        ],
                        [
                            "pontiac"
                        ],
                        [
                            "ford"
                        ],
                        [
                            "amc"
                        ],
                        [
                            "volkswagen"
                        ],
                        [
                            "mazda"
                        ]
                    ],
                    "sql": "SELECT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = (SELECT MAX(T3.Year) FROM cars_data AS T3 INNER JOIN car_names AS T4 ON T3.Id = T4.MakeId)",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the most recent year of car release.\nSQL ```sql SELECT MAX(T1.Year) FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId```\nSubquestion 2: Find the car model that was released in the most recent year.\nSQL ```sql SELECT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = (SELECT MAX(T3.Year) FROM cars_data AS T3 INNER JOIN car_names AS T4 ON T3.Id = T4.MakeId)```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "THANKS! GOODBYE",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "welcome goodbye",
                "query": "",
                "predict": "You're welcome!  Have a great day! \n",
                "Rewriter": "",
                "Selector": "Table:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nTable:car_makers\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:text. Value examples:[amc, volkswagen, bmw]),(FullName, full name type:text. Value examples:[American Motor Company, Volkswagen, BMW]),(Country, country type:text. Value examples:[1, 2, 3]),]\nTable:model_list\n[(ModelId, model id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:number. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[amc, audi, bmw]),]\nTable:car_names\n[(MakeId, make id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[chevrolet, buick, plymouth]),(Make, make type:text. Value examples:[chevrolet chevelle malibu, buick skylark 320, plymouth satellite]),]\nTable:cars_data\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(MPG, mpg type:text. Value examples:[18, 15, 16]),(Cylinders, cylinders type:number. Value examples:[8, 4, 6]),(Edispl, edispl type:number. Value examples:[307.0, 350.0, 318.0]),(Horsepower, horsepower type:text. Value examples:[130, 165, 150]),(Weight, weight type:number. Value examples:[3504, 3693, 3436]),(Accelerate, accelerate type:number. Value examples:[12.0, 11.5, 11.0]),(Year, year type:number. Value examples:[1970, 1971, 1972]),]\nForeign keys:\ncar_makers.Country = countries.CountryId\nmodel_list.Maker = car_makers.Id\ncar_names.Model = model_list.Model\ncars_data.Id = car_names.MakeId\n",
                "Detector": "You're welcome!  Have a great day! \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 85
    },
    {
        "db_name": "cre_Doc_Template_Mgt",
        "turns": [
            {
                "isuser": true,
                "text": "what are all of the template ids?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT template_id FROM Templates;",
                "predict": "SELECT Template_ID FROM Templates",
                "Rewriter": "",
                "Selector": "Table:Ref_Template_Types\n[(Template_Type_Code, template type code type:text PRIMARY KEY. Value examples:[AD, BK, CV]),(Template_Type_Description, template type description type:text. Value examples:[Presentation, CV, Advertisement]),]\nTable:Templates\n[(Template_ID, template id type:number PRIMARY KEY. Value examples:[0, 1, 4]),(Version_Number, version number type:number. Value examples:[5, 9, 4]),(Template_Type_Code, template type code type:text. Value examples:[PP, BK, PPT]),(Date_Effective_From, date effective from type:time. Value examples:[2005-11-12 07:09:48, 2010-09-24 01:15:11, 2002-03-02 14:39:49]),(Date_Effective_To, date effective to type:time. Value examples:[2008-01-05 14:19:28, 1999-07-08 03:31:04, 2001-04-18 09:29:52]),]\nTable:Documents\n[(Document_ID, document id type:number PRIMARY KEY. Value examples:[0, 1, 3]),(Template_ID, template id type:number. Value examples:[7, 25, 6]),(Document_Name, document name type:text. Value examples:[Introduction of OS, Understanding DB, Summer Show]),(Document_Description, document description type:text. Value examples:[n, y, u]),(Other_Details, other details type:text. Value examples:[None]),]\nTable:Paragraphs\n[(Paragraph_ID, paragraph id type:number PRIMARY KEY. Value examples:[7, 9, 65]),(Document_ID, document id type:number. Value examples:[2394, 3, 50123]),(Paragraph_Text, paragraph text type:text. Value examples:[Korea, Somalia, Palestinian Territory]),(Other_Details, other details type:text. Value examples:[None]),]\nForeign keys:\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDocuments.Template_ID = Templates.Template_ID\nParagraphs.Document_ID = Documents.Document_ID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            0
                        ],
                        [
                            1
                        ],
                        [
                            4
                        ],
                        [
                            6
                        ],
                        [
                            7
                        ],
                        [
                            8
                        ],
                        [
                            9
                        ],
                        [
                            10
                        ],
                        [
                            11
                        ],
                        [
                            14
                        ]
                    ],
                    "sql": "SELECT Template_ID FROM Templates",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What are all of the template ids?\nSQL ```sql SELECT Template_ID FROM Templates```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "which of those is not used in a document ",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents\n\n",
                "predict": "SELECT T1.Template_ID FROM Templates AS T1 EXCEPT SELECT DISTINCT T1.Template_ID FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID",
                "Rewriter": "",
                "Selector": "Table:Ref_Template_Types\n[(Template_Type_Code, template type code type:text PRIMARY KEY. Value examples:[AD, BK, CV]),(Template_Type_Description, template type description type:text. Value examples:[Presentation, CV, Advertisement]),]\nTable:Templates\n[(Template_ID, template id type:number PRIMARY KEY. Value examples:[0, 1, 4]),(Template_Type_Code, template type code type:text. Value examples:[PP, BK, PPT]),]\nTable:Documents\n[(Document_ID, document id type:number PRIMARY KEY. Value examples:[0, 1, 3]),(Template_ID, template id type:number. Value examples:[7, 25, 6]),]\nForeign keys:\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDocuments.Template_ID = Templates.Template_ID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            0
                        ],
                        [
                            9
                        ],
                        [
                            15
                        ],
                        [
                            16
                        ],
                        [
                            18
                        ],
                        [
                            19
                        ],
                        [
                            23
                        ],
                        [
                            24
                        ]
                    ],
                    "sql": "SELECT T1.Template_ID FROM Templates AS T1 EXCEPT SELECT DISTINCT T1.Template_ID FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Get all template IDs that are used in a document.\nSQL ```sql SELECT DISTINCT T1.Template_ID FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID```\nSubquestion 2: Get all template IDs that are not used in a document.\nSQL ```sql SELECT T1.Template_ID FROM Templates AS T1 EXCEPT SELECT DISTINCT T1.Template_ID FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "are those still effective?\n",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you mean the effective-to date of those templates?",
                "query": "",
                "predict": "SELECT Template_ID FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Templates EXCEPT SELECT Template_ID FROM Documents) AND Date_Effective_To > Date('now')",
                "Rewriter": "",
                "Selector": "Table:Ref_Template_Types\n[(Template_Type_Code, template type code type:text PRIMARY KEY. Value examples:[AD, BK, CV]),(Template_Type_Description, template type description type:text. Value examples:[Presentation, CV, Advertisement]),]\nTable:Templates\n[(Template_ID, template id type:number PRIMARY KEY. Value examples:[0, 1, 4]),(Template_Type_Code, template type code type:text. Value examples:[PP, BK, PPT]),(Date_Effective_From, date effective from type:time. Value examples:[2005-11-12 07:09:48, 2010-09-24 01:15:11, 2002-03-02 14:39:49]),(Date_Effective_To, date effective to type:time. Value examples:[2008-01-05 14:19:28, 1999-07-08 03:31:04, 2001-04-18 09:29:52]),]\nTable:Documents\n[(Document_ID, document id type:number PRIMARY KEY. Value examples:[0, 1, 3]),(Template_ID, template id type:number. Value examples:[7, 25, 6]),]\nForeign keys:\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDocuments.Template_ID = Templates.Template_ID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [],
                    "sql": "SELECT Template_ID FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Templates EXCEPT SELECT Template_ID FROM Documents) AND Date_Effective_To > Date('now')",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the template IDs that are not used in any document.\nSQL: ```sql SELECT Template_ID FROM Templates EXCEPT SELECT Template_ID FROM Documents```\n\nSubquestion 2: Check if those template IDs are still effective.\nSQL: ```sql SELECT Template_ID FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Templates EXCEPT SELECT Template_ID FROM Documents) AND Date_Effective_To > Date('now')```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT Date_effective_to FROM Templates WHERE template_id IN ( SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents)\n\n",
                "predict": "SELECT Template_ID FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Templates EXCEPT SELECT Template_ID FROM Documents) AND Date_Effective_To > date('now')",
                "Rewriter": "",
                "Selector": "Table:Ref_Template_Types\n[(Template_Type_Code, template type code type:text PRIMARY KEY. Value examples:[AD, BK, CV]),(Template_Type_Description, template type description type:text. Value examples:[Presentation, CV, Advertisement]),]\nTable:Templates\n[(Template_ID, template id type:number PRIMARY KEY. Value examples:[0, 1, 4]),(Template_Type_Code, template type code type:text. Value examples:[PP, BK, PPT]),(Date_Effective_To, date effective to type:time. Value examples:[2008-01-05 14:19:28, 1999-07-08 03:31:04, 2001-04-18 09:29:52]),]\nTable:Documents\n[(Document_ID, document id type:number PRIMARY KEY. Value examples:[0, 1, 3]),(Template_ID, template id type:number. Value examples:[7, 25, 6]),]\nForeign keys:\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDocuments.Template_ID = Templates.Template_ID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [],
                    "sql": "SELECT Template_ID FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Templates EXCEPT SELECT Template_ID FROM Documents) AND Date_Effective_To > date('now')",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the template IDs that are not used in any document.\nSQL: ```sql SELECT Template_ID FROM Templates EXCEPT SELECT Template_ID FROM Documents```\nSubquestion 2: Check if those template IDs are still effective.\nSQL: ```sql SELECT Template_ID FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Templates EXCEPT SELECT Template_ID FROM Documents) AND Date_Effective_To > date('now')```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "how many are used in documents?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT count(*) FROM Templates WHERE template_id IN (SELECT template_id FROM Documents)\n\n",
                "predict": "SELECT COUNT(DISTINCT Template_ID) FROM Documents",
                "Rewriter": "",
                "Selector": "Table:Ref_Template_Types\n[(Template_Type_Code, template type code type:text PRIMARY KEY. Value examples:[AD, BK, CV]),(Template_Type_Description, template type description type:text. Value examples:[Presentation, CV, Advertisement]),]\nTable:Templates\n[(Template_ID, template id type:number PRIMARY KEY. Value examples:[0, 1, 4]),(Template_Type_Code, template type code type:text. Value examples:[PP, BK, PPT]),(Date_Effective_To, date effective to type:time. Value examples:[2008-01-05 14:19:28, 1999-07-08 03:31:04, 2001-04-18 09:29:52]),]\nTable:Documents\n[(Document_ID, document id type:number PRIMARY KEY. Value examples:[0, 1, 3]),(Template_ID, template id type:number. Value examples:[7, 25, 6]),]\nForeign keys:\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDocuments.Template_ID = Templates.Template_ID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            12
                        ]
                    ],
                    "sql": "SELECT COUNT(DISTINCT Template_ID) FROM Documents",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the template IDs that are used in documents.\nSQL: ```sql SELECT DISTINCT Template_ID FROM Documents```\n\nSubquestion 2: Count the number of distinct template IDs used in documents.\nSQL: ```sql SELECT COUNT(DISTINCT Template_ID) FROM Documents```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "and how many templates are not used?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT count(*) FROM Templates WHERE template_id in (SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents)\n\n\n",
                "predict": "SELECT COUNT(DISTINCT T1.Template_ID) FROM Templates AS T1 EXCEPT SELECT T2.Template_ID FROM Documents AS T2",
                "Rewriter": "",
                "Selector": "Table:Ref_Template_Types\n[(Template_Type_Code, template type code type:text PRIMARY KEY. Value examples:[AD, BK, CV]),(Template_Type_Description, template type description type:text. Value examples:[Presentation, CV, Advertisement]),]\nTable:Templates\n[(Template_ID, template id type:number PRIMARY KEY. Value examples:[0, 1, 4]),(Version_Number, version number type:number. Value examples:[5, 9, 4]),(Template_Type_Code, template type code type:text. Value examples:[PP, BK, PPT]),(Date_Effective_From, date effective from type:time. Value examples:[2005-11-12 07:09:48, 2010-09-24 01:15:11, 2002-03-02 14:39:49]),(Date_Effective_To, date effective to type:time. Value examples:[2008-01-05 14:19:28, 1999-07-08 03:31:04, 2001-04-18 09:29:52]),(Template_Details, template details type:text. Value examples:[]),]\nTable:Documents\n[(Document_ID, document id type:number PRIMARY KEY. Value examples:[0, 1, 3]),(Template_ID, template id type:number. Value examples:[7, 25, 6]),(Document_Name, document name type:text. Value examples:[Introduction of OS, Understanding DB, Summer Show]),(Document_Description, document description type:text. Value examples:[n, y, u]),(Other_Details, other details type:text. Value examples:[None]),]\nForeign keys:\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDocuments.Template_ID = Templates.Template_ID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [],
                    "sql": "SELECT COUNT(DISTINCT T1.Template_ID) FROM Templates AS T1 EXCEPT SELECT T2.Template_ID FROM Documents AS T2",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the number of templates that are not used in any document.\nSQL ```sql SELECT COUNT(DISTINCT T1.Template_ID) FROM Templates AS T1 EXCEPT SELECT T2.Template_ID FROM Documents AS T2```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "what were those IDs again?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents\n\n\n\n",
                "predict": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents \n",
                "Rewriter": "",
                "Selector": "Table:Ref_Template_Types\n[(Template_Type_Code, template type code type:text PRIMARY KEY. Value examples:[AD, BK, CV]),(Template_Type_Description, template type description type:text. Value examples:[Presentation, CV, Advertisement]),]\nTable:Templates\n[(Template_ID, template id type:number PRIMARY KEY. Value examples:[0, 1, 4]),(Version_Number, version number type:number. Value examples:[5, 9, 4]),(Template_Type_Code, template type code type:text. Value examples:[PP, BK, PPT]),(Date_Effective_From, date effective from type:time. Value examples:[2005-11-12 07:09:48, 2010-09-24 01:15:11, 2002-03-02 14:39:49]),(Date_Effective_To, date effective to type:time. Value examples:[2008-01-05 14:19:28, 1999-07-08 03:31:04, 2001-04-18 09:29:52]),(Template_Details, template details type:text. Value examples:[]),]\nTable:Documents\n[(Document_ID, document id type:number PRIMARY KEY. Value examples:[0, 1, 3]),(Template_ID, template id type:number. Value examples:[7, 25, 6]),(Document_Name, document name type:text. Value examples:[Introduction of OS, Understanding DB, Summer Show]),(Document_Description, document description type:text. Value examples:[n, y, u]),(Other_Details, other details type:text. Value examples:[None]),]\nForeign keys:\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDocuments.Template_ID = Templates.Template_ID\n",
                "Detector": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents \n",
                "Decomposer": "",
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "predict": "You're welcome!  Let me know if you have any other questions. \n",
                "Rewriter": "",
                "Selector": "Table:Ref_Template_Types\n[(Template_Type_Code, template type code type:text PRIMARY KEY. Value examples:[AD, BK, CV]),(Template_Type_Description, template type description type:text. Value examples:[Presentation, CV, Advertisement]),]\nTable:Templates\n[(Template_ID, template id type:number PRIMARY KEY. Value examples:[0, 1, 4]),(Version_Number, version number type:number. Value examples:[5, 9, 4]),(Template_Type_Code, template type code type:text. Value examples:[PP, BK, PPT]),(Date_Effective_From, date effective from type:time. Value examples:[2005-11-12 07:09:48, 2010-09-24 01:15:11, 2002-03-02 14:39:49]),(Date_Effective_To, date effective to type:time. Value examples:[2008-01-05 14:19:28, 1999-07-08 03:31:04, 2001-04-18 09:29:52]),(Template_Details, template details type:text. Value examples:[]),]\nTable:Documents\n[(Document_ID, document id type:number PRIMARY KEY. Value examples:[0, 1, 3]),(Template_ID, template id type:number. Value examples:[7, 25, 6]),(Document_Name, document name type:text. Value examples:[Introduction of OS, Understanding DB, Summer Show]),(Document_Description, document description type:text. Value examples:[n, y, u]),(Other_Details, other details type:text. Value examples:[None]),]\nForeign keys:\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDocuments.Template_ID = Templates.Template_ID\n",
                "Detector": "You're welcome!  Let me know if you have any other questions. \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 86
    },
    {
        "db_name": "world_1",
        "turns": [
            {
                "isuser": true,
                "text": "What is the population in Asian continent?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT sum(Population) FROM country where Continent = 'Asia'",
                "predict": "SELECT SUM(Population) FROM country WHERE Continent = 'Asia'",
                "Rewriter": "",
                "Selector": "Table:country\n[(Code, code type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Name, name type:text. Value examples:[Aruba, Afghanistan, Angola]),(Continent, continent type:text. Value examples:[North America, Asia, Africa]),(Population, population type:number. Value examples:[103000, 22720000, 12878000]),(GNPOld, gnp old type:number. Value examples:[793.0, None, 7984.0]),(LocalName, local name type:text. Value examples:[Aruba, Afganistan/Afqanestan, Angola]),(GovernmentForm, government form type:text. Value examples:[Nonmetropolitan Territory of The Netherlands, Islamic Emirate, Republic]),(HeadOfState, head of state type:text. Value examples:[Beatrix, Mohammad Omar, Jos\u00e9 Eduardo dos Santos]),(Capital, capital type:number. Value examples:[129, 1, 56]),(Code2, code2 type:text. Value examples:[AW, AF, AO]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            3705025700
                        ]
                    ],
                    "sql": "SELECT SUM(Population) FROM country WHERE Continent = 'Asia'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What is the population in Asian continent? \nSQL ```sql SELECT SUM(Population) FROM country WHERE Continent = 'Asia'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Which language has 9.5%?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT Language FROM countrylanguage where Percentage = 9.5",
                "predict": "SELECT Language FROM countrylanguage WHERE Percentage = 9.5",
                "Rewriter": "",
                "Selector": "Table:country\n[(Code, code type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Name, name type:text. Value examples:[Aruba, Afghanistan, Angola]),(Continent, continent type:text. Value examples:[North America, Asia, Africa]),(Population, population type:number. Value examples:[103000, 22720000, 12878000]),]\nTable:countrylanguage\n[(CountryCode, countrycode type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Language, language type:text. Value examples:[Dutch, English, Papiamento]),(Percentage, percentage type:number. Value examples:[5.3, 9.5, 76.7]),]\nForeign keys:\ncountrylanguage.CountryCode = country.Code\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "English"
                        ],
                        [
                            "Afrikaans"
                        ]
                    ],
                    "sql": "SELECT Language FROM countrylanguage WHERE Percentage = 9.5",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the language with a percentage of 9.5%.\nSQL: ```sql SELECT Language FROM countrylanguage WHERE Percentage = 9.5```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What is the life expectancy rate in Angola?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT LifeExpectancy FROM country where LocalName = 'Angola'",
                "predict": "SELECT T1.LifeExpectancy FROM country AS T1 WHERE T1.Name = 'Angola'",
                "Rewriter": "",
                "Selector": "Table:country\n[(Code, code type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Name, name type:text. Value examples:[Aruba, Afghanistan, Angola]),(LifeExpectancy, life expectancy type:number. Value examples:[78.4, 45.9, 38.3]),]\nTable:countrylanguage\n[(CountryCode, countrycode type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Language, language type:text. Value examples:[Dutch, English, Papiamento]),(IsOfficial, is official type:text. Value examples:[T, F]),(Percentage, percentage type:number. Value examples:[5.3, 9.5, 76.7]),]\nForeign keys:\ncountrylanguage.CountryCode = country.Code\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            38.3
                        ]
                    ],
                    "sql": "SELECT T1.LifeExpectancy FROM country AS T1 WHERE T1.Name = 'Angola'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the life expectancy rate in Angola.\nSQL ```sql SELECT T1.LifeExpectancy FROM country AS T1 WHERE T1.Name = 'Angola'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What is the GNP rate of Aruba?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "did you mean the GNP or GNP old?",
                "query": "",
                "predict": "SELECT GNP FROM country WHERE Name = 'Aruba'",
                "Rewriter": "",
                "Selector": "Table:country\n[(Code, code type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Name, name type:text. Value examples:[Aruba, Afghanistan, Angola]),(GNP, gnp type:number. Value examples:[828.0, 5976.0, 6648.0]),(LocalName, local name type:text. Value examples:[Aruba, Afganistan/Afqanestan, Angola]),]\nTable:countrylanguage\n[(CountryCode, countrycode type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Language, language type:text. Value examples:[Dutch, English, Papiamento]),(IsOfficial, is official type:text. Value examples:[T, F]),(Percentage, percentage type:number. Value examples:[5.3, 9.5, 76.7]),]\nForeign keys:\ncountrylanguage.CountryCode = country.Code\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            828.0
                        ]
                    ],
                    "sql": "SELECT GNP FROM country WHERE Name = 'Aruba'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What is the GNP rate of Aruba? \nSQL ```sql SELECT GNP FROM country WHERE Name = 'Aruba'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "GNP",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT GNP FROM country where LocalName = 'Angola'",
                "predict": "Please clarify if you are asking for the GNP or GNPOld for Aruba. \n",
                "Rewriter": "",
                "Selector": "Table:country\n[(Code, code type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Name, name type:text. Value examples:[Aruba, Afghanistan, Angola]),(Continent, continent type:text. Value examples:[North America, Asia, Africa]),(Region, region type:text. Value examples:[Caribbean, Southern and Central Asia, Central Africa]),(SurfaceArea, surface area type:number. Value examples:[193.0, 652090.0, 1246700.0]),(IndepYear, indepdent year type:number. Value examples:[None, 1919, 1975]),(Population, population type:number. Value examples:[103000, 22720000, 12878000]),(LifeExpectancy, life expectancy type:number. Value examples:[78.4, 45.9, 38.3]),(GNP, gnp type:number. Value examples:[828.0, 5976.0, 6648.0]),(GNPOld, gnp old type:number. Value examples:[793.0, None, 7984.0]),(LocalName, local name type:text. Value examples:[Aruba, Afganistan/Afqanestan, Angola]),(GovernmentForm, government form type:text. Value examples:[Nonmetropolitan Territory of The Netherlands, Islamic Emirate, Republic]),(HeadOfState, head of state type:text. Value examples:[Beatrix, Mohammad Omar, Jos\u00e9 Eduardo dos Santos]),]\nTable:countrylanguage\n[(CountryCode, countrycode type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Language, language type:text. Value examples:[Dutch, English, Papiamento]),(IsOfficial, is official type:text. Value examples:[T, F]),(Percentage, percentage type:number. Value examples:[5.3, 9.5, 76.7]),]\nForeign keys:\ncountrylanguage.CountryCode = country.Code\n",
                "Detector": "Please clarify if you are asking for the GNP or GNPOld for Aruba. \n",
                "Decomposer": "",
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What is the GNP old of Afghanistan?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT GNPOld FROM country where Name = 'Afghanistan'",
                "predict": "SELECT GNPOld FROM country WHERE LocalName = 'Afganistan/Afqanestan'",
                "Rewriter": "",
                "Selector": "Table:country\n[(Code, code type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Name, name type:text. Value examples:[Aruba, Afghanistan, Angola]),(Continent, continent type:text. Value examples:[North America, Asia, Africa]),(GNPOld, gnp old type:number. Value examples:[793.0, None, 7984.0]),(LocalName, local name type:text. Value examples:[Aruba, Afganistan/Afqanestan, Angola]),]\nTable:countrylanguage\n[(CountryCode, countrycode type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Language, language type:text. Value examples:[Dutch, English, Papiamento]),(IsOfficial, is official type:text. Value examples:[T, F]),(Percentage, percentage type:number. Value examples:[5.3, 9.5, 76.7]),]\nForeign keys:\ncountrylanguage.CountryCode = country.Code\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            null
                        ]
                    ],
                    "sql": "SELECT GNPOld FROM country WHERE LocalName = 'Afganistan/Afqanestan'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the GNP old of Afghanistan.\nSQL ```sql SELECT GNPOld FROM country WHERE LocalName = 'Afganistan/Afqanestan'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye.",
                "query": "",
                "predict": "You're welcome! Is there anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:country\n[(Code, code type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Name, name type:text. Value examples:[Aruba, Afghanistan, Angola]),(Continent, continent type:text. Value examples:[North America, Asia, Africa]),(Population, population type:number. Value examples:[103000, 22720000, 12878000]),(LifeExpectancy, life expectancy type:number. Value examples:[78.4, 45.9, 38.3]),(GNP, gnp type:number. Value examples:[828.0, 5976.0, 6648.0]),(GNPOld, gnp old type:number. Value examples:[793.0, None, 7984.0]),(LocalName, local name type:text. Value examples:[Aruba, Afganistan/Afqanestan, Angola]),]\nTable:countrylanguage\n[(CountryCode, countrycode type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Language, language type:text. Value examples:[Dutch, English, Papiamento]),(Percentage, percentage type:number. Value examples:[5.3, 9.5, 76.7]),]\nForeign keys:\ncountrylanguage.CountryCode = country.Code\n",
                "Detector": "You're welcome! Is there anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 87
    },
    {
        "db_name": "concert_singer",
        "turns": [
            {
                "isuser": true,
                "text": "What are the names of the singers whose song release year is greater than the average song release year",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT song_name FROM singer WHERE song_release_year  >  (SELECT avg(song_release_year) FROM singer)",
                "predict": "SELECT Name FROM singer WHERE CAST(Song_release_year AS REAL) > (SELECT AVG(CAST(Song_release_year AS REAL)) FROM singer)",
                "Rewriter": "",
                "Selector": "Table:singer\n[(Singer_ID, singer id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[Joe Sharp, Timbaland, Justin Brown]),(Country, country type:text. Value examples:[Netherlands, United States, France]),(Song_Name, song name type:text. Value examples:[You, Dangerous, Hey Oh]),(Song_release_year, song release year type:text. Value examples:[1992, 2008, 2013]),(Age, age type:number. Value examples:[52, 32, 29]),(Is_male, is male type:others. Value examples:[F, T]),]\nTable:singer_in_concert\n[(concert_ID, concert id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Singer_ID, singer id type:text. Value examples:[2, 3, 5]),]\nForeign keys:\nsinger_in_concert.Singer_ID = singer.Singer_ID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Timbaland"
                        ],
                        [
                            "Justin Brown"
                        ],
                        [
                            "John Nizinik"
                        ],
                        [
                            "Tribal King"
                        ]
                    ],
                    "sql": "SELECT Name FROM singer WHERE CAST(Song_release_year AS REAL) > (SELECT AVG(CAST(Song_release_year AS REAL)) FROM singer)",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What is the average song release year?\nSQL ```sql SELECT AVG(CAST(Song_release_year AS REAL)) FROM singer```\nSubquestion 2: What are the names of the singers whose song release year is greater than the average song release year?\nSQL ```sql SELECT Name FROM singer WHERE CAST(Song_release_year AS REAL) > (SELECT AVG(CAST(Song_release_year AS REAL)) FROM singer)```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What is the average song release year?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT avg(song_release_year) FROM singer",
                "predict": "SELECT AVG(CAST(Song_release_year AS REAL)) FROM singer",
                "Rewriter": "",
                "Selector": "Table:singer\n[(Singer_ID, singer id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[Joe Sharp, Timbaland, Justin Brown]),(Country, country type:text. Value examples:[Netherlands, United States, France]),(Song_Name, song name type:text. Value examples:[You, Dangerous, Hey Oh]),(Song_release_year, song release year type:text. Value examples:[1992, 2008, 2013]),(Age, age type:number. Value examples:[52, 32, 29]),(Is_male, is male type:others. Value examples:[F, T]),]\nTable:singer_in_concert\n[(concert_ID, concert id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Singer_ID, singer id type:text. Value examples:[2, 3, 5]),]\nForeign keys:\nsinger_in_concert.Singer_ID = singer.Singer_ID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            2007.6666666666667
                        ]
                    ],
                    "sql": "SELECT AVG(CAST(Song_release_year AS REAL)) FROM singer",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What is the average song release year?\nSQL ```sql SELECT AVG(CAST(Song_release_year AS REAL)) FROM singer```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "List all the songs, and order them",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you want the names of the songs ordered by their release year?",
                "query": "",
                "predict": "SELECT T1.Song_Name FROM singer AS T1 ORDER BY T1.Song_Name ASC",
                "Rewriter": "",
                "Selector": "Table:singer\n[(Singer_ID, singer id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[Joe Sharp, Timbaland, Justin Brown]),(Country, country type:text. Value examples:[Netherlands, United States, France]),(Song_Name, song name type:text. Value examples:[You, Dangerous, Hey Oh]),(Song_release_year, song release year type:text. Value examples:[1992, 2008, 2013]),(Age, age type:number. Value examples:[52, 32, 29]),(Is_male, is male type:others. Value examples:[F, T]),]\nTable:concert\n[(concert_ID, concert id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(concert_Name, concert name type:text. Value examples:[Auditions, Super bootcamp, Home Visits]),(Theme, theme type:text. Value examples:[Free choice, Free choice 2, Bleeding Love]),(Stadium_ID, stadium id type:text. Value examples:[1, 2, 10]),(Year, year type:text. Value examples:[2014, 2015]),]\nTable:singer_in_concert\n[(concert_ID, concert id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Singer_ID, singer id type:text. Value examples:[2, 3, 5]),]\nForeign keys:\nsinger_in_concert.Singer_ID = singer.Singer_ID\nsinger_in_concert.concert_ID = concert.concert_ID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Dangerous"
                        ],
                        [
                            "Gentleman"
                        ],
                        [
                            "Hey Oh"
                        ],
                        [
                            "Love"
                        ],
                        [
                            "Sun"
                        ],
                        [
                            "You"
                        ]
                    ],
                    "sql": "SELECT T1.Song_Name FROM singer AS T1 ORDER BY T1.Song_Name ASC",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: List all the songs.\nSQL ```sql SELECT T1.Song_Name FROM singer AS T1 ORDER BY T1.Song_Name ASC```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Yes I do\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT song_name from singer order by song_release_year",
                "predict": "SELECT Song_Name FROM singer ORDER BY Song_release_year ASC",
                "Rewriter": "",
                "Selector": "Table:singer\n[(Singer_ID, singer id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Song_Name, song name type:text. Value examples:[You, Dangerous, Hey Oh]),(Song_release_year, song release year type:text. Value examples:[1992, 2008, 2013]),]\nTable:singer_in_concert\n[(concert_ID, concert id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Singer_ID, singer id type:text. Value examples:[2, 3, 5]),]\nForeign keys:\nsinger_in_concert.Singer_ID = singer.Singer_ID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "You"
                        ],
                        [
                            "Sun"
                        ],
                        [
                            "Dangerous"
                        ],
                        [
                            "Hey Oh"
                        ],
                        [
                            "Gentleman"
                        ],
                        [
                            "Love"
                        ]
                    ],
                    "sql": "SELECT Song_Name FROM singer ORDER BY Song_release_year ASC",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: List all the songs, and order them by their release year.\nSQL ```sql SELECT Song_Name FROM singer ORDER BY Song_release_year ASC```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "List all song names by singers above the average age\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
                "predict": "SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer) ORDER BY Song_Name",
                "Rewriter": "",
                "Selector": "Table:singer\n[(Singer_ID, singer id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[Joe Sharp, Timbaland, Justin Brown]),(Country, country type:text. Value examples:[Netherlands, United States, France]),(Song_Name, song name type:text. Value examples:[You, Dangerous, Hey Oh]),(Song_release_year, song release year type:text. Value examples:[1992, 2008, 2013]),(Age, age type:number. Value examples:[52, 32, 29]),(Is_male, is male type:others. Value examples:[F, T]),]\nTable:singer_in_concert\n[(concert_ID, concert id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Singer_ID, singer id type:text. Value examples:[2, 3, 5]),]\nForeign keys:\nsinger_in_concert.Singer_ID = singer.Singer_ID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Gentleman"
                        ],
                        [
                            "Sun"
                        ],
                        [
                            "You"
                        ]
                    ],
                    "sql": "SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer) ORDER BY Song_Name",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What is the average age of singers?\nSQL ```sql SELECT AVG(Age) FROM singer```\nSubquestion 2: List all song names by singers above the average age.\nSQL ```sql SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer) ORDER BY Song_Name```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye.",
                "query": "",
                "predict": "You're welcome! Is there anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:stadium\n[(Stadium_ID, stadium id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Location, location type:text. Value examples:[Raith Rovers, Ayr United, East Fife]),(Name, name type:text. Value examples:[Stark's Park, Somerset Park, Bayview Stadium]),(Capacity, capacity type:number. Value examples:[10104, 11998, 2000]),(Highest, highest type:number. Value examples:[4812, 2363, 1980]),(Lowest, lowest type:number. Value examples:[1294, 1057, 533]),(Average, average type:number. Value examples:[2106, 1477, 864]),]\nTable:singer\n[(Singer_ID, singer id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[Joe Sharp, Timbaland, Justin Brown]),(Country, country type:text. Value examples:[Netherlands, United States, France]),(Song_Name, song name type:text. Value examples:[You, Dangerous, Hey Oh]),(Song_release_year, song release year type:text. Value examples:[1992, 2008, 2013]),(Age, age type:number. Value examples:[52, 32, 29]),(Is_male, is male type:others. Value examples:[F, T]),]\nTable:concert\n[(concert_ID, concert id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(concert_Name, concert name type:text. Value examples:[Auditions, Super bootcamp, Home Visits]),(Theme, theme type:text. Value examples:[Free choice, Free choice 2, Bleeding Love]),(Stadium_ID, stadium id type:text. Value examples:[1, 2, 10]),(Year, year type:text. Value examples:[2014, 2015]),]\nTable:singer_in_concert\n[(concert_ID, concert id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Singer_ID, singer id type:text. Value examples:[2, 3, 5]),]\nForeign keys:\nconcert.Stadium_ID = stadium.Stadium_ID\nsinger_in_concert.Singer_ID = singer.Singer_ID\nsinger_in_concert.concert_ID = concert.concert_ID\n",
                "Detector": "You're welcome! Is there anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 88
    },
    {
        "db_name": "orchestra",
        "turns": [
            {
                "isuser": true,
                "text": "Hola!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Hi, how can I help you?",
                "query": "",
                "predict": "Hola! \n",
                "Rewriter": "",
                "Selector": "Table:conductor\n[(Conductor_ID, conductor id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[Antal Dor\u00e1ti, Igor Stravinsky, Colin Davis]),(Age, age type:number. Value examples:[40, 41, 42]),(Nationality, nationality type:text. Value examples:[USA, UK, France]),(Year_of_Work, year of work type:number. Value examples:[10, 11, 6]),]\nTable:orchestra\n[(Orchestra_ID, orchestra id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Orchestra, orchestra type:text. Value examples:[London Symphony Orchestra, Columbia Symphony Orchestra, Royal Concertgebouw Orchestra]),(Conductor_ID, conductor id type:number. Value examples:[1, 2, 3]),(Record_Company, record company type:text. Value examples:[Mercury Records, Columbia Masterworks, Philips]),(Year_of_Founded, year of founded type:number. Value examples:[2003.0, 2009.0, 2008.0]),(Major_Record_Format, major record format type:text. Value examples:[CD, CD / LP, DVD]),]\nTable:performance\n[(Performance_ID, performance id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Orchestra_ID, orchestra id type:number. Value examples:[1, 2, 3]),(Type, type type:text. Value examples:[Auditions 1, Auditions 2, Auditions 3]),(Date, date type:text. Value examples:[9 June, 10 June, 11 June]),(Official_ratings_(millions), official ratings (millions) type:number. Value examples:[]),(Weekly_rank, weekly rank type:text. Value examples:[12, 8, 15]),(Share, share type:text. Value examples:[22.7%, 28.0%, 29.4%]),]\nTable:show\n[(Show_ID, show id type:number. Value examples:[1, 2, 3]),(Performance_ID, performance id type:number. Value examples:[1, 2, 3]),(If_first_show, if first show type:others. Value examples:[Glebe Park, Fir Park, St. Mirren Park]),(Result, result type:text. Value examples:[T, F]),(Attendance, attendance type:number. Value examples:[1026.0, 695.0, 555.0]),]\nForeign keys:\norchestra.Conductor_ID = conductor.Conductor_ID\nperformance.Orchestra_ID = orchestra.Orchestra_ID\nshow.Performance_ID = performance.Performance_ID\n",
                "Detector": "Hola! \n",
                "Decomposer": "",
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Please answer the question\uff1athe orchestra of conductor?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Do you want all the orchestras of all conductors?",
                "query": "",
                "predict": "SELECT T2.Orchestra FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T1.Name = 'Colin Davis'",
                "Rewriter": "",
                "Selector": "Table:conductor\n[(Conductor_ID, conductor id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[Antal Dor\u00e1ti, Igor Stravinsky, Colin Davis]),(Nationality, nationality type:text. Value examples:[USA, UK, France]),(Year_of_Work, year of work type:number. Value examples:[10, 11, 6]),]\nTable:orchestra\n[(Orchestra_ID, orchestra id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Orchestra, orchestra type:text. Value examples:[London Symphony Orchestra, Columbia Symphony Orchestra, Royal Concertgebouw Orchestra]),(Conductor_ID, conductor id type:number. Value examples:[1, 2, 3]),(Record_Company, record company type:text. Value examples:[Mercury Records, Columbia Masterworks, Philips]),(Year_of_Founded, year of founded type:number. Value examples:[2003.0, 2009.0, 2008.0]),(Major_Record_Format, major record format type:text. Value examples:[CD, CD / LP, DVD]),]\nTable:performance\n[(Performance_ID, performance id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Orchestra_ID, orchestra id type:number. Value examples:[1, 2, 3]),(Type, type type:text. Value examples:[Auditions 1, Auditions 2, Auditions 3]),(Date, date type:text. Value examples:[9 June, 10 June, 11 June]),(Official_ratings_(millions), official ratings (millions) type:number. Value examples:[]),(Weekly_rank, weekly rank type:text. Value examples:[12, 8, 15]),(Share, share type:text. Value examples:[22.7%, 28.0%, 29.4%]),]\nTable:show\n[(Show_ID, show id type:number. Value examples:[1, 2, 3]),(Performance_ID, performance id type:number. Value examples:[1, 2, 3]),(If_first_show, if first show type:others. Value examples:[Glebe Park, Fir Park, St. Mirren Park]),(Result, result type:text. Value examples:[T, F]),(Attendance, attendance type:number. Value examples:[1026.0, 695.0, 555.0]),]\nForeign keys:\norchestra.Conductor_ID = conductor.Conductor_ID\nperformance.Orchestra_ID = orchestra.Orchestra_ID\nshow.Performance_ID = performance.Performance_ID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Royal Concertgebouw Orchestra"
                        ]
                    ],
                    "sql": "SELECT T2.Orchestra FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T1.Name = 'Colin Davis'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the orchestras conducted by a specific conductor.\nSQL: ```sql\nSELECT T2.Orchestra FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T1.Name = 'Colin Davis'\n```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID ",
                "predict": "SELECT T2.Orchestra FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
                "Rewriter": "",
                "Selector": "Table:conductor\n[(Conductor_ID, conductor id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[Antal Dor\u00e1ti, Igor Stravinsky, Colin Davis]),(Nationality, nationality type:text. Value examples:[USA, UK, France]),(Year_of_Work, year of work type:number. Value examples:[10, 11, 6]),]\nTable:orchestra\n[(Orchestra_ID, orchestra id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Orchestra, orchestra type:text. Value examples:[London Symphony Orchestra, Columbia Symphony Orchestra, Royal Concertgebouw Orchestra]),(Conductor_ID, conductor id type:number. Value examples:[1, 2, 3]),(Record_Company, record company type:text. Value examples:[Mercury Records, Columbia Masterworks, Philips]),(Year_of_Founded, year of founded type:number. Value examples:[2003.0, 2009.0, 2008.0]),(Major_Record_Format, major record format type:text. Value examples:[CD, CD / LP, DVD]),]\nTable:performance\n[(Performance_ID, performance id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Orchestra_ID, orchestra id type:number. Value examples:[1, 2, 3]),(Type, type type:text. Value examples:[Auditions 1, Auditions 2, Auditions 3]),(Date, date type:text. Value examples:[9 June, 10 June, 11 June]),(Official_ratings_(millions), official ratings (millions) type:number. Value examples:[]),(Weekly_rank, weekly rank type:text. Value examples:[12, 8, 15]),(Share, share type:text. Value examples:[22.7%, 28.0%, 29.4%]),]\nTable:show\n[(Show_ID, show id type:number. Value examples:[1, 2, 3]),(Performance_ID, performance id type:number. Value examples:[1, 2, 3]),(If_first_show, if first show type:others. Value examples:[Glebe Park, Fir Park, St. Mirren Park]),(Result, result type:text. Value examples:[T, F]),(Attendance, attendance type:number. Value examples:[1026.0, 695.0, 555.0]),]\nForeign keys:\norchestra.Conductor_ID = conductor.Conductor_ID\nperformance.Orchestra_ID = orchestra.Orchestra_ID\nshow.Performance_ID = performance.Performance_ID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "London Symphony Orchestra"
                        ],
                        [
                            "Columbia Symphony Orchestra"
                        ],
                        [
                            "Royal Concertgebouw Orchestra"
                        ],
                        [
                            "Royal Danish Orchestra"
                        ],
                        [
                            "Detroit Symphony Orchestra"
                        ],
                        [
                            "Montreal Symphony Orchestra"
                        ],
                        [
                            "Seattle Symphony Orchestra"
                        ],
                        [
                            "Chicago Symphony Orchestra"
                        ],
                        [
                            "Kirov Orchestra"
                        ],
                        [
                            "Philharmonia Orchestra"
                        ]
                    ],
                    "sql": "SELECT T2.Orchestra FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: List all orchestras of all conductors. \nSQL ```sql SELECT T2.Orchestra FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "what is the name of all conductors?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT Name FROM conductor",
                "predict": "SELECT Name FROM conductor",
                "Rewriter": "",
                "Selector": "Table:conductor\n[(Conductor_ID, conductor id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[Antal Dor\u00e1ti, Igor Stravinsky, Colin Davis]),]\nTable:orchestra\n[(Orchestra_ID, orchestra id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Orchestra, orchestra type:text. Value examples:[London Symphony Orchestra, Columbia Symphony Orchestra, Royal Concertgebouw Orchestra]),(Conductor_ID, conductor id type:number. Value examples:[1, 2, 3]),]\nTable:performance\n[(Performance_ID, performance id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Orchestra_ID, orchestra id type:number. Value examples:[1, 2, 3]),(Type, type type:text. Value examples:[Auditions 1, Auditions 2, Auditions 3]),(Date, date type:text. Value examples:[9 June, 10 June, 11 June]),(Official_ratings_(millions), official ratings (millions) type:number. Value examples:[]),(Weekly_rank, weekly rank type:text. Value examples:[12, 8, 15]),(Share, share type:text. Value examples:[22.7%, 28.0%, 29.4%]),]\nTable:show\n[(Show_ID, show id type:number. Value examples:[1, 2, 3]),(Performance_ID, performance id type:number. Value examples:[1, 2, 3]),(If_first_show, if first show type:others. Value examples:[Glebe Park, Fir Park, St. Mirren Park]),(Result, result type:text. Value examples:[T, F]),(Attendance, attendance type:number. Value examples:[1026.0, 695.0, 555.0]),]\nForeign keys:\norchestra.Conductor_ID = conductor.Conductor_ID\nperformance.Orchestra_ID = orchestra.Orchestra_ID\nshow.Performance_ID = performance.Performance_ID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Antal Dor\u00e1ti"
                        ],
                        [
                            "Igor Stravinsky"
                        ],
                        [
                            "Colin Davis"
                        ],
                        [
                            "Paul Jorgensen"
                        ],
                        [
                            "Antal Brown"
                        ],
                        [
                            "Charles Dutoit"
                        ],
                        [
                            "Gerard Schwarz"
                        ],
                        [
                            "Pierre Boulez"
                        ],
                        [
                            "Valeri Gergiev"
                        ],
                        [
                            "Robert Craft"
                        ]
                    ],
                    "sql": "SELECT Name FROM conductor",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What is the name of all conductors?\nSQL ```sql SELECT Name FROM conductor```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What is the age of Colin Davis?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT Age FROM conductor WHERE Name = \"Colin Davis\"",
                "predict": "SELECT Age FROM conductor WHERE Name = 'Colin Davis'",
                "Rewriter": "",
                "Selector": "Table:conductor\n[(Conductor_ID, conductor id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[Antal Dor\u00e1ti, Igor Stravinsky, Colin Davis]),(Age, age type:number. Value examples:[40, 41, 42]),]\nTable:orchestra\n[(Orchestra_ID, orchestra id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Orchestra, orchestra type:text. Value examples:[London Symphony Orchestra, Columbia Symphony Orchestra, Royal Concertgebouw Orchestra]),(Conductor_ID, conductor id type:number. Value examples:[1, 2, 3]),(Record_Company, record company type:text. Value examples:[Mercury Records, Columbia Masterworks, Philips]),(Year_of_Founded, year of founded type:number. Value examples:[2003.0, 2009.0, 2008.0]),(Major_Record_Format, major record format type:text. Value examples:[CD, CD / LP, DVD]),]\nForeign keys:\norchestra.Conductor_ID = conductor.Conductor_ID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            42
                        ]
                    ],
                    "sql": "SELECT Age FROM conductor WHERE Name = 'Colin Davis'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the Conductor_ID of Colin Davis.\nSQL: ```sql SELECT Conductor_ID FROM conductor WHERE Name = 'Colin Davis'```\n\nSubquestion 2: Find the age of Colin Davis.\nSQL: ```sql SELECT Age FROM conductor WHERE Name = 'Colin Davis'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "OK Thanks. ",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Thank you. Goodbye!",
                "query": "",
                "predict": "You're welcome! Is there anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:conductor\n[(Conductor_ID, conductor id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[Antal Dor\u00e1ti, Igor Stravinsky, Colin Davis]),]\nTable:orchestra\n[(Orchestra_ID, orchestra id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Orchestra, orchestra type:text. Value examples:[London Symphony Orchestra, Columbia Symphony Orchestra, Royal Concertgebouw Orchestra]),(Conductor_ID, conductor id type:number. Value examples:[1, 2, 3]),]\nTable:performance\n[(Performance_ID, performance id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Orchestra_ID, orchestra id type:number. Value examples:[1, 2, 3]),(Type, type type:text. Value examples:[Auditions 1, Auditions 2, Auditions 3]),(Date, date type:text. Value examples:[9 June, 10 June, 11 June]),(Official_ratings_(millions), official ratings (millions) type:number. Value examples:[]),(Weekly_rank, weekly rank type:text. Value examples:[12, 8, 15]),(Share, share type:text. Value examples:[22.7%, 28.0%, 29.4%]),]\nTable:show\n[(Show_ID, show id type:number. Value examples:[1, 2, 3]),(Performance_ID, performance id type:number. Value examples:[1, 2, 3]),(If_first_show, if first show type:others. Value examples:[Glebe Park, Fir Park, St. Mirren Park]),(Result, result type:text. Value examples:[T, F]),(Attendance, attendance type:number. Value examples:[1026.0, 695.0, 555.0]),]\nForeign keys:\norchestra.Conductor_ID = conductor.Conductor_ID\nperformance.Orchestra_ID = orchestra.Orchestra_ID\nshow.Performance_ID = performance.Performance_ID\n",
                "Detector": "You're welcome! Is there anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 89
    },
    {
        "db_name": "cre_Doc_Template_Mgt",
        "turns": [
            {
                "isuser": true,
                "text": "What are the templates ever used by any document?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT * FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.template_ID",
                "predict": "SELECT DISTINCT T1.Template_ID FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID",
                "Rewriter": "",
                "Selector": "Table:Ref_Template_Types\n[(Template_Type_Code, template type code type:text PRIMARY KEY. Value examples:[AD, BK, CV]),(Template_Type_Description, template type description type:text. Value examples:[Presentation, CV, Advertisement]),]\nTable:Templates\n[(Template_ID, template id type:number PRIMARY KEY. Value examples:[0, 1, 4]),(Template_Type_Code, template type code type:text. Value examples:[PP, BK, PPT]),(Date_Effective_From, date effective from type:time. Value examples:[2005-11-12 07:09:48, 2010-09-24 01:15:11, 2002-03-02 14:39:49]),(Date_Effective_To, date effective to type:time. Value examples:[2008-01-05 14:19:28, 1999-07-08 03:31:04, 2001-04-18 09:29:52]),]\nTable:Documents\n[(Document_ID, document id type:number PRIMARY KEY. Value examples:[0, 1, 3]),(Template_ID, template id type:number. Value examples:[7, 25, 6]),(Document_Name, document name type:text. Value examples:[Introduction of OS, Understanding DB, Summer Show]),]\nForeign keys:\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDocuments.Template_ID = Templates.Template_ID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            7
                        ],
                        [
                            25
                        ],
                        [
                            6
                        ],
                        [
                            20
                        ],
                        [
                            14
                        ],
                        [
                            11
                        ],
                        [
                            10
                        ],
                        [
                            1
                        ],
                        [
                            22
                        ],
                        [
                            21
                        ]
                    ],
                    "sql": "SELECT DISTINCT T1.Template_ID FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What are the templates ever used by any document? \nSQL ```sql SELECT DISTINCT T1.Template_ID FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What are the template type descriptions for these templates?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
                "predict": "SELECT T2.Template_Type_Description FROM Templates AS T1 INNER JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T1.Template_ID IN ( SELECT T1.Template_ID FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID )",
                "Rewriter": "",
                "Selector": "Table:Ref_Template_Types\n[(Template_Type_Code, template type code type:text PRIMARY KEY. Value examples:[AD, BK, CV]),(Template_Type_Description, template type description type:text. Value examples:[Presentation, CV, Advertisement]),]\nTable:Templates\n[(Template_ID, template id type:number PRIMARY KEY. Value examples:[0, 1, 4]),(Template_Type_Code, template type code type:text. Value examples:[PP, BK, PPT]),]\nTable:Documents\n[(Document_ID, document id type:number PRIMARY KEY. Value examples:[0, 1, 3]),(Template_ID, template id type:number. Value examples:[7, 25, 6]),]\nForeign keys:\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDocuments.Template_ID = Templates.Template_ID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Paper"
                        ],
                        [
                            "Book"
                        ],
                        [
                            "Presentation"
                        ],
                        [
                            "Presentation"
                        ],
                        [
                            "Book"
                        ],
                        [
                            "Presentation"
                        ],
                        [
                            "Book"
                        ],
                        [
                            "Advertisement"
                        ],
                        [
                            "Book"
                        ],
                        [
                            "Advertisement"
                        ]
                    ],
                    "sql": "SELECT T2.Template_Type_Description FROM Templates AS T1 INNER JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T1.Template_ID IN ( SELECT T1.Template_ID FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID )",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What are the template type codes for the templates ever used by any document?\nSQL ```sql SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID```\nSubquestion 2: What are the template type descriptions for these templates?\nSQL ```sql SELECT T2.Template_Type_Description FROM Templates AS T1 INNER JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T1.Template_ID IN ( SELECT T1.Template_ID FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.Template_ID )```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Can I get the distinct template type descriptions for these templates?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
                "predict": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 INNER JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code INNER JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID",
                "Rewriter": "",
                "Selector": "Table:Ref_Template_Types\n[(Template_Type_Code, template type code type:text PRIMARY KEY. Value examples:[AD, BK, CV]),(Template_Type_Description, template type description type:text. Value examples:[Presentation, CV, Advertisement]),]\nTable:Templates\n[(Template_ID, template id type:number PRIMARY KEY. Value examples:[0, 1, 4]),(Template_Type_Code, template type code type:text. Value examples:[PP, BK, PPT]),]\nTable:Documents\n[(Template_ID, template id type:number. Value examples:[7, 25, 6]),]\nForeign keys:\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDocuments.Template_ID = Templates.Template_ID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Presentation"
                        ],
                        [
                            "Paper"
                        ],
                        [
                            "Book"
                        ],
                        [
                            "Advertisement"
                        ]
                    ],
                    "sql": "SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 INNER JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code INNER JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What are the template type descriptions for these templates? \nSQL ```sql SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 INNER JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code INNER JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Goodbye!",
                "query": "",
                "predict": "You're welcome! Is there anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:Ref_Template_Types\n[(Template_Type_Code, template type code type:text PRIMARY KEY. Value examples:[AD, BK, CV]),(Template_Type_Description, template type description type:text. Value examples:[Presentation, CV, Advertisement]),]\nTable:Templates\n[(Template_ID, template id type:number PRIMARY KEY. Value examples:[0, 1, 4]),(Template_Type_Code, template type code type:text. Value examples:[PP, BK, PPT]),(Date_Effective_From, date effective from type:time. Value examples:[2005-11-12 07:09:48, 2010-09-24 01:15:11, 2002-03-02 14:39:49]),(Date_Effective_To, date effective to type:time. Value examples:[2008-01-05 14:19:28, 1999-07-08 03:31:04, 2001-04-18 09:29:52]),(Template_Details, template details type:text. Value examples:[]),]\nTable:Documents\n[(Document_ID, document id type:number PRIMARY KEY. Value examples:[0, 1, 3]),(Template_ID, template id type:number. Value examples:[7, 25, 6]),(Document_Name, document name type:text. Value examples:[Introduction of OS, Understanding DB, Summer Show]),(Document_Description, document description type:text. Value examples:[n, y, u]),]\nForeign keys:\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nDocuments.Template_ID = Templates.Template_ID\n",
                "Detector": "You're welcome! Is there anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 90
    },
    {
        "db_name": "employee_hire_evaluation",
        "turns": [
            {
                "isuser": true,
                "text": "how many shop are presented on the table",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT count(*) FROM shop ",
                "predict": "SELECT COUNT(DISTINCT Shop_ID) FROM shop",
                "Rewriter": "",
                "Selector": "Table:employee\n[(Employee_ID, employee id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[George Chuter, Lee Mears, Mark Regan]),(Age, age type:number. Value examples:[23, 29, 43]),(City, city type:text. Value examples:[Bristol, Bath, Wasps]),]\nTable:shop\n[(Shop_ID, shop id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[FC Haka, HJK, FC Honka]),(Location, location type:text. Value examples:[Valkeakoski, Helsinki, Espoo]),(District, district type:text. Value examples:[Tehtaan kentt\u00e4, Finnair Stadium, Tapiolan Urheilupuisto]),(Number_products, number products type:number. Value examples:[3516, 10770, 6000]),(Manager_name, manager name type:text. Value examples:[Olli Huttunen, Antti Muurinen, Mika Lehkosuo]),]\nTable:hiring\n[(Shop_ID, shop id type:number. Value examples:[1, 8, 4]),(Employee_ID, employee id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Start_from, start from type:text. Value examples:[2009, 2003, 2011]),(Is_full_time, is full time type:others. Value examples:[T, F]),]\nTable:evaluation\n[(Employee_ID, employee id type:text PRIMARY KEY. Value examples:[1, 10, 2]),(Year_awarded, year awarded type:text. Value examples:[2011, 2016, 2015]),(Bonus, bonus type:number. Value examples:[3000.0, 3200.0, 2900.0]),]\nForeign keys:\nhiring.Employee_ID = employee.Employee_ID\nhiring.Shop_ID = shop.Shop_ID\nevaluation.Employee_ID = employee.Employee_ID\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            9
                        ]
                    ],
                    "sql": "SELECT COUNT(DISTINCT Shop_ID) FROM shop",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: How many shops are presented on the table?\nSQL ```sql SELECT COUNT(DISTINCT Shop_ID) FROM shop```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "list out the shop names",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT name FROM shop ",
                "predict": "SELECT Name FROM shop",
                "Rewriter": "",
                "Selector": "Table:shop\n[(Shop_ID, shop id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[FC Haka, HJK, FC Honka]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "FC Haka"
                        ],
                        [
                            "HJK"
                        ],
                        [
                            "FC Honka"
                        ],
                        [
                            "FC Inter"
                        ],
                        [
                            "FF Jaro"
                        ],
                        [
                            "FC KooTeePee"
                        ],
                        [
                            "KuPS"
                        ],
                        [
                            "FC Lahti"
                        ],
                        [
                            "IFK Mariehamn"
                        ]
                    ],
                    "sql": "SELECT Name FROM shop",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: List out the shop names.\nSQL ```sql SELECT Name FROM shop```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "what is the location of FC Haka",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT location FROM shop where name = \"FC Haka\"",
                "predict": "SELECT Location FROM shop WHERE Shop_ID = (SELECT Shop_ID FROM shop WHERE Name = 'FC Haka')",
                "Rewriter": "",
                "Selector": "Table:shop\n[(Shop_ID, shop id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[FC Haka, HJK, FC Honka]),(Location, location type:text. Value examples:[Valkeakoski, Helsinki, Espoo]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Valkeakoski"
                        ]
                    ],
                    "sql": "SELECT Location FROM shop WHERE Shop_ID = (SELECT Shop_ID FROM shop WHERE Name = 'FC Haka')",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the Shop_ID of FC Haka.\nSQL: ```sql SELECT Shop_ID FROM shop WHERE Name = 'FC Haka'```\n\nSubquestion 2: Find the location of the shop with the Shop_ID found in the previous subquestion.\nSQL: ```sql SELECT Location FROM shop WHERE Shop_ID = (SELECT Shop_ID FROM shop WHERE Name = 'FC Haka')```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "what is the number of products in HJK",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT Number_products FROM shop where name = \"HJK\"",
                "predict": "SELECT Number_products FROM shop WHERE Shop_ID = (SELECT Shop_ID FROM shop WHERE Name = 'HJK')",
                "Rewriter": "",
                "Selector": "Table:shop\n[(Shop_ID, shop id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[FC Haka, HJK, FC Honka]),(Number_products, number products type:number. Value examples:[3516, 10770, 6000]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            10770
                        ]
                    ],
                    "sql": "SELECT Number_products FROM shop WHERE Shop_ID = (SELECT Shop_ID FROM shop WHERE Name = 'HJK')",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the Shop_ID for the shop named \"HJK\".\nSQL: ```sql SELECT Shop_ID FROM shop WHERE Name = 'HJK'```\n\nSubquestion 2: Find the number of products for the shop with the Shop_ID found in the previous subquestion.\nSQL: ```sql SELECT Number_products FROM shop WHERE Shop_ID = (SELECT Shop_ID FROM shop WHERE Name = 'HJK')```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome",
                "query": "",
                "predict": "You're welcome! \ud83d\ude0a \n",
                "Rewriter": "",
                "Selector": "Table:employee\n[(Employee_ID, employee id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[George Chuter, Lee Mears, Mark Regan]),(Age, age type:number. Value examples:[23, 29, 43]),(City, city type:text. Value examples:[Bristol, Bath, Wasps]),]\nTable:shop\n[(Shop_ID, shop id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[FC Haka, HJK, FC Honka]),(Location, location type:text. Value examples:[Valkeakoski, Helsinki, Espoo]),(District, district type:text. Value examples:[Tehtaan kentt\u00e4, Finnair Stadium, Tapiolan Urheilupuisto]),(Number_products, number products type:number. Value examples:[3516, 10770, 6000]),(Manager_name, manager name type:text. Value examples:[Olli Huttunen, Antti Muurinen, Mika Lehkosuo]),]\nTable:hiring\n[(Shop_ID, shop id type:number. Value examples:[1, 8, 4]),(Employee_ID, employee id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Start_from, start from type:text. Value examples:[2009, 2003, 2011]),(Is_full_time, is full time type:others. Value examples:[T, F]),]\nTable:evaluation\n[(Employee_ID, employee id type:text PRIMARY KEY. Value examples:[1, 10, 2]),(Year_awarded, year awarded type:text. Value examples:[2011, 2016, 2015]),(Bonus, bonus type:number. Value examples:[3000.0, 3200.0, 2900.0]),]\nForeign keys:\nhiring.Employee_ID = employee.Employee_ID\nhiring.Shop_ID = shop.Shop_ID\nevaluation.Employee_ID = employee.Employee_ID\n",
                "Detector": "You're welcome! \ud83d\ude0a \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 91
    },
    {
        "db_name": "dog_kennels",
        "turns": [
            {
                "isuser": true,
                "text": "What are the ids of the professionals?\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT professional_id  FROM Professionals ",
                "predict": "SELECT professional_id FROM Professionals",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Treatment_Types\n[(treatment_type_code, treatment type code type:text PRIMARY KEY. Value examples:[EXAM, VAC, WALK]),(treatment_type_description, treatment type description type:text. Value examples:[Physical examination, Vaccination, Take for a Walk]),]\nTable:Professionals\n[(professional_id, professional id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(role_code, role code type:text. Value examples:[Employee, Veterenarian]),(first_name, first name type:text. Value examples:[Taryn, Jayson, Olaf]),(street, street type:text. Value examples:[6915 Oberbrunner Point Suite 491\nGleasonville, LA , 88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194, 68589 Bradly Manor\nNew Audrey, IN 91497]),(city, city type:text. Value examples:[West Heidi, North Odellfurt, Jaceton]),(state, state type:text. Value examples:[Indiana, Connecticut, Wisconsin]),(last_name, last name type:text. Value examples:[Braun, Ullrich, Watsica]),(email_address, email address type:text. Value examples:[deanna.schuster@example.com, lucile.shanahan@example.org, uboehm@example.org]),(home_phone, home phone type:text. Value examples:[+71(6)2898266914, +02(1)0259033559, 325-155-0801x7005]),(cell_number, cell number type:text. Value examples:[(275)939-2435x80863, 889-940-2676, (369)908-7311x065]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ],
                        [
                            4
                        ],
                        [
                            5
                        ],
                        [
                            6
                        ],
                        [
                            7
                        ],
                        [
                            8
                        ],
                        [
                            9
                        ],
                        [
                            10
                        ]
                    ],
                    "sql": "SELECT professional_id FROM Professionals",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What are the ids of the professionals?\nSQL ```sql SELECT professional_id FROM Professionals```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What is the role of each of the professionals?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT professional_id, role_code  FROM Professionals ",
                "predict": "SELECT T1.role_code, T1.professional_id FROM Professionals AS T1",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Treatment_Types\n[(treatment_type_code, treatment type code type:text PRIMARY KEY. Value examples:[EXAM, VAC, WALK]),(treatment_type_description, treatment type description type:text. Value examples:[Physical examination, Vaccination, Take for a Walk]),]\nTable:Professionals\n[(professional_id, professional id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(role_code, role code type:text. Value examples:[Employee, Veterenarian]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Employee",
                            1
                        ],
                        [
                            "Employee",
                            2
                        ],
                        [
                            "Employee",
                            3
                        ],
                        [
                            "Veterenarian",
                            4
                        ],
                        [
                            "Veterenarian",
                            5
                        ],
                        [
                            "Veterenarian",
                            6
                        ],
                        [
                            "Veterenarian",
                            7
                        ],
                        [
                            "Employee",
                            8
                        ],
                        [
                            "Veterenarian",
                            9
                        ],
                        [
                            "Employee",
                            10
                        ]
                    ],
                    "sql": "SELECT T1.role_code, T1.professional_id FROM Professionals AS T1",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What is the role of each of the professionals? \nSQL ```sql SELECT T1.role_code, T1.professional_id FROM Professionals AS T1```\n\nQuestion Solved. \n========== \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Could I please have their email addresses of professionals that did not operate any treatment on dogs?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
                "predict": "SELECT T1.email_address FROM Professionals AS T1 WHERE T1.professional_id IN (SELECT T3.professional_id FROM Professionals AS T3 EXCEPT SELECT T4.professional_id FROM Treatments AS T4)",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Treatment_Types\n[(treatment_type_code, treatment type code type:text PRIMARY KEY. Value examples:[EXAM, VAC, WALK]),(treatment_type_description, treatment type description type:text. Value examples:[Physical examination, Vaccination, Take for a Walk]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(owner_id, owner id type:number. Value examples:[3, 11, 1]),(abandoned_yn, abandoned yes or no type:text. Value examples:[1, 0]),(breed_code, breed code type:text. Value examples:[ESK, BUL, HUS]),(size_code, size code type:text. Value examples:[LGE, MED, SML]),(name, name type:text. Value examples:[Kacey, Hipolito, Mavis]),(age, age type:text. Value examples:[6, 9, 8]),(date_of_birth, date of birth type:time. Value examples:[2012-01-27 05:11:53, 2013-02-13 05:15:21, 2008-05-19 15:54:49]),(gender, gender type:text. Value examples:[1, 0]),(weight, weight type:text. Value examples:[7.57, 1.72, 8.04]),(date_arrived, date arrived type:time. Value examples:[2017-09-08 20:10:13, 2017-12-22 05:02:02, 2017-06-25 10:14:05]),(date_adopted, date adopted type:time. Value examples:[2018-03-06 16:32:11, 2018-03-25 08:12:51, 2018-03-07 21:45:43]),(date_departed, date departed type:time. Value examples:[2018-03-25 06:58:44, 2018-03-25 02:11:32, 2018-03-25 10:25:46]),]\nTable:Professionals\n[(professional_id, professional id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(role_code, role code type:text. Value examples:[Employee, Veterenarian]),(email_address, email address type:text. Value examples:[deanna.schuster@example.com, lucile.shanahan@example.org, uboehm@example.org]),]\nTable:Treatments\n[(professional_id, professional id type:number. Value examples:[9, 10, 4]),]\nForeign keys:\nDogs.size_code = Sizes.size_code\nDogs.breed_code = Breeds.breed_code\nTreatments.professional_id = Professionals.professional_id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "deanna.schuster@example.com"
                        ],
                        [
                            "lucile.shanahan@example.org"
                        ],
                        [
                            "uboehm@example.org"
                        ],
                        [
                            "west.eula@example.net"
                        ],
                        [
                            "marquardt.furman@example.org"
                        ],
                        [
                            "delphine29@example.com"
                        ],
                        [
                            "jeichmann@example.com"
                        ]
                    ],
                    "sql": "SELECT T1.email_address FROM Professionals AS T1 WHERE T1.professional_id IN (SELECT T3.professional_id FROM Professionals AS T3 EXCEPT SELECT T4.professional_id FROM Treatments AS T4)",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the professional IDs of professionals who did not operate any treatment on dogs.\nSQL: ```sql\nSELECT T1.professional_id FROM Professionals AS T1 EXCEPT SELECT T2.professional_id FROM Treatments AS T2\n```\nSubquestion 2: Get the email addresses of professionals who did not operate any treatment on dogs.\nSQL: ```sql\nSELECT T1.email_address FROM Professionals AS T1 WHERE T1.professional_id IN (SELECT T3.professional_id FROM Professionals AS T3 EXCEPT SELECT T4.professional_id FROM Treatments AS T4)\n```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            }
        ],
        "id": 92
    },
    {
        "db_name": "car_1",
        "turns": [
            {
                "isuser": true,
                "text": "Can you tell me the ID of the american motor company ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
                "predict": "SELECT T1.Id FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T1.FullName = 'American Motor Company'",
                "Rewriter": "",
                "Selector": "Table:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nTable:car_makers\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:text. Value examples:[amc, volkswagen, bmw]),(FullName, full name type:text. Value examples:[American Motor Company, Volkswagen, BMW]),(Country, country type:text. Value examples:[1, 2, 3]),]\nTable:model_list\n[(ModelId, model id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:number. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[amc, audi, bmw]),]\nForeign keys:\ncar_makers.Country = countries.CountryId\nmodel_list.Maker = car_makers.Id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            1
                        ]
                    ],
                    "sql": "SELECT T1.Id FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T1.FullName = 'American Motor Company'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the ID of the car maker \"American Motor Company\".\nSQL ```sql SELECT T1.Id FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T1.FullName = 'American Motor Company'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Can you tell me the model id of the maker amc ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT ModelId FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.Maker  =  'amc';",
                "predict": "SELECT T2.ModelId FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Maker = 'amc'",
                "Rewriter": "",
                "Selector": "Table:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nTable:car_makers\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:text. Value examples:[amc, volkswagen, bmw]),(FullName, full name type:text. Value examples:[American Motor Company, Volkswagen, BMW]),(Country, country type:text. Value examples:[1, 2, 3]),]\nTable:model_list\n[(ModelId, model id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:number. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[amc, audi, bmw]),]\nForeign keys:\ncar_makers.Country = countries.CountryId\nmodel_list.Maker = car_makers.Id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            1
                        ]
                    ],
                    "sql": "SELECT T2.ModelId FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Maker = 'amc'",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the ID of the maker \"amc\".\nSQL ```sql SELECT Id FROM car_makers WHERE Maker = 'amc'```\nSubquestion 2: Find the model ID of the maker \"amc\".\nSQL ```sql SELECT T2.ModelId FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Maker = 'amc'```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Who is maker for the ID 2 ?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean Id or ModelId?",
                "query": "",
                "predict": "SELECT T1.Maker FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Id = 2",
                "Rewriter": "",
                "Selector": "Table:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nTable:car_makers\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:text. Value examples:[amc, volkswagen, bmw]),(FullName, full name type:text. Value examples:[American Motor Company, Volkswagen, BMW]),(Country, country type:text. Value examples:[1, 2, 3]),]\nTable:model_list\n[(ModelId, model id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:number. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[amc, audi, bmw]),]\nForeign keys:\ncar_makers.Country = countries.CountryId\nmodel_list.Maker = car_makers.Id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "volkswagen"
                        ],
                        [
                            "volkswagen"
                        ]
                    ],
                    "sql": "SELECT T1.Maker FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Id = 2",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the maker name for the ID 2.\nSQL ```sql SELECT T1.Maker FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Id = 2```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "I mean id\n",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT DISTINCT(T1.Maker) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.Id = 2;",
                "predict": "SELECT Maker FROM car_makers WHERE Id = 2",
                "Rewriter": "",
                "Selector": "Table:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nTable:car_makers\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:text. Value examples:[amc, volkswagen, bmw]),(FullName, full name type:text. Value examples:[American Motor Company, Volkswagen, BMW]),(Country, country type:text. Value examples:[1, 2, 3]),]\nTable:model_list\n[(ModelId, model id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:number. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[amc, audi, bmw]),]\nForeign keys:\ncar_makers.Country = countries.CountryId\nmodel_list.Maker = car_makers.Id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "volkswagen"
                        ]
                    ],
                    "sql": "SELECT Maker FROM car_makers WHERE Id = 2",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the maker name associated with ID 2.\nSQL: ```sql SELECT Maker FROM car_makers WHERE Id = 2```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "How many car models were produced by the maker with the full name American Motor Company ?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
                "predict": "SELECT COUNT(ModelId) FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE FullName = 'American Motor Company')",
                "Rewriter": "",
                "Selector": "Table:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nTable:car_makers\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:text. Value examples:[amc, volkswagen, bmw]),(FullName, full name type:text. Value examples:[American Motor Company, Volkswagen, BMW]),(Country, country type:text. Value examples:[1, 2, 3]),]\nTable:model_list\n[(ModelId, model id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:number. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[amc, audi, bmw]),]\nForeign keys:\ncar_makers.Country = countries.CountryId\nmodel_list.Maker = car_makers.Id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            1
                        ]
                    ],
                    "sql": "SELECT COUNT(ModelId) FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE FullName = 'American Motor Company')",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the ID of the maker with the full name \"American Motor Company\".\nSQL: ```sql SELECT Id FROM car_makers WHERE FullName = 'American Motor Company'```\n\nSubquestion 2: Count the number of car models produced by the maker with the ID found in the previous subquestion.\nSQL: ```sql SELECT COUNT(ModelId) FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE FullName = 'American Motor Company')```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome!",
                "query": "",
                "predict": "You're welcome! Is there anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nTable:car_makers\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:text. Value examples:[amc, volkswagen, bmw]),(FullName, full name type:text. Value examples:[American Motor Company, Volkswagen, BMW]),(Country, country type:text. Value examples:[1, 2, 3]),]\nTable:model_list\n[(ModelId, model id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:number. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[amc, audi, bmw]),]\nTable:car_names\n[(MakeId, make id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[chevrolet, buick, plymouth]),(Make, make type:text. Value examples:[chevrolet chevelle malibu, buick skylark 320, plymouth satellite]),]\nTable:cars_data\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(MPG, mpg type:text. Value examples:[18, 15, 16]),(Cylinders, cylinders type:number. Value examples:[8, 4, 6]),(Edispl, edispl type:number. Value examples:[307.0, 350.0, 318.0]),(Horsepower, horsepower type:text. Value examples:[130, 165, 150]),(Weight, weight type:number. Value examples:[3504, 3693, 3436]),(Accelerate, accelerate type:number. Value examples:[12.0, 11.5, 11.0]),(Year, year type:number. Value examples:[1970, 1971, 1972]),]\nForeign keys:\ncar_makers.Country = countries.CountryId\nmodel_list.Maker = car_makers.Id\ncar_names.Model = model_list.Model\ncars_data.Id = car_names.MakeId\n",
                "Detector": "You're welcome! Is there anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 93
    },
    {
        "db_name": "museum_visit",
        "turns": [
            {
                "isuser": true,
                "text": "how many museum id in the list?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT count(Museum_ID ) FROM museum",
                "predict": "You are asking about the number of unique Museum_ID values in the database.  Yes. \n",
                "Rewriter": "",
                "Selector": "Table:museum\n[(Museum_ID, museum id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[Plaza Museum, Capital Plaza Museum, Jefferson Development Museum]),(Num_of_Staff, num of staff type:number. Value examples:[62, 25, 18]),(Open_Year, open year type:text. Value examples:[2000, 2012, 2010]),]\nTable:visitor\n[(ID, customer id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[Gonzalo Higua\u00edn , Guti Midfielder, Arjen Robben]),(Level_of_membership, level of membership type:number. Value examples:[8, 5, 1]),(Age, age type:number. Value examples:[35, 28, 27]),]\nTable:visit\n[(Museum_ID, museum id type:number PRIMARY KEY. Value examples:[1, 2, 4]),(visitor_ID, customer id type:text. Value examples:[5, 3, 6]),(Num_of_Ticket, num of ticket type:number. Value examples:[20, 4, 10]),(Total_spent, total spent type:number. Value examples:[320.14, 89.98, 320.44]),]\nForeign keys:\nvisit.visitor_ID = visitor.ID\nvisit.Museum_ID = museum.Museum_ID\n",
                "Detector": "You are asking about the number of unique Museum_ID values in the database.  Yes. \n",
                "Decomposer": "",
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "find the staff count in the museum with an id 3?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT Num_of_Staff FROM museum where museum.Museum_ID = 3",
                "predict": "SELECT Num_of_Staff FROM museum WHERE Museum_ID = 3",
                "Rewriter": "",
                "Selector": "Table:museum\n[(Museum_ID, museum id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Num_of_Staff, num of staff type:number. Value examples:[62, 25, 18]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            18
                        ]
                    ],
                    "sql": "SELECT Num_of_Staff FROM museum WHERE Museum_ID = 3",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the staff count in the museum with an id 3.\nSQL ```sql SELECT Num_of_Staff FROM museum WHERE Museum_ID = 3```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "which year open the capital plaza museum?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT Open_year FROM museum where \tName='Capital Plaza Museum'",
                "predict": "SELECT Open_Year FROM museum WHERE Museum_ID = (SELECT Museum_ID FROM museum WHERE Name = 'Capital Plaza Museum')",
                "Rewriter": "",
                "Selector": "Table:museum\n[(Museum_ID, museum id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[Plaza Museum, Capital Plaza Museum, Jefferson Development Museum]),(Open_Year, open year type:text. Value examples:[2000, 2012, 2010]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "2012"
                        ]
                    ],
                    "sql": "SELECT Open_Year FROM museum WHERE Museum_ID = (SELECT Museum_ID FROM museum WHERE Name = 'Capital Plaza Museum')",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the Museum_ID of the Capital Plaza Museum.\nSQL ```sql SELECT Museum_ID FROM museum WHERE Name = 'Capital Plaza Museum'```\nSubquestion 2: Find the Open_Year of the museum with the Museum_ID found in the previous subquestion.\nSQL ```sql SELECT Open_Year FROM museum WHERE Museum_ID = (SELECT Museum_ID FROM museum WHERE Name = 'Capital Plaza Museum')```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Bye!",
                "query": "",
                "predict": "You're welcome! Is there anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:museum\n[(Museum_ID, museum id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[Plaza Museum, Capital Plaza Museum, Jefferson Development Museum]),(Num_of_Staff, num of staff type:number. Value examples:[62, 25, 18]),(Open_Year, open year type:text. Value examples:[2000, 2012, 2010]),]\nTable:visitor\n[(ID, customer id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[Gonzalo Higua\u00edn , Guti Midfielder, Arjen Robben]),(Level_of_membership, level of membership type:number. Value examples:[8, 5, 1]),(Age, age type:number. Value examples:[35, 28, 27]),]\nTable:visit\n[(Museum_ID, museum id type:number PRIMARY KEY. Value examples:[1, 2, 4]),(visitor_ID, customer id type:text. Value examples:[5, 3, 6]),(Num_of_Ticket, num of ticket type:number. Value examples:[20, 4, 10]),(Total_spent, total spent type:number. Value examples:[320.14, 89.98, 320.44]),]\nForeign keys:\nvisit.visitor_ID = visitor.ID\nvisit.Museum_ID = museum.Museum_ID\n",
                "Detector": "You're welcome! Is there anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 94
    },
    {
        "db_name": "world_1",
        "turns": [
            {
                "isuser": true,
                "text": "How many government forms are in the table?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT count(GovernmentForm) FROM country",
                "predict": "SELECT COUNT(DISTINCT GovernmentForm) FROM country",
                "Rewriter": "",
                "Selector": "Table:country\n[(Code, code type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Name, name type:text. Value examples:[Aruba, Afghanistan, Angola]),(Continent, continent type:text. Value examples:[North America, Asia, Africa]),(Region, region type:text. Value examples:[Caribbean, Southern and Central Asia, Central Africa]),(SurfaceArea, surface area type:number. Value examples:[193.0, 652090.0, 1246700.0]),(IndepYear, indepdent year type:number. Value examples:[None, 1919, 1975]),(Population, population type:number. Value examples:[103000, 22720000, 12878000]),(LifeExpectancy, life expectancy type:number. Value examples:[78.4, 45.9, 38.3]),(GNP, gnp type:number. Value examples:[828.0, 5976.0, 6648.0]),(GNPOld, gnp old type:number. Value examples:[793.0, None, 7984.0]),(LocalName, local name type:text. Value examples:[Aruba, Afganistan/Afqanestan, Angola]),(GovernmentForm, government form type:text. Value examples:[Nonmetropolitan Territory of The Netherlands, Islamic Emirate, Republic]),(HeadOfState, head of state type:text. Value examples:[Beatrix, Mohammad Omar, Jos\u00e9 Eduardo dos Santos]),(Capital, capital type:number. Value examples:[129, 1, 56]),(Code2, code2 type:text. Value examples:[AW, AF, AO]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            35
                        ]
                    ],
                    "sql": "SELECT COUNT(DISTINCT GovernmentForm) FROM country",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: How many distinct government forms are in the table? \nSQL ```sql SELECT COUNT(DISTINCT GovernmentForm) FROM country```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "How many of those have an average life expectancy that is longer than 72?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
                "predict": "SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE LifeExpectancy > 72 AND GovernmentForm IS NOT NULL",
                "Rewriter": "",
                "Selector": "Table:country\n[(Code, code type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(LifeExpectancy, life expectancy type:number. Value examples:[78.4, 45.9, 38.3]),(GovernmentForm, government form type:text. Value examples:[Nonmetropolitan Territory of The Netherlands, Islamic Emirate, Republic]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            22
                        ]
                    ],
                    "sql": "SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE LifeExpectancy > 72 AND GovernmentForm IS NOT NULL",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What is the average life expectancy of countries with government forms?\nSQL ```sql SELECT AVG(LifeExpectancy) FROM country WHERE GovernmentForm IS NOT NULL```\nSubquestion 2: How many of those have an average life expectancy that is longer than 72?\nSQL ```sql SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE LifeExpectancy > 72 AND GovernmentForm IS NOT NULL```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What is the population of each of those government forms?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
                "predict": "SELECT Population, GovernmentForm FROM country WHERE GovernmentForm IN (SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72)",
                "Rewriter": "",
                "Selector": "Table:country\n[(Code, code type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Population, population type:number. Value examples:[103000, 22720000, 12878000]),(LifeExpectancy, life expectancy type:number. Value examples:[78.4, 45.9, 38.3]),(GovernmentForm, government form type:text. Value examples:[Nonmetropolitan Territory of The Netherlands, Islamic Emirate, Republic]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            103000,
                            "Nonmetropolitan Territory of The Netherlands"
                        ],
                        [
                            8000,
                            "Dependent Territory of the UK"
                        ],
                        [
                            78000,
                            "Parliamentary Coprincipality"
                        ],
                        [
                            217000,
                            "Nonmetropolitan Territory of The Netherlands"
                        ],
                        [
                            2441000,
                            "Emirate Federation"
                        ],
                        [
                            68000,
                            "US Territory"
                        ],
                        [
                            0,
                            "Nonmetropolitan Territory of France"
                        ],
                        [
                            18886000,
                            "Constitutional Monarchy, Federation"
                        ],
                        [
                            10239000,
                            "Constitutional Monarchy, Federation"
                        ],
                        [
                            617000,
                            "Monarchy (Emirate)"
                        ]
                    ],
                    "sql": "SELECT Population, GovernmentForm FROM country WHERE GovernmentForm IN (SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72)",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the government forms with an average life expectancy greater than 72.\nSQL: ```sql SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72```\n\nSubquestion 2: Get the population of each of those government forms.\nSQL: ```sql SELECT Population, GovernmentForm FROM country WHERE GovernmentForm IN (SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72)```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What is the region for each of these?",
                "type": "unanswerable"
            },
            {
                "isuser": false,
                "text": "Sorry, I cannot answer this.",
                "query": "",
                "predict": "SELECT T1.Region FROM country AS T1 INNER JOIN ( SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72 ) AS T2 ON T1.GovernmentForm = T2.GovernmentForm",
                "Rewriter": "",
                "Selector": "Table:country\n[(Code, code type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Region, region type:text. Value examples:[Caribbean, Southern and Central Asia, Central Africa]),(Population, population type:number. Value examples:[103000, 22720000, 12878000]),(LifeExpectancy, life expectancy type:number. Value examples:[78.4, 45.9, 38.3]),(GovernmentForm, government form type:text. Value examples:[Nonmetropolitan Territory of The Netherlands, Islamic Emirate, Republic]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Caribbean"
                        ],
                        [
                            "Caribbean"
                        ],
                        [
                            "Southern Europe"
                        ],
                        [
                            "Caribbean"
                        ],
                        [
                            "Middle East"
                        ],
                        [
                            "Polynesia"
                        ],
                        [
                            "Antarctica"
                        ],
                        [
                            "Australia and New Zealand"
                        ],
                        [
                            "Western Europe"
                        ],
                        [
                            "Middle East"
                        ]
                    ],
                    "sql": "SELECT T1.Region FROM country AS T1 INNER JOIN ( SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72 ) AS T2 ON T1.GovernmentForm = T2.GovernmentForm",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What is the region for each of these? \nSQL ```sql SELECT T1.Region FROM country AS T1 INNER JOIN ( SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72 ) AS T2 ON T1.GovernmentForm = T2.GovernmentForm```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What is the life expectancy for each of these?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT avg(LifeExpectancy) FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
                "predict": "SELECT T1.LifeExpectancy, T1.GovernmentForm FROM country AS T1 GROUP BY T1.GovernmentForm HAVING avg(T1.LifeExpectancy)  >  72",
                "Rewriter": "",
                "Selector": "Table:country\n[(Code, code type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Name, name type:text. Value examples:[Aruba, Afghanistan, Angola]),(Continent, continent type:text. Value examples:[North America, Asia, Africa]),(Region, region type:text. Value examples:[Caribbean, Southern and Central Asia, Central Africa]),(SurfaceArea, surface area type:number. Value examples:[193.0, 652090.0, 1246700.0]),(IndepYear, indepdent year type:number. Value examples:[None, 1919, 1975]),(Population, population type:number. Value examples:[103000, 22720000, 12878000]),(LifeExpectancy, life expectancy type:number. Value examples:[78.4, 45.9, 38.3]),(GovernmentForm, government form type:text. Value examples:[Nonmetropolitan Territory of The Netherlands, Islamic Emirate, Republic]),(Capital, capital type:number. Value examples:[129, 1, 56]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            75.5,
                            "Commonwealth of the US"
                        ],
                        [
                            76.1,
                            "Constitutional Monarchy (Emirate)"
                        ],
                        [
                            79.8,
                            "Constitutional Monarchy, Federation"
                        ],
                        [
                            76.1,
                            "Dependent Territory of the UK"
                        ],
                        [
                            74.1,
                            "Emirate Federation"
                        ],
                        [
                            79.6,
                            "Federation"
                        ],
                        [
                            73.0,
                            "Monarchy (Emirate)"
                        ],
                        [
                            73.6,
                            "Monarchy (Sultanate)"
                        ],
                        [
                            null,
                            "Nonmetropolitan Territory of France"
                        ],
                        [
                            78.4,
                            "Nonmetropolitan Territory of The Netherlands"
                        ]
                    ],
                    "sql": "SELECT T1.LifeExpectancy, T1.GovernmentForm FROM country AS T1 GROUP BY T1.GovernmentForm HAVING avg(T1.LifeExpectancy)  >  72",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What is the life expectancy for each of these? \nSQL ```sql SELECT T1.LifeExpectancy, T1.GovernmentForm FROM country AS T1 GROUP BY T1.GovernmentForm HAVING avg(T1.LifeExpectancy)  >  72```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "hich types of governance are associated with higher life expectancies, and how large are their populations?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Sorry, I cannot understand this question. Can you elaborate?",
                "query": "",
                "predict": "SELECT sum(Population), GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72",
                "Rewriter": "",
                "Selector": "Table:country\n[(Code, code type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Name, name type:text. Value examples:[Aruba, Afghanistan, Angola]),(Continent, continent type:text. Value examples:[North America, Asia, Africa]),(Region, region type:text. Value examples:[Caribbean, Southern and Central Asia, Central Africa]),(Population, population type:number. Value examples:[103000, 22720000, 12878000]),(LifeExpectancy, life expectancy type:number. Value examples:[78.4, 45.9, 38.3]),(GovernmentForm, government form type:text. Value examples:[Nonmetropolitan Territory of The Netherlands, Islamic Emirate, Republic]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            3947000,
                            "Commonwealth of the US"
                        ],
                        [
                            1972000,
                            "Constitutional Monarchy (Emirate)"
                        ],
                        [
                            82516000,
                            "Constitutional Monarchy, Federation"
                        ],
                        [
                            193050,
                            "Dependent Territory of the UK"
                        ],
                        [
                            2441000,
                            "Emirate Federation"
                        ],
                        [
                            7160400,
                            "Federation"
                        ],
                        [
                            617000,
                            "Monarchy (Emirate)"
                        ],
                        [
                            2870000,
                            "Monarchy (Sultanate)"
                        ],
                        [
                            464000,
                            "Nonmetropolitan Territory of France"
                        ],
                        [
                            320000,
                            "Nonmetropolitan Territory of The Netherlands"
                        ]
                    ],
                    "sql": "SELECT sum(Population), GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Which types of governance are associated with higher life expectancies?\nSQL ```sql SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72```\nSubquestion 2: How large are their populations?\nSQL ```sql SELECT sum(Population), GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Which government forms have an average life expectancy over 72, and what are their populations?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
                "predict": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
                "Rewriter": "",
                "Selector": "Table:country\n[(Code, code type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Name, name type:text. Value examples:[Aruba, Afghanistan, Angola]),(Continent, continent type:text. Value examples:[North America, Asia, Africa]),(Region, region type:text. Value examples:[Caribbean, Southern and Central Asia, Central Africa]),(SurfaceArea, surface area type:number. Value examples:[193.0, 652090.0, 1246700.0]),(IndepYear, indepdent year type:number. Value examples:[None, 1919, 1975]),(Population, population type:number. Value examples:[103000, 22720000, 12878000]),(LifeExpectancy, life expectancy type:number. Value examples:[78.4, 45.9, 38.3]),(GNPOld, gnp old type:number. Value examples:[793.0, None, 7984.0]),(GovernmentForm, government form type:text. Value examples:[Nonmetropolitan Territory of The Netherlands, Islamic Emirate, Republic]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            3947000,
                            "Commonwealth of the US"
                        ],
                        [
                            1972000,
                            "Constitutional Monarchy (Emirate)"
                        ],
                        [
                            82516000,
                            "Constitutional Monarchy, Federation"
                        ],
                        [
                            193050,
                            "Dependent Territory of the UK"
                        ],
                        [
                            2441000,
                            "Emirate Federation"
                        ],
                        [
                            7160400,
                            "Federation"
                        ],
                        [
                            617000,
                            "Monarchy (Emirate)"
                        ],
                        [
                            2870000,
                            "Monarchy (Sultanate)"
                        ],
                        [
                            464000,
                            "Nonmetropolitan Territory of France"
                        ],
                        [
                            320000,
                            "Nonmetropolitan Territory of The Netherlands"
                        ]
                    ],
                    "sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Which government forms have an average life expectancy over 72?\nSQL ```sql SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72```\nSubquestion 2: What are the populations of those government forms?\nSQL ```sql SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "Sure! Bye!\n",
                "query": "",
                "predict": "You're welcome! \ud83d\ude0a \n",
                "Rewriter": "",
                "Selector": "Table:country\n[(Code, code type:text PRIMARY KEY. Value examples:[ABW, AFG, AGO]),(Name, name type:text. Value examples:[Aruba, Afghanistan, Angola]),(Continent, continent type:text. Value examples:[North America, Asia, Africa]),(Region, region type:text. Value examples:[Caribbean, Southern and Central Asia, Central Africa]),(SurfaceArea, surface area type:number. Value examples:[193.0, 652090.0, 1246700.0]),(IndepYear, indepdent year type:number. Value examples:[None, 1919, 1975]),(Population, population type:number. Value examples:[103000, 22720000, 12878000]),(LifeExpectancy, life expectancy type:number. Value examples:[78.4, 45.9, 38.3]),(GNPOld, gnp old type:number. Value examples:[793.0, None, 7984.0]),(GovernmentForm, government form type:text. Value examples:[Nonmetropolitan Territory of The Netherlands, Islamic Emirate, Republic]),]\nForeign keys:\n",
                "Detector": "You're welcome! \ud83d\ude0a \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 95
    },
    {
        "db_name": "museum_visit",
        "turns": [
            {
                "isuser": true,
                "text": "Whats the level of membership customer id 1 has?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT \tLevel_of_membership FROM visitor WHERE ID = 1",
                "predict": "SELECT T1.Level_of_membership FROM visitor AS T1 WHERE T1.ID = 1",
                "Rewriter": "",
                "Selector": "Table:museum\n[(Museum_ID, museum id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[Plaza Museum, Capital Plaza Museum, Jefferson Development Museum]),(Num_of_Staff, num of staff type:number. Value examples:[62, 25, 18]),(Open_Year, open year type:text. Value examples:[2000, 2012, 2010]),]\nTable:visitor\n[(ID, customer id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Level_of_membership, level of membership type:number. Value examples:[8, 5, 1]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            8
                        ]
                    ],
                    "sql": "SELECT T1.Level_of_membership FROM visitor AS T1 WHERE T1.ID = 1",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What is the level of membership customer id 1 has?\nSQL ```sql SELECT T1.Level_of_membership FROM visitor AS T1 WHERE T1.ID = 1```\n\nQuestion Solved. \n========== \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What is the name of customer id 1?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT \tName FROM visitor WHERE ID = 1",
                "predict": "SELECT Name FROM visitor WHERE ID = 1",
                "Rewriter": "",
                "Selector": "Table:museum\n[(Museum_ID, museum id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[Plaza Museum, Capital Plaza Museum, Jefferson Development Museum]),(Num_of_Staff, num of staff type:number. Value examples:[62, 25, 18]),(Open_Year, open year type:text. Value examples:[2000, 2012, 2010]),]\nTable:visitor\n[(ID, customer id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[Gonzalo Higua\u00edn , Guti Midfielder, Arjen Robben]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "Gonzalo Higua\u00edn "
                        ]
                    ],
                    "sql": "SELECT Name FROM visitor WHERE ID = 1",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What is the name of customer id 1?\nSQL ```sql SELECT Name FROM visitor WHERE ID = 1```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What is the age of customer id 1?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT \t\tAge FROM visitor WHERE ID = 1",
                "predict": "SELECT Age FROM visitor WHERE ID = 1",
                "Rewriter": "",
                "Selector": "Table:visitor\n[(ID, customer id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Age, age type:number. Value examples:[35, 28, 27]),]\nForeign keys:\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            35
                        ]
                    ],
                    "sql": "SELECT Age FROM visitor WHERE ID = 1",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: What is the age of customer id 1?\nSQL ```sql SELECT Age FROM visitor WHERE ID = 1```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "goodbye",
                "query": "",
                "predict": "You're welcome! Is there anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:museum\n[(Museum_ID, museum id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[Plaza Museum, Capital Plaza Museum, Jefferson Development Museum]),(Num_of_Staff, num of staff type:number. Value examples:[62, 25, 18]),(Open_Year, open year type:text. Value examples:[2000, 2012, 2010]),]\nTable:visitor\n[(ID, customer id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Name, name type:text. Value examples:[Gonzalo Higua\u00edn , Guti Midfielder, Arjen Robben]),(Level_of_membership, level of membership type:number. Value examples:[8, 5, 1]),(Age, age type:number. Value examples:[35, 28, 27]),]\nTable:visit\n[(Museum_ID, museum id type:number PRIMARY KEY. Value examples:[1, 2, 4]),(visitor_ID, customer id type:text. Value examples:[5, 3, 6]),(Num_of_Ticket, num of ticket type:number. Value examples:[20, 4, 10]),(Total_spent, total spent type:number. Value examples:[320.14, 89.98, 320.44]),]\nForeign keys:\nvisit.visitor_ID = visitor.ID\nvisit.Museum_ID = museum.Museum_ID\n",
                "Detector": "You're welcome! Is there anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 96
    },
    {
        "db_name": "car_1",
        "turns": [
            {
                "isuser": true,
                "text": "What are the name of amc?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean the full name of the car maker amc?",
                "query": "",
                "predict": "SELECT T1.FullName FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Maker = 'amc'",
                "Rewriter": "",
                "Selector": "Table:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nTable:car_makers\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:text. Value examples:[amc, volkswagen, bmw]),(FullName, full name type:text. Value examples:[American Motor Company, Volkswagen, BMW]),(Country, country type:text. Value examples:[1, 2, 3]),]\nTable:model_list\n[(ModelId, model id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:number. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[amc, audi, bmw]),]\nTable:car_names\n[(MakeId, make id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[chevrolet, buick, plymouth]),(Make, make type:text. Value examples:[chevrolet chevelle malibu, buick skylark 320, plymouth satellite]),]\nForeign keys:\ncar_makers.Country = countries.CountryId\nmodel_list.Maker = car_makers.Id\ncar_names.Model = model_list.Model\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [],
                    "sql": "SELECT T2.FullName FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Maker = 'amc'",
                    "executable": false,
                    "log": "no such column: T2.FullName",
                    "process": "Subquestion 1: Find the full name of the car maker 'amc'.\nSQL ```sql SELECT T2.FullName FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Maker = 'amc'```\n\nQuestion Solved. \n"
                },
                "Refiner": {
                    "result": [
                        [
                            "American Motor Company"
                        ]
                    ],
                    "sql": "SELECT T1.FullName FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Maker = 'amc'",
                    "executable": true,
                    "log": ""
                }
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "select fullname from car_makers where maker = \"amc\"",
                "predict": "SELECT T1.FullName FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Maker = 'amc'",
                "Rewriter": "",
                "Selector": "Table:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nTable:car_makers\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:text. Value examples:[amc, volkswagen, bmw]),(FullName, full name type:text. Value examples:[American Motor Company, Volkswagen, BMW]),(Country, country type:text. Value examples:[1, 2, 3]),]\nTable:model_list\n[(ModelId, model id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:number. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[amc, audi, bmw]),]\nTable:car_names\n[(MakeId, make id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[chevrolet, buick, plymouth]),(Make, make type:text. Value examples:[chevrolet chevelle malibu, buick skylark 320, plymouth satellite]),]\nForeign keys:\ncar_makers.Country = countries.CountryId\nmodel_list.Maker = car_makers.Id\ncar_names.Model = model_list.Model\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [],
                    "sql": "SELECT T2.FullName FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Maker = 'amc'",
                    "executable": false,
                    "log": "no such column: T2.FullName",
                    "process": "Subquestion 1: What is the full name of the car maker amc?\nSQL ```sql SELECT T2.FullName FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Maker = 'amc'```\n\nQuestion Solved. \n"
                },
                "Refiner": {
                    "result": [
                        [
                            "American Motor Company"
                        ]
                    ],
                    "sql": "SELECT T1.FullName FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Maker = 'amc'",
                    "executable": true,
                    "log": ""
                }
            },
            {
                "isuser": true,
                "text": "What type of car making by german?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Sorry we don't have information about type of car. Can you clarify your question?",
                "query": "",
                "predict": "Please clarify what you mean by \"type of car\". Do you want to know the models of cars made by German car makers, or the types of cars (e.g., sedan, SUV, etc.)? \n",
                "Rewriter": "",
                "Selector": "Table:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nTable:car_makers\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:text. Value examples:[amc, volkswagen, bmw]),(FullName, full name type:text. Value examples:[American Motor Company, Volkswagen, BMW]),(Country, country type:text. Value examples:[1, 2, 3]),]\nTable:model_list\n[(ModelId, model id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:number. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[amc, audi, bmw]),]\nTable:car_names\n[(MakeId, make id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[chevrolet, buick, plymouth]),(Make, make type:text. Value examples:[chevrolet chevelle malibu, buick skylark 320, plymouth satellite]),]\nForeign keys:\ncar_makers.Country = countries.CountryId\nmodel_list.Maker = car_makers.Id\ncar_names.Model = model_list.Model\n",
                "Detector": "Please clarify what you mean by \"type of car\". Do you want to know the models of cars made by German car makers, or the types of cars (e.g., sedan, SUV, etc.)? \n",
                "Decomposer": "",
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What kind of car is produced in Germany?",
                "type": "ambiguous"
            },
            {
                "isuser": false,
                "text": "Did you mean the car models produced in Germany?",
                "query": "",
                "predict": "Sorry, we don't have information about the type of car produced in Germany. Can you clarify your question? \n",
                "Rewriter": "",
                "Selector": "Table:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nTable:car_makers\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:text. Value examples:[amc, volkswagen, bmw]),(FullName, full name type:text. Value examples:[American Motor Company, Volkswagen, BMW]),(Country, country type:text. Value examples:[1, 2, 3]),]\nTable:model_list\n[(ModelId, model id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:number. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[amc, audi, bmw]),]\nTable:car_names\n[(MakeId, make id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[chevrolet, buick, plymouth]),(Make, make type:text. Value examples:[chevrolet chevelle malibu, buick skylark 320, plymouth satellite]),]\nTable:cars_data\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(MPG, mpg type:text. Value examples:[18, 15, 16]),(Cylinders, cylinders type:number. Value examples:[8, 4, 6]),(Edispl, edispl type:number. Value examples:[307.0, 350.0, 318.0]),(Horsepower, horsepower type:text. Value examples:[130, 165, 150]),(Weight, weight type:number. Value examples:[3504, 3693, 3436]),(Accelerate, accelerate type:number. Value examples:[12.0, 11.5, 11.0]),(Year, year type:number. Value examples:[1970, 1971, 1972]),]\nForeign keys:\ncar_makers.Country = countries.CountryId\nmodel_list.Maker = car_makers.Id\ncar_names.Model = model_list.Model\ncars_data.Id = car_names.MakeId\n",
                "Detector": "Sorry, we don't have information about the type of car produced in Germany. Can you clarify your question? \n",
                "Decomposer": "",
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Yes",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T3.model FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T1.countryname = \"germany\"",
                "predict": "SELECT T2.Model FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Country = ( SELECT CountryId FROM countries WHERE CountryName = 'germany' )",
                "Rewriter": "",
                "Selector": "Table:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nTable:car_makers\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:text. Value examples:[amc, volkswagen, bmw]),(FullName, full name type:text. Value examples:[American Motor Company, Volkswagen, BMW]),(Country, country type:text. Value examples:[1, 2, 3]),]\nTable:model_list\n[(ModelId, model id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:number. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[amc, audi, bmw]),]\nTable:car_names\n[(MakeId, make id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[chevrolet, buick, plymouth]),(Make, make type:text. Value examples:[chevrolet chevelle malibu, buick skylark 320, plymouth satellite]),]\nTable:cars_data\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(MPG, mpg type:text. Value examples:[18, 15, 16]),(Cylinders, cylinders type:number. Value examples:[8, 4, 6]),(Edispl, edispl type:number. Value examples:[307.0, 350.0, 318.0]),(Horsepower, horsepower type:text. Value examples:[130, 165, 150]),(Weight, weight type:number. Value examples:[3504, 3693, 3436]),(Accelerate, accelerate type:number. Value examples:[12.0, 11.5, 11.0]),(Year, year type:number. Value examples:[1970, 1971, 1972]),]\nForeign keys:\ncar_makers.Country = countries.CountryId\nmodel_list.Maker = car_makers.Id\ncar_names.Model = model_list.Model\ncars_data.Id = car_names.MakeId\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "audi"
                        ],
                        [
                            "bmw"
                        ],
                        [
                            "mercedes"
                        ],
                        [
                            "mercedes-benz"
                        ],
                        [
                            "opel"
                        ],
                        [
                            "volkswagen"
                        ]
                    ],
                    "sql": "SELECT T2.Model FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Country = ( SELECT CountryId FROM countries WHERE CountryName = 'germany' )",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the car makers in Germany.\nSQL ```sql SELECT T1.Maker FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'germany'```\nSubquestion 2: Find the car models produced by the car makers in Germany.\nSQL ```sql SELECT T2.Model FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Country = ( SELECT CountryId FROM countries WHERE CountryName = 'germany' )```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What are the model id of BMW?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT modelid from model_list where model = \"bmw\"",
                "predict": "SELECT ModelId FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'BMW')",
                "Rewriter": "",
                "Selector": "Table:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nTable:car_makers\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:text. Value examples:[amc, volkswagen, bmw]),(FullName, full name type:text. Value examples:[American Motor Company, Volkswagen, BMW]),(Country, country type:text. Value examples:[1, 2, 3]),]\nTable:model_list\n[(ModelId, model id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:number. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[amc, audi, bmw]),]\nForeign keys:\ncar_makers.Country = countries.CountryId\nmodel_list.Maker = car_makers.Id\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [],
                    "sql": "SELECT ModelId FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'BMW')",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the Maker ID for BMW.\nSQL: ```sql SELECT Id FROM car_makers WHERE Maker = 'BMW'```\n\nSubquestion 2: Find the Model IDs associated with the Maker ID.\nSQL: ```sql SELECT ModelId FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'BMW')```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What are the id and names of the countries which have more than 3 cars makers or produce the 'flat' model?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
                "predict": "Sorry, I can't answer your question. The database doesn't have information about the number of car makers per country or the model \"flat\". \n",
                "Rewriter": "",
                "Selector": "Table:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nTable:car_makers\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:text. Value examples:[amc, volkswagen, bmw]),(FullName, full name type:text. Value examples:[American Motor Company, Volkswagen, BMW]),(Country, country type:text. Value examples:[1, 2, 3]),]\nTable:model_list\n[(ModelId, model id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:number. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[amc, audi, bmw]),]\nTable:car_names\n[(MakeId, make id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[chevrolet, buick, plymouth]),(Make, make type:text. Value examples:[chevrolet chevelle malibu, buick skylark 320, plymouth satellite]),]\nTable:cars_data\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(MPG, mpg type:text. Value examples:[18, 15, 16]),(Cylinders, cylinders type:number. Value examples:[8, 4, 6]),(Edispl, edispl type:number. Value examples:[307.0, 350.0, 318.0]),(Horsepower, horsepower type:text. Value examples:[130, 165, 150]),(Weight, weight type:number. Value examples:[3504, 3693, 3436]),(Accelerate, accelerate type:number. Value examples:[12.0, 11.5, 11.0]),(Year, year type:number. Value examples:[1970, 1971, 1972]),]\nForeign keys:\ncar_makers.Country = countries.CountryId\nmodel_list.Maker = car_makers.Id\ncar_names.Model = model_list.Model\ncars_data.Id = car_names.MakeId\n",
                "Detector": "Sorry, I can't answer your question. The database doesn't have information about the number of car makers per country or the model \"flat\". \n",
                "Decomposer": "",
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "bye",
                "query": "",
                "predict": "You're welcome! \ud83d\ude0a \n",
                "Rewriter": "",
                "Selector": "Table:countries\n[(CountryId, country id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(CountryName, country name type:text. Value examples:[usa, germany, france]),(Continent, continent type:number. Value examples:[1, 2, 3]),]\nTable:car_makers\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:text. Value examples:[amc, volkswagen, bmw]),(FullName, full name type:text. Value examples:[American Motor Company, Volkswagen, BMW]),(Country, country type:text. Value examples:[1, 2, 3]),]\nTable:model_list\n[(ModelId, model id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Maker, maker type:number. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[amc, audi, bmw]),]\nTable:car_names\n[(MakeId, make id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(Model, model type:text. Value examples:[chevrolet, buick, plymouth]),(Make, make type:text. Value examples:[chevrolet chevelle malibu, buick skylark 320, plymouth satellite]),]\nTable:cars_data\n[(Id, id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(MPG, mpg type:text. Value examples:[18, 15, 16]),(Cylinders, cylinders type:number. Value examples:[8, 4, 6]),(Edispl, edispl type:number. Value examples:[307.0, 350.0, 318.0]),(Horsepower, horsepower type:text. Value examples:[130, 165, 150]),(Weight, weight type:number. Value examples:[3504, 3693, 3436]),(Accelerate, accelerate type:number. Value examples:[12.0, 11.5, 11.0]),(Year, year type:number. Value examples:[1970, 1971, 1972]),]\nForeign keys:\ncar_makers.Country = countries.CountryId\nmodel_list.Maker = car_makers.Id\ncar_names.Model = model_list.Model\ncars_data.Id = car_names.MakeId\n",
                "Detector": "You're welcome! \ud83d\ude0a \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 97
    },
    {
        "db_name": "dog_kennels",
        "turns": [
            {
                "isuser": true,
                "text": "What is the phone number of the professional who has done the most treatment.",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id order by count(*)  desc limit 1",
                "predict": "SELECT T2.home_phone FROM Treatments AS T1 INNER JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id ORDER BY COUNT(T1.treatment_id) DESC LIMIT 1",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Treatment_Types\n[(treatment_type_code, treatment type code type:text PRIMARY KEY. Value examples:[EXAM, VAC, WALK]),(treatment_type_description, treatment type description type:text. Value examples:[Physical examination, Vaccination, Take for a Walk]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(owner_id, owner id type:number. Value examples:[3, 11, 1]),(abandoned_yn, abandoned yes or no type:text. Value examples:[1, 0]),(breed_code, breed code type:text. Value examples:[ESK, BUL, HUS]),(size_code, size code type:text. Value examples:[LGE, MED, SML]),(name, name type:text. Value examples:[Kacey, Hipolito, Mavis]),(age, age type:text. Value examples:[6, 9, 8]),(date_of_birth, date of birth type:time. Value examples:[2012-01-27 05:11:53, 2013-02-13 05:15:21, 2008-05-19 15:54:49]),(gender, gender type:text. Value examples:[1, 0]),(weight, weight type:text. Value examples:[7.57, 1.72, 8.04]),(date_arrived, date arrived type:time. Value examples:[2017-09-08 20:10:13, 2017-12-22 05:02:02, 2017-06-25 10:14:05]),(date_adopted, date adopted type:time. Value examples:[2018-03-06 16:32:11, 2018-03-25 08:12:51, 2018-03-07 21:45:43]),(date_departed, date departed type:time. Value examples:[2018-03-25 06:58:44, 2018-03-25 02:11:32, 2018-03-25 10:25:46]),]\nTable:Professionals\n[(professional_id, professional id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(first_name, first name type:text. Value examples:[Taryn, Jayson, Olaf]),(street, street type:text. Value examples:[6915 Oberbrunner Point Suite 491\nGleasonville, LA , 88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194, 68589 Bradly Manor\nNew Audrey, IN 91497]),(city, city type:text. Value examples:[West Heidi, North Odellfurt, Jaceton]),(state, state type:text. Value examples:[Indiana, Connecticut, Wisconsin]),(zip_code, zip code type:text. Value examples:[06646, 43129, 77129]),(last_name, last name type:text. Value examples:[Braun, Ullrich, Watsica]),(email_address, email address type:text. Value examples:[deanna.schuster@example.com, lucile.shanahan@example.org, uboehm@example.org]),(home_phone, home phone type:text. Value examples:[+71(6)2898266914, +02(1)0259033559, 325-155-0801x7005]),(cell_number, cell number type:text. Value examples:[(275)939-2435x80863, 889-940-2676, (369)908-7311x065]),]\nTable:Treatments\n[(treatment_id, treatment id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(dog_id, dog id type:number. Value examples:[14, 4, 2]),(professional_id, professional id type:number. Value examples:[9, 10, 4]),(treatment_type_code, treatment type code type:text. Value examples:[WALK, VAC, EXAM]),(date_of_treatment, date of treatment type:time. Value examples:[2018-03-19 04:39:54, 2018-03-15 20:25:34, 2018-03-08 05:26:23]),(cost_of_treatment, cost of treatment type:number. Value examples:[567, 147, 429]),]\nForeign keys:\nDogs.size_code = Sizes.size_code\nDogs.breed_code = Breeds.breed_code\nTreatments.dog_id = Dogs.dog_id\nTreatments.professional_id = Professionals.professional_id\nTreatments.treatment_type_code = Treatment_Types.treatment_type_code\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            "320-508-6023"
                        ]
                    ],
                    "sql": "SELECT T2.home_phone FROM Treatments AS T1 INNER JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id ORDER BY COUNT(T1.treatment_id) DESC LIMIT 1",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the professional who has done the most treatment.\nSQL: ```sql SELECT professional_id FROM Treatments GROUP BY professional_id ORDER BY COUNT(treatment_id) DESC LIMIT 1```\nSubquestion 2: What is the phone number of the professional who has done the most treatment.\nSQL: ```sql SELECT T2.home_phone FROM Treatments AS T1 INNER JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id ORDER BY COUNT(T1.treatment_id) DESC LIMIT 1```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "What are the professional id of the professionals who have done at least two types of treatments?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "SELECT T1.professional_id  FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
                "predict": "SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Treatment_Types\n[(treatment_type_code, treatment type code type:text PRIMARY KEY. Value examples:[EXAM, VAC, WALK]),(treatment_type_description, treatment type description type:text. Value examples:[Physical examination, Vaccination, Take for a Walk]),]\nTable:Professionals\n[(professional_id, professional id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(role_code, role code type:text. Value examples:[Employee, Veterenarian]),(first_name, first name type:text. Value examples:[Taryn, Jayson, Olaf]),(last_name, last name type:text. Value examples:[Braun, Ullrich, Watsica]),(email_address, email address type:text. Value examples:[deanna.schuster@example.com, lucile.shanahan@example.org, uboehm@example.org]),(home_phone, home phone type:text. Value examples:[+71(6)2898266914, +02(1)0259033559, 325-155-0801x7005]),(cell_number, cell number type:text. Value examples:[(275)939-2435x80863, 889-940-2676, (369)908-7311x065]),]\nTable:Treatments\n[(professional_id, professional id type:number. Value examples:[9, 10, 4]),(treatment_type_code, treatment type code type:text. Value examples:[WALK, VAC, EXAM]),(date_of_treatment, date of treatment type:time. Value examples:[2018-03-19 04:39:54, 2018-03-15 20:25:34, 2018-03-08 05:26:23]),(cost_of_treatment, cost of treatment type:number. Value examples:[567, 147, 429]),]\nForeign keys:\nTreatments.professional_id = Professionals.professional_id\nTreatments.treatment_type_code = Treatment_Types.treatment_type_code\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            6
                        ],
                        [
                            9
                        ],
                        [
                            10
                        ],
                        [
                            14
                        ]
                    ],
                    "sql": "SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the professional IDs who have done at least two types of treatments.\nSQL: ```sql\nSELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2\n```\n\nQuestion Solved. \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "How many professionals have done only one treatment?",
                "type": "answerable"
            },
            {
                "isuser": false,
                "text": "",
                "query": "select count(*) from (SELECT *  FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  = 1)",
                "predict": "SELECT COUNT(DISTINCT professional_id) FROM Treatments GROUP BY professional_id HAVING COUNT(*) = 1;",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Treatment_Types\n[(treatment_type_code, treatment type code type:text PRIMARY KEY. Value examples:[EXAM, VAC, WALK]),(treatment_type_description, treatment type description type:text. Value examples:[Physical examination, Vaccination, Take for a Walk]),]\nTable:Professionals\n[(professional_id, professional id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(first_name, first name type:text. Value examples:[Taryn, Jayson, Olaf]),(last_name, last name type:text. Value examples:[Braun, Ullrich, Watsica]),(email_address, email address type:text. Value examples:[deanna.schuster@example.com, lucile.shanahan@example.org, uboehm@example.org]),(home_phone, home phone type:text. Value examples:[+71(6)2898266914, +02(1)0259033559, 325-155-0801x7005]),(cell_number, cell number type:text. Value examples:[(275)939-2435x80863, 889-940-2676, (369)908-7311x065]),]\nTable:Treatments\n[(professional_id, professional id type:number. Value examples:[9, 10, 4]),(treatment_type_code, treatment type code type:text. Value examples:[WALK, VAC, EXAM]),(date_of_treatment, date of treatment type:time. Value examples:[2018-03-19 04:39:54, 2018-03-15 20:25:34, 2018-03-08 05:26:23]),(cost_of_treatment, cost of treatment type:number. Value examples:[567, 147, 429]),]\nForeign keys:\nTreatments.professional_id = Professionals.professional_id\nTreatments.treatment_type_code = Treatment_Types.treatment_type_code\n",
                "Detector": "YES",
                "Decomposer": {
                    "result": [
                        [
                            1
                        ],
                        [
                            1
                        ]
                    ],
                    "sql": "SELECT COUNT(DISTINCT professional_id) FROM Treatments GROUP BY professional_id HAVING COUNT(*) = 1;",
                    "executable": true,
                    "log": "",
                    "process": "Subquestion 1: Find the number of treatments each professional has done.\nSQL: ```sql\nSELECT professional_id, COUNT(*) AS treatment_count\nFROM Treatments\nGROUP BY professional_id;\n```\n\nSubquestion 2: Filter the results to include only professionals who have done exactly one treatment.\nSQL: ```sql\nSELECT professional_id, COUNT(*) AS treatment_count\nFROM Treatments\nGROUP BY professional_id\nHAVING COUNT(*) = 1;\n```\n\nSubquestion 3: Count the number of professionals who have done only one treatment.\nSQL: ```sql\nSELECT COUNT(DISTINCT professional_id)\nFROM Treatments\nGROUP BY professional_id\nHAVING COUNT(*) = 1;\n```\n\n**Final SQL:**\n```sql\nSELECT COUNT(DISTINCT professional_id)\nFROM Treatments\nGROUP BY professional_id\nHAVING COUNT(*) = 1;\n``` \n"
                },
                "Refiner": ""
            },
            {
                "isuser": true,
                "text": "Thanks!",
                "type": "improper"
            },
            {
                "isuser": false,
                "text": "You are welcome.",
                "query": "",
                "predict": "You're welcome! Is there anything else I can help you with? \n",
                "Rewriter": "",
                "Selector": "Table:Breeds\n[(breed_code, breed code type:text PRIMARY KEY. Value examples:[BUL, ESK, HUS]),(breed_name, breed name type:text. Value examples:[Eskimo, Husky, Bulldog]),]\nTable:Sizes\n[(size_code, size code type:text PRIMARY KEY. Value examples:[LGE, MED, SML]),(size_description, size description type:text. Value examples:[Small, Medium, Large]),]\nTable:Treatment_Types\n[(treatment_type_code, treatment type code type:text PRIMARY KEY. Value examples:[EXAM, VAC, WALK]),(treatment_type_description, treatment type description type:text. Value examples:[Physical examination, Vaccination, Take for a Walk]),]\nTable:Dogs\n[(dog_id, dog id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(owner_id, owner id type:number. Value examples:[3, 11, 1]),(abandoned_yn, abandoned yes or no type:text. Value examples:[1, 0]),(breed_code, breed code type:text. Value examples:[ESK, BUL, HUS]),(size_code, size code type:text. Value examples:[LGE, MED, SML]),(name, name type:text. Value examples:[Kacey, Hipolito, Mavis]),(age, age type:text. Value examples:[6, 9, 8]),(date_of_birth, date of birth type:time. Value examples:[2012-01-27 05:11:53, 2013-02-13 05:15:21, 2008-05-19 15:54:49]),(gender, gender type:text. Value examples:[1, 0]),(weight, weight type:text. Value examples:[7.57, 1.72, 8.04]),(date_arrived, date arrived type:time. Value examples:[2017-09-08 20:10:13, 2017-12-22 05:02:02, 2017-06-25 10:14:05]),(date_adopted, date adopted type:time. Value examples:[2018-03-06 16:32:11, 2018-03-25 08:12:51, 2018-03-07 21:45:43]),(date_departed, date departed type:time. Value examples:[2018-03-25 06:58:44, 2018-03-25 02:11:32, 2018-03-25 10:25:46]),]\nTable:Professionals\n[(professional_id, professional id type:number PRIMARY KEY. Value examples:[1, 2, 3]),(first_name, first name type:text. Value examples:[Taryn, Jayson, Olaf]),(last_name, last name type:text. Value examples:[Braun, Ullrich, Watsica]),(email_address, email address type:text. Value examples:[deanna.schuster@example.com, lucile.shanahan@example.org, uboehm@example.org]),(home_phone, home phone type:text. Value examples:[+71(6)2898266914, +02(1)0259033559, 325-155-0801x7005]),(cell_number, cell number type:text. Value examples:[(275)939-2435x80863, 889-940-2676, (369)908-7311x065]),]\nTable:Treatments\n[(professional_id, professional id type:number. Value examples:[9, 10, 4]),(treatment_type_code, treatment type code type:text. Value examples:[WALK, VAC, EXAM]),(date_of_treatment, date of treatment type:time. Value examples:[2018-03-19 04:39:54, 2018-03-15 20:25:34, 2018-03-08 05:26:23]),(cost_of_treatment, cost of treatment type:number. Value examples:[567, 147, 429]),]\nForeign keys:\nDogs.size_code = Sizes.size_code\nDogs.breed_code = Breeds.breed_code\nTreatments.professional_id = Professionals.professional_id\nTreatments.treatment_type_code = Treatment_Types.treatment_type_code\n",
                "Detector": "You're welcome! Is there anything else I can help you with? \n",
                "Decomposer": "",
                "Refiner": ""
            }
        ],
        "id": 98
    }
]
